
Delay_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000714  000007a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080006e  0080006e  000007b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020e0  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b69  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000131e  00000000  00000000  0000367d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000654  00000000  00000000  0000499c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e18  00000000  00000000  00004ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000185e  00000000  00000000  00005e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  00007666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_4>
  14:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_5>
  18:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_6>
  1c:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_7>
  20:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_8>
  24:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_9>
  28:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_10>
  2c:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  8a:	0c 94 88 03 	jmp	0x710	; 0x710 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED_Init>:
 * parameter(input) : LEDs pointer to array of LEDs  configurations 
 * parameter(input) : LEDIndex index to the specific point that you need to read 
 * return : array to all Function  states  
 */
LEDStatus_t LED_Init(LEDConfig_t * LEDs )
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	00 d0       	rcall	.+0      	; 0x9e <LED_Init+0xc>
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	
	if(LEDs == NULL)
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	e1 f0       	breq	.+56     	; 0xe0 <LED_Init+0x4e>
  a8:	7c 01       	movw	r14, r24
		return FUN_Param_ERROR ;
	}else
	{
	
	GPIO_InitTypeDef LEDinInit ;
	LEDinInit.mode = GPIO_MODE_OUTPUT ;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8a 83       	std	Y+2, r24	; 0x02
	
	
	for (uint8_t itera = 0 ; itera < NumberOFLEDs ; itera++ )
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	13 c0       	rjmp	.+38     	; 0xd8 <LED_Init+0x46>
	{
		LEDinInit.pin = LEDs[itera].PINNum ;
  b2:	e1 2f       	mov	r30, r17
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	cf 01       	movw	r24, r30
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	e8 0f       	add	r30, r24
  be:	f9 1f       	adc	r31, r25
  c0:	ee 0d       	add	r30, r14
  c2:	ff 1d       	adc	r31, r15
  c4:	82 81       	ldd	r24, Z+2	; 0x02
  c6:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_INIT_PIN(LEDs[itera].PORT , &LEDinInit) ;
  c8:	be 01       	movw	r22, r28
  ca:	6f 5f       	subi	r22, 0xFF	; 255
  cc:	7f 4f       	sbci	r23, 0xFF	; 255
  ce:	80 81       	ld	r24, Z
  d0:	91 81       	ldd	r25, Z+1	; 0x01
  d2:	0e 94 95 00 	call	0x12a	; 0x12a <HAL_GPIO_INIT_PIN>
	
	GPIO_InitTypeDef LEDinInit ;
	LEDinInit.mode = GPIO_MODE_OUTPUT ;
	
	
	for (uint8_t itera = 0 ; itera < NumberOFLEDs ; itera++ )
  d6:	1f 5f       	subi	r17, 0xFF	; 255
  d8:	11 23       	and	r17, r17
  da:	59 f3       	breq	.-42     	; 0xb2 <LED_Init+0x20>
		LEDinInit.pin = LEDs[itera].PINNum ;
		HAL_GPIO_INIT_PIN(LEDs[itera].PORT , &LEDinInit) ;
	}
	
	
	return  FUN_Ok ;
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	01 c0       	rjmp	.+2      	; 0xe2 <LED_Init+0x50>
LEDStatus_t LED_Init(LEDConfig_t * LEDs )
{
	
	if(LEDs == NULL)
	{
		return FUN_Param_ERROR ;
  e0:	81 e0       	ldi	r24, 0x01	; 1
	return  FUN_Ok ;
	
	
	}

}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	ff 90       	pop	r15
  f0:	ef 90       	pop	r14
  f2:	08 95       	ret

000000f4 <LED_Write>:
 * return :			 Function  states  
 */
LEDState_t LED_Write( uint8_t LEDIndex , LEDState_t  LEDState ,  LEDConfig_t * LEDs )
{
	
		if((LEDs == NULL) ||(LEDIndex > NumberOFLEDs) )
  f4:	41 15       	cp	r20, r1
  f6:	51 05       	cpc	r21, r1
  f8:	a1 f0       	breq	.+40     	; 0x122 <LED_Write+0x2e>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	a0 f4       	brcc	.+40     	; 0x126 <LED_Write+0x32>
  fe:	9a 01       	movw	r18, r20
 100:	46 2f       	mov	r20, r22
		{
			return FUN_Param_ERROR ;
		}
		
		HAL_GPIO_WRITEPIN(LEDs[LEDIndex].PORT , LEDs[LEDIndex].PINNum , LEDState) ;
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	fc 01       	movw	r30, r24
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	8e 0f       	add	r24, r30
 10c:	9f 1f       	adc	r25, r31
 10e:	f9 01       	movw	r30, r18
 110:	e8 0f       	add	r30, r24
 112:	f9 1f       	adc	r31, r25
 114:	62 81       	ldd	r22, Z+2	; 0x02
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	0e 94 b6 00 	call	0x16c	; 0x16c <HAL_GPIO_WRITEPIN>
		
		
		return FUN_Ok ; 
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 95       	ret
LEDState_t LED_Write( uint8_t LEDIndex , LEDState_t  LEDState ,  LEDConfig_t * LEDs )
{
	
		if((LEDs == NULL) ||(LEDIndex > NumberOFLEDs) )
		{
			return FUN_Param_ERROR ;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	08 95       	ret
 126:	81 e0       	ldi	r24, 0x01	; 1
		
		
		return FUN_Ok ; 
	
	
}
 128:	08 95       	ret

0000012a <HAL_GPIO_INIT_PIN>:
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
	}
}/* END_FUN HAL_GPIO_READPIN()*/
 12a:	dc 01       	movw	r26, r24
 12c:	fb 01       	movw	r30, r22
 12e:	81 81       	ldd	r24, Z+1	; 0x01
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	99 f4       	brne	.+38     	; 0x15a <HAL_GPIO_INIT_PIN+0x30>
 134:	80 81       	ld	r24, Z
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	9c 91       	ld	r25, X
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	89 2b       	or	r24, r25
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	8c 93       	st	X, r24
 142:	11 97       	sbiw	r26, 0x01	; 1
 144:	82 81       	ldd	r24, Z+2	; 0x02
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	81 f4       	brne	.+32     	; 0x16a <HAL_GPIO_INIT_PIN+0x40>
 14a:	80 81       	ld	r24, Z
 14c:	12 96       	adiw	r26, 0x02	; 2
 14e:	9c 91       	ld	r25, X
 150:	12 97       	sbiw	r26, 0x02	; 2
 152:	89 2b       	or	r24, r25
 154:	12 96       	adiw	r26, 0x02	; 2
 156:	8c 93       	st	X, r24
 158:	08 95       	ret
 15a:	90 81       	ld	r25, Z
 15c:	90 95       	com	r25
 15e:	11 96       	adiw	r26, 0x01	; 1
 160:	8c 91       	ld	r24, X
 162:	11 97       	sbiw	r26, 0x01	; 1
 164:	98 23       	and	r25, r24
 166:	11 96       	adiw	r26, 0x01	; 1
 168:	9c 93       	st	X, r25
 16a:	08 95       	ret

0000016c <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
 16c:	44 23       	and	r20, r20
 16e:	29 f0       	breq	.+10     	; 0x17a <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
 170:	fc 01       	movw	r30, r24
 172:	22 81       	ldd	r18, Z+2	; 0x02
 174:	62 2b       	or	r22, r18
 176:	62 83       	std	Z+2, r22	; 0x02
 178:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
 17a:	60 95       	com	r22
 17c:	fc 01       	movw	r30, r24
 17e:	22 81       	ldd	r18, Z+2	; 0x02
 180:	62 23       	and	r22, r18
 182:	62 83       	std	Z+2, r22	; 0x02
 184:	08 95       	ret

00000186 <SETPin_DELAY>:

void SETPin_DELAY(void)
{

	//HAL_GPIO_WRITEPIN(GPIOB  , GPIO_PIN_7 , GPIO_PIN_SET);
	LED_Write(0 , State_HIGH , &Led);
 186:	40 e6       	ldi	r20, 0x60	; 96
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 7a 00 	call	0xf4	; 0xf4 <LED_Write>
 192:	08 95       	ret

00000194 <RestPin_DELAY>:

void RestPin_DELAY(void)
{

//	HAL_GPIO_WRITEPIN(GPIOB  , GPIO_PIN_7 , GPIO_PIN_RESET);
	LED_Write(0 , State_LOW , &Led);
 194:	40 e6       	ldi	r20, 0x60	; 96
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 7a 00 	call	0xf4	; 0xf4 <LED_Write>
 1a0:	08 95       	ret

000001a2 <main>:
TIMInit_t Tim_Delay_Without_IT = {.COMPConfig.TIM8Bit.CompAction =  TIM_COMP_PIN_OUT_Normal ,.Instance = TIM0 , .TIMMode = TIM_MODE_CTC ,.TimPreScaler = TIM_0_Prescaler_64 , .COMPConfig.TIM8Bit.CompValue = 250  };
LEDConfig_t  Led       ={.PINNum =LED_BUTTON_PIN ,.PORT =  GPIOB };


int main(void)
{
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <main+0x6>
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
	GPIO_InitTypeDef  PIN_Config_Toggle = {.mode = GPIO_MODE_OUTPUT , .pin = GPIO_PIN_0 };
 1ae:	19 82       	std	Y+1, r1	; 0x01
 1b0:	1a 82       	std	Y+2, r1	; 0x02
 1b2:	1b 82       	std	Y+3, r1	; 0x03
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	8a 83       	std	Y+2, r24	; 0x02
	HAL_GPIO_INIT_PIN(GPIOB , &PIN_Config_Toggle);
 1ba:	be 01       	movw	r22, r28
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	86 e3       	ldi	r24, 0x36	; 54
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 95 00 	call	0x12a	; 0x12a <HAL_GPIO_INIT_PIN>
	Button_Init(&Button);
	#endif
	
	
	
	LED_Init(&Led);
 1c8:	80 e6       	ldi	r24, 0x60	; 96
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <LED_Init>
	sei();
 1d0:	78 94       	sei

		
			
		#elif TEST_DELAY_WITH_IT_once
			
			while(Utilites_DelayMs_IT(&Tim_Delay_With_IT , 300 , Delay_Once ,SETPin_DELAY) != 0);
 1d2:	23 ec       	ldi	r18, 0xC3	; 195
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	6c e2       	ldi	r22, 0x2C	; 44
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	83 e6       	ldi	r24, 0x63	; 99
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 2b 03 	call	0x656	; 0x656 <Utilites_DelayMs_IT>
 1e4:	81 11       	cpse	r24, r1
 1e6:	f5 cf       	rjmp	.-22     	; 0x1d2 <main+0x30>
			
			while(Utilites_DelayMs_IT(&Tim_Delay_With_IT , 500 , Delay_Once ,RestPin_DELAY ) != 0 );
 1e8:	2a ec       	ldi	r18, 0xCA	; 202
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	64 ef       	ldi	r22, 0xF4	; 244
 1f0:	71 e0       	ldi	r23, 0x01	; 1
 1f2:	83 e6       	ldi	r24, 0x63	; 99
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 2b 03 	call	0x656	; 0x656 <Utilites_DelayMs_IT>
 1fa:	81 11       	cpse	r24, r1
 1fc:	f5 cf       	rjmp	.-22     	; 0x1e8 <main+0x46>
 1fe:	e9 cf       	rjmp	.-46     	; 0x1d2 <main+0x30>

00000200 <TIM_OutCompareModeInit>:
	
	SET_REGISTER_VAL(TCCR1B , TIM16Bit_InputCapture_CAPTURE_EDGE_MASK , Edge ) ;
	
	return TIM_OK ;
	
}
 200:	fc 01       	movw	r30, r24
 202:	89 2b       	or	r24, r25
 204:	09 f4       	brne	.+2      	; 0x208 <TIM_OutCompareModeInit+0x8>
 206:	64 c0       	rjmp	.+200    	; 0x2d0 <TIM_OutCompareModeInit+0xd0>
 208:	80 85       	ldd	r24, Z+8	; 0x08
 20a:	81 11       	cpse	r24, r1
 20c:	0b c0       	rjmp	.+22     	; 0x224 <TIM_OutCompareModeInit+0x24>
 20e:	83 b7       	in	r24, 0x33	; 51
 210:	87 78       	andi	r24, 0x87	; 135
 212:	83 bf       	out	0x33, r24	; 51
 214:	93 b7       	in	r25, 0x33	; 51
 216:	84 81       	ldd	r24, Z+4	; 0x04
 218:	89 2b       	or	r24, r25
 21a:	88 60       	ori	r24, 0x08	; 8
 21c:	83 bf       	out	0x33, r24	; 51
 21e:	85 81       	ldd	r24, Z+5	; 0x05
 220:	8c bf       	out	0x3c, r24	; 60
 222:	50 c0       	rjmp	.+160    	; 0x2c4 <TIM_OutCompareModeInit+0xc4>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	59 f4       	brne	.+22     	; 0x23e <TIM_OutCompareModeInit+0x3e>
 228:	85 b5       	in	r24, 0x25	; 37
 22a:	87 78       	andi	r24, 0x87	; 135
 22c:	85 bd       	out	0x25, r24	; 37
 22e:	95 b5       	in	r25, 0x25	; 37
 230:	84 81       	ldd	r24, Z+4	; 0x04
 232:	89 2b       	or	r24, r25
 234:	88 60       	ori	r24, 0x08	; 8
 236:	85 bd       	out	0x25, r24	; 37
 238:	85 81       	ldd	r24, Z+5	; 0x05
 23a:	83 bd       	out	0x23, r24	; 35
 23c:	43 c0       	rjmp	.+134    	; 0x2c4 <TIM_OutCompareModeInit+0xc4>
 23e:	82 30       	cpi	r24, 0x02	; 2
 240:	09 f0       	breq	.+2      	; 0x244 <TIM_OutCompareModeInit+0x44>
 242:	48 c0       	rjmp	.+144    	; 0x2d4 <TIM_OutCompareModeInit+0xd4>
 244:	1f bc       	out	0x2f, r1	; 47
 246:	86 81       	ldd	r24, Z+6	; 0x06
 248:	8f 3f       	cpi	r24, 0xFF	; 255
 24a:	e9 f4       	brne	.+58     	; 0x286 <TIM_OutCompareModeInit+0x86>
 24c:	84 81       	ldd	r24, Z+4	; 0x04
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	9c 01       	movw	r18, r24
 252:	00 24       	eor	r0, r0
 254:	36 95       	lsr	r19
 256:	27 95       	ror	r18
 258:	07 94       	ror	r0
 25a:	36 95       	lsr	r19
 25c:	27 95       	ror	r18
 25e:	07 94       	ror	r0
 260:	32 2f       	mov	r19, r18
 262:	20 2d       	mov	r18, r0
 264:	82 95       	swap	r24
 266:	92 95       	swap	r25
 268:	90 7f       	andi	r25, 0xF0	; 240
 26a:	98 27       	eor	r25, r24
 26c:	80 7f       	andi	r24, 0xF0	; 240
 26e:	98 27       	eor	r25, r24
 270:	82 2b       	or	r24, r18
 272:	8f bd       	out	0x2f, r24	; 47
 274:	85 81       	ldd	r24, Z+5	; 0x05
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	9b bd       	out	0x2b, r25	; 43
 27a:	8a bd       	out	0x2a, r24	; 42
 27c:	85 81       	ldd	r24, Z+5	; 0x05
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	99 bd       	out	0x29, r25	; 41
 282:	88 bd       	out	0x28, r24	; 40
 284:	1f c0       	rjmp	.+62     	; 0x2c4 <TIM_OutCompareModeInit+0xc4>
 286:	86 30       	cpi	r24, 0x06	; 6
 288:	71 f4       	brne	.+28     	; 0x2a6 <TIM_OutCompareModeInit+0xa6>
 28a:	24 81       	ldd	r18, Z+4	; 0x04
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	a9 01       	movw	r20, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <TIM_OutCompareModeInit+0x96>
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	8a 95       	dec	r24
 298:	e2 f7       	brpl	.-8      	; 0x292 <TIM_OutCompareModeInit+0x92>
 29a:	4f bd       	out	0x2f, r20	; 47
 29c:	85 81       	ldd	r24, Z+5	; 0x05
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	9b bd       	out	0x2b, r25	; 43
 2a2:	8a bd       	out	0x2a, r24	; 42
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <TIM_OutCompareModeInit+0xc4>
 2a6:	84 30       	cpi	r24, 0x04	; 4
 2a8:	b9 f4       	brne	.+46     	; 0x2d8 <TIM_OutCompareModeInit+0xd8>
 2aa:	24 81       	ldd	r18, Z+4	; 0x04
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	a9 01       	movw	r20, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <TIM_OutCompareModeInit+0xb6>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	8a 95       	dec	r24
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <TIM_OutCompareModeInit+0xb2>
 2ba:	4f bd       	out	0x2f, r20	; 47
 2bc:	85 81       	ldd	r24, Z+5	; 0x05
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	99 bd       	out	0x29, r25	; 41
 2c2:	88 bd       	out	0x28, r24	; 40
 2c4:	99 b7       	in	r25, 0x39	; 57
 2c6:	81 85       	ldd	r24, Z+9	; 0x09
 2c8:	89 2b       	or	r24, r25
 2ca:	89 bf       	out	0x39, r24	; 57
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	08 95       	ret
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	08 95       	ret

000002dc <TIM_DeInit>:
 2dc:	81 11       	cpse	r24, r1
 2de:	08 c0       	rjmp	.+16     	; 0x2f0 <TIM_DeInit+0x14>
 2e0:	13 be       	out	0x33, r1	; 51
 2e2:	12 be       	out	0x32, r1	; 50
 2e4:	1c be       	out	0x3c, r1	; 60
 2e6:	89 b7       	in	r24, 0x39	; 57
 2e8:	8c 7f       	andi	r24, 0xFC	; 252
 2ea:	89 bf       	out	0x39, r24	; 57
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	41 f4       	brne	.+16     	; 0x304 <TIM_DeInit+0x28>
 2f4:	15 bc       	out	0x25, r1	; 37
 2f6:	14 bc       	out	0x24, r1	; 36
 2f8:	13 bc       	out	0x23, r1	; 35
 2fa:	89 b7       	in	r24, 0x39	; 57
 2fc:	8f 73       	andi	r24, 0x3F	; 63
 2fe:	89 bf       	out	0x39, r24	; 57
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	59 f4       	brne	.+22     	; 0x31e <TIM_DeInit+0x42>
 308:	1f bc       	out	0x2f, r1	; 47
 30a:	1e bc       	out	0x2e, r1	; 46
 30c:	1d bc       	out	0x2d, r1	; 45
 30e:	1c bc       	out	0x2c, r1	; 44
 310:	17 bc       	out	0x27, r1	; 39
 312:	16 bc       	out	0x26, r1	; 38
 314:	89 b7       	in	r24, 0x39	; 57
 316:	83 7c       	andi	r24, 0xC3	; 195
 318:	89 bf       	out	0x39, r24	; 57
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	08 95       	ret

00000322 <TIM_Start>:
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	29 f1       	breq	.+74     	; 0x370 <TIM_Start+0x4e>
 326:	fc 01       	movw	r30, r24
 328:	20 85       	ldd	r18, Z+8	; 0x08
 32a:	21 11       	cpse	r18, r1
 32c:	09 c0       	rjmp	.+18     	; 0x340 <TIM_Start+0x1e>
 32e:	23 b7       	in	r18, 0x33	; 51
 330:	28 7f       	andi	r18, 0xF8	; 248
 332:	23 bf       	out	0x33, r18	; 51
 334:	23 b7       	in	r18, 0x33	; 51
 336:	87 81       	ldd	r24, Z+7	; 0x07
 338:	82 2b       	or	r24, r18
 33a:	83 bf       	out	0x33, r24	; 51
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
 340:	22 30       	cpi	r18, 0x02	; 2
 342:	51 f4       	brne	.+20     	; 0x358 <TIM_Start+0x36>
 344:	25 b5       	in	r18, 0x25	; 37
 346:	28 7f       	andi	r18, 0xF8	; 248
 348:	25 bd       	out	0x25, r18	; 37
 34a:	25 b5       	in	r18, 0x25	; 37
 34c:	fc 01       	movw	r30, r24
 34e:	87 81       	ldd	r24, Z+7	; 0x07
 350:	82 2b       	or	r24, r18
 352:	85 bd       	out	0x25, r24	; 37
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
 358:	21 30       	cpi	r18, 0x01	; 1
 35a:	61 f4       	brne	.+24     	; 0x374 <TIM_Start+0x52>
 35c:	2e b5       	in	r18, 0x2e	; 46
 35e:	28 7f       	andi	r18, 0xF8	; 248
 360:	2e bd       	out	0x2e, r18	; 46
 362:	2e b5       	in	r18, 0x2e	; 46
 364:	fc 01       	movw	r30, r24
 366:	87 81       	ldd	r24, Z+7	; 0x07
 368:	82 2b       	or	r24, r18
 36a:	8e bd       	out	0x2e, r24	; 46
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	08 95       	ret
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	08 95       	ret
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	08 95       	ret

00000378 <TIM_CallBack_FuctionSet>:
 * return : current timer value 
 */
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
 378:	61 15       	cp	r22, r1
 37a:	71 05       	cpc	r23, r1
 37c:	09 f4       	brne	.+2      	; 0x380 <TIM_CallBack_FuctionSet+0x8>
 37e:	45 c0       	rjmp	.+138    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{
		return TIM_PARAM_ERROR ;
	}
	
	switch(Interrupt_Num)
 380:	88 30       	cpi	r24, 0x08	; 8
 382:	e9 f1       	breq	.+122    	; 0x3fe <TIM_CallBack_FuctionSet+0x86>
 384:	38 f4       	brcc	.+14     	; 0x394 <TIM_CallBack_FuctionSet+0x1c>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	81 f0       	breq	.+32     	; 0x3aa <TIM_CallBack_FuctionSet+0x32>
 38a:	84 30       	cpi	r24, 0x04	; 4
 38c:	61 f1       	breq	.+88     	; 0x3e6 <TIM_CallBack_FuctionSet+0x6e>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	f1 f5       	brne	.+124    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 392:	11 c0       	rjmp	.+34     	; 0x3b6 <TIM_CallBack_FuctionSet+0x3e>
 394:	80 32       	cpi	r24, 0x20	; 32
 396:	09 f1       	breq	.+66     	; 0x3da <TIM_CallBack_FuctionSet+0x62>
 398:	18 f4       	brcc	.+6      	; 0x3a0 <TIM_CallBack_FuctionSet+0x28>
 39a:	80 31       	cpi	r24, 0x10	; 16
 39c:	51 f1       	breq	.+84     	; 0x3f2 <TIM_CallBack_FuctionSet+0x7a>
 39e:	37 c0       	rjmp	.+110    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3a0:	80 34       	cpi	r24, 0x40	; 64
 3a2:	a9 f0       	breq	.+42     	; 0x3ce <TIM_CallBack_FuctionSet+0x56>
 3a4:	80 38       	cpi	r24, 0x80	; 128
 3a6:	69 f0       	breq	.+26     	; 0x3c2 <TIM_CallBack_FuctionSet+0x4a>
 3a8:	32 c0       	rjmp	.+100    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
 3aa:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <COMPMatch0_Fun+0x1>
 3ae:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <COMPMatch0_Fun>
	}
	
	


	return TIM_OK ; 
 3b2:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
 3b4:	08 95       	ret
		case  TIM_0_IT_OVER :
				OverFlow0_Fun = callbackfunction ;
 3b6:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <OverFlow0_Fun+0x1>
 3ba:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <OverFlow0_Fun>
	}
	
	


	return TIM_OK ; 
 3be:	80 e0       	ldi	r24, 0x00	; 0
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
		case  TIM_0_IT_OVER :
				OverFlow0_Fun = callbackfunction ;
		break; 
 3c0:	08 95       	ret
		case TIM_2_IT_COMP :
				COMPMatch2_Fun = callbackfunction ;
 3c2:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <COMPMatch2_Fun+0x1>
 3c6:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <COMPMatch2_Fun>
	}
	
	


	return TIM_OK ; 
 3ca:	80 e0       	ldi	r24, 0x00	; 0
				OverFlow0_Fun = callbackfunction ;
		break; 
		case TIM_2_IT_COMP :
				COMPMatch2_Fun = callbackfunction ;
		
		break; 
 3cc:	08 95       	ret
		case TIM_2_IT_OVER :
				OverFlow2_Fun = callbackfunction ;
 3ce:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <OverFlow2_Fun+0x1>
 3d2:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <OverFlow2_Fun>
	}
	
	


	return TIM_OK ; 
 3d6:	80 e0       	ldi	r24, 0x00	; 0
		
		break; 
		case TIM_2_IT_OVER :
				OverFlow2_Fun = callbackfunction ;
		
		break ;
 3d8:	08 95       	ret
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
 3da:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <InputCapture_callbackfunction+0x1>
 3de:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <InputCapture_callbackfunction>
	}
	
	


	return TIM_OK ; 
 3e2:	80 e0       	ldi	r24, 0x00	; 0
				OverFlow2_Fun = callbackfunction ;
		
		break ;
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
		break; 
 3e4:	08 95       	ret
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
 3e6:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <__data_end+0x1>
 3ea:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <__data_end>
	}
	
	


	return TIM_OK ; 
 3ee:	80 e0       	ldi	r24, 0x00	; 0
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
		break; 
 3f0:	08 95       	ret
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
 3f2:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <CompareA_callbackfunction+0x1>
 3f6:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <CompareA_callbackfunction>
	}
	
	


	return TIM_OK ; 
 3fa:	80 e0       	ldi	r24, 0x00	; 0
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
		break; 
 3fc:	08 95       	ret
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
 3fe:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <CompareB_callbackfunction+0x1>
 402:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <CompareB_callbackfunction>
	}
	
	


	return TIM_OK ; 
 406:	80 e0       	ldi	r24, 0x00	; 0
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
 408:	08 95       	ret
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
	{
		return TIM_PARAM_ERROR ;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 95       	ret
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
		default:
		
			return TIM_CONFIG_ERROR ;
 40e:	82 e0       	ldi	r24, 0x02	; 2
	


	return TIM_OK ; 
	
}
 410:	08 95       	ret

00000412 <__vector_6>:




void __vector_6(void )	 // timer1 input capture interrupt number
{
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	2f 93       	push	r18
 41e:	3f 93       	push	r19
 420:	4f 93       	push	r20
 422:	5f 93       	push	r21
 424:	6f 93       	push	r22
 426:	7f 93       	push	r23
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
	InputCapture_callbackfunction();
 434:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <InputCapture_callbackfunction>
 438:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <InputCapture_callbackfunction+0x1>
 43c:	09 95       	icall
}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <__vector_7>:

void __vector_7(void )		// timer1 CompareA
{
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	3f 93       	push	r19
 46e:	4f 93       	push	r20
 470:	5f 93       	push	r21
 472:	6f 93       	push	r22
 474:	7f 93       	push	r23
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	af 93       	push	r26
 47c:	bf 93       	push	r27
 47e:	ef 93       	push	r30
 480:	ff 93       	push	r31
	CompareA_callbackfunction();
 482:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <CompareA_callbackfunction>
 486:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <CompareA_callbackfunction+0x1>
 48a:	09 95       	icall
}
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <__vector_8>:
void __vector_8(void )	 // timer1 compareB interrupt number
{
	CompareB_callbackfunction();
 4ae:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <CompareB_callbackfunction>
 4b2:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <CompareB_callbackfunction+0x1>
 4b6:	09 95       	icall
 4b8:	08 95       	ret

000004ba <__vector_9>:
}

void __vector_9(void )		// timer1 overflow
{
	Overflow_callbackfunction() ;
 4ba:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <__data_end>
 4be:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <__data_end+0x1>
 4c2:	09 95       	icall
 4c4:	08 95       	ret

000004c6 <__vector_10>:



/* all vectors specific for timer2 and timer0 */
void __vector_10(void)
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	COMPMatch0_Fun();
 4e8:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <COMPMatch0_Fun>
 4ec:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <COMPMatch0_Fun+0x1>
 4f0:	09 95       	icall
}
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <__vector_11>:
void __vector_11(void)
{
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	4f 93       	push	r20
 524:	5f 93       	push	r21
 526:	6f 93       	push	r22
 528:	7f 93       	push	r23
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	af 93       	push	r26
 530:	bf 93       	push	r27
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
	OverFlow0_Fun();
 536:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <OverFlow0_Fun>
 53a:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <OverFlow0_Fun+0x1>
 53e:	09 95       	icall
}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <__vector_4>:


void __vector_4(void)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	2f 93       	push	r18
 56e:	3f 93       	push	r19
 570:	4f 93       	push	r20
 572:	5f 93       	push	r21
 574:	6f 93       	push	r22
 576:	7f 93       	push	r23
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
 57c:	af 93       	push	r26
 57e:	bf 93       	push	r27
 580:	ef 93       	push	r30
 582:	ff 93       	push	r31
	COMPMatch2_Fun();
 584:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <COMPMatch2_Fun>
 588:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <COMPMatch2_Fun+0x1>
 58c:	09 95       	icall
}
 58e:	ff 91       	pop	r31
 590:	ef 91       	pop	r30
 592:	bf 91       	pop	r27
 594:	af 91       	pop	r26
 596:	9f 91       	pop	r25
 598:	8f 91       	pop	r24
 59a:	7f 91       	pop	r23
 59c:	6f 91       	pop	r22
 59e:	5f 91       	pop	r21
 5a0:	4f 91       	pop	r20
 5a2:	3f 91       	pop	r19
 5a4:	2f 91       	pop	r18
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <__vector_5>:
void __vector_5(void)
{
 5b0:	1f 92       	push	r1
 5b2:	0f 92       	push	r0
 5b4:	0f b6       	in	r0, 0x3f	; 63
 5b6:	0f 92       	push	r0
 5b8:	11 24       	eor	r1, r1
 5ba:	2f 93       	push	r18
 5bc:	3f 93       	push	r19
 5be:	4f 93       	push	r20
 5c0:	5f 93       	push	r21
 5c2:	6f 93       	push	r22
 5c4:	7f 93       	push	r23
 5c6:	8f 93       	push	r24
 5c8:	9f 93       	push	r25
 5ca:	af 93       	push	r26
 5cc:	bf 93       	push	r27
 5ce:	ef 93       	push	r30
 5d0:	ff 93       	push	r31
	OverFlow2_Fun();
 5d2:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <OverFlow2_Fun>
 5d6:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <OverFlow2_Fun+0x1>
 5da:	09 95       	icall
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	bf 91       	pop	r27
 5e2:	af 91       	pop	r26
 5e4:	9f 91       	pop	r25
 5e6:	8f 91       	pop	r24
 5e8:	7f 91       	pop	r23
 5ea:	6f 91       	pop	r22
 5ec:	5f 91       	pop	r21
 5ee:	4f 91       	pop	r20
 5f0:	3f 91       	pop	r19
 5f2:	2f 91       	pop	r18
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <Delay_CallBack>:
/* local function used as Callback To Toggle Selected Pin with Desired GPIO */


void PWM_Toggle_Timer0(void)
{	
	HAL_GPIO_TOGGLE_PIN(PWMTim0_PORT , PIN_CONFIG.pin);
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <u8_NumOFms>
 606:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <u8_NumOFms+0x1>
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <u8_NumOFms+0x1>
 610:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8_NumOFms>
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	c9 f4       	brne	.+50     	; 0x64a <Delay_CallBack+0x4c>
 618:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <IN_Use>
 61c:	c1 e8       	ldi	r28, 0x81	; 129
 61e:	d0 e0       	ldi	r29, 0x00	; 0
 620:	e8 81       	ld	r30, Y
 622:	f9 81       	ldd	r31, Y+1	; 0x01
 624:	09 95       	icall
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	9b 81       	ldd	r25, Y+3	; 0x03
 62a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <u8_NumOFms+0x1>
 62e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <u8_NumOFms>
 632:	8c 81       	ldd	r24, Y+4	; 0x04
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	49 f4       	brne	.+18     	; 0x64a <Delay_CallBack+0x4c>
 638:	99 b7       	in	r25, 0x39	; 57
 63a:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <Tim_Delay_Handler>
 63e:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <Tim_Delay_Handler+0x1>
 642:	81 85       	ldd	r24, Z+9	; 0x09
 644:	80 95       	com	r24
 646:	89 23       	and	r24, r25
 648:	89 bf       	out	0x39, r24	; 57
 64a:	88 b7       	in	r24, 0x38	; 56
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	88 bf       	out	0x38, r24	; 56
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	08 95       	ret

00000656 <Utilites_DelayMs_IT>:
static  TIMInit_t *  Tim_Delay_Handler ;
static uint8_t IN_Use = 0 ;


Utilies_Status_t Utilites_DelayMs_IT(TIMInit_t *  Tim_Handler, uint16_t MsDelay , DalayType_t Dalay_type , TIMCaLL_BackFun callbackfunction)
{		
 656:	ef 92       	push	r14
 658:	ff 92       	push	r15
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
	
		if(IN_Use == 1)
 660:	50 91 7e 00 	lds	r21, 0x007E	; 0x80007e <IN_Use>
 664:	51 30       	cpi	r21, 0x01	; 1
 666:	09 f4       	brne	.+2      	; 0x66a <Utilites_DelayMs_IT+0x14>
 668:	40 c0       	rjmp	.+128    	; 0x6ea <Utilites_DelayMs_IT+0x94>
		{
			return UTIL_PARAM_ERROR ; 
		}
		
		if((Tim_Handler == NULL) ||(callbackfunction == NULL))
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	09 f4       	brne	.+2      	; 0x670 <Utilites_DelayMs_IT+0x1a>
 66e:	3f c0       	rjmp	.+126    	; 0x6ee <Utilites_DelayMs_IT+0x98>
 670:	21 15       	cp	r18, r1
 672:	31 05       	cpc	r19, r1
 674:	f1 f1       	breq	.+124    	; 0x6f2 <Utilites_DelayMs_IT+0x9c>
 676:	e9 01       	movw	r28, r18
 678:	14 2f       	mov	r17, r20
 67a:	7b 01       	movw	r14, r22
 67c:	fc 01       	movw	r30, r24
		{
			return UTIL_PARAM_ERROR ;
		}
		
		Tim_Delay_Handler = Tim_Handler ;
 67e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <Tim_Delay_Handler+0x1>
 682:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <Tim_Delay_Handler>
		Tim_Delay_Handler->Instance = TIM2 ;
 686:	22 e0       	ldi	r18, 0x02	; 2
 688:	20 87       	std	Z+8, r18	; 0x08
		if(TIM_DeInit(TIM2)	!= TIM_OK)
 68a:	82 e0       	ldi	r24, 0x02	; 2
 68c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <TIM_DeInit>
 690:	81 11       	cpse	r24, r1
 692:	31 c0       	rjmp	.+98     	; 0x6f6 <Utilites_DelayMs_IT+0xa0>
			return UTIL_TIM_ERROR ;
		}else
		{
			;
		}
		if(TIM_OutCompareModeInit(Tim_Delay_Handler)	!= TIM_OK)
 694:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Tim_Delay_Handler>
 698:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <Tim_Delay_Handler+0x1>
 69c:	0e 94 00 01 	call	0x200	; 0x200 <TIM_OutCompareModeInit>
 6a0:	81 11       	cpse	r24, r1
 6a2:	2b c0       	rjmp	.+86     	; 0x6fa <Utilites_DelayMs_IT+0xa4>
		}else
		{
			;
		}
		
		if(TIM_CallBack_FuctionSet(Tim_Delay_Handler->TIM_Interrupt ,Delay_CallBack )!= TIM_OK)
 6a4:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <Tim_Delay_Handler>
 6a8:	f0 91 80 00 	lds	r31, 0x0080	; 0x800080 <Tim_Delay_Handler+0x1>
 6ac:	6f ef       	ldi	r22, 0xFF	; 255
 6ae:	72 e0       	ldi	r23, 0x02	; 2
 6b0:	81 85       	ldd	r24, Z+9	; 0x09
 6b2:	0e 94 bc 01 	call	0x378	; 0x378 <TIM_CallBack_FuctionSet>
 6b6:	81 11       	cpse	r24, r1
 6b8:	22 c0       	rjmp	.+68     	; 0x6fe <Utilites_DelayMs_IT+0xa8>
		}else
		{
			;
		}
		/* set shared variable */
		str_Delay.Delaycallbackfunction= callbackfunction ;
 6ba:	e1 e8       	ldi	r30, 0x81	; 129
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	d1 83       	std	Z+1, r29	; 0x01
 6c0:	c0 83       	st	Z, r28
		str_Delay.MsDelay = MsDelay;
 6c2:	f3 82       	std	Z+3, r15	; 0x03
 6c4:	e2 82       	std	Z+2, r14	; 0x02
		u8_NumOFms = MsDelay;
 6c6:	f0 92 87 00 	sts	0x0087, r15	; 0x800087 <u8_NumOFms+0x1>
 6ca:	e0 92 86 00 	sts	0x0086, r14	; 0x800086 <u8_NumOFms>
		str_Delay.DelayAttr = Dalay_type;
 6ce:	14 83       	std	Z+4, r17	; 0x04
		if(TIM_Start(Tim_Delay_Handler) != TIM_OK)
 6d0:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Tim_Delay_Handler>
 6d4:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <Tim_Delay_Handler+0x1>
 6d8:	0e 94 91 01 	call	0x322	; 0x322 <TIM_Start>
 6dc:	81 11       	cpse	r24, r1
 6de:	11 c0       	rjmp	.+34     	; 0x702 <Utilites_DelayMs_IT+0xac>
			return  UTIL_TIM_ERROR ; 
		}else
		{
			;
		}
		IN_Use =1 ;
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <IN_Use>
		return UTIL_OK ; 
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	0d c0       	rjmp	.+26     	; 0x704 <Utilites_DelayMs_IT+0xae>
Utilies_Status_t Utilites_DelayMs_IT(TIMInit_t *  Tim_Handler, uint16_t MsDelay , DalayType_t Dalay_type , TIMCaLL_BackFun callbackfunction)
{		
	
		if(IN_Use == 1)
		{
			return UTIL_PARAM_ERROR ; 
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	0b c0       	rjmp	.+22     	; 0x704 <Utilites_DelayMs_IT+0xae>
		}
		
		if((Tim_Handler == NULL) ||(callbackfunction == NULL))
		{
			return UTIL_PARAM_ERROR ;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	09 c0       	rjmp	.+18     	; 0x704 <Utilites_DelayMs_IT+0xae>
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	07 c0       	rjmp	.+14     	; 0x704 <Utilites_DelayMs_IT+0xae>
		
		Tim_Delay_Handler = Tim_Handler ;
		Tim_Delay_Handler->Instance = TIM2 ;
		if(TIM_DeInit(TIM2)	!= TIM_OK)
		{
			return UTIL_TIM_ERROR ;
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	05 c0       	rjmp	.+10     	; 0x704 <Utilites_DelayMs_IT+0xae>
		{
			;
		}
		if(TIM_OutCompareModeInit(Tim_Delay_Handler)	!= TIM_OK)
		{
			return UTIL_TIM_ERROR ;
 6fa:	82 e0       	ldi	r24, 0x02	; 2
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <Utilites_DelayMs_IT+0xae>
			;
		}
		
		if(TIM_CallBack_FuctionSet(Tim_Delay_Handler->TIM_Interrupt ,Delay_CallBack )!= TIM_OK)
		{
			return UTIL_TIM_ERROR ;
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	01 c0       	rjmp	.+2      	; 0x704 <Utilites_DelayMs_IT+0xae>
		str_Delay.MsDelay = MsDelay;
		u8_NumOFms = MsDelay;
		str_Delay.DelayAttr = Dalay_type;
		if(TIM_Start(Tim_Delay_Handler) != TIM_OK)
		{
			return  UTIL_TIM_ERROR ; 
 702:	82 e0       	ldi	r24, 0x02	; 2
			;
		}
		IN_Use =1 ;
		return UTIL_OK ; 

}
 704:	df 91       	pop	r29
 706:	cf 91       	pop	r28
 708:	1f 91       	pop	r17
 70a:	ff 90       	pop	r15
 70c:	ef 90       	pop	r14
 70e:	08 95       	ret

00000710 <_exit>:
 710:	f8 94       	cli

00000712 <__stop_program>:
 712:	ff cf       	rjmp	.-2      	; 0x712 <__stop_program>
