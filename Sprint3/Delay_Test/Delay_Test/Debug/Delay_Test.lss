
Delay_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000674  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000674  00000708  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080006a  0080006a  00000712  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000712  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b6b  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0f  00000000  00000000  000024a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000feb  00000000  00000000  00002eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000534  00000000  00000000  00003ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c8f  00000000  00000000  000043d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001248  00000000  00000000  00005063  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000062ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_4>
  14:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_5>
  18:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_6>
  1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_7>
  20:	0c 94 07 02 	jmp	0x40e	; 0x40e <__vector_8>
  24:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_9>
  28:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_10>
  2c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  8a:	0c 94 38 03 	jmp	0x670	; 0x670 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HAL_GPIO_INIT_PIN>:
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
	}
}/* END_FUN HAL_GPIO_READPIN()*/
  92:	dc 01       	movw	r26, r24
  94:	fb 01       	movw	r30, r22
  96:	81 81       	ldd	r24, Z+1	; 0x01
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	99 f4       	brne	.+38     	; 0xc2 <HAL_GPIO_INIT_PIN+0x30>
  9c:	80 81       	ld	r24, Z
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	9c 91       	ld	r25, X
  a2:	11 97       	sbiw	r26, 0x01	; 1
  a4:	89 2b       	or	r24, r25
  a6:	11 96       	adiw	r26, 0x01	; 1
  a8:	8c 93       	st	X, r24
  aa:	11 97       	sbiw	r26, 0x01	; 1
  ac:	82 81       	ldd	r24, Z+2	; 0x02
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	81 f4       	brne	.+32     	; 0xd2 <HAL_GPIO_INIT_PIN+0x40>
  b2:	80 81       	ld	r24, Z
  b4:	12 96       	adiw	r26, 0x02	; 2
  b6:	9c 91       	ld	r25, X
  b8:	12 97       	sbiw	r26, 0x02	; 2
  ba:	89 2b       	or	r24, r25
  bc:	12 96       	adiw	r26, 0x02	; 2
  be:	8c 93       	st	X, r24
  c0:	08 95       	ret
  c2:	90 81       	ld	r25, Z
  c4:	90 95       	com	r25
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	8c 91       	ld	r24, X
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	98 23       	and	r25, r24
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	9c 93       	st	X, r25
  d2:	08 95       	ret

000000d4 <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
  d4:	44 23       	and	r20, r20
  d6:	29 f0       	breq	.+10     	; 0xe2 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
  d8:	fc 01       	movw	r30, r24
  da:	22 81       	ldd	r18, Z+2	; 0x02
  dc:	62 2b       	or	r22, r18
  de:	62 83       	std	Z+2, r22	; 0x02
  e0:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
  e2:	60 95       	com	r22
  e4:	fc 01       	movw	r30, r24
  e6:	22 81       	ldd	r18, Z+2	; 0x02
  e8:	62 23       	and	r22, r18
  ea:	62 83       	std	Z+2, r22	; 0x02
  ec:	08 95       	ret

000000ee <SETPin_DELAY>:
}

void SETPin_DELAY(void)
{

	HAL_GPIO_WRITEPIN(GPIOB  , GPIO_PIN_7 , GPIO_PIN_SET);
  ee:	41 e0       	ldi	r20, 0x01	; 1
  f0:	60 e8       	ldi	r22, 0x80	; 128
  f2:	86 e3       	ldi	r24, 0x36	; 54
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 6a 00 	call	0xd4	; 0xd4 <HAL_GPIO_WRITEPIN>
  fa:	08 95       	ret

000000fc <RestPin_DELAY>:


void RestPin_DELAY(void)
{

	HAL_GPIO_WRITEPIN(GPIOB  , GPIO_PIN_7 , GPIO_PIN_RESET);
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	60 e8       	ldi	r22, 0x80	; 128
 100:	86 e3       	ldi	r24, 0x36	; 54
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 6a 00 	call	0xd4	; 0xd4 <HAL_GPIO_WRITEPIN>
 108:	08 95       	ret

0000010a <main>:

TIMInit_t Tim_Delay_Without_IT = {.COMPConfig.TIM8Bit.CompAction =  TIM_COMP_PIN_OUT_Normal ,.Instance = TIM0 , .TIMMode = TIM_MODE_CTC ,.TimPreScaler = TIM_0_Prescaler_64 , .COMPConfig.TIM8Bit.CompValue = 250  };


int main(void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <main+0x6>
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
	GPIO_InitTypeDef  PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pin = GPIO_PIN_0 };
 116:	19 82       	std	Y+1, r1	; 0x01
 118:	1a 82       	std	Y+2, r1	; 0x02
 11a:	1b 82       	std	Y+3, r1	; 0x03
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	8a 83       	std	Y+2, r24	; 0x02
	HAL_GPIO_INIT_PIN(GPIOB , &PIN_CONFIG);
 122:	be 01       	movw	r22, r28
 124:	6f 5f       	subi	r22, 0xFF	; 255
 126:	7f 4f       	sbci	r23, 0xFF	; 255
 128:	86 e3       	ldi	r24, 0x36	; 54
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 49 00 	call	0x92	; 0x92 <HAL_GPIO_INIT_PIN>

	

	#endif

	sei();
 130:	78 94       	sei
		PORTB ^= 0x80 ;	
		
			
		#elif TEST_DELAY_WITH_IT_once
			
			while(Utilites_DelayMs_IT(&Tim_Delay_With_IT , 300 , Delay_Once ,SETPin_DELAY) != 0);
 132:	27 e7       	ldi	r18, 0x77	; 119
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	6c e2       	ldi	r22, 0x2C	; 44
 13a:	71 e0       	ldi	r23, 0x01	; 1
 13c:	80 e6       	ldi	r24, 0x60	; 96
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Utilites_DelayMs_IT>
 144:	81 11       	cpse	r24, r1
 146:	f5 cf       	rjmp	.-22     	; 0x132 <main+0x28>
			
			while(Utilites_DelayMs_IT(&Tim_Delay_With_IT , 500 , Delay_Once ,RestPin_DELAY ) != 0 );
 148:	2e e7       	ldi	r18, 0x7E	; 126
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	64 ef       	ldi	r22, 0xF4	; 244
 150:	71 e0       	ldi	r23, 0x01	; 1
 152:	80 e6       	ldi	r24, 0x60	; 96
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 db 02 	call	0x5b6	; 0x5b6 <Utilites_DelayMs_IT>
 15a:	81 11       	cpse	r24, r1
 15c:	f5 cf       	rjmp	.-22     	; 0x148 <main+0x3e>
 15e:	e9 cf       	rjmp	.-46     	; 0x132 <main+0x28>

00000160 <TIM_OutCompareModeInit>:
	
	SET_REGISTER_VAL(TCCR1B , TIM16Bit_InputCapture_CAPTURE_EDGE_MASK , Edge ) ;
	
	return TIM_OK ;
	
}
 160:	fc 01       	movw	r30, r24
 162:	89 2b       	or	r24, r25
 164:	09 f4       	brne	.+2      	; 0x168 <TIM_OutCompareModeInit+0x8>
 166:	64 c0       	rjmp	.+200    	; 0x230 <TIM_OutCompareModeInit+0xd0>
 168:	80 85       	ldd	r24, Z+8	; 0x08
 16a:	81 11       	cpse	r24, r1
 16c:	0b c0       	rjmp	.+22     	; 0x184 <TIM_OutCompareModeInit+0x24>
 16e:	83 b7       	in	r24, 0x33	; 51
 170:	87 78       	andi	r24, 0x87	; 135
 172:	83 bf       	out	0x33, r24	; 51
 174:	93 b7       	in	r25, 0x33	; 51
 176:	84 81       	ldd	r24, Z+4	; 0x04
 178:	89 2b       	or	r24, r25
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	83 bf       	out	0x33, r24	; 51
 17e:	85 81       	ldd	r24, Z+5	; 0x05
 180:	8c bf       	out	0x3c, r24	; 60
 182:	50 c0       	rjmp	.+160    	; 0x224 <TIM_OutCompareModeInit+0xc4>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	59 f4       	brne	.+22     	; 0x19e <TIM_OutCompareModeInit+0x3e>
 188:	85 b5       	in	r24, 0x25	; 37
 18a:	87 78       	andi	r24, 0x87	; 135
 18c:	85 bd       	out	0x25, r24	; 37
 18e:	95 b5       	in	r25, 0x25	; 37
 190:	84 81       	ldd	r24, Z+4	; 0x04
 192:	89 2b       	or	r24, r25
 194:	88 60       	ori	r24, 0x08	; 8
 196:	85 bd       	out	0x25, r24	; 37
 198:	85 81       	ldd	r24, Z+5	; 0x05
 19a:	83 bd       	out	0x23, r24	; 35
 19c:	43 c0       	rjmp	.+134    	; 0x224 <TIM_OutCompareModeInit+0xc4>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <TIM_OutCompareModeInit+0x44>
 1a2:	48 c0       	rjmp	.+144    	; 0x234 <TIM_OutCompareModeInit+0xd4>
 1a4:	1f bc       	out	0x2f, r1	; 47
 1a6:	86 81       	ldd	r24, Z+6	; 0x06
 1a8:	8f 3f       	cpi	r24, 0xFF	; 255
 1aa:	e9 f4       	brne	.+58     	; 0x1e6 <TIM_OutCompareModeInit+0x86>
 1ac:	84 81       	ldd	r24, Z+4	; 0x04
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	9c 01       	movw	r18, r24
 1b2:	00 24       	eor	r0, r0
 1b4:	36 95       	lsr	r19
 1b6:	27 95       	ror	r18
 1b8:	07 94       	ror	r0
 1ba:	36 95       	lsr	r19
 1bc:	27 95       	ror	r18
 1be:	07 94       	ror	r0
 1c0:	32 2f       	mov	r19, r18
 1c2:	20 2d       	mov	r18, r0
 1c4:	82 95       	swap	r24
 1c6:	92 95       	swap	r25
 1c8:	90 7f       	andi	r25, 0xF0	; 240
 1ca:	98 27       	eor	r25, r24
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	98 27       	eor	r25, r24
 1d0:	82 2b       	or	r24, r18
 1d2:	8f bd       	out	0x2f, r24	; 47
 1d4:	85 81       	ldd	r24, Z+5	; 0x05
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	9b bd       	out	0x2b, r25	; 43
 1da:	8a bd       	out	0x2a, r24	; 42
 1dc:	85 81       	ldd	r24, Z+5	; 0x05
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	99 bd       	out	0x29, r25	; 41
 1e2:	88 bd       	out	0x28, r24	; 40
 1e4:	1f c0       	rjmp	.+62     	; 0x224 <TIM_OutCompareModeInit+0xc4>
 1e6:	86 30       	cpi	r24, 0x06	; 6
 1e8:	71 f4       	brne	.+28     	; 0x206 <TIM_OutCompareModeInit+0xa6>
 1ea:	24 81       	ldd	r18, Z+4	; 0x04
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	a9 01       	movw	r20, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <TIM_OutCompareModeInit+0x96>
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <TIM_OutCompareModeInit+0x92>
 1fa:	4f bd       	out	0x2f, r20	; 47
 1fc:	85 81       	ldd	r24, Z+5	; 0x05
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	9b bd       	out	0x2b, r25	; 43
 202:	8a bd       	out	0x2a, r24	; 42
 204:	0f c0       	rjmp	.+30     	; 0x224 <TIM_OutCompareModeInit+0xc4>
 206:	84 30       	cpi	r24, 0x04	; 4
 208:	b9 f4       	brne	.+46     	; 0x238 <TIM_OutCompareModeInit+0xd8>
 20a:	24 81       	ldd	r18, Z+4	; 0x04
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	a9 01       	movw	r20, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <TIM_OutCompareModeInit+0xb6>
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <TIM_OutCompareModeInit+0xb2>
 21a:	4f bd       	out	0x2f, r20	; 47
 21c:	85 81       	ldd	r24, Z+5	; 0x05
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	99 bd       	out	0x29, r25	; 41
 222:	88 bd       	out	0x28, r24	; 40
 224:	99 b7       	in	r25, 0x39	; 57
 226:	81 85       	ldd	r24, Z+9	; 0x09
 228:	89 2b       	or	r24, r25
 22a:	89 bf       	out	0x39, r24	; 57
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	08 95       	ret
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	08 95       	ret
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	08 95       	ret
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	08 95       	ret

0000023c <TIM_DeInit>:
 23c:	81 11       	cpse	r24, r1
 23e:	08 c0       	rjmp	.+16     	; 0x250 <TIM_DeInit+0x14>
 240:	13 be       	out	0x33, r1	; 51
 242:	12 be       	out	0x32, r1	; 50
 244:	1c be       	out	0x3c, r1	; 60
 246:	89 b7       	in	r24, 0x39	; 57
 248:	8c 7f       	andi	r24, 0xFC	; 252
 24a:	89 bf       	out	0x39, r24	; 57
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	08 95       	ret
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	41 f4       	brne	.+16     	; 0x264 <TIM_DeInit+0x28>
 254:	15 bc       	out	0x25, r1	; 37
 256:	14 bc       	out	0x24, r1	; 36
 258:	13 bc       	out	0x23, r1	; 35
 25a:	89 b7       	in	r24, 0x39	; 57
 25c:	8f 73       	andi	r24, 0x3F	; 63
 25e:	89 bf       	out	0x39, r24	; 57
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	08 95       	ret
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	59 f4       	brne	.+22     	; 0x27e <TIM_DeInit+0x42>
 268:	1f bc       	out	0x2f, r1	; 47
 26a:	1e bc       	out	0x2e, r1	; 46
 26c:	1d bc       	out	0x2d, r1	; 45
 26e:	1c bc       	out	0x2c, r1	; 44
 270:	17 bc       	out	0x27, r1	; 39
 272:	16 bc       	out	0x26, r1	; 38
 274:	89 b7       	in	r24, 0x39	; 57
 276:	83 7c       	andi	r24, 0xC3	; 195
 278:	89 bf       	out	0x39, r24	; 57
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	08 95       	ret
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	08 95       	ret

00000282 <TIM_Start>:
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	29 f1       	breq	.+74     	; 0x2d0 <TIM_Start+0x4e>
 286:	fc 01       	movw	r30, r24
 288:	20 85       	ldd	r18, Z+8	; 0x08
 28a:	21 11       	cpse	r18, r1
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <TIM_Start+0x1e>
 28e:	23 b7       	in	r18, 0x33	; 51
 290:	28 7f       	andi	r18, 0xF8	; 248
 292:	23 bf       	out	0x33, r18	; 51
 294:	23 b7       	in	r18, 0x33	; 51
 296:	87 81       	ldd	r24, Z+7	; 0x07
 298:	82 2b       	or	r24, r18
 29a:	83 bf       	out	0x33, r24	; 51
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	08 95       	ret
 2a0:	22 30       	cpi	r18, 0x02	; 2
 2a2:	51 f4       	brne	.+20     	; 0x2b8 <TIM_Start+0x36>
 2a4:	25 b5       	in	r18, 0x25	; 37
 2a6:	28 7f       	andi	r18, 0xF8	; 248
 2a8:	25 bd       	out	0x25, r18	; 37
 2aa:	25 b5       	in	r18, 0x25	; 37
 2ac:	fc 01       	movw	r30, r24
 2ae:	87 81       	ldd	r24, Z+7	; 0x07
 2b0:	82 2b       	or	r24, r18
 2b2:	85 bd       	out	0x25, r24	; 37
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
 2b8:	21 30       	cpi	r18, 0x01	; 1
 2ba:	61 f4       	brne	.+24     	; 0x2d4 <TIM_Start+0x52>
 2bc:	2e b5       	in	r18, 0x2e	; 46
 2be:	28 7f       	andi	r18, 0xF8	; 248
 2c0:	2e bd       	out	0x2e, r18	; 46
 2c2:	2e b5       	in	r18, 0x2e	; 46
 2c4:	fc 01       	movw	r30, r24
 2c6:	87 81       	ldd	r24, Z+7	; 0x07
 2c8:	82 2b       	or	r24, r18
 2ca:	8e bd       	out	0x2e, r24	; 46
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	08 95       	ret

000002d8 <TIM_CallBack_FuctionSet>:
 * return : current timer value 
 */
  TIM_Status_t TIM_CallBack_FuctionSet(IT_BITs Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
 2d8:	61 15       	cp	r22, r1
 2da:	71 05       	cpc	r23, r1
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <TIM_CallBack_FuctionSet+0x8>
 2de:	45 c0       	rjmp	.+138    	; 0x36a <TIM_CallBack_FuctionSet+0x92>
	{
		return TIM_PARAM_ERROR ;
	}
	
	switch(Interrupt_Num)
 2e0:	88 30       	cpi	r24, 0x08	; 8
 2e2:	e9 f1       	breq	.+122    	; 0x35e <TIM_CallBack_FuctionSet+0x86>
 2e4:	38 f4       	brcc	.+14     	; 0x2f4 <TIM_CallBack_FuctionSet+0x1c>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	81 f0       	breq	.+32     	; 0x30a <TIM_CallBack_FuctionSet+0x32>
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	61 f1       	breq	.+88     	; 0x346 <TIM_CallBack_FuctionSet+0x6e>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	f1 f5       	brne	.+124    	; 0x36e <TIM_CallBack_FuctionSet+0x96>
 2f2:	11 c0       	rjmp	.+34     	; 0x316 <TIM_CallBack_FuctionSet+0x3e>
 2f4:	80 32       	cpi	r24, 0x20	; 32
 2f6:	09 f1       	breq	.+66     	; 0x33a <TIM_CallBack_FuctionSet+0x62>
 2f8:	18 f4       	brcc	.+6      	; 0x300 <TIM_CallBack_FuctionSet+0x28>
 2fa:	80 31       	cpi	r24, 0x10	; 16
 2fc:	51 f1       	breq	.+84     	; 0x352 <TIM_CallBack_FuctionSet+0x7a>
 2fe:	37 c0       	rjmp	.+110    	; 0x36e <TIM_CallBack_FuctionSet+0x96>
 300:	80 34       	cpi	r24, 0x40	; 64
 302:	a9 f0       	breq	.+42     	; 0x32e <TIM_CallBack_FuctionSet+0x56>
 304:	80 38       	cpi	r24, 0x80	; 128
 306:	69 f0       	breq	.+26     	; 0x322 <TIM_CallBack_FuctionSet+0x4a>
 308:	32 c0       	rjmp	.+100    	; 0x36e <TIM_CallBack_FuctionSet+0x96>
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
 30a:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <COMPMatch0_Fun+0x1>
 30e:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <COMPMatch0_Fun>
	}
	
	


	return TIM_OK ; 
 312:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
 314:	08 95       	ret
		case  TIM_0_IT_OVER :
				OverFlow0_Fun = callbackfunction ;
 316:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <OverFlow0_Fun+0x1>
 31a:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <OverFlow0_Fun>
	}
	
	


	return TIM_OK ; 
 31e:	80 e0       	ldi	r24, 0x00	; 0
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
		case  TIM_0_IT_OVER :
				OverFlow0_Fun = callbackfunction ;
		break; 
 320:	08 95       	ret
		case TIM_2_IT_COMP :
				COMPMatch2_Fun = callbackfunction ;
 322:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <COMPMatch2_Fun+0x1>
 326:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <COMPMatch2_Fun>
	}
	
	


	return TIM_OK ; 
 32a:	80 e0       	ldi	r24, 0x00	; 0
				OverFlow0_Fun = callbackfunction ;
		break; 
		case TIM_2_IT_COMP :
				COMPMatch2_Fun = callbackfunction ;
		
		break; 
 32c:	08 95       	ret
		case TIM_2_IT_OVER :
				OverFlow2_Fun = callbackfunction ;
 32e:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <OverFlow2_Fun+0x1>
 332:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <OverFlow2_Fun>
	}
	
	


	return TIM_OK ; 
 336:	80 e0       	ldi	r24, 0x00	; 0
		
		break; 
		case TIM_2_IT_OVER :
				OverFlow2_Fun = callbackfunction ;
		
		break ;
 338:	08 95       	ret
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
 33a:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <InputCapture_callbackfunction+0x1>
 33e:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <InputCapture_callbackfunction>
	}
	
	


	return TIM_OK ; 
 342:	80 e0       	ldi	r24, 0x00	; 0
				OverFlow2_Fun = callbackfunction ;
		
		break ;
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
		break; 
 344:	08 95       	ret
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
 346:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <__data_end+0x1>
 34a:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <__data_end>
	}
	
	


	return TIM_OK ; 
 34e:	80 e0       	ldi	r24, 0x00	; 0
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
		break; 
 350:	08 95       	ret
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
 352:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <CompareA_callbackfunction+0x1>
 356:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <CompareA_callbackfunction>
	}
	
	


	return TIM_OK ; 
 35a:	80 e0       	ldi	r24, 0x00	; 0
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
		break; 
 35c:	08 95       	ret
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
 35e:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <CompareB_callbackfunction+0x1>
 362:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <CompareB_callbackfunction>
	}
	
	


	return TIM_OK ; 
 366:	80 e0       	ldi	r24, 0x00	; 0
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
 368:	08 95       	ret
  TIM_Status_t TIM_CallBack_FuctionSet(IT_BITs Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
	{
		return TIM_PARAM_ERROR ;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	08 95       	ret
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
		default:
		
			return TIM_CONFIG_ERROR ;
 36e:	82 e0       	ldi	r24, 0x02	; 2
	


	return TIM_OK ; 
	
}
 370:	08 95       	ret

00000372 <__vector_6>:




void __vector_6(void )	 // timer1 input capture interrupt number
{
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
	InputCapture_callbackfunction();
 394:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <InputCapture_callbackfunction>
 398:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <InputCapture_callbackfunction+0x1>
 39c:	09 95       	icall
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <__vector_7>:

void __vector_7(void )		// timer1 CompareA
{
 3c0:	1f 92       	push	r1
 3c2:	0f 92       	push	r0
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	0f 92       	push	r0
 3c8:	11 24       	eor	r1, r1
 3ca:	2f 93       	push	r18
 3cc:	3f 93       	push	r19
 3ce:	4f 93       	push	r20
 3d0:	5f 93       	push	r21
 3d2:	6f 93       	push	r22
 3d4:	7f 93       	push	r23
 3d6:	8f 93       	push	r24
 3d8:	9f 93       	push	r25
 3da:	af 93       	push	r26
 3dc:	bf 93       	push	r27
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
	CompareA_callbackfunction();
 3e2:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <CompareA_callbackfunction>
 3e6:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <CompareA_callbackfunction+0x1>
 3ea:	09 95       	icall
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	7f 91       	pop	r23
 3fa:	6f 91       	pop	r22
 3fc:	5f 91       	pop	r21
 3fe:	4f 91       	pop	r20
 400:	3f 91       	pop	r19
 402:	2f 91       	pop	r18
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <__vector_8>:
void __vector_8(void )	 // timer1 compareB interrupt number
{
	CompareB_callbackfunction();
 40e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <CompareB_callbackfunction>
 412:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <CompareB_callbackfunction+0x1>
 416:	09 95       	icall
 418:	08 95       	ret

0000041a <__vector_9>:
}

void __vector_9(void )		// timer1 overflow
{
	Overflow_callbackfunction() ;
 41a:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 41e:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 422:	09 95       	icall
 424:	08 95       	ret

00000426 <__vector_10>:



/* all vectors specific for timer2 and timer0 */
void __vector_10(void)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	0f 92       	push	r0
 42e:	11 24       	eor	r1, r1
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	COMPMatch0_Fun();
 448:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <COMPMatch0_Fun>
 44c:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <COMPMatch0_Fun+0x1>
 450:	09 95       	icall
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <__vector_11>:
void __vector_11(void)
{
 474:	1f 92       	push	r1
 476:	0f 92       	push	r0
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	0f 92       	push	r0
 47c:	11 24       	eor	r1, r1
 47e:	2f 93       	push	r18
 480:	3f 93       	push	r19
 482:	4f 93       	push	r20
 484:	5f 93       	push	r21
 486:	6f 93       	push	r22
 488:	7f 93       	push	r23
 48a:	8f 93       	push	r24
 48c:	9f 93       	push	r25
 48e:	af 93       	push	r26
 490:	bf 93       	push	r27
 492:	ef 93       	push	r30
 494:	ff 93       	push	r31
	OverFlow0_Fun();
 496:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <OverFlow0_Fun>
 49a:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <OverFlow0_Fun+0x1>
 49e:	09 95       	icall
}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	7f 91       	pop	r23
 4ae:	6f 91       	pop	r22
 4b0:	5f 91       	pop	r21
 4b2:	4f 91       	pop	r20
 4b4:	3f 91       	pop	r19
 4b6:	2f 91       	pop	r18
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <__vector_4>:


void __vector_4(void)
{
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31
	COMPMatch2_Fun();
 4e4:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <COMPMatch2_Fun>
 4e8:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <COMPMatch2_Fun+0x1>
 4ec:	09 95       	icall
}
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	7f 91       	pop	r23
 4fc:	6f 91       	pop	r22
 4fe:	5f 91       	pop	r21
 500:	4f 91       	pop	r20
 502:	3f 91       	pop	r19
 504:	2f 91       	pop	r18
 506:	0f 90       	pop	r0
 508:	0f be       	out	0x3f, r0	; 63
 50a:	0f 90       	pop	r0
 50c:	1f 90       	pop	r1
 50e:	18 95       	reti

00000510 <__vector_5>:
void __vector_5(void)
{
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	ef 93       	push	r30
 530:	ff 93       	push	r31
	OverFlow2_Fun();
 532:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <OverFlow2_Fun>
 536:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <OverFlow2_Fun+0x1>
 53a:	09 95       	icall
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <Delay_CallBack>:
/* local function used as Callback To Toggle Selected Pin with Desired GPIO */


void PWM_Toggle_Timer0(void)
{	
	HAL_GPIO_TOGGLE_PIN(PWMTim0_PORT , PIN_CONFIG.pin);
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <u8_NumOFms>
 566:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <u8_NumOFms+0x1>
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <u8_NumOFms+0x1>
 570:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <u8_NumOFms>
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	c9 f4       	brne	.+50     	; 0x5aa <Delay_CallBack+0x4c>
 578:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <IN_Use>
 57c:	cd e7       	ldi	r28, 0x7D	; 125
 57e:	d0 e0       	ldi	r29, 0x00	; 0
 580:	e8 81       	ld	r30, Y
 582:	f9 81       	ldd	r31, Y+1	; 0x01
 584:	09 95       	icall
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	9b 81       	ldd	r25, Y+3	; 0x03
 58a:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <u8_NumOFms+0x1>
 58e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <u8_NumOFms>
 592:	8c 81       	ldd	r24, Y+4	; 0x04
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	49 f4       	brne	.+18     	; 0x5aa <Delay_CallBack+0x4c>
 598:	99 b7       	in	r25, 0x39	; 57
 59a:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <Tim_Delay_Handler>
 59e:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <Tim_Delay_Handler+0x1>
 5a2:	81 85       	ldd	r24, Z+9	; 0x09
 5a4:	80 95       	com	r24
 5a6:	89 23       	and	r24, r25
 5a8:	89 bf       	out	0x39, r24	; 57
 5aa:	88 b7       	in	r24, 0x38	; 56
 5ac:	80 68       	ori	r24, 0x80	; 128
 5ae:	88 bf       	out	0x38, r24	; 56
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <Utilites_DelayMs_IT>:
static  TIMInit_t *  Tim_Delay_Handler ;
static uint8_t IN_Use = 0 ;


Utilies_Status_t Utilites_DelayMs_IT(TIMInit_t *  Tim_Handler, uint16_t MsDelay , DalayType_t Dalay_type , TIMCaLL_BackFun callbackfunction)
{		
 5b6:	ef 92       	push	r14
 5b8:	ff 92       	push	r15
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
	
		if(IN_Use == 1)
 5c0:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <IN_Use>
 5c4:	51 30       	cpi	r21, 0x01	; 1
 5c6:	09 f4       	brne	.+2      	; 0x5ca <Utilites_DelayMs_IT+0x14>
 5c8:	40 c0       	rjmp	.+128    	; 0x64a <Utilites_DelayMs_IT+0x94>
		{
			return UTIL_PARAM_ERROR ; 
		}
		
		if((Tim_Handler == NULL) ||(callbackfunction == NULL))
 5ca:	00 97       	sbiw	r24, 0x00	; 0
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <Utilites_DelayMs_IT+0x1a>
 5ce:	3f c0       	rjmp	.+126    	; 0x64e <Utilites_DelayMs_IT+0x98>
 5d0:	21 15       	cp	r18, r1
 5d2:	31 05       	cpc	r19, r1
 5d4:	f1 f1       	breq	.+124    	; 0x652 <Utilites_DelayMs_IT+0x9c>
 5d6:	e9 01       	movw	r28, r18
 5d8:	14 2f       	mov	r17, r20
 5da:	7b 01       	movw	r14, r22
 5dc:	fc 01       	movw	r30, r24
		{
			return UTIL_PARAM_ERROR ;
		}
		
		Tim_Delay_Handler = Tim_Handler ;
 5de:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <Tim_Delay_Handler+0x1>
 5e2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Tim_Delay_Handler>
		Tim_Delay_Handler->Instance = TIM2 ;
 5e6:	22 e0       	ldi	r18, 0x02	; 2
 5e8:	20 87       	std	Z+8, r18	; 0x08
		if(TIM_DeInit(TIM2)	!= TIM_OK)
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	0e 94 1e 01 	call	0x23c	; 0x23c <TIM_DeInit>
 5f0:	81 11       	cpse	r24, r1
 5f2:	31 c0       	rjmp	.+98     	; 0x656 <Utilites_DelayMs_IT+0xa0>
			return UTIL_TIM_ERROR ;
		}else
		{
			;
		}
		if(TIM_OutCompareModeInit(Tim_Delay_Handler)	!= TIM_OK)
 5f4:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Tim_Delay_Handler>
 5f8:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <Tim_Delay_Handler+0x1>
 5fc:	0e 94 b0 00 	call	0x160	; 0x160 <TIM_OutCompareModeInit>
 600:	81 11       	cpse	r24, r1
 602:	2b c0       	rjmp	.+86     	; 0x65a <Utilites_DelayMs_IT+0xa4>
		}else
		{
			;
		}
		
		if(TIM_CallBack_FuctionSet(Tim_Delay_Handler->TIM_Interrupt ,Delay_CallBack )!= TIM_OK)
 604:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <Tim_Delay_Handler>
 608:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <Tim_Delay_Handler+0x1>
 60c:	6f ea       	ldi	r22, 0xAF	; 175
 60e:	72 e0       	ldi	r23, 0x02	; 2
 610:	81 85       	ldd	r24, Z+9	; 0x09
 612:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <TIM_CallBack_FuctionSet>
 616:	81 11       	cpse	r24, r1
 618:	22 c0       	rjmp	.+68     	; 0x65e <Utilites_DelayMs_IT+0xa8>
		}else
		{
			;
		}
		/* set shared variable */
		str_Delay.Delaycallbackfunction= callbackfunction ;
 61a:	ed e7       	ldi	r30, 0x7D	; 125
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	d1 83       	std	Z+1, r29	; 0x01
 620:	c0 83       	st	Z, r28
		str_Delay.MsDelay = MsDelay;
 622:	f3 82       	std	Z+3, r15	; 0x03
 624:	e2 82       	std	Z+2, r14	; 0x02
		u8_NumOFms = MsDelay;
 626:	f0 92 83 00 	sts	0x0083, r15	; 0x800083 <u8_NumOFms+0x1>
 62a:	e0 92 82 00 	sts	0x0082, r14	; 0x800082 <u8_NumOFms>
		str_Delay.DelayAttr = Dalay_type;
 62e:	14 83       	std	Z+4, r17	; 0x04
		if(TIM_Start(Tim_Delay_Handler) != TIM_OK)
 630:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Tim_Delay_Handler>
 634:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <Tim_Delay_Handler+0x1>
 638:	0e 94 41 01 	call	0x282	; 0x282 <TIM_Start>
 63c:	81 11       	cpse	r24, r1
 63e:	11 c0       	rjmp	.+34     	; 0x662 <Utilites_DelayMs_IT+0xac>
			return  UTIL_TIM_ERROR ; 
		}else
		{
			;
		}
		IN_Use =1 ;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <IN_Use>
		return UTIL_OK ; 
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0d c0       	rjmp	.+26     	; 0x664 <Utilites_DelayMs_IT+0xae>
Utilies_Status_t Utilites_DelayMs_IT(TIMInit_t *  Tim_Handler, uint16_t MsDelay , DalayType_t Dalay_type , TIMCaLL_BackFun callbackfunction)
{		
	
		if(IN_Use == 1)
		{
			return UTIL_PARAM_ERROR ; 
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0b c0       	rjmp	.+22     	; 0x664 <Utilites_DelayMs_IT+0xae>
		}
		
		if((Tim_Handler == NULL) ||(callbackfunction == NULL))
		{
			return UTIL_PARAM_ERROR ;
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	09 c0       	rjmp	.+18     	; 0x664 <Utilites_DelayMs_IT+0xae>
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	07 c0       	rjmp	.+14     	; 0x664 <Utilites_DelayMs_IT+0xae>
		
		Tim_Delay_Handler = Tim_Handler ;
		Tim_Delay_Handler->Instance = TIM2 ;
		if(TIM_DeInit(TIM2)	!= TIM_OK)
		{
			return UTIL_TIM_ERROR ;
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	05 c0       	rjmp	.+10     	; 0x664 <Utilites_DelayMs_IT+0xae>
		{
			;
		}
		if(TIM_OutCompareModeInit(Tim_Delay_Handler)	!= TIM_OK)
		{
			return UTIL_TIM_ERROR ;
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	03 c0       	rjmp	.+6      	; 0x664 <Utilites_DelayMs_IT+0xae>
			;
		}
		
		if(TIM_CallBack_FuctionSet(Tim_Delay_Handler->TIM_Interrupt ,Delay_CallBack )!= TIM_OK)
		{
			return UTIL_TIM_ERROR ;
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	01 c0       	rjmp	.+2      	; 0x664 <Utilites_DelayMs_IT+0xae>
		str_Delay.MsDelay = MsDelay;
		u8_NumOFms = MsDelay;
		str_Delay.DelayAttr = Dalay_type;
		if(TIM_Start(Tim_Delay_Handler) != TIM_OK)
		{
			return  UTIL_TIM_ERROR ; 
 662:	82 e0       	ldi	r24, 0x02	; 2
			;
		}
		IN_Use =1 ;
		return UTIL_OK ; 

}
 664:	df 91       	pop	r29
 666:	cf 91       	pop	r28
 668:	1f 91       	pop	r17
 66a:	ff 90       	pop	r15
 66c:	ef 90       	pop	r14
 66e:	08 95       	ret

00000670 <_exit>:
 670:	f8 94       	cli

00000672 <__stop_program>:
 672:	ff cf       	rjmp	.-2      	; 0x672 <__stop_program>
