
ADC_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00000f14  00000fa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  008000b2  008000b2  00000ffa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c12  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113d  00000000  00000000  00003f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001936  00000000  00000000  00005097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008f0  00000000  00000000  000069d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011f7  00000000  00000000  000072c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d6c  00000000  00000000  000084b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000a223  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 05 03 	jmp	0x60a	; 0x60a <__vector_1>
   8:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_2>
   c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_3>
  10:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_4>
  14:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_5>
  18:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_6>
  1c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_7>
  20:	0c 94 97 04 	jmp	0x92e	; 0x92e <__vector_8>
  24:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__vector_9>
  28:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_10>
  2c:	0c 94 ca 04 	jmp	0x994	; 0x994 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3b       	cpi	r26, 0xB2	; 178
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 eb       	ldi	r26, 0xB2	; 178
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3d       	cpi	r26, 0xD4	; 212
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c7 02 	call	0x58e	; 0x58e <main>
  8a:	0c 94 88 07 	jmp	0xf10	; 0xf10 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KeyPad_Initialization>:
 * brief  : this function used to initialize keypad
 * param. : KeyPadInit pointer to the handler of keypad
 * return : void 
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	8c 01       	movw	r16, r24
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__data_end+0x1>
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
  a4:	f1 2c       	mov	r15, r1
  a6:	19 c0       	rjmp	.+50     	; 0xda <KeyPad_Initialization+0x48>
	{
		KeyPad_gpio.pin = KeyPad->ColumnPins[iter].Pin ;
  a8:	cf 2d       	mov	r28, r15
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	ce 01       	movw	r24, r28
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	c8 0f       	add	r28, r24
  b4:	d9 1f       	adc	r29, r25
  b6:	c0 0f       	add	r28, r16
  b8:	d1 1f       	adc	r29, r17
  ba:	8b 85       	ldd	r24, Y+11	; 0x0b
  bc:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
		HAL_GPIO_INIT_PIN(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
  c0:	62 eb       	ldi	r22, 0xB2	; 178
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	89 85       	ldd	r24, Y+9	; 0x09
  c6:	9a 85       	ldd	r25, Y+10	; 0x0a
  c8:	0e 94 21 04 	call	0x842	; 0x842 <HAL_GPIO_INIT_PIN>
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	6b 85       	ldd	r22, Y+11	; 0x0b
  d0:	89 85       	ldd	r24, Y+9	; 0x09
  d2:	9a 85       	ldd	r25, Y+10	; 0x0a
  d4:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
  d8:	f3 94       	inc	r15
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	8f 15       	cp	r24, r15
  de:	20 f7       	brcc	.-56     	; 0xa8 <KeyPad_Initialization+0x16>
		HAL_GPIO_INIT_PIN(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
  e0:	e2 eb       	ldi	r30, 0xB2	; 178
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	11 82       	std	Z+1, r1	; 0x01
	KeyPad_gpio.pull = WRIGHT_SECOND ;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	82 83       	std	Z+2, r24	; 0x02
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	13 c0       	rjmp	.+38     	; 0x114 <KeyPad_Initialization+0x82>
	{
		KeyPad_gpio.pin = KeyPad->RowPins[iter].Pin ;
  ee:	ec 2f       	mov	r30, r28
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	cf 01       	movw	r24, r30
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	e8 0f       	add	r30, r24
  fa:	f9 1f       	adc	r31, r25
  fc:	e0 0f       	add	r30, r16
  fe:	f1 1f       	adc	r31, r17
 100:	82 81       	ldd	r24, Z+2	; 0x02
 102:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__data_end>
		HAL_GPIO_INIT_PIN(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
 106:	62 eb       	ldi	r22, 0xB2	; 178
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	91 81       	ldd	r25, Z+1	; 0x01
 10e:	0e 94 21 04 	call	0x842	; 0x842 <HAL_GPIO_INIT_PIN>
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
	KeyPad_gpio.pull = WRIGHT_SECOND ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
 112:	cf 5f       	subi	r28, 0xFF	; 255
 114:	c3 30       	cpi	r28, 0x03	; 3
 116:	58 f3       	brcs	.-42     	; 0xee <KeyPad_Initialization+0x5c>
		HAL_GPIO_INIT_PIN(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
	}	
	


}/* END_FUN KeyPad_Initialization()*/
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	08 95       	ret

00000124 <KeyPad_GetPressedKey>:
 * brief  : this function used to return the pressed key 
 * param. : void
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	8c 01       	movw	r16, r24
	char Key =' ';
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
 136:	c1 2c       	mov	r12, r1
 138:	4b c0       	rjmp	.+150    	; 0x1d0 <KeyPad_GetPressedKey+0xac>
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
 13a:	cc 2d       	mov	r28, r12
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	fe 01       	movw	r30, r28
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	ec 0f       	add	r30, r28
 146:	fd 1f       	adc	r31, r29
 148:	e0 0f       	add	r30, r16
 14a:	f1 1f       	adc	r31, r17
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	63 85       	ldd	r22, Z+11	; 0x0b
 150:	81 85       	ldd	r24, Z+9	; 0x09
 152:	92 85       	ldd	r25, Z+10	; 0x0a
 154:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
 158:	d1 2c       	mov	r13, r1
 15a:	29 c0       	rjmp	.+82     	; 0x1ae <KeyPad_GetPressedKey+0x8a>
		{
			
			if ( HAL_GPIO_READPIN(KeyPad->RowPins[iterROW].Port ,KeyPad->RowPins[iterROW].Pin ) == WRIGHT_FIRST )
 15c:	ed 2c       	mov	r14, r13
 15e:	f1 2c       	mov	r15, r1
 160:	f7 01       	movw	r30, r14
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	ee 0d       	add	r30, r14
 168:	ff 1d       	adc	r31, r15
 16a:	e0 0f       	add	r30, r16
 16c:	f1 1f       	adc	r31, r17
 16e:	62 81       	ldd	r22, Z+2	; 0x02
 170:	80 81       	ld	r24, Z
 172:	91 81       	ldd	r25, Z+1	; 0x01
 174:	0e 94 34 04 	call	0x868	; 0x868 <HAL_GPIO_READPIN>
 178:	81 11       	cpse	r24, r1
 17a:	18 c0       	rjmp	.+48     	; 0x1ac <KeyPad_GetPressedKey+0x88>
			{
				HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
 17c:	fe 01       	movw	r30, r28
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	e0 0f       	add	r30, r16
 188:	f1 1f       	adc	r31, r17
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	63 85       	ldd	r22, Z+11	; 0x0b
 18e:	81 85       	ldd	r24, Z+9	; 0x09
 190:	92 85       	ldd	r25, Z+10	; 0x0a
 192:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
				return arr_KeyPad_char[iterROW][iterCOL] ;
 196:	c7 01       	movw	r24, r14
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	8e 0d       	add	r24, r14
 19e:	9f 1d       	adc	r25, r15
 1a0:	8e 58       	subi	r24, 0x8E	; 142
 1a2:	9f 4f       	sbci	r25, 0xFF	; 255
 1a4:	c8 0f       	add	r28, r24
 1a6:	d9 1f       	adc	r29, r25
 1a8:	88 81       	ld	r24, Y
 1aa:	17 c0       	rjmp	.+46     	; 0x1da <KeyPad_GetPressedKey+0xb6>
	char Key =' ';
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
 1ac:	d3 94       	inc	r13
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	8d 15       	cp	r24, r13
 1b2:	a0 f6       	brcc	.-88     	; 0x15c <KeyPad_GetPressedKey+0x38>
				return arr_KeyPad_char[iterROW][iterCOL] ;
			}else{
				;
			}
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
 1b4:	ce 01       	movw	r24, r28
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	c8 0f       	add	r28, r24
 1bc:	d9 1f       	adc	r29, r25
 1be:	c0 0f       	add	r28, r16
 1c0:	d1 1f       	adc	r29, r17
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	6b 85       	ldd	r22, Y+11	; 0x0b
 1c6:	89 85       	ldd	r24, Y+9	; 0x09
 1c8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ca:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
	char Key =' ';
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
 1ce:	c3 94       	inc	r12
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	8c 15       	cp	r24, r12
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <KeyPad_GetPressedKey+0xb4>
 1d6:	b1 cf       	rjmp	.-158    	; 0x13a <KeyPad_GetPressedKey+0x16>
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;

	}
	
return Key ;
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	08 95       	ret

000001ec <LCD_Triger_Enable>:
 * return : void 
 */


static void LCD_Triger_Enable(void)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
	
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Pin,GPIO_PIN_SET);  // set enable pin
 1f0:	cb e7       	ldi	r28, 0x7B	; 123
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	68 85       	ldd	r22, Y+8	; 0x08
 1f8:	8e 81       	ldd	r24, Y+6	; 0x06
 1fa:	9f 81       	ldd	r25, Y+7	; 0x07
 1fc:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <LCD_Triger_Enable+0x16>
 206:	00 00       	nop
	_delay_us(1);
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	68 85       	ldd	r22, Y+8	; 0x08
 20c:	8e 81       	ldd	r24, Y+6	; 0x06
 20e:	9f 81       	ldd	r25, Y+7	; 0x07
 210:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	9f e1       	ldi	r25, 0x1F	; 31
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Triger_Enable+0x2c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_Triger_Enable+0x32>
 21e:	00 00       	nop
	_delay_ms(2);	
	
} /* END_FUN LCD_Triger_Enable()*/
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <LCD_Send_4BitData>:
 * brief  : this function used to send Data to LCD in 4 bit form 
 * param. : data the specific byte that you want to send to LCD 
 * return : void 
 */
static void LCD_Send_4BitData(uint8_t data)
{
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
	
		for(int i =3 ; i < 7 ;i++)																			
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	23 c0       	rjmp	.+70     	; 0x27a <LCD_Send_4BitData+0x54>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
 234:	8c 01       	movw	r16, r24
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	00 2e       	mov	r0, r16
 240:	02 c0       	rjmp	.+4      	; 0x246 <LCD_Send_4BitData+0x20>
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <LCD_Send_4BitData+0x1c>
 24a:	2c 2f       	mov	r18, r28
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	42 23       	and	r20, r18
 250:	53 23       	and	r21, r19
 252:	00 2e       	mov	r0, r16
 254:	02 c0       	rjmp	.+4      	; 0x25a <LCD_Send_4BitData+0x34>
 256:	55 95       	asr	r21
 258:	47 95       	ror	r20
 25a:	0a 94       	dec	r0
 25c:	e2 f7       	brpl	.-8      	; 0x256 <LCD_Send_4BitData+0x30>
 25e:	fc 01       	movw	r30, r24
 260:	ee 0f       	add	r30, r30
 262:	ff 1f       	adc	r31, r31
 264:	8e 0f       	add	r24, r30
 266:	9f 1f       	adc	r25, r31
 268:	fc 01       	movw	r30, r24
 26a:	e5 58       	subi	r30, 0x85	; 133
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	62 81       	ldd	r22, Z+2	; 0x02
 270:	80 81       	ld	r24, Z
 272:	91 81       	ldd	r25, Z+1	; 0x01
 274:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
 * return : void 
 */
static void LCD_Send_4BitData(uint8_t data)
{
	
		for(int i =3 ; i < 7 ;i++)																			
 278:	c8 01       	movw	r24, r16
 27a:	87 30       	cpi	r24, 0x07	; 7
 27c:	91 05       	cpc	r25, r1
 27e:	d4 f2       	brlt	.-76     	; 0x234 <LCD_Send_4BitData+0xe>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
		LCD_Triger_Enable();
 280:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_Triger_Enable>
		for(int i =3 ; i < 7 ;i++)
 284:	03 e0       	ldi	r16, 0x03	; 3
 286:	10 e0       	ldi	r17, 0x00	; 0
 288:	21 c0       	rjmp	.+66     	; 0x2cc <LCD_Send_4BitData+0xa6>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i-3))&(data))>>(i-3));	/* set the high nibble */
 28a:	c8 01       	movw	r24, r16
 28c:	03 97       	sbiw	r24, 0x03	; 3
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	50 e0       	ldi	r21, 0x00	; 0
 292:	08 2e       	mov	r0, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <LCD_Send_4BitData+0x74>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <LCD_Send_4BitData+0x70>
 29e:	2c 2f       	mov	r18, r28
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	42 23       	and	r20, r18
 2a4:	53 23       	and	r21, r19
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <LCD_Send_4BitData+0x86>
 2a8:	55 95       	asr	r21
 2aa:	47 95       	ror	r20
 2ac:	8a 95       	dec	r24
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <LCD_Send_4BitData+0x82>
 2b0:	f8 01       	movw	r30, r16
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	e0 0f       	add	r30, r16
 2b8:	f1 1f       	adc	r31, r17
 2ba:	e5 58       	subi	r30, 0x85	; 133
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	62 81       	ldd	r22, Z+2	; 0x02
 2c0:	80 81       	ld	r24, Z
 2c2:	91 81       	ldd	r25, Z+1	; 0x01
 2c4:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
{
	
		for(int i =3 ; i < 7 ;i++)																			
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
		LCD_Triger_Enable();
		for(int i =3 ; i < 7 ;i++)
 2c8:	0f 5f       	subi	r16, 0xFF	; 255
 2ca:	1f 4f       	sbci	r17, 0xFF	; 255
 2cc:	07 30       	cpi	r16, 0x07	; 7
 2ce:	11 05       	cpc	r17, r1
 2d0:	e4 f2       	brlt	.-72     	; 0x28a <LCD_Send_4BitData+0x64>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i-3))&(data))>>(i-3));	/* set the high nibble */
		LCD_Triger_Enable();
 2d2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <LCD_Triger_Enable>


} /* END_FUN LCD_Send_4BitData()*/
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <LCD_Send_Character_CurrLoc>:
 * brief  : this function used to send an character to LCD with the current location 
 * param. : Character the specific character to send to LCD 
 * return : void 
 */ 
LCD_Status_t LCD_Send_Character_CurrLoc(uint8_t character)
{
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	18 2f       	mov	r17, r24
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_SET);  // set enable pin
 2e6:	cb e7       	ldi	r28, 0x7B	; 123
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	6a 81       	ldd	r22, Y+2	; 0x02
 2ee:	88 81       	ld	r24, Y
 2f0:	99 81       	ldd	r25, Y+1	; 0x01
 2f2:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	6d 81       	ldd	r22, Y+5	; 0x05
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	9c 81       	ldd	r25, Y+4	; 0x04
 2fe:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>

	LCD_Send_4BitData(character);
 302:	81 2f       	mov	r24, r17
 304:	0e 94 13 01 	call	0x226	; 0x226 <LCD_Send_4BitData>
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Character_CurrLoc()*/
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	08 95       	ret

00000312 <LCD_Send_Command>:
 * brief  : this function used to send command to LCD  
 * param. : command the specific command to send to LCD chose one of @ LCD_COMMANED_ 
 * return : void 
 */
LCD_Status_t LCD_Send_Command(uint8_t command)
{
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	18 2f       	mov	r17, r24
	
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_RESET);  // set enable pin		
 31a:	cb e7       	ldi	r28, 0x7B	; 123
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	6a 81       	ldd	r22, Y+2	; 0x02
 322:	88 81       	ld	r24, Y
 324:	99 81       	ldd	r25, Y+1	; 0x01
 326:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	6d 81       	ldd	r22, Y+5	; 0x05
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	9c 81       	ldd	r25, Y+4	; 0x04
 332:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
	LCD_Send_4BitData(command);
 336:	81 2f       	mov	r24, r17
 338:	0e 94 13 01 	call	0x226	; 0x226 <LCD_Send_4BitData>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Command()*/
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	08 95       	ret

00000346 <LCD_Send_String_CurrLoc>:
 * brief  : this function used to send an string to LCD with the current location 
 * param. : Character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_String_CurrLoc(uint8_t *string)
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
	while (*string != 0)
 34c:	03 c0       	rjmp	.+6      	; 0x354 <LCD_Send_String_CurrLoc+0xe>
	{
		LCD_Send_Character_CurrLoc(*string++);
 34e:	21 96       	adiw	r28, 0x01	; 1
 350:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Send_Character_CurrLoc>
 * param. : Character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_String_CurrLoc(uint8_t *string)
{
	while (*string != 0)
 354:	88 81       	ld	r24, Y
 356:	81 11       	cpse	r24, r1
 358:	fa cf       	rjmp	.-12     	; 0x34e <LCD_Send_String_CurrLoc+0x8>

	}
	
	
	return LCD_OK ;
} /* END_FUN LCD_Send_String_CurrLoc()*/
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <LCD_Goto_Location>:
 * param. :  x  is specify the new X axises
 * return : void 
 */
LCD_Status_t LCD_Goto_Location(uint8_t y , uint8_t x)
{
	LCD_Send_Command(column_position[y-1]+(x-1));
 360:	e8 2f       	mov	r30, r24
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	e9 56       	subi	r30, 0x69	; 105
 366:	ff 4f       	sbci	r31, 0xFF	; 255
 368:	80 81       	ld	r24, Z
 36a:	86 0f       	add	r24, r22
 36c:	81 50       	subi	r24, 0x01	; 1
 36e:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Send_Command>


	return LCD_OK ;	
} /* END_FUN LCD_Goto_Location()*/
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	08 95       	ret

00000376 <LCD_Send_Character_WithLoc>:
 * param. :  x  is specify the new X axises
 * param. : character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_Character_WithLoc(uint8_t y,uint8_t x,uint8_t character)
{
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	14 2f       	mov	r17, r20
	
	LCD_Goto_Location(y,x);
 37e:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_Goto_Location>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_SET);  // set enable pin
 382:	cb e7       	ldi	r28, 0x7B	; 123
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	6a 81       	ldd	r22, Y+2	; 0x02
 38a:	88 81       	ld	r24, Y
 38c:	99 81       	ldd	r25, Y+1	; 0x01
 38e:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	6d 81       	ldd	r22, Y+5	; 0x05
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	9c 81       	ldd	r25, Y+4	; 0x04
 39a:	0e 94 3c 04 	call	0x878	; 0x878 <HAL_GPIO_WRITEPIN>
	LCD_Send_4BitData(character);
 39e:	81 2f       	mov	r24, r17
 3a0:	0e 94 13 01 	call	0x226	; 0x226 <LCD_Send_4BitData>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Character_WithLoc()*/
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	08 95       	ret

000003ae <LCD_Initializaion>:
/*
 * brief  : this function used to initialize (GPIO &LCD) 
 * return : void 
 */ 
LCD_Status_t LCD_Initializaion(void)
{
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <LCD_Initializaion+0xa>
 3b8:	1f 92       	push	r1
 3ba:	cd b7       	in	r28, 0x3d	; 61
 3bc:	de b7       	in	r29, 0x3e	; 62
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	89 ef       	ldi	r24, 0xF9	; 249
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <LCD_Initializaion+0x16>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <LCD_Initializaion+0x20>
 3ce:	00 00       	nop
	GPIO_InitTypeDef LCD_GPIO_Handler ;
	
	
	_delay_ms(20);
	/* Set portB pin 1,2,3 as output */
	LCD_GPIO_Handler.mode = GPIO_MODE_OUTPUT ;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	8a 83       	std	Y+2, r24	; 0x02
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
 3d4:	1b 82       	std	Y+3, r1	; 0x03
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
 3d6:	00 e0       	ldi	r16, 0x00	; 0
 3d8:	10 e0       	ldi	r17, 0x00	; 0
 3da:	12 c0       	rjmp	.+36     	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		LCD_GPIO_Handler.pin = LcdBitSelect.LcdBits[i].Pin ;
 3dc:	f8 01       	movw	r30, r16
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	e0 0f       	add	r30, r16
 3e4:	f1 1f       	adc	r31, r17
 3e6:	e5 58       	subi	r30, 0x85	; 133
 3e8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ea:	82 81       	ldd	r24, Z+2	; 0x02
 3ec:	89 83       	std	Y+1, r24	; 0x01
		  
		HAL_GPIO_INIT_PIN(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
 3ee:	be 01       	movw	r22, r28
 3f0:	6f 5f       	subi	r22, 0xFF	; 255
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	80 81       	ld	r24, Z
 3f6:	91 81       	ldd	r25, Z+1	; 0x01
 3f8:	0e 94 21 04 	call	0x842	; 0x842 <HAL_GPIO_INIT_PIN>
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
 3fc:	0f 5f       	subi	r16, 0xFF	; 255
 3fe:	1f 4f       	sbci	r17, 0xFF	; 255
 400:	07 30       	cpi	r16, 0x07	; 7
 402:	11 05       	cpc	r17, r1
 404:	5c f3       	brlt	.-42     	; 0x3dc <LCD_Initializaion+0x2e>
		  
		HAL_GPIO_INIT_PIN(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
	}

	/* LCD Initialization command*/
	LCD_Send_Command(0x33U);  
 406:	83 e3       	ldi	r24, 0x33	; 51
 408:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Send_Command>
	LCD_Send_Command(0x32U);
 40c:	82 e3       	ldi	r24, 0x32	; 50
 40e:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED2LINE_4_BIT_MODE);
 412:	88 e2       	ldi	r24, 0x28	; 40
 414:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED_CLEAR_CURSOR_OFF);
 418:	8c e0       	ldi	r24, 0x0C	; 12
 41a:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Send_Command>
	

	return LCD_OK ;
	
} /* END_FUN LCD_Initializaion()*/
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	08 95       	ret

00000436 <LCD_Send_String_WithLoc>:
 * param. :  x  is specify y axises location start from 1
 * param. : StringOfCharacters pointer to string that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_String_WithLoc(uint8_t y, uint8_t x, uint8_t *StringOfCharacters)
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ea 01       	movw	r28, r20
	LCD_Goto_Location(y,x);
 43c:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_Goto_Location>
	while (*StringOfCharacters != 0)
 440:	03 c0       	rjmp	.+6      	; 0x448 <LCD_Send_String_WithLoc+0x12>
	{
		LCD_Send_Character_CurrLoc(*StringOfCharacters++);  
 442:	21 96       	adiw	r28, 0x01	; 1
 444:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Send_Character_CurrLoc>
 * return : void 
 */
LCD_Status_t LCD_Send_String_WithLoc(uint8_t y, uint8_t x, uint8_t *StringOfCharacters)
{
	LCD_Goto_Location(y,x);
	while (*StringOfCharacters != 0)
 448:	88 81       	ld	r24, Y
 44a:	81 11       	cpse	r24, r1
 44c:	fa cf       	rjmp	.-12     	; 0x442 <LCD_Send_String_WithLoc+0xc>
		LCD_Send_Character_CurrLoc(*StringOfCharacters++);  
	}
	
	
	return LCD_OK ;
} /* END_FUN Send_A_String_WithLoc()*/
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <LCD_Send_Integer_CurrLoc>:
 * param. : IntegerToDisplay this is the integer value that you want to display
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
 454:	ef 92       	push	r14
 456:	ff 92       	push	r15
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
		itoa(IntegerToDisplay,StringToDisplay,10); /* convert from int num. to char num. */
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
 464:	ed b6       	in	r14, 0x3d	; 61
 466:	fe b6       	in	r15, 0x3e	; 62
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
		uint8_t StringToDisplay[NumberOfDigits];   /* create array with required size */ 
 468:	2d b7       	in	r18, 0x3d	; 61
 46a:	3e b7       	in	r19, 0x3e	; 62
 46c:	26 1b       	sub	r18, r22
 46e:	31 09       	sbc	r19, r1
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	3e bf       	out	0x3e, r19	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	2d bf       	out	0x3d, r18	; 61
 47a:	0d b7       	in	r16, 0x3d	; 61
 47c:	1e b7       	in	r17, 0x3e	; 62
 47e:	0f 5f       	subi	r16, 0xFF	; 255
 480:	1f 4f       	sbci	r17, 0xFF	; 255
		itoa(IntegerToDisplay,StringToDisplay,10); /* convert from int num. to char num. */
 482:	4a e0       	ldi	r20, 0x0A	; 10
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	b8 01       	movw	r22, r16
 488:	0e 94 48 07 	call	0xe90	; 0xe90 <itoa>
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
 48c:	c8 01       	movw	r24, r16
 48e:	0e 94 a3 01 	call	0x346	; 0x346 <LCD_Send_String_CurrLoc>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	fe be       	out	0x3e, r15	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	ed be       	out	0x3d, r14	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	08 95       	ret

000004ac <LCD_Send_Float_Withloc>:
 * param. :  x  is specify y axises location start from 1
 * param. : IntegerToDisplay this is the integer value that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Float_Withloc(uint8_t y, uint8_t x ,  float number )
{
 4ac:	8f 92       	push	r8
 4ae:	9f 92       	push	r9
 4b0:	af 92       	push	r10
 4b2:	bf 92       	push	r11
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ef 92       	push	r14
 4ba:	ff 92       	push	r15
 4bc:	49 01       	movw	r8, r18
 4be:	5a 01       	movw	r10, r20
	LCD_Goto_Location(y,x);
 4c0:	0e 94 b0 01 	call	0x360	; 0x360 <LCD_Goto_Location>
	
	uint16_t intValue = (uint16_t)number;                    /* calculate the int value */
 4c4:	c5 01       	movw	r24, r10
 4c6:	b4 01       	movw	r22, r8
 4c8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fixunssfsi>
 4cc:	6b 01       	movw	r12, r22
 4ce:	7c 01       	movw	r14, r24
	float diffValue = (number - (float)intValue);              
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__floatunsisf>
 4d8:	9b 01       	movw	r18, r22
 4da:	ac 01       	movw	r20, r24
 4dc:	c5 01       	movw	r24, r10
 4de:	b4 01       	movw	r22, r8
 4e0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__subsf3>
	uint16_t decimalValue = (uint16_t)(diffValue * pow(10,2));  /* calculate the float value */
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	48 ec       	ldi	r20, 0xC8	; 200
 4ea:	52 e4       	ldi	r21, 0x42	; 66
 4ec:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
 4f0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fixunssfsi>
 4f4:	4b 01       	movw	r8, r22
 4f6:	5c 01       	movw	r10, r24
	
	
	LCD_Send_Integer_CurrLoc(intValue,5);
 4f8:	65 e0       	ldi	r22, 0x05	; 5
 4fa:	c6 01       	movw	r24, r12
 4fc:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_Send_Integer_CurrLoc>
	LCD_Send_Character_CurrLoc('.');
 500:	8e e2       	ldi	r24, 0x2E	; 46
 502:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_Send_Character_CurrLoc>
	LCD_Send_Integer_CurrLoc(decimalValue,5);
 506:	65 e0       	ldi	r22, 0x05	; 5
 508:	c4 01       	movw	r24, r8
 50a:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_Send_Integer_CurrLoc>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Float_Withloc()*/
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	ff 90       	pop	r15
 512:	ef 90       	pop	r14
 514:	df 90       	pop	r13
 516:	cf 90       	pop	r12
 518:	bf 90       	pop	r11
 51a:	af 90       	pop	r10
 51c:	9f 90       	pop	r9
 51e:	8f 90       	pop	r8
 520:	08 95       	ret

00000522 <LM35_Init>:
										.ADC_TRIG_SOURCE =ADC_TRIG_FREE_RUNNING ,.ADC_Vref_Select = ADC_Vref_AVCC,
										.ADC_Adjust_Select = ADC_Adjust_Right };


LM35_Status_t  LM35_Init(uint8_t Pin_Num , StrGPIO_t PORT)
{	
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	00 d0       	rcall	.+0      	; 0x528 <LM35_Init+0x6>
 528:	1f 92       	push	r1
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	9b 01       	movw	r18, r22
			 
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL ,.pin = Pin_Num }; 
 530:	89 83       	std	Y+1, r24	; 0x01
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	8a 83       	std	Y+2, r24	; 0x02
 536:	1b 82       	std	Y+3, r1	; 0x03
		HAL_GPIO_INIT_PIN(PORT , &PIN_CONFIG) ;	
 538:	be 01       	movw	r22, r28
 53a:	6f 5f       	subi	r22, 0xFF	; 255
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	c9 01       	movw	r24, r18
 540:	0e 94 21 04 	call	0x842	; 0x842 <HAL_GPIO_INIT_PIN>
		ADC_Init(&ADC_Handler);	
 544:	80 e9       	ldi	r24, 0x90	; 144
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 7e 03 	call	0x6fc	; 0x6fc <ADC_Init>
		return LM35_OK ;
}
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <LM35_Read>:


float LM35_Read(void)
{
	float Res = 0 ; 
	ADC_Get_Value(&ADC_Handler , ADC_CH_0);
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	80 e9       	ldi	r24, 0x90	; 144
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 96 03 	call	0x72c	; 0x72c <ADC_Get_Value>
	Res = ((( ADC_Handler.ADC_Value )* 0.0048828 )/0.01);
 564:	60 91 95 00 	lds	r22, 0x0095	; 0x800095 <ADC_Handler+0x5>
 568:	70 91 96 00 	lds	r23, 0x0096	; 0x800096 <ADC_Handler+0x6>
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__floatunsisf>
 574:	25 ee       	ldi	r18, 0xE5	; 229
 576:	3f ef       	ldi	r19, 0xFF	; 255
 578:	4f e9       	ldi	r20, 0x9F	; 159
 57a:	5b e3       	ldi	r21, 0x3B	; 59
 57c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
 580:	2a e0       	ldi	r18, 0x0A	; 10
 582:	37 ed       	ldi	r19, 0xD7	; 215
 584:	43 e2       	ldi	r20, 0x23	; 35
 586:	5c e3       	ldi	r21, 0x3C	; 60
 588:	0e 94 ac 05 	call	0xb58	; 0xb58 <__divsf3>
	return Res;
	
 58c:	08 95       	ret

0000058e <main>:
uint8_t key = ' ' ; 
uint16_t x = 0 ; 
float res =0 ;
int main(void)
{
	LCD_Initializaion();
 58e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_Initializaion>
	KeyPad_Initialization(&KeyPad) ;
 592:	80 e6       	ldi	r24, 0x60	; 96
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 49 00 	call	0x92	; 0x92 <KeyPad_Initialization>

	LM35_Init(GPIO_PIN_0 , GPIOB);
 59a:	66 e3       	ldi	r22, 0x36	; 54
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	0e 94 91 02 	call	0x522	; 0x522 <LM35_Init>
	LCD_Send_String_WithLoc(1,1,"welcome");
 5a4:	4a e9       	ldi	r20, 0x9A	; 154
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_Send_String_WithLoc>
 5b0:	2f ef       	ldi	r18, 0xFF	; 255
 5b2:	87 ea       	ldi	r24, 0xA7	; 167
 5b4:	91 e6       	ldi	r25, 0x61	; 97
 5b6:	21 50       	subi	r18, 0x01	; 1
 5b8:	80 40       	sbci	r24, 0x00	; 0
 5ba:	90 40       	sbci	r25, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <main+0x28>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <main+0x32>
 5c0:	00 00       	nop
	_delay_ms(2000);
	LCD_Send_Command(0x01);
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 89 01 	call	0x312	; 0x312 <LCD_Send_Command>
    /* Replace with your application code */
    while (1) 
    {
		key = KeyPad_GetPressedKey(&KeyPad);
 5c8:	80 e6       	ldi	r24, 0x60	; 96
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 92 00 	call	0x124	; 0x124 <KeyPad_GetPressedKey>
 5d0:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <key>
		LCD_Send_String_WithLoc(1,1,"Key = ");
 5d4:	42 ea       	ldi	r20, 0xA2	; 162
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_Send_String_WithLoc>
		LCD_Send_Character_WithLoc(1,7,key);
 5e0:	40 91 97 00 	lds	r20, 0x0097	; 0x800097 <key>
 5e4:	67 e0       	ldi	r22, 0x07	; 7
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_Send_Character_WithLoc>
		LCD_Send_String_WithLoc(2,2,"Temp = ");
 5ec:	49 ea       	ldi	r20, 0xA9	; 169
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	62 e0       	ldi	r22, 0x02	; 2
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_Send_String_WithLoc>
		LCD_Send_Float_Withloc(2,8,LM35_Read());
 5f8:	0e 94 ad 02 	call	0x55a	; 0x55a <LM35_Read>
 5fc:	9b 01       	movw	r18, r22
 5fe:	ac 01       	movw	r20, r24
 600:	68 e0       	ldi	r22, 0x08	; 8
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_Send_Float_Withloc>
 608:	df cf       	rjmp	.-66     	; 0x5c8 <main+0x3a>

0000060a <__vector_1>:
}


/* INIT0 Function */
ISR(INT0_vect)
{
 60a:	1f 92       	push	r1
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	4f 93       	push	r20
 61a:	5f 93       	push	r21
 61c:	6f 93       	push	r22
 61e:	7f 93       	push	r23
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	af 93       	push	r26
 626:	bf 93       	push	r27
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
	ptr_INT0();
 62c:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <ptr_INT0>
 630:	f0 91 cf 00 	lds	r31, 0x00CF	; 0x8000cf <ptr_INT0+0x1>
 634:	09 95       	icall
}
 636:	ff 91       	pop	r31
 638:	ef 91       	pop	r30
 63a:	bf 91       	pop	r27
 63c:	af 91       	pop	r26
 63e:	9f 91       	pop	r25
 640:	8f 91       	pop	r24
 642:	7f 91       	pop	r23
 644:	6f 91       	pop	r22
 646:	5f 91       	pop	r21
 648:	4f 91       	pop	r20
 64a:	3f 91       	pop	r19
 64c:	2f 91       	pop	r18
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <__vector_2>:
/* INIT0 Function */
ISR(INT1_vect)
{
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	2f 93       	push	r18
 664:	3f 93       	push	r19
 666:	4f 93       	push	r20
 668:	5f 93       	push	r21
 66a:	6f 93       	push	r22
 66c:	7f 93       	push	r23
 66e:	8f 93       	push	r24
 670:	9f 93       	push	r25
 672:	af 93       	push	r26
 674:	bf 93       	push	r27
 676:	ef 93       	push	r30
 678:	ff 93       	push	r31
	ptr_INT1();
 67a:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <ptr_INT1>
 67e:	f0 91 d3 00 	lds	r31, 0x00D3	; 0x8000d3 <ptr_INT1+0x1>
 682:	09 95       	icall
}
 684:	ff 91       	pop	r31
 686:	ef 91       	pop	r30
 688:	bf 91       	pop	r27
 68a:	af 91       	pop	r26
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	7f 91       	pop	r23
 692:	6f 91       	pop	r22
 694:	5f 91       	pop	r21
 696:	4f 91       	pop	r20
 698:	3f 91       	pop	r19
 69a:	2f 91       	pop	r18
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <__vector_3>:
/* INIT0 Function */
ISR(INT2_vect)
{
 6a6:	1f 92       	push	r1
 6a8:	0f 92       	push	r0
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	2f 93       	push	r18
 6b2:	3f 93       	push	r19
 6b4:	4f 93       	push	r20
 6b6:	5f 93       	push	r21
 6b8:	6f 93       	push	r22
 6ba:	7f 93       	push	r23
 6bc:	8f 93       	push	r24
 6be:	9f 93       	push	r25
 6c0:	af 93       	push	r26
 6c2:	bf 93       	push	r27
 6c4:	ef 93       	push	r30
 6c6:	ff 93       	push	r31
	ptr_INT2();
 6c8:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <ptr_INT2>
 6cc:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <ptr_INT2+0x1>
 6d0:	09 95       	icall
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	7f 91       	pop	r23
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <ADC_START>:
	 ADMUX &=~(0x1f);		  /* clear first before reconfiguration */
	 ADMUX |= (AdcChannel);	 /* select channel */
	 ADC_START();
	 
	 
 }
 6f4:	86 b1       	in	r24, 0x06	; 6
 6f6:	80 64       	ori	r24, 0x40	; 64
 6f8:	86 b9       	out	0x06, r24	; 6
 6fa:	08 95       	ret

000006fc <ADC_Init>:
 6fc:	fc 01       	movw	r30, r24
 6fe:	80 b7       	in	r24, 0x30	; 48
 700:	8f 71       	andi	r24, 0x1F	; 31
 702:	80 bf       	out	0x30, r24	; 48
 704:	90 b7       	in	r25, 0x30	; 48
 706:	80 81       	ld	r24, Z
 708:	89 2b       	or	r24, r25
 70a:	80 bf       	out	0x30, r24	; 48
 70c:	16 b8       	out	0x06, r1	; 6
 70e:	93 81       	ldd	r25, Z+3	; 0x03
 710:	81 81       	ldd	r24, Z+1	; 0x01
 712:	89 2b       	or	r24, r25
 714:	80 68       	ori	r24, 0x80	; 128
 716:	86 b9       	out	0x06, r24	; 6
 718:	17 b8       	out	0x07, r1	; 7
 71a:	94 81       	ldd	r25, Z+4	; 0x04
 71c:	82 81       	ldd	r24, Z+2	; 0x02
 71e:	89 2b       	or	r24, r25
 720:	87 b9       	out	0x07, r24	; 7
 722:	83 81       	ldd	r24, Z+3	; 0x03
 724:	88 23       	and	r24, r24
 726:	09 f0       	breq	.+2      	; 0x72a <ADC_Init+0x2e>
 728:	78 94       	sei
 72a:	08 95       	ret

0000072c <ADC_Get_Value>:
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	ec 01       	movw	r28, r24
 734:	16 2f       	mov	r17, r22
 736:	e7 eb       	ldi	r30, 0xB7	; 183
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	11 82       	std	Z+1, r1	; 0x01
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	01 c0       	rjmp	.+2      	; 0x742 <ADC_Get_Value+0x16>
 740:	88 0f       	add	r24, r24
 742:	6a 95       	dec	r22
 744:	ea f7       	brpl	.-6      	; 0x740 <ADC_Get_Value+0x14>
 746:	80 83       	st	Z, r24
 748:	12 82       	std	Z+2, r1	; 0x02
 74a:	bf 01       	movw	r22, r30
 74c:	89 e3       	ldi	r24, 0x39	; 57
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	0e 94 21 04 	call	0x842	; 0x842 <HAL_GPIO_INIT_PIN>
 754:	87 b1       	in	r24, 0x07	; 7
 756:	80 7e       	andi	r24, 0xE0	; 224
 758:	87 b9       	out	0x07, r24	; 7
 75a:	67 b1       	in	r22, 0x07	; 7
 75c:	61 2b       	or	r22, r17
 75e:	67 b9       	out	0x07, r22	; 7
 760:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <ADC_START>
 764:	34 9b       	sbis	0x06, 4	; 6
 766:	fe cf       	rjmp	.-4      	; 0x764 <ADC_Get_Value+0x38>
 768:	86 b1       	in	r24, 0x06	; 6
 76a:	80 61       	ori	r24, 0x10	; 16
 76c:	86 b9       	out	0x06, r24	; 6
 76e:	8a 81       	ldd	r24, Y+2	; 0x02
 770:	88 23       	and	r24, r24
 772:	49 f0       	breq	.+18     	; 0x786 <ADC_Get_Value+0x5a>
 774:	84 b1       	in	r24, 0x04	; 4
 776:	95 b1       	in	r25, 0x05	; 5
 778:	82 95       	swap	r24
 77a:	86 95       	lsr	r24
 77c:	86 95       	lsr	r24
 77e:	83 70       	andi	r24, 0x03	; 3
 780:	89 2b       	or	r24, r25
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	06 c0       	rjmp	.+12     	; 0x792 <ADC_Get_Value+0x66>
 786:	24 b1       	in	r18, 0x04	; 4
 788:	85 b1       	in	r24, 0x05	; 5
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	98 2f       	mov	r25, r24
 78e:	88 27       	eor	r24, r24
 790:	82 2b       	or	r24, r18
 792:	9e 83       	std	Y+6, r25	; 0x06
 794:	8d 83       	std	Y+5, r24	; 0x05
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	08 95       	ret

0000079e <__vector_16>:



 ISR(ADC_vect)
 {
 79e:	1f 92       	push	r1
 7a0:	0f 92       	push	r0
 7a2:	0f b6       	in	r0, 0x3f	; 63
 7a4:	0f 92       	push	r0
 7a6:	11 24       	eor	r1, r1
 7a8:	2f 93       	push	r18
 7aa:	3f 93       	push	r19
 7ac:	4f 93       	push	r20
 7ae:	5f 93       	push	r21
 7b0:	6f 93       	push	r22
 7b2:	7f 93       	push	r23
 7b4:	8f 93       	push	r24
 7b6:	9f 93       	push	r25
 7b8:	af 93       	push	r26
 7ba:	bf 93       	push	r27
 7bc:	ef 93       	push	r30
 7be:	ff 93       	push	r31
		Ptr_Fun();
 7c0:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <Ptr_Fun>
 7c4:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <Ptr_Fun+0x1>
 7c8:	09 95       	icall
		if(ADC_Adjust_Left & ADMUX ) /* if left adjust is selected */ 
 7ca:	3d 9b       	sbis	0x07, 5	; 7
 7cc:	15 c0       	rjmp	.+42     	; 0x7f8 <__vector_16+0x5a>
		{
			value =  (ADCL>>6)|(ADCH);	/* ADCL must read first then ADCH to Re_enable access to ADCL & ADCH */
 7ce:	64 b1       	in	r22, 0x04	; 4
 7d0:	85 b1       	in	r24, 0x05	; 5
 7d2:	62 95       	swap	r22
 7d4:	66 95       	lsr	r22
 7d6:	66 95       	lsr	r22
 7d8:	63 70       	andi	r22, 0x03	; 3
 7da:	68 2b       	or	r22, r24
 7dc:	70 e0       	ldi	r23, 0x00	; 0
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__floatsisf>
 7e6:	60 93 ba 00 	sts	0x00BA, r22	; 0x8000ba <value>
 7ea:	70 93 bb 00 	sts	0x00BB, r23	; 0x8000bb <value+0x1>
 7ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <value+0x2>
 7f2:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <value+0x3>
 7f6:	14 c0       	rjmp	.+40     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		}else{							   /* if right adjust is selected */ 
			value = (ADCL)|(ADCH<<8);
 7f8:	84 b1       	in	r24, 0x04	; 4
 7fa:	65 b1       	in	r22, 0x05	; 5
 7fc:	70 e0       	ldi	r23, 0x00	; 0
 7fe:	76 2f       	mov	r23, r22
 800:	66 27       	eor	r22, r22
 802:	68 2b       	or	r22, r24
 804:	07 2e       	mov	r0, r23
 806:	00 0c       	add	r0, r0
 808:	88 0b       	sbc	r24, r24
 80a:	99 0b       	sbc	r25, r25
 80c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__floatsisf>
 810:	60 93 ba 00 	sts	0x00BA, r22	; 0x8000ba <value>
 814:	70 93 bb 00 	sts	0x00BB, r23	; 0x8000bb <value+0x1>
 818:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <value+0x2>
 81c:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <value+0x3>
		}

 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	bf 91       	pop	r27
 826:	af 91       	pop	r26
 828:	9f 91       	pop	r25
 82a:	8f 91       	pop	r24
 82c:	7f 91       	pop	r23
 82e:	6f 91       	pop	r22
 830:	5f 91       	pop	r21
 832:	4f 91       	pop	r20
 834:	3f 91       	pop	r19
 836:	2f 91       	pop	r18
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <HAL_GPIO_INIT_PIN>:
 * param. : PORT pointer to GPIO port
 * param. : PIN_CONFIG pointer to struct hold all configuration
 * return : void 
 */
void HAL_GPIO_INIT_PIN(StrGPIO_t PORT, GPIO_InitTypeDef *  PIN_CONFIG)
{
 842:	fc 01       	movw	r30, r24

		if(PIN_CONFIG->mode == GPIO_MODE_OUTPUT)
 844:	db 01       	movw	r26, r22
 846:	11 96       	adiw	r26, 0x01	; 1
 848:	8c 91       	ld	r24, X
 84a:	11 97       	sbiw	r26, 0x01	; 1
 84c:	81 30       	cpi	r24, 0x01	; 1
 84e:	29 f4       	brne	.+10     	; 0x85a <HAL_GPIO_INIT_PIN+0x18>
		{
			PORT->DDR_REG  |= PIN_CONFIG->pin ;      //SET ALL PINS AS OUTPUT
 850:	8c 91       	ld	r24, X
 852:	91 81       	ldd	r25, Z+1	; 0x01
 854:	89 2b       	or	r24, r25
 856:	81 83       	std	Z+1, r24	; 0x01
 858:	08 95       	ret
		}else{  // PINS MODE CONFIGURED AS INPUT
			if(PIN_CONFIG->pull == GPIO_PULLUP)
			{
			//	PORT->PIN_REG |= PIN_CONFIG->pin ;     // SET PULL UP RES.
			}
			PORT->DDR_REG &= ~(PIN_CONFIG->pin);
 85a:	db 01       	movw	r26, r22
 85c:	9c 91       	ld	r25, X
 85e:	90 95       	com	r25
 860:	81 81       	ldd	r24, Z+1	; 0x01
 862:	98 23       	and	r25, r24
 864:	91 83       	std	Z+1, r25	; 0x01
 866:	08 95       	ret

00000868 <HAL_GPIO_READPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_ 
 * return : return on of  GPIO_PIN_RESET or GPIO_PIN_SET 
 */
GPIO_PinState HAL_GPIO_READPIN(StrGPIO_t PORT,uint8_t PIN_NUM)
{
	if(PORT->PIN_REG & PIN_NUM)  /* check if specific pin is set */
 868:	fc 01       	movw	r30, r24
 86a:	80 81       	ld	r24, Z
 86c:	68 23       	and	r22, r24
 86e:	11 f0       	breq	.+4      	; 0x874 <HAL_GPIO_READPIN+0xc>
	{
		return GPIO_PIN_SET ;
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	08 95       	ret
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
 874:	80 e0       	ldi	r24, 0x00	; 0
	}
}/* END_FUN HAL_GPIO_READPIN()*/
 876:	08 95       	ret

00000878 <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
 878:	44 23       	and	r20, r20
 87a:	29 f0       	breq	.+10     	; 0x886 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
 87c:	fc 01       	movw	r30, r24
 87e:	22 81       	ldd	r18, Z+2	; 0x02
 880:	62 2b       	or	r22, r18
 882:	62 83       	std	Z+2, r22	; 0x02
 884:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
 886:	60 95       	com	r22
 888:	fc 01       	movw	r30, r24
 88a:	22 81       	ldd	r18, Z+2	; 0x02
 88c:	62 23       	and	r22, r18
 88e:	62 83       	std	Z+2, r22	; 0x02
 890:	08 95       	ret

00000892 <__vector_6>:




void __vector_6(void )	 // timer1 input capture interrupt number
{
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
	InputCapture_callbackfunction();
 8b4:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <InputCapture_callbackfunction>
 8b8:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <InputCapture_callbackfunction+0x1>
 8bc:	09 95       	icall
}
 8be:	ff 91       	pop	r31
 8c0:	ef 91       	pop	r30
 8c2:	bf 91       	pop	r27
 8c4:	af 91       	pop	r26
 8c6:	9f 91       	pop	r25
 8c8:	8f 91       	pop	r24
 8ca:	7f 91       	pop	r23
 8cc:	6f 91       	pop	r22
 8ce:	5f 91       	pop	r21
 8d0:	4f 91       	pop	r20
 8d2:	3f 91       	pop	r19
 8d4:	2f 91       	pop	r18
 8d6:	0f 90       	pop	r0
 8d8:	0f be       	out	0x3f, r0	; 63
 8da:	0f 90       	pop	r0
 8dc:	1f 90       	pop	r1
 8de:	18 95       	reti

000008e0 <__vector_7>:

void __vector_7(void )		// timer1 CompareA
{
 8e0:	1f 92       	push	r1
 8e2:	0f 92       	push	r0
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	0f 92       	push	r0
 8e8:	11 24       	eor	r1, r1
 8ea:	2f 93       	push	r18
 8ec:	3f 93       	push	r19
 8ee:	4f 93       	push	r20
 8f0:	5f 93       	push	r21
 8f2:	6f 93       	push	r22
 8f4:	7f 93       	push	r23
 8f6:	8f 93       	push	r24
 8f8:	9f 93       	push	r25
 8fa:	af 93       	push	r26
 8fc:	bf 93       	push	r27
 8fe:	ef 93       	push	r30
 900:	ff 93       	push	r31
	CompareA_callbackfunction();
 902:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <CompareA_callbackfunction>
 906:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <CompareA_callbackfunction+0x1>
 90a:	09 95       	icall
}
 90c:	ff 91       	pop	r31
 90e:	ef 91       	pop	r30
 910:	bf 91       	pop	r27
 912:	af 91       	pop	r26
 914:	9f 91       	pop	r25
 916:	8f 91       	pop	r24
 918:	7f 91       	pop	r23
 91a:	6f 91       	pop	r22
 91c:	5f 91       	pop	r21
 91e:	4f 91       	pop	r20
 920:	3f 91       	pop	r19
 922:	2f 91       	pop	r18
 924:	0f 90       	pop	r0
 926:	0f be       	out	0x3f, r0	; 63
 928:	0f 90       	pop	r0
 92a:	1f 90       	pop	r1
 92c:	18 95       	reti

0000092e <__vector_8>:
void __vector_8(void )	 // timer1 compareB interrupt number
{
	CompareB_callbackfunction();
 92e:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <CompareB_callbackfunction>
 932:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <CompareB_callbackfunction+0x1>
 936:	09 95       	icall
 938:	08 95       	ret

0000093a <__vector_9>:
}

void __vector_9(void )		// timer1 overflow
{
	Overflow_callbackfunction() ;
 93a:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <Overflow_callbackfunction>
 93e:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <Overflow_callbackfunction+0x1>
 942:	09 95       	icall
 944:	08 95       	ret

00000946 <__vector_10>:



/* all vectors specific for timer2 and timer0 */
void __vector_10(void)
{
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1
 950:	2f 93       	push	r18
 952:	3f 93       	push	r19
 954:	4f 93       	push	r20
 956:	5f 93       	push	r21
 958:	6f 93       	push	r22
 95a:	7f 93       	push	r23
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
 960:	af 93       	push	r26
 962:	bf 93       	push	r27
 964:	ef 93       	push	r30
 966:	ff 93       	push	r31
	COMPMatch0_Fun();
 968:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <COMPMatch0_Fun>
 96c:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <COMPMatch0_Fun+0x1>
 970:	09 95       	icall
}
 972:	ff 91       	pop	r31
 974:	ef 91       	pop	r30
 976:	bf 91       	pop	r27
 978:	af 91       	pop	r26
 97a:	9f 91       	pop	r25
 97c:	8f 91       	pop	r24
 97e:	7f 91       	pop	r23
 980:	6f 91       	pop	r22
 982:	5f 91       	pop	r21
 984:	4f 91       	pop	r20
 986:	3f 91       	pop	r19
 988:	2f 91       	pop	r18
 98a:	0f 90       	pop	r0
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	0f 90       	pop	r0
 990:	1f 90       	pop	r1
 992:	18 95       	reti

00000994 <__vector_11>:
void __vector_11(void)
{
 994:	1f 92       	push	r1
 996:	0f 92       	push	r0
 998:	0f b6       	in	r0, 0x3f	; 63
 99a:	0f 92       	push	r0
 99c:	11 24       	eor	r1, r1
 99e:	2f 93       	push	r18
 9a0:	3f 93       	push	r19
 9a2:	4f 93       	push	r20
 9a4:	5f 93       	push	r21
 9a6:	6f 93       	push	r22
 9a8:	7f 93       	push	r23
 9aa:	8f 93       	push	r24
 9ac:	9f 93       	push	r25
 9ae:	af 93       	push	r26
 9b0:	bf 93       	push	r27
 9b2:	ef 93       	push	r30
 9b4:	ff 93       	push	r31
	OverFlow0_Fun();
 9b6:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <OverFlow0_Fun>
 9ba:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <OverFlow0_Fun+0x1>
 9be:	09 95       	icall
}
 9c0:	ff 91       	pop	r31
 9c2:	ef 91       	pop	r30
 9c4:	bf 91       	pop	r27
 9c6:	af 91       	pop	r26
 9c8:	9f 91       	pop	r25
 9ca:	8f 91       	pop	r24
 9cc:	7f 91       	pop	r23
 9ce:	6f 91       	pop	r22
 9d0:	5f 91       	pop	r21
 9d2:	4f 91       	pop	r20
 9d4:	3f 91       	pop	r19
 9d6:	2f 91       	pop	r18
 9d8:	0f 90       	pop	r0
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	0f 90       	pop	r0
 9de:	1f 90       	pop	r1
 9e0:	18 95       	reti

000009e2 <__vector_4>:


void __vector_4(void)
{
 9e2:	1f 92       	push	r1
 9e4:	0f 92       	push	r0
 9e6:	0f b6       	in	r0, 0x3f	; 63
 9e8:	0f 92       	push	r0
 9ea:	11 24       	eor	r1, r1
 9ec:	2f 93       	push	r18
 9ee:	3f 93       	push	r19
 9f0:	4f 93       	push	r20
 9f2:	5f 93       	push	r21
 9f4:	6f 93       	push	r22
 9f6:	7f 93       	push	r23
 9f8:	8f 93       	push	r24
 9fa:	9f 93       	push	r25
 9fc:	af 93       	push	r26
 9fe:	bf 93       	push	r27
 a00:	ef 93       	push	r30
 a02:	ff 93       	push	r31
	COMPMatch2_Fun();
 a04:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <COMPMatch2_Fun>
 a08:	f0 91 c9 00 	lds	r31, 0x00C9	; 0x8000c9 <COMPMatch2_Fun+0x1>
 a0c:	09 95       	icall
}
 a0e:	ff 91       	pop	r31
 a10:	ef 91       	pop	r30
 a12:	bf 91       	pop	r27
 a14:	af 91       	pop	r26
 a16:	9f 91       	pop	r25
 a18:	8f 91       	pop	r24
 a1a:	7f 91       	pop	r23
 a1c:	6f 91       	pop	r22
 a1e:	5f 91       	pop	r21
 a20:	4f 91       	pop	r20
 a22:	3f 91       	pop	r19
 a24:	2f 91       	pop	r18
 a26:	0f 90       	pop	r0
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	0f 90       	pop	r0
 a2c:	1f 90       	pop	r1
 a2e:	18 95       	reti

00000a30 <__vector_5>:
void __vector_5(void)
{
 a30:	1f 92       	push	r1
 a32:	0f 92       	push	r0
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	0f 92       	push	r0
 a38:	11 24       	eor	r1, r1
 a3a:	2f 93       	push	r18
 a3c:	3f 93       	push	r19
 a3e:	4f 93       	push	r20
 a40:	5f 93       	push	r21
 a42:	6f 93       	push	r22
 a44:	7f 93       	push	r23
 a46:	8f 93       	push	r24
 a48:	9f 93       	push	r25
 a4a:	af 93       	push	r26
 a4c:	bf 93       	push	r27
 a4e:	ef 93       	push	r30
 a50:	ff 93       	push	r31
	OverFlow2_Fun();
 a52:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <OverFlow2_Fun>
 a56:	f0 91 c7 00 	lds	r31, 0x00C7	; 0x8000c7 <OverFlow2_Fun+0x1>
 a5a:	09 95       	icall
 a5c:	ff 91       	pop	r31
 a5e:	ef 91       	pop	r30
 a60:	bf 91       	pop	r27
 a62:	af 91       	pop	r26
 a64:	9f 91       	pop	r25
 a66:	8f 91       	pop	r24
 a68:	7f 91       	pop	r23
 a6a:	6f 91       	pop	r22
 a6c:	5f 91       	pop	r21
 a6e:	4f 91       	pop	r20
 a70:	3f 91       	pop	r19
 a72:	2f 91       	pop	r18
 a74:	0f 90       	pop	r0
 a76:	0f be       	out	0x3f, r0	; 63
 a78:	0f 90       	pop	r0
 a7a:	1f 90       	pop	r1
 a7c:	18 95       	reti

00000a7e <__subsf3>:
 a7e:	50 58       	subi	r21, 0x80	; 128

00000a80 <__addsf3>:
 a80:	bb 27       	eor	r27, r27
 a82:	aa 27       	eor	r26, r26
 a84:	0e 94 57 05 	call	0xaae	; 0xaae <__addsf3x>
 a88:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
 a8c:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
 a90:	38 f0       	brcs	.+14     	; 0xaa0 <__addsf3+0x20>
 a92:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
 a96:	20 f0       	brcs	.+8      	; 0xaa0 <__addsf3+0x20>
 a98:	39 f4       	brne	.+14     	; 0xaa8 <__addsf3+0x28>
 a9a:	9f 3f       	cpi	r25, 0xFF	; 255
 a9c:	19 f4       	brne	.+6      	; 0xaa4 <__addsf3+0x24>
 a9e:	26 f4       	brtc	.+8      	; 0xaa8 <__addsf3+0x28>
 aa0:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
 aa4:	0e f4       	brtc	.+2      	; 0xaa8 <__addsf3+0x28>
 aa6:	e0 95       	com	r30
 aa8:	e7 fb       	bst	r30, 7
 aaa:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>

00000aae <__addsf3x>:
 aae:	e9 2f       	mov	r30, r25
 ab0:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
 ab4:	58 f3       	brcs	.-42     	; 0xa8c <__addsf3+0xc>
 ab6:	ba 17       	cp	r27, r26
 ab8:	62 07       	cpc	r22, r18
 aba:	73 07       	cpc	r23, r19
 abc:	84 07       	cpc	r24, r20
 abe:	95 07       	cpc	r25, r21
 ac0:	20 f0       	brcs	.+8      	; 0xaca <__addsf3x+0x1c>
 ac2:	79 f4       	brne	.+30     	; 0xae2 <__addsf3x+0x34>
 ac4:	a6 f5       	brtc	.+104    	; 0xb2e <__addsf3x+0x80>
 ac6:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__fp_zero>
 aca:	0e f4       	brtc	.+2      	; 0xace <__addsf3x+0x20>
 acc:	e0 95       	com	r30
 ace:	0b 2e       	mov	r0, r27
 ad0:	ba 2f       	mov	r27, r26
 ad2:	a0 2d       	mov	r26, r0
 ad4:	0b 01       	movw	r0, r22
 ad6:	b9 01       	movw	r22, r18
 ad8:	90 01       	movw	r18, r0
 ada:	0c 01       	movw	r0, r24
 adc:	ca 01       	movw	r24, r20
 ade:	a0 01       	movw	r20, r0
 ae0:	11 24       	eor	r1, r1
 ae2:	ff 27       	eor	r31, r31
 ae4:	59 1b       	sub	r21, r25
 ae6:	99 f0       	breq	.+38     	; 0xb0e <__addsf3x+0x60>
 ae8:	59 3f       	cpi	r21, 0xF9	; 249
 aea:	50 f4       	brcc	.+20     	; 0xb00 <__addsf3x+0x52>
 aec:	50 3e       	cpi	r21, 0xE0	; 224
 aee:	68 f1       	brcs	.+90     	; 0xb4a <__addsf3x+0x9c>
 af0:	1a 16       	cp	r1, r26
 af2:	f0 40       	sbci	r31, 0x00	; 0
 af4:	a2 2f       	mov	r26, r18
 af6:	23 2f       	mov	r18, r19
 af8:	34 2f       	mov	r19, r20
 afa:	44 27       	eor	r20, r20
 afc:	58 5f       	subi	r21, 0xF8	; 248
 afe:	f3 cf       	rjmp	.-26     	; 0xae6 <__addsf3x+0x38>
 b00:	46 95       	lsr	r20
 b02:	37 95       	ror	r19
 b04:	27 95       	ror	r18
 b06:	a7 95       	ror	r26
 b08:	f0 40       	sbci	r31, 0x00	; 0
 b0a:	53 95       	inc	r21
 b0c:	c9 f7       	brne	.-14     	; 0xb00 <__addsf3x+0x52>
 b0e:	7e f4       	brtc	.+30     	; 0xb2e <__addsf3x+0x80>
 b10:	1f 16       	cp	r1, r31
 b12:	ba 0b       	sbc	r27, r26
 b14:	62 0b       	sbc	r22, r18
 b16:	73 0b       	sbc	r23, r19
 b18:	84 0b       	sbc	r24, r20
 b1a:	ba f0       	brmi	.+46     	; 0xb4a <__addsf3x+0x9c>
 b1c:	91 50       	subi	r25, 0x01	; 1
 b1e:	a1 f0       	breq	.+40     	; 0xb48 <__addsf3x+0x9a>
 b20:	ff 0f       	add	r31, r31
 b22:	bb 1f       	adc	r27, r27
 b24:	66 1f       	adc	r22, r22
 b26:	77 1f       	adc	r23, r23
 b28:	88 1f       	adc	r24, r24
 b2a:	c2 f7       	brpl	.-16     	; 0xb1c <__addsf3x+0x6e>
 b2c:	0e c0       	rjmp	.+28     	; 0xb4a <__addsf3x+0x9c>
 b2e:	ba 0f       	add	r27, r26
 b30:	62 1f       	adc	r22, r18
 b32:	73 1f       	adc	r23, r19
 b34:	84 1f       	adc	r24, r20
 b36:	48 f4       	brcc	.+18     	; 0xb4a <__addsf3x+0x9c>
 b38:	87 95       	ror	r24
 b3a:	77 95       	ror	r23
 b3c:	67 95       	ror	r22
 b3e:	b7 95       	ror	r27
 b40:	f7 95       	ror	r31
 b42:	9e 3f       	cpi	r25, 0xFE	; 254
 b44:	08 f0       	brcs	.+2      	; 0xb48 <__addsf3x+0x9a>
 b46:	b0 cf       	rjmp	.-160    	; 0xaa8 <__addsf3+0x28>
 b48:	93 95       	inc	r25
 b4a:	88 0f       	add	r24, r24
 b4c:	08 f0       	brcs	.+2      	; 0xb50 <__addsf3x+0xa2>
 b4e:	99 27       	eor	r25, r25
 b50:	ee 0f       	add	r30, r30
 b52:	97 95       	ror	r25
 b54:	87 95       	ror	r24
 b56:	08 95       	ret

00000b58 <__divsf3>:
 b58:	0e 94 c0 05 	call	0xb80	; 0xb80 <__divsf3x>
 b5c:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
 b60:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
 b64:	58 f0       	brcs	.+22     	; 0xb7c <__divsf3+0x24>
 b66:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
 b6a:	40 f0       	brcs	.+16     	; 0xb7c <__divsf3+0x24>
 b6c:	29 f4       	brne	.+10     	; 0xb78 <__divsf3+0x20>
 b6e:	5f 3f       	cpi	r21, 0xFF	; 255
 b70:	29 f0       	breq	.+10     	; 0xb7c <__divsf3+0x24>
 b72:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>
 b76:	51 11       	cpse	r21, r1
 b78:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>
 b7c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>

00000b80 <__divsf3x>:
 b80:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
 b84:	68 f3       	brcs	.-38     	; 0xb60 <__divsf3+0x8>

00000b86 <__divsf3_pse>:
 b86:	99 23       	and	r25, r25
 b88:	b1 f3       	breq	.-20     	; 0xb76 <__divsf3+0x1e>
 b8a:	55 23       	and	r21, r21
 b8c:	91 f3       	breq	.-28     	; 0xb72 <__divsf3+0x1a>
 b8e:	95 1b       	sub	r25, r21
 b90:	55 0b       	sbc	r21, r21
 b92:	bb 27       	eor	r27, r27
 b94:	aa 27       	eor	r26, r26
 b96:	62 17       	cp	r22, r18
 b98:	73 07       	cpc	r23, r19
 b9a:	84 07       	cpc	r24, r20
 b9c:	38 f0       	brcs	.+14     	; 0xbac <__divsf3_pse+0x26>
 b9e:	9f 5f       	subi	r25, 0xFF	; 255
 ba0:	5f 4f       	sbci	r21, 0xFF	; 255
 ba2:	22 0f       	add	r18, r18
 ba4:	33 1f       	adc	r19, r19
 ba6:	44 1f       	adc	r20, r20
 ba8:	aa 1f       	adc	r26, r26
 baa:	a9 f3       	breq	.-22     	; 0xb96 <__divsf3_pse+0x10>
 bac:	35 d0       	rcall	.+106    	; 0xc18 <__divsf3_pse+0x92>
 bae:	0e 2e       	mov	r0, r30
 bb0:	3a f0       	brmi	.+14     	; 0xbc0 <__divsf3_pse+0x3a>
 bb2:	e0 e8       	ldi	r30, 0x80	; 128
 bb4:	32 d0       	rcall	.+100    	; 0xc1a <__divsf3_pse+0x94>
 bb6:	91 50       	subi	r25, 0x01	; 1
 bb8:	50 40       	sbci	r21, 0x00	; 0
 bba:	e6 95       	lsr	r30
 bbc:	00 1c       	adc	r0, r0
 bbe:	ca f7       	brpl	.-14     	; 0xbb2 <__divsf3_pse+0x2c>
 bc0:	2b d0       	rcall	.+86     	; 0xc18 <__divsf3_pse+0x92>
 bc2:	fe 2f       	mov	r31, r30
 bc4:	29 d0       	rcall	.+82     	; 0xc18 <__divsf3_pse+0x92>
 bc6:	66 0f       	add	r22, r22
 bc8:	77 1f       	adc	r23, r23
 bca:	88 1f       	adc	r24, r24
 bcc:	bb 1f       	adc	r27, r27
 bce:	26 17       	cp	r18, r22
 bd0:	37 07       	cpc	r19, r23
 bd2:	48 07       	cpc	r20, r24
 bd4:	ab 07       	cpc	r26, r27
 bd6:	b0 e8       	ldi	r27, 0x80	; 128
 bd8:	09 f0       	breq	.+2      	; 0xbdc <__divsf3_pse+0x56>
 bda:	bb 0b       	sbc	r27, r27
 bdc:	80 2d       	mov	r24, r0
 bde:	bf 01       	movw	r22, r30
 be0:	ff 27       	eor	r31, r31
 be2:	93 58       	subi	r25, 0x83	; 131
 be4:	5f 4f       	sbci	r21, 0xFF	; 255
 be6:	3a f0       	brmi	.+14     	; 0xbf6 <__divsf3_pse+0x70>
 be8:	9e 3f       	cpi	r25, 0xFE	; 254
 bea:	51 05       	cpc	r21, r1
 bec:	78 f0       	brcs	.+30     	; 0xc0c <__divsf3_pse+0x86>
 bee:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>
 bf2:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>
 bf6:	5f 3f       	cpi	r21, 0xFF	; 255
 bf8:	e4 f3       	brlt	.-8      	; 0xbf2 <__divsf3_pse+0x6c>
 bfa:	98 3e       	cpi	r25, 0xE8	; 232
 bfc:	d4 f3       	brlt	.-12     	; 0xbf2 <__divsf3_pse+0x6c>
 bfe:	86 95       	lsr	r24
 c00:	77 95       	ror	r23
 c02:	67 95       	ror	r22
 c04:	b7 95       	ror	r27
 c06:	f7 95       	ror	r31
 c08:	9f 5f       	subi	r25, 0xFF	; 255
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__divsf3_pse+0x78>
 c0c:	88 0f       	add	r24, r24
 c0e:	91 1d       	adc	r25, r1
 c10:	96 95       	lsr	r25
 c12:	87 95       	ror	r24
 c14:	97 f9       	bld	r25, 7
 c16:	08 95       	ret
 c18:	e1 e0       	ldi	r30, 0x01	; 1
 c1a:	66 0f       	add	r22, r22
 c1c:	77 1f       	adc	r23, r23
 c1e:	88 1f       	adc	r24, r24
 c20:	bb 1f       	adc	r27, r27
 c22:	62 17       	cp	r22, r18
 c24:	73 07       	cpc	r23, r19
 c26:	84 07       	cpc	r24, r20
 c28:	ba 07       	cpc	r27, r26
 c2a:	20 f0       	brcs	.+8      	; 0xc34 <__divsf3_pse+0xae>
 c2c:	62 1b       	sub	r22, r18
 c2e:	73 0b       	sbc	r23, r19
 c30:	84 0b       	sbc	r24, r20
 c32:	ba 0b       	sbc	r27, r26
 c34:	ee 1f       	adc	r30, r30
 c36:	88 f7       	brcc	.-30     	; 0xc1a <__divsf3_pse+0x94>
 c38:	e0 95       	com	r30
 c3a:	08 95       	ret

00000c3c <__fixunssfsi>:
 c3c:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_splitA>
 c40:	88 f0       	brcs	.+34     	; 0xc64 <__fixunssfsi+0x28>
 c42:	9f 57       	subi	r25, 0x7F	; 127
 c44:	98 f0       	brcs	.+38     	; 0xc6c <__fixunssfsi+0x30>
 c46:	b9 2f       	mov	r27, r25
 c48:	99 27       	eor	r25, r25
 c4a:	b7 51       	subi	r27, 0x17	; 23
 c4c:	b0 f0       	brcs	.+44     	; 0xc7a <__fixunssfsi+0x3e>
 c4e:	e1 f0       	breq	.+56     	; 0xc88 <__fixunssfsi+0x4c>
 c50:	66 0f       	add	r22, r22
 c52:	77 1f       	adc	r23, r23
 c54:	88 1f       	adc	r24, r24
 c56:	99 1f       	adc	r25, r25
 c58:	1a f0       	brmi	.+6      	; 0xc60 <__fixunssfsi+0x24>
 c5a:	ba 95       	dec	r27
 c5c:	c9 f7       	brne	.-14     	; 0xc50 <__fixunssfsi+0x14>
 c5e:	14 c0       	rjmp	.+40     	; 0xc88 <__fixunssfsi+0x4c>
 c60:	b1 30       	cpi	r27, 0x01	; 1
 c62:	91 f0       	breq	.+36     	; 0xc88 <__fixunssfsi+0x4c>
 c64:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_zero>
 c68:	b1 e0       	ldi	r27, 0x01	; 1
 c6a:	08 95       	ret
 c6c:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__fp_zero>
 c70:	67 2f       	mov	r22, r23
 c72:	78 2f       	mov	r23, r24
 c74:	88 27       	eor	r24, r24
 c76:	b8 5f       	subi	r27, 0xF8	; 248
 c78:	39 f0       	breq	.+14     	; 0xc88 <__fixunssfsi+0x4c>
 c7a:	b9 3f       	cpi	r27, 0xF9	; 249
 c7c:	cc f3       	brlt	.-14     	; 0xc70 <__fixunssfsi+0x34>
 c7e:	86 95       	lsr	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	b3 95       	inc	r27
 c86:	d9 f7       	brne	.-10     	; 0xc7e <__fixunssfsi+0x42>
 c88:	3e f4       	brtc	.+14     	; 0xc98 <__fixunssfsi+0x5c>
 c8a:	90 95       	com	r25
 c8c:	80 95       	com	r24
 c8e:	70 95       	com	r23
 c90:	61 95       	neg	r22
 c92:	7f 4f       	sbci	r23, 0xFF	; 255
 c94:	8f 4f       	sbci	r24, 0xFF	; 255
 c96:	9f 4f       	sbci	r25, 0xFF	; 255
 c98:	08 95       	ret

00000c9a <__floatunsisf>:
 c9a:	e8 94       	clt
 c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <__floatsisf+0x12>

00000c9e <__floatsisf>:
 c9e:	97 fb       	bst	r25, 7
 ca0:	3e f4       	brtc	.+14     	; 0xcb0 <__floatsisf+0x12>
 ca2:	90 95       	com	r25
 ca4:	80 95       	com	r24
 ca6:	70 95       	com	r23
 ca8:	61 95       	neg	r22
 caa:	7f 4f       	sbci	r23, 0xFF	; 255
 cac:	8f 4f       	sbci	r24, 0xFF	; 255
 cae:	9f 4f       	sbci	r25, 0xFF	; 255
 cb0:	99 23       	and	r25, r25
 cb2:	a9 f0       	breq	.+42     	; 0xcde <__floatsisf+0x40>
 cb4:	f9 2f       	mov	r31, r25
 cb6:	96 e9       	ldi	r25, 0x96	; 150
 cb8:	bb 27       	eor	r27, r27
 cba:	93 95       	inc	r25
 cbc:	f6 95       	lsr	r31
 cbe:	87 95       	ror	r24
 cc0:	77 95       	ror	r23
 cc2:	67 95       	ror	r22
 cc4:	b7 95       	ror	r27
 cc6:	f1 11       	cpse	r31, r1
 cc8:	f8 cf       	rjmp	.-16     	; 0xcba <__floatsisf+0x1c>
 cca:	fa f4       	brpl	.+62     	; 0xd0a <__floatsisf+0x6c>
 ccc:	bb 0f       	add	r27, r27
 cce:	11 f4       	brne	.+4      	; 0xcd4 <__floatsisf+0x36>
 cd0:	60 ff       	sbrs	r22, 0
 cd2:	1b c0       	rjmp	.+54     	; 0xd0a <__floatsisf+0x6c>
 cd4:	6f 5f       	subi	r22, 0xFF	; 255
 cd6:	7f 4f       	sbci	r23, 0xFF	; 255
 cd8:	8f 4f       	sbci	r24, 0xFF	; 255
 cda:	9f 4f       	sbci	r25, 0xFF	; 255
 cdc:	16 c0       	rjmp	.+44     	; 0xd0a <__floatsisf+0x6c>
 cde:	88 23       	and	r24, r24
 ce0:	11 f0       	breq	.+4      	; 0xce6 <__floatsisf+0x48>
 ce2:	96 e9       	ldi	r25, 0x96	; 150
 ce4:	11 c0       	rjmp	.+34     	; 0xd08 <__floatsisf+0x6a>
 ce6:	77 23       	and	r23, r23
 ce8:	21 f0       	breq	.+8      	; 0xcf2 <__floatsisf+0x54>
 cea:	9e e8       	ldi	r25, 0x8E	; 142
 cec:	87 2f       	mov	r24, r23
 cee:	76 2f       	mov	r23, r22
 cf0:	05 c0       	rjmp	.+10     	; 0xcfc <__floatsisf+0x5e>
 cf2:	66 23       	and	r22, r22
 cf4:	71 f0       	breq	.+28     	; 0xd12 <__floatsisf+0x74>
 cf6:	96 e8       	ldi	r25, 0x86	; 134
 cf8:	86 2f       	mov	r24, r22
 cfa:	70 e0       	ldi	r23, 0x00	; 0
 cfc:	60 e0       	ldi	r22, 0x00	; 0
 cfe:	2a f0       	brmi	.+10     	; 0xd0a <__floatsisf+0x6c>
 d00:	9a 95       	dec	r25
 d02:	66 0f       	add	r22, r22
 d04:	77 1f       	adc	r23, r23
 d06:	88 1f       	adc	r24, r24
 d08:	da f7       	brpl	.-10     	; 0xd00 <__floatsisf+0x62>
 d0a:	88 0f       	add	r24, r24
 d0c:	96 95       	lsr	r25
 d0e:	87 95       	ror	r24
 d10:	97 f9       	bld	r25, 7
 d12:	08 95       	ret

00000d14 <__fp_inf>:
 d14:	97 f9       	bld	r25, 7
 d16:	9f 67       	ori	r25, 0x7F	; 127
 d18:	80 e8       	ldi	r24, 0x80	; 128
 d1a:	70 e0       	ldi	r23, 0x00	; 0
 d1c:	60 e0       	ldi	r22, 0x00	; 0
 d1e:	08 95       	ret

00000d20 <__fp_nan>:
 d20:	9f ef       	ldi	r25, 0xFF	; 255
 d22:	80 ec       	ldi	r24, 0xC0	; 192
 d24:	08 95       	ret

00000d26 <__fp_pscA>:
 d26:	00 24       	eor	r0, r0
 d28:	0a 94       	dec	r0
 d2a:	16 16       	cp	r1, r22
 d2c:	17 06       	cpc	r1, r23
 d2e:	18 06       	cpc	r1, r24
 d30:	09 06       	cpc	r0, r25
 d32:	08 95       	ret

00000d34 <__fp_pscB>:
 d34:	00 24       	eor	r0, r0
 d36:	0a 94       	dec	r0
 d38:	12 16       	cp	r1, r18
 d3a:	13 06       	cpc	r1, r19
 d3c:	14 06       	cpc	r1, r20
 d3e:	05 06       	cpc	r0, r21
 d40:	08 95       	ret

00000d42 <__fp_round>:
 d42:	09 2e       	mov	r0, r25
 d44:	03 94       	inc	r0
 d46:	00 0c       	add	r0, r0
 d48:	11 f4       	brne	.+4      	; 0xd4e <__fp_round+0xc>
 d4a:	88 23       	and	r24, r24
 d4c:	52 f0       	brmi	.+20     	; 0xd62 <__fp_round+0x20>
 d4e:	bb 0f       	add	r27, r27
 d50:	40 f4       	brcc	.+16     	; 0xd62 <__fp_round+0x20>
 d52:	bf 2b       	or	r27, r31
 d54:	11 f4       	brne	.+4      	; 0xd5a <__fp_round+0x18>
 d56:	60 ff       	sbrs	r22, 0
 d58:	04 c0       	rjmp	.+8      	; 0xd62 <__fp_round+0x20>
 d5a:	6f 5f       	subi	r22, 0xFF	; 255
 d5c:	7f 4f       	sbci	r23, 0xFF	; 255
 d5e:	8f 4f       	sbci	r24, 0xFF	; 255
 d60:	9f 4f       	sbci	r25, 0xFF	; 255
 d62:	08 95       	ret

00000d64 <__fp_split3>:
 d64:	57 fd       	sbrc	r21, 7
 d66:	90 58       	subi	r25, 0x80	; 128
 d68:	44 0f       	add	r20, r20
 d6a:	55 1f       	adc	r21, r21
 d6c:	59 f0       	breq	.+22     	; 0xd84 <__fp_splitA+0x10>
 d6e:	5f 3f       	cpi	r21, 0xFF	; 255
 d70:	71 f0       	breq	.+28     	; 0xd8e <__fp_splitA+0x1a>
 d72:	47 95       	ror	r20

00000d74 <__fp_splitA>:
 d74:	88 0f       	add	r24, r24
 d76:	97 fb       	bst	r25, 7
 d78:	99 1f       	adc	r25, r25
 d7a:	61 f0       	breq	.+24     	; 0xd94 <__fp_splitA+0x20>
 d7c:	9f 3f       	cpi	r25, 0xFF	; 255
 d7e:	79 f0       	breq	.+30     	; 0xd9e <__fp_splitA+0x2a>
 d80:	87 95       	ror	r24
 d82:	08 95       	ret
 d84:	12 16       	cp	r1, r18
 d86:	13 06       	cpc	r1, r19
 d88:	14 06       	cpc	r1, r20
 d8a:	55 1f       	adc	r21, r21
 d8c:	f2 cf       	rjmp	.-28     	; 0xd72 <__fp_split3+0xe>
 d8e:	46 95       	lsr	r20
 d90:	f1 df       	rcall	.-30     	; 0xd74 <__fp_splitA>
 d92:	08 c0       	rjmp	.+16     	; 0xda4 <__fp_splitA+0x30>
 d94:	16 16       	cp	r1, r22
 d96:	17 06       	cpc	r1, r23
 d98:	18 06       	cpc	r1, r24
 d9a:	99 1f       	adc	r25, r25
 d9c:	f1 cf       	rjmp	.-30     	; 0xd80 <__fp_splitA+0xc>
 d9e:	86 95       	lsr	r24
 da0:	71 05       	cpc	r23, r1
 da2:	61 05       	cpc	r22, r1
 da4:	08 94       	sec
 da6:	08 95       	ret

00000da8 <__fp_zero>:
 da8:	e8 94       	clt

00000daa <__fp_szero>:
 daa:	bb 27       	eor	r27, r27
 dac:	66 27       	eor	r22, r22
 dae:	77 27       	eor	r23, r23
 db0:	cb 01       	movw	r24, r22
 db2:	97 f9       	bld	r25, 7
 db4:	08 95       	ret

00000db6 <__mulsf3>:
 db6:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulsf3x>
 dba:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
 dbe:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
 dc2:	38 f0       	brcs	.+14     	; 0xdd2 <__mulsf3+0x1c>
 dc4:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
 dc8:	20 f0       	brcs	.+8      	; 0xdd2 <__mulsf3+0x1c>
 dca:	95 23       	and	r25, r21
 dcc:	11 f0       	breq	.+4      	; 0xdd2 <__mulsf3+0x1c>
 dce:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>
 dd2:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
 dd6:	11 24       	eor	r1, r1
 dd8:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>

00000ddc <__mulsf3x>:
 ddc:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
 de0:	70 f3       	brcs	.-36     	; 0xdbe <__mulsf3+0x8>

00000de2 <__mulsf3_pse>:
 de2:	95 9f       	mul	r25, r21
 de4:	c1 f3       	breq	.-16     	; 0xdd6 <__mulsf3+0x20>
 de6:	95 0f       	add	r25, r21
 de8:	50 e0       	ldi	r21, 0x00	; 0
 dea:	55 1f       	adc	r21, r21
 dec:	62 9f       	mul	r22, r18
 dee:	f0 01       	movw	r30, r0
 df0:	72 9f       	mul	r23, r18
 df2:	bb 27       	eor	r27, r27
 df4:	f0 0d       	add	r31, r0
 df6:	b1 1d       	adc	r27, r1
 df8:	63 9f       	mul	r22, r19
 dfa:	aa 27       	eor	r26, r26
 dfc:	f0 0d       	add	r31, r0
 dfe:	b1 1d       	adc	r27, r1
 e00:	aa 1f       	adc	r26, r26
 e02:	64 9f       	mul	r22, r20
 e04:	66 27       	eor	r22, r22
 e06:	b0 0d       	add	r27, r0
 e08:	a1 1d       	adc	r26, r1
 e0a:	66 1f       	adc	r22, r22
 e0c:	82 9f       	mul	r24, r18
 e0e:	22 27       	eor	r18, r18
 e10:	b0 0d       	add	r27, r0
 e12:	a1 1d       	adc	r26, r1
 e14:	62 1f       	adc	r22, r18
 e16:	73 9f       	mul	r23, r19
 e18:	b0 0d       	add	r27, r0
 e1a:	a1 1d       	adc	r26, r1
 e1c:	62 1f       	adc	r22, r18
 e1e:	83 9f       	mul	r24, r19
 e20:	a0 0d       	add	r26, r0
 e22:	61 1d       	adc	r22, r1
 e24:	22 1f       	adc	r18, r18
 e26:	74 9f       	mul	r23, r20
 e28:	33 27       	eor	r19, r19
 e2a:	a0 0d       	add	r26, r0
 e2c:	61 1d       	adc	r22, r1
 e2e:	23 1f       	adc	r18, r19
 e30:	84 9f       	mul	r24, r20
 e32:	60 0d       	add	r22, r0
 e34:	21 1d       	adc	r18, r1
 e36:	82 2f       	mov	r24, r18
 e38:	76 2f       	mov	r23, r22
 e3a:	6a 2f       	mov	r22, r26
 e3c:	11 24       	eor	r1, r1
 e3e:	9f 57       	subi	r25, 0x7F	; 127
 e40:	50 40       	sbci	r21, 0x00	; 0
 e42:	9a f0       	brmi	.+38     	; 0xe6a <__mulsf3_pse+0x88>
 e44:	f1 f0       	breq	.+60     	; 0xe82 <__mulsf3_pse+0xa0>
 e46:	88 23       	and	r24, r24
 e48:	4a f0       	brmi	.+18     	; 0xe5c <__mulsf3_pse+0x7a>
 e4a:	ee 0f       	add	r30, r30
 e4c:	ff 1f       	adc	r31, r31
 e4e:	bb 1f       	adc	r27, r27
 e50:	66 1f       	adc	r22, r22
 e52:	77 1f       	adc	r23, r23
 e54:	88 1f       	adc	r24, r24
 e56:	91 50       	subi	r25, 0x01	; 1
 e58:	50 40       	sbci	r21, 0x00	; 0
 e5a:	a9 f7       	brne	.-22     	; 0xe46 <__mulsf3_pse+0x64>
 e5c:	9e 3f       	cpi	r25, 0xFE	; 254
 e5e:	51 05       	cpc	r21, r1
 e60:	80 f0       	brcs	.+32     	; 0xe82 <__mulsf3_pse+0xa0>
 e62:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_inf>
 e66:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>
 e6a:	5f 3f       	cpi	r21, 0xFF	; 255
 e6c:	e4 f3       	brlt	.-8      	; 0xe66 <__mulsf3_pse+0x84>
 e6e:	98 3e       	cpi	r25, 0xE8	; 232
 e70:	d4 f3       	brlt	.-12     	; 0xe66 <__mulsf3_pse+0x84>
 e72:	86 95       	lsr	r24
 e74:	77 95       	ror	r23
 e76:	67 95       	ror	r22
 e78:	b7 95       	ror	r27
 e7a:	f7 95       	ror	r31
 e7c:	e7 95       	ror	r30
 e7e:	9f 5f       	subi	r25, 0xFF	; 255
 e80:	c1 f7       	brne	.-16     	; 0xe72 <__mulsf3_pse+0x90>
 e82:	fe 2b       	or	r31, r30
 e84:	88 0f       	add	r24, r24
 e86:	91 1d       	adc	r25, r1
 e88:	96 95       	lsr	r25
 e8a:	87 95       	ror	r24
 e8c:	97 f9       	bld	r25, 7
 e8e:	08 95       	ret

00000e90 <itoa>:
 e90:	45 32       	cpi	r20, 0x25	; 37
 e92:	51 05       	cpc	r21, r1
 e94:	20 f4       	brcc	.+8      	; 0xe9e <itoa+0xe>
 e96:	42 30       	cpi	r20, 0x02	; 2
 e98:	10 f0       	brcs	.+4      	; 0xe9e <itoa+0xe>
 e9a:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__itoa_ncheck>
 e9e:	fb 01       	movw	r30, r22
 ea0:	10 82       	st	Z, r1
 ea2:	cb 01       	movw	r24, r22
 ea4:	08 95       	ret

00000ea6 <__itoa_ncheck>:
 ea6:	bb 27       	eor	r27, r27
 ea8:	4a 30       	cpi	r20, 0x0A	; 10
 eaa:	31 f4       	brne	.+12     	; 0xeb8 <__itoa_ncheck+0x12>
 eac:	99 23       	and	r25, r25
 eae:	22 f4       	brpl	.+8      	; 0xeb8 <__itoa_ncheck+0x12>
 eb0:	bd e2       	ldi	r27, 0x2D	; 45
 eb2:	90 95       	com	r25
 eb4:	81 95       	neg	r24
 eb6:	9f 4f       	sbci	r25, 0xFF	; 255
 eb8:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__utoa_common>

00000ebc <__utoa_ncheck>:
 ebc:	bb 27       	eor	r27, r27

00000ebe <__utoa_common>:
 ebe:	fb 01       	movw	r30, r22
 ec0:	55 27       	eor	r21, r21
 ec2:	aa 27       	eor	r26, r26
 ec4:	88 0f       	add	r24, r24
 ec6:	99 1f       	adc	r25, r25
 ec8:	aa 1f       	adc	r26, r26
 eca:	a4 17       	cp	r26, r20
 ecc:	10 f0       	brcs	.+4      	; 0xed2 <__utoa_common+0x14>
 ece:	a4 1b       	sub	r26, r20
 ed0:	83 95       	inc	r24
 ed2:	50 51       	subi	r21, 0x10	; 16
 ed4:	b9 f7       	brne	.-18     	; 0xec4 <__utoa_common+0x6>
 ed6:	a0 5d       	subi	r26, 0xD0	; 208
 ed8:	aa 33       	cpi	r26, 0x3A	; 58
 eda:	08 f0       	brcs	.+2      	; 0xede <__utoa_common+0x20>
 edc:	a9 5d       	subi	r26, 0xD9	; 217
 ede:	a1 93       	st	Z+, r26
 ee0:	00 97       	sbiw	r24, 0x00	; 0
 ee2:	79 f7       	brne	.-34     	; 0xec2 <__utoa_common+0x4>
 ee4:	b1 11       	cpse	r27, r1
 ee6:	b1 93       	st	Z+, r27
 ee8:	11 92       	st	Z+, r1
 eea:	cb 01       	movw	r24, r22
 eec:	0c 94 78 07 	jmp	0xef0	; 0xef0 <strrev>

00000ef0 <strrev>:
 ef0:	dc 01       	movw	r26, r24
 ef2:	fc 01       	movw	r30, r24
 ef4:	67 2f       	mov	r22, r23
 ef6:	71 91       	ld	r23, Z+
 ef8:	77 23       	and	r23, r23
 efa:	e1 f7       	brne	.-8      	; 0xef4 <strrev+0x4>
 efc:	32 97       	sbiw	r30, 0x02	; 2
 efe:	04 c0       	rjmp	.+8      	; 0xf08 <strrev+0x18>
 f00:	7c 91       	ld	r23, X
 f02:	6d 93       	st	X+, r22
 f04:	70 83       	st	Z, r23
 f06:	62 91       	ld	r22, -Z
 f08:	ae 17       	cp	r26, r30
 f0a:	bf 07       	cpc	r27, r31
 f0c:	c8 f3       	brcs	.-14     	; 0xf00 <strrev+0x10>
 f0e:	08 95       	ret

00000f10 <_exit>:
 f10:	f8 94       	cli

00000f12 <__stop_program>:
 f12:	ff cf       	rjmp	.-2      	; 0xf12 <__stop_program>
