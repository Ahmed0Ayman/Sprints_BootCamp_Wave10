
Software_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000daa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000daa  00000e3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  0080006a  0080006a  00000e48  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aff  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ed  00000000  00000000  00002b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001040  00000000  00000000  00003538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000514  00000000  00000000  00004578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c9a  00000000  00000000  00004a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011dd  00000000  00000000  00005726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006903  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_4>
  14:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_5>
  18:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__vector_6>
  1c:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_7>
  20:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_8>
  24:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_9>
  28:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_10>
  2c:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 00 	call	0xee	; 0xee <main>
  8a:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <HAL_GPIO_INIT_PIN>:
 * return : void  
 */
void HAL_GPIO_WRITEPORT(StrGPIO_t PORT,uint8_t PINS,GPIO_PinState PINS_STATE)
{
	PORT->PORT_REG &=~(PINS);
	PORT->PORT_REG |=(PINS_STATE);
  92:	dc 01       	movw	r26, r24
  94:	fb 01       	movw	r30, r22
  96:	81 81       	ldd	r24, Z+1	; 0x01
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	99 f4       	brne	.+38     	; 0xc2 <HAL_GPIO_INIT_PIN+0x30>
  9c:	80 81       	ld	r24, Z
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	9c 91       	ld	r25, X
  a2:	11 97       	sbiw	r26, 0x01	; 1
  a4:	89 2b       	or	r24, r25
  a6:	11 96       	adiw	r26, 0x01	; 1
  a8:	8c 93       	st	X, r24
  aa:	11 97       	sbiw	r26, 0x01	; 1
  ac:	82 81       	ldd	r24, Z+2	; 0x02
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	81 f4       	brne	.+32     	; 0xd2 <HAL_GPIO_INIT_PIN+0x40>
  b2:	80 81       	ld	r24, Z
  b4:	12 96       	adiw	r26, 0x02	; 2
  b6:	9c 91       	ld	r25, X
  b8:	12 97       	sbiw	r26, 0x02	; 2
  ba:	89 2b       	or	r24, r25
  bc:	12 96       	adiw	r26, 0x02	; 2
  be:	8c 93       	st	X, r24
  c0:	08 95       	ret
  c2:	90 81       	ld	r25, Z
  c4:	90 95       	com	r25
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	8c 91       	ld	r24, X
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	98 23       	and	r25, r24
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	9c 93       	st	X, r25
  d2:	08 95       	ret

000000d4 <HAL_GPIO_TOGGLE_PIN>:
 * param. : PORT pointer to GPIO port
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_ 
 * return : void  
 */
void HAL_GPIO_TOGGLE_PIN(StrGPIO_t PORT,uint8_t PIN_NUM)
{
  d4:	fc 01       	movw	r30, r24
	    uint8_t old_state = (PORT->PORT_REG & PIN_NUM);
  d6:	92 81       	ldd	r25, Z+2	; 0x02
  d8:	29 2f       	mov	r18, r25
  da:	26 23       	and	r18, r22
	    if (old_state)
  dc:	29 f0       	breq	.+10     	; 0xe8 <HAL_GPIO_TOGGLE_PIN+0x14>
	    {
		    PORT->PORT_REG &= ~old_state ;
  de:	62 2f       	mov	r22, r18
  e0:	60 95       	com	r22
  e2:	69 23       	and	r22, r25
  e4:	62 83       	std	Z+2, r22	; 0x02
  e6:	08 95       	ret
	    }
	    else
	    {
		    PORT->PORT_REG |= PIN_NUM ;
  e8:	69 2b       	or	r22, r25
  ea:	62 83       	std	Z+2, r22	; 0x02
  ec:	08 95       	ret

000000ee <main>:


int main(void)
{
	
		DDRB = 0x40 ;
  ee:	80 e4       	ldi	r24, 0x40	; 64
  f0:	87 bb       	out	0x17, r24	; 23
		DDRD = 0xff ;  
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	81 bb       	out	0x11, r24	; 17
		Software_PWM_Init( GPIOD , GPIO_PIN_5 ,  &Tim_PWM_Handler );
  f6:	40 e6       	ldi	r20, 0x60	; 96
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	60 e2       	ldi	r22, 0x20	; 32
  fc:	80 e3       	ldi	r24, 0x30	; 48
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 c6 03 	call	0x78c	; 0x78c <Software_PWM_Init>
		Software_PWM_Start (&Tim_PWM_Handler);
 104:	80 e6       	ldi	r24, 0x60	; 96
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 36 04 	call	0x86c	; 0x86c <Software_PWM_Start>
		Software_PWM_UpdateDuty(5 ,&Tim_PWM_Handler );
 10c:	60 e6       	ldi	r22, 0x60	; 96
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	85 e0       	ldi	r24, 0x05	; 5
 112:	0e 94 3e 04 	call	0x87c	; 0x87c <Software_PWM_UpdateDuty>
		sei();
 116:	78 94       	sei
		

		
		DDRC = 0x08 ; 
 118:	88 e0       	ldi	r24, 0x08	; 8
 11a:	84 bb       	out	0x14, r24	; 20
		PORTC = 0x08;
 11c:	85 bb       	out	0x15, r24	; 21
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x30>

00000120 <TIM_PWMMode_SetDuty>:
	
	SET_REGISTER_VAL(TCCR1B , TIM16Bit_InputCapture_CAPTURE_EDGE_MASK , Edge ) ;
	
	return TIM_OK ;
	
}
 120:	cf 92       	push	r12
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
 132:	c6 2f       	mov	r28, r22
 134:	00 97       	sbiw	r24, 0x00	; 0
 136:	09 f4       	brne	.+2      	; 0x13a <TIM_PWMMode_SetDuty+0x1a>
 138:	8b c0       	rjmp	.+278    	; 0x250 <TIM_PWMMode_SetDuty+0x130>
 13a:	fc 01       	movw	r30, r24
 13c:	80 85       	ldd	r24, Z+8	; 0x08
 13e:	81 11       	cpse	r24, r1
 140:	08 c0       	rjmp	.+16     	; 0x152 <TIM_PWMMode_SetDuty+0x32>
 142:	96 2f       	mov	r25, r22
 144:	64 e6       	ldi	r22, 0x64	; 100
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 6f 06 	call	0xcde	; 0xcde <__divmodhi4>
 14c:	6c bf       	out	0x3c, r22	; 60
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	82 c0       	rjmp	.+260    	; 0x256 <TIM_PWMMode_SetDuty+0x136>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	49 f4       	brne	.+18     	; 0x168 <TIM_PWMMode_SetDuty+0x48>
 156:	96 2f       	mov	r25, r22
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	64 e6       	ldi	r22, 0x64	; 100
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 6f 06 	call	0xcde	; 0xcde <__divmodhi4>
 162:	63 bd       	out	0x23, r22	; 35
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	77 c0       	rjmp	.+238    	; 0x256 <TIM_PWMMode_SetDuty+0x136>
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <TIM_PWMMode_SetDuty+0x4e>
 16c:	73 c0       	rjmp	.+230    	; 0x254 <TIM_PWMMode_SetDuty+0x134>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	97 bd       	out	0x27, r25	; 39
 174:	86 bd       	out	0x26, r24	; 38
 176:	f8 01       	movw	r30, r16
 178:	86 81       	ldd	r24, Z+6	; 0x06
 17a:	8f 3f       	cpi	r24, 0xFF	; 255
 17c:	b9 f5       	brne	.+110    	; 0x1ec <TIM_PWMMode_SetDuty+0xcc>
 17e:	80 81       	ld	r24, Z
 180:	91 81       	ldd	r25, Z+1	; 0x01
 182:	a2 81       	ldd	r26, Z+2	; 0x02
 184:	b3 81       	ldd	r27, Z+3	; 0x03
 186:	bc 01       	movw	r22, r24
 188:	cd 01       	movw	r24, r26
 18a:	7f 70       	andi	r23, 0x0F	; 15
 18c:	88 27       	eor	r24, r24
 18e:	99 27       	eor	r25, r25
 190:	0f 2e       	mov	r0, r31
 192:	f4 e6       	ldi	r31, 0x64	; 100
 194:	cf 2e       	mov	r12, r31
 196:	d1 2c       	mov	r13, r1
 198:	e1 2c       	mov	r14, r1
 19a:	f1 2c       	mov	r15, r1
 19c:	f0 2d       	mov	r31, r0
 19e:	a7 01       	movw	r20, r14
 1a0:	96 01       	movw	r18, r12
 1a2:	0e 94 83 06 	call	0xd06	; 0xd06 <__udivmodsi4>
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	c2 9f       	mul	r28, r18
 1aa:	c0 01       	movw	r24, r0
 1ac:	c3 9f       	mul	r28, r19
 1ae:	90 0d       	add	r25, r0
 1b0:	d2 9f       	mul	r29, r18
 1b2:	90 0d       	add	r25, r0
 1b4:	11 24       	eor	r1, r1
 1b6:	9b bd       	out	0x2b, r25	; 43
 1b8:	8a bd       	out	0x2a, r24	; 42
 1ba:	f8 01       	movw	r30, r16
 1bc:	80 81       	ld	r24, Z
 1be:	91 81       	ldd	r25, Z+1	; 0x01
 1c0:	a2 81       	ldd	r26, Z+2	; 0x02
 1c2:	b3 81       	ldd	r27, Z+3	; 0x03
 1c4:	bc 01       	movw	r22, r24
 1c6:	cd 01       	movw	r24, r26
 1c8:	7f 70       	andi	r23, 0x0F	; 15
 1ca:	88 27       	eor	r24, r24
 1cc:	99 27       	eor	r25, r25
 1ce:	a7 01       	movw	r20, r14
 1d0:	96 01       	movw	r18, r12
 1d2:	0e 94 83 06 	call	0xd06	; 0xd06 <__udivmodsi4>
 1d6:	c2 9f       	mul	r28, r18
 1d8:	c0 01       	movw	r24, r0
 1da:	c3 9f       	mul	r28, r19
 1dc:	90 0d       	add	r25, r0
 1de:	d2 9f       	mul	r29, r18
 1e0:	90 0d       	add	r25, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	99 bd       	out	0x29, r25	; 41
 1e6:	88 bd       	out	0x28, r24	; 40
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	35 c0       	rjmp	.+106    	; 0x256 <TIM_PWMMode_SetDuty+0x136>
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	c1 f4       	brne	.+48     	; 0x220 <TIM_PWMMode_SetDuty+0x100>
 1f0:	f8 01       	movw	r30, r16
 1f2:	80 81       	ld	r24, Z
 1f4:	91 81       	ldd	r25, Z+1	; 0x01
 1f6:	a2 81       	ldd	r26, Z+2	; 0x02
 1f8:	b3 81       	ldd	r27, Z+3	; 0x03
 1fa:	9c 01       	movw	r18, r24
 1fc:	ad 01       	movw	r20, r26
 1fe:	3f 70       	andi	r19, 0x0F	; 15
 200:	44 27       	eor	r20, r20
 202:	55 27       	eor	r21, r21
 204:	a6 2f       	mov	r26, r22
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__muluhisi3>
 20c:	24 e6       	ldi	r18, 0x64	; 100
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	0e 94 83 06 	call	0xd06	; 0xd06 <__udivmodsi4>
 218:	39 bd       	out	0x29, r19	; 41
 21a:	28 bd       	out	0x28, r18	; 40
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	1b c0       	rjmp	.+54     	; 0x256 <TIM_PWMMode_SetDuty+0x136>
 220:	f8 01       	movw	r30, r16
 222:	80 81       	ld	r24, Z
 224:	91 81       	ldd	r25, Z+1	; 0x01
 226:	a2 81       	ldd	r26, Z+2	; 0x02
 228:	b3 81       	ldd	r27, Z+3	; 0x03
 22a:	9c 01       	movw	r18, r24
 22c:	ad 01       	movw	r20, r26
 22e:	3f 70       	andi	r19, 0x0F	; 15
 230:	44 27       	eor	r20, r20
 232:	55 27       	eor	r21, r21
 234:	a6 2f       	mov	r26, r22
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__muluhisi3>
 23c:	24 e6       	ldi	r18, 0x64	; 100
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	0e 94 83 06 	call	0xd06	; 0xd06 <__udivmodsi4>
 248:	3b bd       	out	0x2b, r19	; 43
 24a:	2a bd       	out	0x2a, r18	; 42
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	03 c0       	rjmp	.+6      	; 0x256 <TIM_PWMMode_SetDuty+0x136>
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	01 c0       	rjmp	.+2      	; 0x256 <TIM_PWMMode_SetDuty+0x136>
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	df 90       	pop	r13
 264:	cf 90       	pop	r12
 266:	08 95       	ret

00000268 <TIM_Start>:
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	29 f1       	breq	.+74     	; 0x2b6 <TIM_Start+0x4e>
 26c:	fc 01       	movw	r30, r24
 26e:	20 85       	ldd	r18, Z+8	; 0x08
 270:	21 11       	cpse	r18, r1
 272:	09 c0       	rjmp	.+18     	; 0x286 <TIM_Start+0x1e>
 274:	23 b7       	in	r18, 0x33	; 51
 276:	28 7f       	andi	r18, 0xF8	; 248
 278:	23 bf       	out	0x33, r18	; 51
 27a:	23 b7       	in	r18, 0x33	; 51
 27c:	87 81       	ldd	r24, Z+7	; 0x07
 27e:	82 2b       	or	r24, r18
 280:	83 bf       	out	0x33, r24	; 51
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret
 286:	22 30       	cpi	r18, 0x02	; 2
 288:	51 f4       	brne	.+20     	; 0x29e <TIM_Start+0x36>
 28a:	25 b5       	in	r18, 0x25	; 37
 28c:	28 7f       	andi	r18, 0xF8	; 248
 28e:	25 bd       	out	0x25, r18	; 37
 290:	25 b5       	in	r18, 0x25	; 37
 292:	fc 01       	movw	r30, r24
 294:	87 81       	ldd	r24, Z+7	; 0x07
 296:	82 2b       	or	r24, r18
 298:	85 bd       	out	0x25, r24	; 37
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret
 29e:	21 30       	cpi	r18, 0x01	; 1
 2a0:	61 f4       	brne	.+24     	; 0x2ba <TIM_Start+0x52>
 2a2:	2e b5       	in	r18, 0x2e	; 46
 2a4:	28 7f       	andi	r18, 0xF8	; 248
 2a6:	2e bd       	out	0x2e, r18	; 46
 2a8:	2e b5       	in	r18, 0x2e	; 46
 2aa:	fc 01       	movw	r30, r24
 2ac:	87 81       	ldd	r24, Z+7	; 0x07
 2ae:	82 2b       	or	r24, r18
 2b0:	8e bd       	out	0x2e, r24	; 46
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	08 95       	ret
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	08 95       	ret

000002be <TIM_Stop>:
 2be:	81 11       	cpse	r24, r1
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <TIM_Stop+0x12>
 2c2:	83 b7       	in	r24, 0x33	; 51
 2c4:	88 7f       	andi	r24, 0xF8	; 248
 2c6:	83 bf       	out	0x33, r24	; 51
 2c8:	83 b7       	in	r24, 0x33	; 51
 2ca:	83 bf       	out	0x33, r24	; 51
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	39 f4       	brne	.+14     	; 0x2e2 <TIM_Stop+0x24>
 2d4:	85 b5       	in	r24, 0x25	; 37
 2d6:	88 7f       	andi	r24, 0xF8	; 248
 2d8:	85 bd       	out	0x25, r24	; 37
 2da:	85 b5       	in	r24, 0x25	; 37
 2dc:	85 bd       	out	0x25, r24	; 37
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	08 95       	ret
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	39 f4       	brne	.+14     	; 0x2f4 <TIM_Stop+0x36>
 2e6:	8e b5       	in	r24, 0x2e	; 46
 2e8:	88 7f       	andi	r24, 0xF8	; 248
 2ea:	8e bd       	out	0x2e, r24	; 46
 2ec:	8e b5       	in	r24, 0x2e	; 46
 2ee:	8e bd       	out	0x2e, r24	; 46
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	08 95       	ret

000002f8 <TIM_PWMModeInit>:
 2f8:	fc 01       	movw	r30, r24
 2fa:	89 2b       	or	r24, r25
 2fc:	09 f4       	brne	.+2      	; 0x300 <TIM_PWMModeInit+0x8>
 2fe:	98 c0       	rjmp	.+304    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 300:	80 85       	ldd	r24, Z+8	; 0x08
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	09 f0       	breq	.+2      	; 0x308 <TIM_PWMModeInit+0x10>
 306:	6d c0       	rjmp	.+218    	; 0x3e2 <TIM_PWMModeInit+0xea>
 308:	80 81       	ld	r24, Z
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	a2 81       	ldd	r26, Z+2	; 0x02
 30e:	b3 81       	ldd	r27, Z+3	; 0x03
 310:	94 ff       	sbrs	r25, 4
 312:	33 c0       	rjmp	.+102    	; 0x37a <TIM_PWMModeInit+0x82>
 314:	aa 27       	eor	r26, r26
 316:	bb 27       	eor	r27, r27
 318:	8f 3f       	cpi	r24, 0xFF	; 255
 31a:	20 e1       	ldi	r18, 0x10	; 16
 31c:	92 07       	cpc	r25, r18
 31e:	a1 05       	cpc	r26, r1
 320:	b1 05       	cpc	r27, r1
 322:	29 f4       	brne	.+10     	; 0x32e <TIM_PWMModeInit+0x36>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	8f bd       	out	0x2f, r24	; 47
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	8e bd       	out	0x2e, r24	; 46
 32c:	1f c0       	rjmp	.+62     	; 0x36c <TIM_PWMModeInit+0x74>
 32e:	8f 3f       	cpi	r24, 0xFF	; 255
 330:	21 e1       	ldi	r18, 0x11	; 17
 332:	92 07       	cpc	r25, r18
 334:	a1 05       	cpc	r26, r1
 336:	b1 05       	cpc	r27, r1
 338:	29 f4       	brne	.+10     	; 0x344 <TIM_PWMModeInit+0x4c>
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	8f bd       	out	0x2f, r24	; 47
 33e:	88 e0       	ldi	r24, 0x08	; 8
 340:	8e bd       	out	0x2e, r24	; 46
 342:	14 c0       	rjmp	.+40     	; 0x36c <TIM_PWMModeInit+0x74>
 344:	8f 3f       	cpi	r24, 0xFF	; 255
 346:	23 e1       	ldi	r18, 0x13	; 19
 348:	92 07       	cpc	r25, r18
 34a:	a1 05       	cpc	r26, r1
 34c:	b1 05       	cpc	r27, r1
 34e:	29 f4       	brne	.+10     	; 0x35a <TIM_PWMModeInit+0x62>
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	8f bd       	out	0x2f, r24	; 47
 354:	88 e0       	ldi	r24, 0x08	; 8
 356:	8e bd       	out	0x2e, r24	; 46
 358:	09 c0       	rjmp	.+18     	; 0x36c <TIM_PWMModeInit+0x74>
 35a:	8f 3f       	cpi	r24, 0xFF	; 255
 35c:	9f 41       	sbci	r25, 0x1F	; 31
 35e:	a1 05       	cpc	r26, r1
 360:	b1 05       	cpc	r27, r1
 362:	21 f4       	brne	.+8      	; 0x36c <TIM_PWMModeInit+0x74>
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	8f bd       	out	0x2f, r24	; 47
 368:	88 e1       	ldi	r24, 0x18	; 24
 36a:	8e bd       	out	0x2e, r24	; 46
 36c:	81 85       	ldd	r24, Z+9	; 0x09
 36e:	88 23       	and	r24, r24
 370:	89 f0       	breq	.+34     	; 0x394 <TIM_PWMModeInit+0x9c>
 372:	99 b7       	in	r25, 0x39	; 57
 374:	89 2b       	or	r24, r25
 376:	89 bf       	out	0x39, r24	; 57
 378:	0d c0       	rjmp	.+26     	; 0x394 <TIM_PWMModeInit+0x9c>
 37a:	95 ff       	sbrs	r25, 5
 37c:	05 c0       	rjmp	.+10     	; 0x388 <TIM_PWMModeInit+0x90>
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	8f bd       	out	0x2f, r24	; 47
 382:	80 e1       	ldi	r24, 0x10	; 16
 384:	8e bd       	out	0x2e, r24	; 46
 386:	06 c0       	rjmp	.+12     	; 0x394 <TIM_PWMModeInit+0x9c>
 388:	96 ff       	sbrs	r25, 6
 38a:	04 c0       	rjmp	.+8      	; 0x394 <TIM_PWMModeInit+0x9c>
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	8f bd       	out	0x2f, r24	; 47
 390:	80 e1       	ldi	r24, 0x10	; 16
 392:	8e bd       	out	0x2e, r24	; 46
 394:	26 81       	ldd	r18, Z+6	; 0x06
 396:	2f 3f       	cpi	r18, 0xFF	; 255
 398:	c1 f4       	brne	.+48     	; 0x3ca <TIM_PWMModeInit+0xd2>
 39a:	2f b5       	in	r18, 0x2f	; 47
 39c:	94 81       	ldd	r25, Z+4	; 0x04
 39e:	89 2f       	mov	r24, r25
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	ac 01       	movw	r20, r24
 3a4:	00 24       	eor	r0, r0
 3a6:	56 95       	lsr	r21
 3a8:	47 95       	ror	r20
 3aa:	07 94       	ror	r0
 3ac:	56 95       	lsr	r21
 3ae:	47 95       	ror	r20
 3b0:	07 94       	ror	r0
 3b2:	54 2f       	mov	r21, r20
 3b4:	40 2d       	mov	r20, r0
 3b6:	82 95       	swap	r24
 3b8:	92 95       	swap	r25
 3ba:	90 7f       	andi	r25, 0xF0	; 240
 3bc:	98 27       	eor	r25, r24
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	98 27       	eor	r25, r24
 3c2:	84 2b       	or	r24, r20
 3c4:	82 2b       	or	r24, r18
 3c6:	8f bd       	out	0x2f, r24	; 47
 3c8:	2b c0       	rjmp	.+86     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3ca:	3f b5       	in	r19, 0x2f	; 47
 3cc:	94 81       	ldd	r25, Z+4	; 0x04
 3ce:	89 2f       	mov	r24, r25
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <TIM_PWMModeInit+0xe0>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	2a 95       	dec	r18
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <TIM_PWMModeInit+0xdc>
 3dc:	83 2b       	or	r24, r19
 3de:	8f bd       	out	0x2f, r24	; 47
 3e0:	1f c0       	rjmp	.+62     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3e2:	88 23       	and	r24, r24
 3e4:	11 f0       	breq	.+4      	; 0x3ea <TIM_PWMModeInit+0xf2>
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	29 f5       	brne	.+74     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3ea:	81 11       	cpse	r24, r1
 3ec:	0c c0       	rjmp	.+24     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3ee:	83 b7       	in	r24, 0x33	; 51
 3f0:	87 78       	andi	r24, 0x87	; 135
 3f2:	83 bf       	out	0x33, r24	; 51
 3f4:	93 b7       	in	r25, 0x33	; 51
 3f6:	24 81       	ldd	r18, Z+4	; 0x04
 3f8:	82 81       	ldd	r24, Z+2	; 0x02
 3fa:	82 2b       	or	r24, r18
 3fc:	89 2b       	or	r24, r25
 3fe:	83 bf       	out	0x33, r24	; 51
 400:	85 81       	ldd	r24, Z+5	; 0x05
 402:	8c bf       	out	0x3c, r24	; 60
 404:	0d c0       	rjmp	.+26     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	59 f4       	brne	.+22     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 40a:	85 b5       	in	r24, 0x25	; 37
 40c:	87 78       	andi	r24, 0x87	; 135
 40e:	85 bd       	out	0x25, r24	; 37
 410:	95 b5       	in	r25, 0x25	; 37
 412:	24 81       	ldd	r18, Z+4	; 0x04
 414:	82 81       	ldd	r24, Z+2	; 0x02
 416:	82 2b       	or	r24, r18
 418:	89 2b       	or	r24, r25
 41a:	85 bd       	out	0x25, r24	; 37
 41c:	85 81       	ldd	r24, Z+5	; 0x05
 41e:	83 bd       	out	0x23, r24	; 35
 420:	81 85       	ldd	r24, Z+9	; 0x09
 422:	88 23       	and	r24, r24
 424:	49 f0       	breq	.+18     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 426:	99 b7       	in	r25, 0x39	; 57
 428:	89 2b       	or	r24, r25
 42a:	89 bf       	out	0x39, r24	; 57
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	08 95       	ret
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	08 95       	ret
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	08 95       	ret

0000043c <TIM_CallBack_FuctionSet>:
 * return : current timer value 
 */
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
 43c:	61 15       	cp	r22, r1
 43e:	71 05       	cpc	r23, r1
 440:	09 f4       	brne	.+2      	; 0x444 <TIM_CallBack_FuctionSet+0x8>
 442:	45 c0       	rjmp	.+138    	; 0x4ce <TIM_CallBack_FuctionSet+0x92>
	{
		return TIM_PARAM_ERROR ;
	}
	
	switch(Interrupt_Num)
 444:	88 30       	cpi	r24, 0x08	; 8
 446:	e9 f1       	breq	.+122    	; 0x4c2 <TIM_CallBack_FuctionSet+0x86>
 448:	38 f4       	brcc	.+14     	; 0x458 <TIM_CallBack_FuctionSet+0x1c>
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	81 f0       	breq	.+32     	; 0x46e <TIM_CallBack_FuctionSet+0x32>
 44e:	84 30       	cpi	r24, 0x04	; 4
 450:	61 f1       	breq	.+88     	; 0x4aa <TIM_CallBack_FuctionSet+0x6e>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	f1 f5       	brne	.+124    	; 0x4d2 <TIM_CallBack_FuctionSet+0x96>
 456:	11 c0       	rjmp	.+34     	; 0x47a <TIM_CallBack_FuctionSet+0x3e>
 458:	80 32       	cpi	r24, 0x20	; 32
 45a:	09 f1       	breq	.+66     	; 0x49e <TIM_CallBack_FuctionSet+0x62>
 45c:	18 f4       	brcc	.+6      	; 0x464 <TIM_CallBack_FuctionSet+0x28>
 45e:	80 31       	cpi	r24, 0x10	; 16
 460:	51 f1       	breq	.+84     	; 0x4b6 <TIM_CallBack_FuctionSet+0x7a>
 462:	37 c0       	rjmp	.+110    	; 0x4d2 <TIM_CallBack_FuctionSet+0x96>
 464:	80 34       	cpi	r24, 0x40	; 64
 466:	a9 f0       	breq	.+42     	; 0x492 <TIM_CallBack_FuctionSet+0x56>
 468:	80 38       	cpi	r24, 0x80	; 128
 46a:	69 f0       	breq	.+26     	; 0x486 <TIM_CallBack_FuctionSet+0x4a>
 46c:	32 c0       	rjmp	.+100    	; 0x4d2 <TIM_CallBack_FuctionSet+0x96>
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
 46e:	70 93 79 00 	sts	0x0079, r23	; 0x800079 <COMPMatch0_Fun+0x1>
 472:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <COMPMatch0_Fun>
	}
	
	


	return TIM_OK ; 
 476:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
 478:	08 95       	ret
		case  TIM_0_IT_OVER :
				OverFlow0_Fun = callbackfunction ;
 47a:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <OverFlow0_Fun+0x1>
 47e:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <OverFlow0_Fun>
	}
	
	


	return TIM_OK ; 
 482:	80 e0       	ldi	r24, 0x00	; 0
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
		case  TIM_0_IT_OVER :
				OverFlow0_Fun = callbackfunction ;
		break; 
 484:	08 95       	ret
		case TIM_2_IT_COMP :
				COMPMatch2_Fun = callbackfunction ;
 486:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <COMPMatch2_Fun+0x1>
 48a:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <COMPMatch2_Fun>
	}
	
	


	return TIM_OK ; 
 48e:	80 e0       	ldi	r24, 0x00	; 0
				OverFlow0_Fun = callbackfunction ;
		break; 
		case TIM_2_IT_COMP :
				COMPMatch2_Fun = callbackfunction ;
		
		break; 
 490:	08 95       	ret
		case TIM_2_IT_OVER :
				OverFlow2_Fun = callbackfunction ;
 492:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <OverFlow2_Fun+0x1>
 496:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <OverFlow2_Fun>
	}
	
	


	return TIM_OK ; 
 49a:	80 e0       	ldi	r24, 0x00	; 0
		
		break; 
		case TIM_2_IT_OVER :
				OverFlow2_Fun = callbackfunction ;
		
		break ;
 49c:	08 95       	ret
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
 49e:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <InputCapture_callbackfunction+0x1>
 4a2:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <InputCapture_callbackfunction>
	}
	
	


	return TIM_OK ; 
 4a6:	80 e0       	ldi	r24, 0x00	; 0
				OverFlow2_Fun = callbackfunction ;
		
		break ;
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
		break; 
 4a8:	08 95       	ret
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
 4aa:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <__data_end+0x1>
 4ae:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <__data_end>
	}
	
	


	return TIM_OK ; 
 4b2:	80 e0       	ldi	r24, 0x00	; 0
		case TIM_1_IT_CAPT :
						InputCapture_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
		break; 
 4b4:	08 95       	ret
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
 4b6:	70 93 6f 00 	sts	0x006F, r23	; 0x80006f <CompareA_callbackfunction+0x1>
 4ba:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <CompareA_callbackfunction>
	}
	
	


	return TIM_OK ; 
 4be:	80 e0       	ldi	r24, 0x00	; 0
		case  TIM_1_IT_OVER :
						Overflow_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
		break; 
 4c0:	08 95       	ret
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
 4c2:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <CompareB_callbackfunction+0x1>
 4c6:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <CompareB_callbackfunction>
	}
	
	


	return TIM_OK ; 
 4ca:	80 e0       	ldi	r24, 0x00	; 0
		case  TIM_1_IT_COMPA :
						CompareA_callbackfunction = callbackfunction ;
		break; 
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
 4cc:	08 95       	ret
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
	{
		return TIM_PARAM_ERROR ;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	08 95       	ret
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
		default:
		
			return TIM_CONFIG_ERROR ;
 4d2:	82 e0       	ldi	r24, 0x02	; 2
	


	return TIM_OK ; 
	
}
 4d4:	08 95       	ret

000004d6 <__vector_6>:




void __vector_6(void )	 // timer1 input capture interrupt number
{
 4d6:	1f 92       	push	r1
 4d8:	0f 92       	push	r0
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	0f 92       	push	r0
 4de:	11 24       	eor	r1, r1
 4e0:	2f 93       	push	r18
 4e2:	3f 93       	push	r19
 4e4:	4f 93       	push	r20
 4e6:	5f 93       	push	r21
 4e8:	6f 93       	push	r22
 4ea:	7f 93       	push	r23
 4ec:	8f 93       	push	r24
 4ee:	9f 93       	push	r25
 4f0:	af 93       	push	r26
 4f2:	bf 93       	push	r27
 4f4:	ef 93       	push	r30
 4f6:	ff 93       	push	r31
	InputCapture_callbackfunction();
 4f8:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <InputCapture_callbackfunction>
 4fc:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <InputCapture_callbackfunction+0x1>
 500:	09 95       	icall
}
 502:	ff 91       	pop	r31
 504:	ef 91       	pop	r30
 506:	bf 91       	pop	r27
 508:	af 91       	pop	r26
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	7f 91       	pop	r23
 510:	6f 91       	pop	r22
 512:	5f 91       	pop	r21
 514:	4f 91       	pop	r20
 516:	3f 91       	pop	r19
 518:	2f 91       	pop	r18
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_7>:

void __vector_7(void )		// timer1 CompareA
{
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	2f 93       	push	r18
 530:	3f 93       	push	r19
 532:	4f 93       	push	r20
 534:	5f 93       	push	r21
 536:	6f 93       	push	r22
 538:	7f 93       	push	r23
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
 53e:	af 93       	push	r26
 540:	bf 93       	push	r27
 542:	ef 93       	push	r30
 544:	ff 93       	push	r31
	CompareA_callbackfunction();
 546:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <CompareA_callbackfunction>
 54a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <CompareA_callbackfunction+0x1>
 54e:	09 95       	icall
}
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	bf 91       	pop	r27
 556:	af 91       	pop	r26
 558:	9f 91       	pop	r25
 55a:	8f 91       	pop	r24
 55c:	7f 91       	pop	r23
 55e:	6f 91       	pop	r22
 560:	5f 91       	pop	r21
 562:	4f 91       	pop	r20
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <__vector_8>:
void __vector_8(void )	 // timer1 compareB interrupt number
{
	CompareB_callbackfunction();
 572:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <CompareB_callbackfunction>
 576:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <CompareB_callbackfunction+0x1>
 57a:	09 95       	icall
 57c:	08 95       	ret

0000057e <__vector_9>:
}

void __vector_9(void )		// timer1 overflow
{
	Overflow_callbackfunction() ;
 57e:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <__data_end>
 582:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <__data_end+0x1>
 586:	09 95       	icall
 588:	08 95       	ret

0000058a <__vector_10>:



/* all vectors specific for timer2 and timer0 */
void __vector_10(void)
{
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	2f 93       	push	r18
 596:	3f 93       	push	r19
 598:	4f 93       	push	r20
 59a:	5f 93       	push	r21
 59c:	6f 93       	push	r22
 59e:	7f 93       	push	r23
 5a0:	8f 93       	push	r24
 5a2:	9f 93       	push	r25
 5a4:	af 93       	push	r26
 5a6:	bf 93       	push	r27
 5a8:	ef 93       	push	r30
 5aa:	ff 93       	push	r31
	COMPMatch0_Fun();
 5ac:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <COMPMatch0_Fun>
 5b0:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <COMPMatch0_Fun+0x1>
 5b4:	09 95       	icall
}
 5b6:	ff 91       	pop	r31
 5b8:	ef 91       	pop	r30
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	7f 91       	pop	r23
 5c4:	6f 91       	pop	r22
 5c6:	5f 91       	pop	r21
 5c8:	4f 91       	pop	r20
 5ca:	3f 91       	pop	r19
 5cc:	2f 91       	pop	r18
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_11>:
void __vector_11(void)
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
	OverFlow0_Fun();
 5fa:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <OverFlow0_Fun>
 5fe:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <OverFlow0_Fun+0x1>
 602:	09 95       	icall
}
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	bf 91       	pop	r27
 60a:	af 91       	pop	r26
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <__vector_4>:


void __vector_4(void)
{
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
	COMPMatch2_Fun();
 648:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <COMPMatch2_Fun>
 64c:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <COMPMatch2_Fun+0x1>
 650:	09 95       	icall
}
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <__vector_5>:
void __vector_5(void)
{
 674:	1f 92       	push	r1
 676:	0f 92       	push	r0
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	0f 92       	push	r0
 67c:	11 24       	eor	r1, r1
 67e:	2f 93       	push	r18
 680:	3f 93       	push	r19
 682:	4f 93       	push	r20
 684:	5f 93       	push	r21
 686:	6f 93       	push	r22
 688:	7f 93       	push	r23
 68a:	8f 93       	push	r24
 68c:	9f 93       	push	r25
 68e:	af 93       	push	r26
 690:	bf 93       	push	r27
 692:	ef 93       	push	r30
 694:	ff 93       	push	r31
	OverFlow2_Fun();
 696:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <OverFlow2_Fun>
 69a:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <OverFlow2_Fun+0x1>
 69e:	09 95       	icall
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	7f 91       	pop	r23
 6ae:	6f 91       	pop	r22
 6b0:	5f 91       	pop	r21
 6b2:	4f 91       	pop	r20
 6b4:	3f 91       	pop	r19
 6b6:	2f 91       	pop	r18
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <PWM_Toggle_Timer2>:
	


return UTIL_OK ;

}
 6c2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <ON.1847>
 6c6:	81 11       	cpse	r24, r1
 6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <PWM_Toggle_Timer2+0x16>
 6ca:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Duty_TIM2>
 6ce:	83 bd       	out	0x23, r24	; 35
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <ON.1847>
 6d6:	06 c0       	rjmp	.+12     	; 0x6e4 <PWM_Toggle_Timer2+0x22>
 6d8:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Duty_TIM2>
 6dc:	80 95       	com	r24
 6de:	83 bd       	out	0x23, r24	; 35
 6e0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <ON.1847>
 6e4:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <Duty_TIM2>
 6e8:	88 23       	and	r24, r24
 6ea:	41 f0       	breq	.+16     	; 0x6fc <PWM_Toggle_Timer2+0x3a>
 6ec:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <PWMTim2_PIN>
 6f0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <PWMTim2_PORT>
 6f4:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <PWMTim2_PORT+0x1>
 6f8:	0e 94 6a 00 	call	0xd4	; 0xd4 <HAL_GPIO_TOGGLE_PIN>
 6fc:	08 95       	ret

000006fe <PWM_Toggle_Timer1>:
 6fe:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <ON.1851>
 702:	81 11       	cpse	r24, r1
 704:	0e c0       	rjmp	.+28     	; 0x722 <PWM_Toggle_Timer1+0x24>
 706:	20 91 7d 00 	lds	r18, 0x007D	; 0x80007d <Duty_TIM1>
 70a:	30 91 7e 00 	lds	r19, 0x007E	; 0x80007e <Duty_TIM1+0x1>
 70e:	8f ef       	ldi	r24, 0xFF	; 255
 710:	9f e0       	ldi	r25, 0x0F	; 15
 712:	82 1b       	sub	r24, r18
 714:	93 0b       	sbc	r25, r19
 716:	9b bd       	out	0x2b, r25	; 43
 718:	8a bd       	out	0x2a, r24	; 42
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <ON.1851>
 720:	08 c0       	rjmp	.+16     	; 0x732 <PWM_Toggle_Timer1+0x34>
 722:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Duty_TIM1>
 726:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <Duty_TIM1+0x1>
 72a:	9b bd       	out	0x2b, r25	; 43
 72c:	8a bd       	out	0x2a, r24	; 42
 72e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <ON.1851>
 732:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <Duty_TIM1>
 736:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <Duty_TIM1+0x1>
 73a:	89 2b       	or	r24, r25
 73c:	41 f0       	breq	.+16     	; 0x74e <PWM_Toggle_Timer1+0x50>
 73e:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <PWMTim1_PIN>
 742:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <PWMTim1_PORT>
 746:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <PWMTim1_PORT+0x1>
 74a:	0e 94 6a 00 	call	0xd4	; 0xd4 <HAL_GPIO_TOGGLE_PIN>
 74e:	08 95       	ret

00000750 <PWM_Toggle_Timer0>:
 750:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <ON.1843>
 754:	81 11       	cpse	r24, r1
 756:	07 c0       	rjmp	.+14     	; 0x766 <PWM_Toggle_Timer0+0x16>
 758:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Duty_TIM0>
 75c:	8c bf       	out	0x3c, r24	; 60
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <ON.1843>
 764:	06 c0       	rjmp	.+12     	; 0x772 <PWM_Toggle_Timer0+0x22>
 766:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Duty_TIM0>
 76a:	80 95       	com	r24
 76c:	8c bf       	out	0x3c, r24	; 60
 76e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <ON.1843>
 772:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <Duty_TIM0>
 776:	88 23       	and	r24, r24
 778:	41 f0       	breq	.+16     	; 0x78a <PWM_Toggle_Timer0+0x3a>
 77a:	60 91 8d 00 	lds	r22, 0x008D	; 0x80008d <PWMTim0_PIN>
 77e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <PWMTim0_PORT>
 782:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <PWMTim0_PORT+0x1>
 786:	0e 94 6a 00 	call	0xd4	; 0xd4 <HAL_GPIO_TOGGLE_PIN>
 78a:	08 95       	ret

0000078c <Software_PWM_Init>:
 * Param (input) : PIN_Num Pin number in selected port 
 * Param (input) : Tim_PWM_Handler {Pointer to timer configuration register 
 * Return : Utilies_Status_t typedef to Status 
 */
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
 78c:	ff 92       	push	r15
 78e:	0f 93       	push	r16
 790:	1f 93       	push	r17
 792:	cf 93       	push	r28
 794:	df 93       	push	r29
	
	if(Tim_PWM_Handler == NULL)
 796:	41 15       	cp	r20, r1
 798:	51 05       	cpc	r21, r1
 79a:	09 f4       	brne	.+2      	; 0x79e <Software_PWM_Init+0x12>
 79c:	5e c0       	rjmp	.+188    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 79e:	ea 01       	movw	r28, r20
 7a0:	f6 2e       	mov	r15, r22
 7a2:	8c 01       	movw	r16, r24

	
	
	
	#if SOFTWARE_PWM_CTC_MODE
	Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	9f e0       	ldi	r25, 0x0F	; 15
 7a8:	a8 e0       	ldi	r26, 0x08	; 8
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	88 83       	st	Y, r24
 7ae:	99 83       	std	Y+1, r25	; 0x01
 7b0:	aa 83       	std	Y+2, r26	; 0x02
 7b2:	bb 83       	std	Y+3, r27	; 0x03
		Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
	}else
	{
		;
	}
	TIM_PWMModeInit(Tim_PWM_Handler) ;
 7b4:	ca 01       	movw	r24, r20
 7b6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <TIM_PWMModeInit>
	
	if (Tim_PWM_Handler->Instance  == TIM0)
 7ba:	98 85       	ldd	r25, Y+8	; 0x08
 7bc:	91 11       	cpse	r25, r1
 7be:	1a c0       	rjmp	.+52     	; 0x7f4 <Software_PWM_Init+0x68>
	{
		PWMTim0_PIN.mode = GPIO_MODE_OUTPUT ;
 7c0:	ed e8       	ldi	r30, 0x8D	; 141
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	81 83       	std	Z+1, r24	; 0x01
		PWMTim0_PIN.pin = PIN_Num ;
 7c8:	f0 82       	st	Z, r15
		PWMTim0_PIN.pull = GPIO_NOPULL ;
 7ca:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_INIT_PIN( PORT , &PWMTim0_PIN );
 7cc:	bf 01       	movw	r22, r30
 7ce:	c8 01       	movw	r24, r16
 7d0:	0e 94 49 00 	call	0x92	; 0x92 <HAL_GPIO_INIT_PIN>
		
		PWMTim0_PORT = PORT ;
 7d4:	10 93 86 00 	sts	0x0086, r17	; 0x800086 <PWMTim0_PORT+0x1>
 7d8:	00 93 85 00 	sts	0x0085, r16	; 0x800085 <PWMTim0_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
 7dc:	68 ea       	ldi	r22, 0xA8	; 168
 7de:	73 e0       	ldi	r23, 0x03	; 3
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	0e 94 1e 02 	call	0x43c	; 0x43c <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);
 7e6:	68 ea       	ldi	r22, 0xA8	; 168
 7e8:	73 e0       	ldi	r23, 0x03	; 3
 7ea:	89 85       	ldd	r24, Y+9	; 0x09
 7ec:	0e 94 1e 02 	call	0x43c	; 0x43c <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	36 c0       	rjmp	.+108    	; 0x860 <__stack+0x1>
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);

	}else if (Tim_PWM_Handler->Instance == TIM1)
 7f4:	91 30       	cpi	r25, 0x01	; 1
 7f6:	a9 f4       	brne	.+42     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{	
		PWMTim1_PIN.mode = GPIO_MODE_OUTPUT ;
 7f8:	ea e8       	ldi	r30, 0x8A	; 138
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	81 83       	std	Z+1, r24	; 0x01
		PWMTim1_PIN.pin = PIN_Num ;
 800:	f0 82       	st	Z, r15
		PWMTim1_PIN.pull = GPIO_NOPULL ;
 802:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_INIT_PIN( PORT , &PWMTim1_PIN );
 804:	bf 01       	movw	r22, r30
 806:	c8 01       	movw	r24, r16
 808:	0e 94 49 00 	call	0x92	; 0x92 <HAL_GPIO_INIT_PIN>
		PWMTim1_PORT = PORT ;
 80c:	10 93 84 00 	sts	0x0084, r17	; 0x800084 <PWMTim1_PORT+0x1>
 810:	00 93 83 00 	sts	0x0083, r16	; 0x800083 <PWMTim1_PORT>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
 814:	6f e7       	ldi	r22, 0x7F	; 127
 816:	73 e0       	ldi	r23, 0x03	; 3
 818:	89 85       	ldd	r24, Y+9	; 0x09
 81a:	0e 94 1e 02 	call	0x43c	; 0x43c <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	1f c0       	rjmp	.+62     	; 0x860 <__stack+0x1>
		PWMTim1_PIN.pin = PIN_Num ;
		PWMTim1_PIN.pull = GPIO_NOPULL ;
		HAL_GPIO_INIT_PIN( PORT , &PWMTim1_PIN );
		PWMTim1_PORT = PORT ;
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
	}else if(Tim_PWM_Handler->Instance == TIM2)
 822:	92 30       	cpi	r25, 0x02	; 2
 824:	e1 f4       	brne	.+56     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	{	
		PWMTim2_PIN.mode = GPIO_MODE_OUTPUT ;
 826:	e7 e8       	ldi	r30, 0x87	; 135
 828:	f0 e0       	ldi	r31, 0x00	; 0
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	81 83       	std	Z+1, r24	; 0x01
		PWMTim2_PIN.pin = PIN_Num ;
 82e:	f0 82       	st	Z, r15
		PWMTim2_PIN.pull = GPIO_NOPULL ;
 830:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_INIT_PIN( PORT , &PWMTim2_PIN );	
 832:	bf 01       	movw	r22, r30
 834:	c8 01       	movw	r24, r16
 836:	0e 94 49 00 	call	0x92	; 0x92 <HAL_GPIO_INIT_PIN>
		PWMTim2_PORT = PORT ;
 83a:	10 93 82 00 	sts	0x0082, r17	; 0x800082 <PWMTim2_PORT+0x1>
 83e:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <PWMTim2_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_2_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
 842:	61 e6       	ldi	r22, 0x61	; 97
 844:	73 e0       	ldi	r23, 0x03	; 3
 846:	80 e4       	ldi	r24, 0x40	; 64
 848:	0e 94 1e 02 	call	0x43c	; 0x43c <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
 84c:	61 e6       	ldi	r22, 0x61	; 97
 84e:	73 e0       	ldi	r23, 0x03	; 3
 850:	89 85       	ldd	r24, Y+9	; 0x09
 852:	0e 94 1e 02 	call	0x43c	; 0x43c <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	03 c0       	rjmp	.+6      	; 0x860 <__stack+0x1>
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
	
	if(Tim_PWM_Handler == NULL)
	{
		return UTIL_PARAM_ERROR ;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	01 c0       	rjmp	.+2      	; 0x860 <__stack+0x1>
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
		
	}else
	{
		return UTIL_TIM_ERROR ;
 85e:	82 e0       	ldi	r24, 0x02	; 2
		
	
	
	return  UTIL_OK ; 
	
}
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	1f 91       	pop	r17
 866:	0f 91       	pop	r16
 868:	ff 90       	pop	r15
 86a:	08 95       	ret

0000086c <Software_PWM_Start>:


Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
 86c:	00 97       	sbiw	r24, 0x00	; 0
 86e:	21 f0       	breq	.+8      	; 0x878 <Software_PWM_Start+0xc>
	}else
	{
		;
	}
	
	TIM_Start(TIMConfig) ;
 870:	0e 94 34 01 	call	0x268	; 0x268 <TIM_Start>
	return UTIL_OK ;
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	08 95       	ret
Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
	{
		return UTIL_PARAM_ERROR ;
 878:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM_Start(TIMConfig) ;
	return UTIL_OK ;

}
 87a:	08 95       	ret

0000087c <Software_PWM_UpdateDuty>:
 * param (input): Tim_PWM_Handler pointer to selected timer configuration that contain Prescaller 
 * param (input): SetDuty desired Duty cycle From (0 t0 100 )
 * return : Utilies_Status_t status 
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
 87c:	8f 92       	push	r8
 87e:	9f 92       	push	r9
 880:	af 92       	push	r10
 882:	bf 92       	push	r11
 884:	cf 92       	push	r12
 886:	df 92       	push	r13
 888:	ef 92       	push	r14
 88a:	ff 92       	push	r15
 88c:	1f 93       	push	r17
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
		if (Tim_PWM_Handler == NULL)
 892:	61 15       	cp	r22, r1
 894:	71 05       	cpc	r23, r1
 896:	09 f4       	brne	.+2      	; 0x89a <Software_PWM_UpdateDuty+0x1e>
 898:	71 c0       	rjmp	.+226    	; 0x97c <Software_PWM_UpdateDuty+0x100>
 89a:	eb 01       	movw	r28, r22
 89c:	18 2f       	mov	r17, r24
		{
			return UTIL_PARAM_ERROR ;
			}else
			{
				 if(TIM_Stop(Tim_PWM_Handler->Instance) == TIM_OK)
 89e:	88 85       	ldd	r24, Y+8	; 0x08
 8a0:	0e 94 5f 01 	call	0x2be	; 0x2be <TIM_Stop>
 8a4:	81 11       	cpse	r24, r1
 8a6:	6c c0       	rjmp	.+216    	; 0x980 <Software_PWM_UpdateDuty+0x104>
				 {
	
						if(TIM_PWMMode_SetDuty(Tim_PWM_Handler , SetDuty) == TIM_OK)
 8a8:	61 2f       	mov	r22, r17
 8aa:	ce 01       	movw	r24, r28
 8ac:	0e 94 90 00 	call	0x120	; 0x120 <TIM_PWMMode_SetDuty>
 8b0:	81 11       	cpse	r24, r1
 8b2:	68 c0       	rjmp	.+208    	; 0x984 <Software_PWM_UpdateDuty+0x108>
						{
							if(TIM_Start(Tim_PWM_Handler) == TIM_OK)
 8b4:	ce 01       	movw	r24, r28
 8b6:	0e 94 34 01 	call	0x268	; 0x268 <TIM_Start>
 8ba:	81 11       	cpse	r24, r1
 8bc:	65 c0       	rjmp	.+202    	; 0x988 <Software_PWM_UpdateDuty+0x10c>
			}
			
		
			
			
			if (Tim_PWM_Handler->Instance == TIM1)
 8be:	88 85       	ldd	r24, Y+8	; 0x08
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	41 f5       	brne	.+80     	; 0x914 <Software_PWM_UpdateDuty+0x98>
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
 8c4:	88 81       	ld	r24, Y
 8c6:	99 81       	ldd	r25, Y+1	; 0x01
 8c8:	aa 81       	ldd	r26, Y+2	; 0x02
 8ca:	bb 81       	ldd	r27, Y+3	; 0x03
 8cc:	4c 01       	movw	r8, r24
 8ce:	5d 01       	movw	r10, r26
 8d0:	2f e0       	ldi	r18, 0x0F	; 15
 8d2:	92 22       	and	r9, r18
 8d4:	aa 24       	eor	r10, r10
 8d6:	bb 24       	eor	r11, r11
 8d8:	61 2f       	mov	r22, r17
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 76 05 	call	0xaec	; 0xaec <__floatsisf>
 8e4:	20 e0       	ldi	r18, 0x00	; 0
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	48 ec       	ldi	r20, 0xC8	; 200
 8ea:	52 e4       	ldi	r21, 0x42	; 66
 8ec:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulsf3>
 8f0:	6b 01       	movw	r12, r22
 8f2:	7c 01       	movw	r14, r24
 8f4:	c5 01       	movw	r24, r10
 8f6:	b4 01       	movw	r22, r8
 8f8:	0e 94 74 05 	call	0xae8	; 0xae8 <__floatunsisf>
 8fc:	a7 01       	movw	r20, r14
 8fe:	96 01       	movw	r18, r12
 900:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__divsf3>
 904:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fixunssfsi>
 908:	70 93 7e 00 	sts	0x007E, r23	; 0x80007e <Duty_TIM1+0x1>
 90c:	60 93 7d 00 	sts	0x007D, r22	; 0x80007d <Duty_TIM1>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	3d c0       	rjmp	.+122    	; 0x98e <Software_PWM_UpdateDuty+0x112>
			if (Tim_PWM_Handler->Instance == TIM1)
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
 914:	81 11       	cpse	r24, r1
 916:	18 c0       	rjmp	.+48     	; 0x948 <Software_PWM_UpdateDuty+0xcc>
			{
				  Duty_TIM0 = (256*(SetDuty/100.0));
 918:	61 2f       	mov	r22, r17
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 76 05 	call	0xaec	; 0xaec <__floatsisf>
 924:	20 e0       	ldi	r18, 0x00	; 0
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	48 ec       	ldi	r20, 0xC8	; 200
 92a:	52 e4       	ldi	r21, 0x42	; 66
 92c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__divsf3>
 930:	20 e0       	ldi	r18, 0x00	; 0
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	40 e8       	ldi	r20, 0x80	; 128
 936:	53 e4       	ldi	r21, 0x43	; 67
 938:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulsf3>
 93c:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fixunssfsi>
 940:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <Duty_TIM0>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	23 c0       	rjmp	.+70     	; 0x98e <Software_PWM_UpdateDuty+0x112>
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
			{
				  Duty_TIM0 = (256*(SetDuty/100.0));
			}else if (Tim_PWM_Handler->Instance == TIM2)
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	01 f5       	brne	.+64     	; 0x98c <Software_PWM_UpdateDuty+0x110>
			{
				 Duty_TIM2 = (256 * (SetDuty/100.0) );
 94c:	61 2f       	mov	r22, r17
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 76 05 	call	0xaec	; 0xaec <__floatsisf>
 958:	20 e0       	ldi	r18, 0x00	; 0
 95a:	30 e0       	ldi	r19, 0x00	; 0
 95c:	48 ec       	ldi	r20, 0xC8	; 200
 95e:	52 e4       	ldi	r21, 0x42	; 66
 960:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__divsf3>
 964:	20 e0       	ldi	r18, 0x00	; 0
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	40 e8       	ldi	r20, 0x80	; 128
 96a:	53 e4       	ldi	r21, 0x43	; 67
 96c:	0e 94 02 06 	call	0xc04	; 0xc04 <__mulsf3>
 970:	0e 94 45 05 	call	0xa8a	; 0xa8a <__fixunssfsi>
 974:	60 93 7f 00 	sts	0x007F, r22	; 0x80007f <Duty_TIM2>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
 978:	80 e0       	ldi	r24, 0x00	; 0
 97a:	09 c0       	rjmp	.+18     	; 0x98e <Software_PWM_UpdateDuty+0x112>
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
		if (Tim_PWM_Handler == NULL)
		{
			return UTIL_PARAM_ERROR ;
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	07 c0       	rjmp	.+14     	; 0x98e <Software_PWM_UpdateDuty+0x112>
							return UTIL_TIM_ERROR ;
						}
					}
					else
					{
						return UTIL_TIM_ERROR ; 
 980:	82 e0       	ldi	r24, 0x02	; 2
 982:	05 c0       	rjmp	.+10     	; 0x98e <Software_PWM_UpdateDuty+0x112>
								return UTIL_TIM_ERROR ;
							}
						}
						else
						{
							return UTIL_TIM_ERROR ;
 984:	82 e0       	ldi	r24, 0x02	; 2
 986:	03 c0       	rjmp	.+6      	; 0x98e <Software_PWM_UpdateDuty+0x112>
							{
								;
							}
							else
							{
								return UTIL_TIM_ERROR ;
 988:	82 e0       	ldi	r24, 0x02	; 2
 98a:	01 c0       	rjmp	.+2      	; 0x98e <Software_PWM_UpdateDuty+0x112>
			}else if (Tim_PWM_Handler->Instance == TIM2)
			{
				 Duty_TIM2 = (256 * (SetDuty/100.0) );
			}else
			{
				return UTIL_TIM_ERROR ;
 98c:	82 e0       	ldi	r24, 0x02	; 2
			}
			#endif 
			
		
		return UTIL_OK ; 
}
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	1f 91       	pop	r17
 994:	ff 90       	pop	r15
 996:	ef 90       	pop	r14
 998:	df 90       	pop	r13
 99a:	cf 90       	pop	r12
 99c:	bf 90       	pop	r11
 99e:	af 90       	pop	r10
 9a0:	9f 90       	pop	r9
 9a2:	8f 90       	pop	r8
 9a4:	08 95       	ret

000009a6 <__divsf3>:
 9a6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__divsf3x>
 9aa:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__fp_round>
 9ae:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscB>
 9b2:	58 f0       	brcs	.+22     	; 0x9ca <__divsf3+0x24>
 9b4:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscA>
 9b8:	40 f0       	brcs	.+16     	; 0x9ca <__divsf3+0x24>
 9ba:	29 f4       	brne	.+10     	; 0x9c6 <__divsf3+0x20>
 9bc:	5f 3f       	cpi	r21, 0xFF	; 255
 9be:	29 f0       	breq	.+10     	; 0x9ca <__divsf3+0x24>
 9c0:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>
 9c4:	51 11       	cpse	r21, r1
 9c6:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>
 9ca:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_nan>

000009ce <__divsf3x>:
 9ce:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_split3>
 9d2:	68 f3       	brcs	.-38     	; 0x9ae <__divsf3+0x8>

000009d4 <__divsf3_pse>:
 9d4:	99 23       	and	r25, r25
 9d6:	b1 f3       	breq	.-20     	; 0x9c4 <__divsf3+0x1e>
 9d8:	55 23       	and	r21, r21
 9da:	91 f3       	breq	.-28     	; 0x9c0 <__divsf3+0x1a>
 9dc:	95 1b       	sub	r25, r21
 9de:	55 0b       	sbc	r21, r21
 9e0:	bb 27       	eor	r27, r27
 9e2:	aa 27       	eor	r26, r26
 9e4:	62 17       	cp	r22, r18
 9e6:	73 07       	cpc	r23, r19
 9e8:	84 07       	cpc	r24, r20
 9ea:	38 f0       	brcs	.+14     	; 0x9fa <__divsf3_pse+0x26>
 9ec:	9f 5f       	subi	r25, 0xFF	; 255
 9ee:	5f 4f       	sbci	r21, 0xFF	; 255
 9f0:	22 0f       	add	r18, r18
 9f2:	33 1f       	adc	r19, r19
 9f4:	44 1f       	adc	r20, r20
 9f6:	aa 1f       	adc	r26, r26
 9f8:	a9 f3       	breq	.-22     	; 0x9e4 <__divsf3_pse+0x10>
 9fa:	35 d0       	rcall	.+106    	; 0xa66 <__divsf3_pse+0x92>
 9fc:	0e 2e       	mov	r0, r30
 9fe:	3a f0       	brmi	.+14     	; 0xa0e <__divsf3_pse+0x3a>
 a00:	e0 e8       	ldi	r30, 0x80	; 128
 a02:	32 d0       	rcall	.+100    	; 0xa68 <__divsf3_pse+0x94>
 a04:	91 50       	subi	r25, 0x01	; 1
 a06:	50 40       	sbci	r21, 0x00	; 0
 a08:	e6 95       	lsr	r30
 a0a:	00 1c       	adc	r0, r0
 a0c:	ca f7       	brpl	.-14     	; 0xa00 <__divsf3_pse+0x2c>
 a0e:	2b d0       	rcall	.+86     	; 0xa66 <__divsf3_pse+0x92>
 a10:	fe 2f       	mov	r31, r30
 a12:	29 d0       	rcall	.+82     	; 0xa66 <__divsf3_pse+0x92>
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	bb 1f       	adc	r27, r27
 a1c:	26 17       	cp	r18, r22
 a1e:	37 07       	cpc	r19, r23
 a20:	48 07       	cpc	r20, r24
 a22:	ab 07       	cpc	r26, r27
 a24:	b0 e8       	ldi	r27, 0x80	; 128
 a26:	09 f0       	breq	.+2      	; 0xa2a <__divsf3_pse+0x56>
 a28:	bb 0b       	sbc	r27, r27
 a2a:	80 2d       	mov	r24, r0
 a2c:	bf 01       	movw	r22, r30
 a2e:	ff 27       	eor	r31, r31
 a30:	93 58       	subi	r25, 0x83	; 131
 a32:	5f 4f       	sbci	r21, 0xFF	; 255
 a34:	3a f0       	brmi	.+14     	; 0xa44 <__divsf3_pse+0x70>
 a36:	9e 3f       	cpi	r25, 0xFE	; 254
 a38:	51 05       	cpc	r21, r1
 a3a:	78 f0       	brcs	.+30     	; 0xa5a <__divsf3_pse+0x86>
 a3c:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>
 a40:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>
 a44:	5f 3f       	cpi	r21, 0xFF	; 255
 a46:	e4 f3       	brlt	.-8      	; 0xa40 <__divsf3_pse+0x6c>
 a48:	98 3e       	cpi	r25, 0xE8	; 232
 a4a:	d4 f3       	brlt	.-12     	; 0xa40 <__divsf3_pse+0x6c>
 a4c:	86 95       	lsr	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	b7 95       	ror	r27
 a54:	f7 95       	ror	r31
 a56:	9f 5f       	subi	r25, 0xFF	; 255
 a58:	c9 f7       	brne	.-14     	; 0xa4c <__divsf3_pse+0x78>
 a5a:	88 0f       	add	r24, r24
 a5c:	91 1d       	adc	r25, r1
 a5e:	96 95       	lsr	r25
 a60:	87 95       	ror	r24
 a62:	97 f9       	bld	r25, 7
 a64:	08 95       	ret
 a66:	e1 e0       	ldi	r30, 0x01	; 1
 a68:	66 0f       	add	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	bb 1f       	adc	r27, r27
 a70:	62 17       	cp	r22, r18
 a72:	73 07       	cpc	r23, r19
 a74:	84 07       	cpc	r24, r20
 a76:	ba 07       	cpc	r27, r26
 a78:	20 f0       	brcs	.+8      	; 0xa82 <__divsf3_pse+0xae>
 a7a:	62 1b       	sub	r22, r18
 a7c:	73 0b       	sbc	r23, r19
 a7e:	84 0b       	sbc	r24, r20
 a80:	ba 0b       	sbc	r27, r26
 a82:	ee 1f       	adc	r30, r30
 a84:	88 f7       	brcc	.-30     	; 0xa68 <__divsf3_pse+0x94>
 a86:	e0 95       	com	r30
 a88:	08 95       	ret

00000a8a <__fixunssfsi>:
 a8a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_splitA>
 a8e:	88 f0       	brcs	.+34     	; 0xab2 <__fixunssfsi+0x28>
 a90:	9f 57       	subi	r25, 0x7F	; 127
 a92:	98 f0       	brcs	.+38     	; 0xaba <__fixunssfsi+0x30>
 a94:	b9 2f       	mov	r27, r25
 a96:	99 27       	eor	r25, r25
 a98:	b7 51       	subi	r27, 0x17	; 23
 a9a:	b0 f0       	brcs	.+44     	; 0xac8 <__fixunssfsi+0x3e>
 a9c:	e1 f0       	breq	.+56     	; 0xad6 <__fixunssfsi+0x4c>
 a9e:	66 0f       	add	r22, r22
 aa0:	77 1f       	adc	r23, r23
 aa2:	88 1f       	adc	r24, r24
 aa4:	99 1f       	adc	r25, r25
 aa6:	1a f0       	brmi	.+6      	; 0xaae <__fixunssfsi+0x24>
 aa8:	ba 95       	dec	r27
 aaa:	c9 f7       	brne	.-14     	; 0xa9e <__fixunssfsi+0x14>
 aac:	14 c0       	rjmp	.+40     	; 0xad6 <__fixunssfsi+0x4c>
 aae:	b1 30       	cpi	r27, 0x01	; 1
 ab0:	91 f0       	breq	.+36     	; 0xad6 <__fixunssfsi+0x4c>
 ab2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__fp_zero>
 ab6:	b1 e0       	ldi	r27, 0x01	; 1
 ab8:	08 95       	ret
 aba:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__fp_zero>
 abe:	67 2f       	mov	r22, r23
 ac0:	78 2f       	mov	r23, r24
 ac2:	88 27       	eor	r24, r24
 ac4:	b8 5f       	subi	r27, 0xF8	; 248
 ac6:	39 f0       	breq	.+14     	; 0xad6 <__fixunssfsi+0x4c>
 ac8:	b9 3f       	cpi	r27, 0xF9	; 249
 aca:	cc f3       	brlt	.-14     	; 0xabe <__fixunssfsi+0x34>
 acc:	86 95       	lsr	r24
 ace:	77 95       	ror	r23
 ad0:	67 95       	ror	r22
 ad2:	b3 95       	inc	r27
 ad4:	d9 f7       	brne	.-10     	; 0xacc <__fixunssfsi+0x42>
 ad6:	3e f4       	brtc	.+14     	; 0xae6 <__fixunssfsi+0x5c>
 ad8:	90 95       	com	r25
 ada:	80 95       	com	r24
 adc:	70 95       	com	r23
 ade:	61 95       	neg	r22
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	08 95       	ret

00000ae8 <__floatunsisf>:
 ae8:	e8 94       	clt
 aea:	09 c0       	rjmp	.+18     	; 0xafe <__floatsisf+0x12>

00000aec <__floatsisf>:
 aec:	97 fb       	bst	r25, 7
 aee:	3e f4       	brtc	.+14     	; 0xafe <__floatsisf+0x12>
 af0:	90 95       	com	r25
 af2:	80 95       	com	r24
 af4:	70 95       	com	r23
 af6:	61 95       	neg	r22
 af8:	7f 4f       	sbci	r23, 0xFF	; 255
 afa:	8f 4f       	sbci	r24, 0xFF	; 255
 afc:	9f 4f       	sbci	r25, 0xFF	; 255
 afe:	99 23       	and	r25, r25
 b00:	a9 f0       	breq	.+42     	; 0xb2c <__floatsisf+0x40>
 b02:	f9 2f       	mov	r31, r25
 b04:	96 e9       	ldi	r25, 0x96	; 150
 b06:	bb 27       	eor	r27, r27
 b08:	93 95       	inc	r25
 b0a:	f6 95       	lsr	r31
 b0c:	87 95       	ror	r24
 b0e:	77 95       	ror	r23
 b10:	67 95       	ror	r22
 b12:	b7 95       	ror	r27
 b14:	f1 11       	cpse	r31, r1
 b16:	f8 cf       	rjmp	.-16     	; 0xb08 <__floatsisf+0x1c>
 b18:	fa f4       	brpl	.+62     	; 0xb58 <__floatsisf+0x6c>
 b1a:	bb 0f       	add	r27, r27
 b1c:	11 f4       	brne	.+4      	; 0xb22 <__floatsisf+0x36>
 b1e:	60 ff       	sbrs	r22, 0
 b20:	1b c0       	rjmp	.+54     	; 0xb58 <__floatsisf+0x6c>
 b22:	6f 5f       	subi	r22, 0xFF	; 255
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	16 c0       	rjmp	.+44     	; 0xb58 <__floatsisf+0x6c>
 b2c:	88 23       	and	r24, r24
 b2e:	11 f0       	breq	.+4      	; 0xb34 <__floatsisf+0x48>
 b30:	96 e9       	ldi	r25, 0x96	; 150
 b32:	11 c0       	rjmp	.+34     	; 0xb56 <__floatsisf+0x6a>
 b34:	77 23       	and	r23, r23
 b36:	21 f0       	breq	.+8      	; 0xb40 <__floatsisf+0x54>
 b38:	9e e8       	ldi	r25, 0x8E	; 142
 b3a:	87 2f       	mov	r24, r23
 b3c:	76 2f       	mov	r23, r22
 b3e:	05 c0       	rjmp	.+10     	; 0xb4a <__floatsisf+0x5e>
 b40:	66 23       	and	r22, r22
 b42:	71 f0       	breq	.+28     	; 0xb60 <__floatsisf+0x74>
 b44:	96 e8       	ldi	r25, 0x86	; 134
 b46:	86 2f       	mov	r24, r22
 b48:	70 e0       	ldi	r23, 0x00	; 0
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	2a f0       	brmi	.+10     	; 0xb58 <__floatsisf+0x6c>
 b4e:	9a 95       	dec	r25
 b50:	66 0f       	add	r22, r22
 b52:	77 1f       	adc	r23, r23
 b54:	88 1f       	adc	r24, r24
 b56:	da f7       	brpl	.-10     	; 0xb4e <__floatsisf+0x62>
 b58:	88 0f       	add	r24, r24
 b5a:	96 95       	lsr	r25
 b5c:	87 95       	ror	r24
 b5e:	97 f9       	bld	r25, 7
 b60:	08 95       	ret

00000b62 <__fp_inf>:
 b62:	97 f9       	bld	r25, 7
 b64:	9f 67       	ori	r25, 0x7F	; 127
 b66:	80 e8       	ldi	r24, 0x80	; 128
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	60 e0       	ldi	r22, 0x00	; 0
 b6c:	08 95       	ret

00000b6e <__fp_nan>:
 b6e:	9f ef       	ldi	r25, 0xFF	; 255
 b70:	80 ec       	ldi	r24, 0xC0	; 192
 b72:	08 95       	ret

00000b74 <__fp_pscA>:
 b74:	00 24       	eor	r0, r0
 b76:	0a 94       	dec	r0
 b78:	16 16       	cp	r1, r22
 b7a:	17 06       	cpc	r1, r23
 b7c:	18 06       	cpc	r1, r24
 b7e:	09 06       	cpc	r0, r25
 b80:	08 95       	ret

00000b82 <__fp_pscB>:
 b82:	00 24       	eor	r0, r0
 b84:	0a 94       	dec	r0
 b86:	12 16       	cp	r1, r18
 b88:	13 06       	cpc	r1, r19
 b8a:	14 06       	cpc	r1, r20
 b8c:	05 06       	cpc	r0, r21
 b8e:	08 95       	ret

00000b90 <__fp_round>:
 b90:	09 2e       	mov	r0, r25
 b92:	03 94       	inc	r0
 b94:	00 0c       	add	r0, r0
 b96:	11 f4       	brne	.+4      	; 0xb9c <__fp_round+0xc>
 b98:	88 23       	and	r24, r24
 b9a:	52 f0       	brmi	.+20     	; 0xbb0 <__fp_round+0x20>
 b9c:	bb 0f       	add	r27, r27
 b9e:	40 f4       	brcc	.+16     	; 0xbb0 <__fp_round+0x20>
 ba0:	bf 2b       	or	r27, r31
 ba2:	11 f4       	brne	.+4      	; 0xba8 <__fp_round+0x18>
 ba4:	60 ff       	sbrs	r22, 0
 ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <__fp_round+0x20>
 ba8:	6f 5f       	subi	r22, 0xFF	; 255
 baa:	7f 4f       	sbci	r23, 0xFF	; 255
 bac:	8f 4f       	sbci	r24, 0xFF	; 255
 bae:	9f 4f       	sbci	r25, 0xFF	; 255
 bb0:	08 95       	ret

00000bb2 <__fp_split3>:
 bb2:	57 fd       	sbrc	r21, 7
 bb4:	90 58       	subi	r25, 0x80	; 128
 bb6:	44 0f       	add	r20, r20
 bb8:	55 1f       	adc	r21, r21
 bba:	59 f0       	breq	.+22     	; 0xbd2 <__fp_splitA+0x10>
 bbc:	5f 3f       	cpi	r21, 0xFF	; 255
 bbe:	71 f0       	breq	.+28     	; 0xbdc <__fp_splitA+0x1a>
 bc0:	47 95       	ror	r20

00000bc2 <__fp_splitA>:
 bc2:	88 0f       	add	r24, r24
 bc4:	97 fb       	bst	r25, 7
 bc6:	99 1f       	adc	r25, r25
 bc8:	61 f0       	breq	.+24     	; 0xbe2 <__fp_splitA+0x20>
 bca:	9f 3f       	cpi	r25, 0xFF	; 255
 bcc:	79 f0       	breq	.+30     	; 0xbec <__fp_splitA+0x2a>
 bce:	87 95       	ror	r24
 bd0:	08 95       	ret
 bd2:	12 16       	cp	r1, r18
 bd4:	13 06       	cpc	r1, r19
 bd6:	14 06       	cpc	r1, r20
 bd8:	55 1f       	adc	r21, r21
 bda:	f2 cf       	rjmp	.-28     	; 0xbc0 <__fp_split3+0xe>
 bdc:	46 95       	lsr	r20
 bde:	f1 df       	rcall	.-30     	; 0xbc2 <__fp_splitA>
 be0:	08 c0       	rjmp	.+16     	; 0xbf2 <__fp_splitA+0x30>
 be2:	16 16       	cp	r1, r22
 be4:	17 06       	cpc	r1, r23
 be6:	18 06       	cpc	r1, r24
 be8:	99 1f       	adc	r25, r25
 bea:	f1 cf       	rjmp	.-30     	; 0xbce <__fp_splitA+0xc>
 bec:	86 95       	lsr	r24
 bee:	71 05       	cpc	r23, r1
 bf0:	61 05       	cpc	r22, r1
 bf2:	08 94       	sec
 bf4:	08 95       	ret

00000bf6 <__fp_zero>:
 bf6:	e8 94       	clt

00000bf8 <__fp_szero>:
 bf8:	bb 27       	eor	r27, r27
 bfa:	66 27       	eor	r22, r22
 bfc:	77 27       	eor	r23, r23
 bfe:	cb 01       	movw	r24, r22
 c00:	97 f9       	bld	r25, 7
 c02:	08 95       	ret

00000c04 <__mulsf3>:
 c04:	0e 94 15 06 	call	0xc2a	; 0xc2a <__mulsf3x>
 c08:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__fp_round>
 c0c:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscA>
 c10:	38 f0       	brcs	.+14     	; 0xc20 <__mulsf3+0x1c>
 c12:	0e 94 c1 05 	call	0xb82	; 0xb82 <__fp_pscB>
 c16:	20 f0       	brcs	.+8      	; 0xc20 <__mulsf3+0x1c>
 c18:	95 23       	and	r25, r21
 c1a:	11 f0       	breq	.+4      	; 0xc20 <__mulsf3+0x1c>
 c1c:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>
 c20:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__fp_nan>
 c24:	11 24       	eor	r1, r1
 c26:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>

00000c2a <__mulsf3x>:
 c2a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__fp_split3>
 c2e:	70 f3       	brcs	.-36     	; 0xc0c <__mulsf3+0x8>

00000c30 <__mulsf3_pse>:
 c30:	95 9f       	mul	r25, r21
 c32:	c1 f3       	breq	.-16     	; 0xc24 <__mulsf3+0x20>
 c34:	95 0f       	add	r25, r21
 c36:	50 e0       	ldi	r21, 0x00	; 0
 c38:	55 1f       	adc	r21, r21
 c3a:	62 9f       	mul	r22, r18
 c3c:	f0 01       	movw	r30, r0
 c3e:	72 9f       	mul	r23, r18
 c40:	bb 27       	eor	r27, r27
 c42:	f0 0d       	add	r31, r0
 c44:	b1 1d       	adc	r27, r1
 c46:	63 9f       	mul	r22, r19
 c48:	aa 27       	eor	r26, r26
 c4a:	f0 0d       	add	r31, r0
 c4c:	b1 1d       	adc	r27, r1
 c4e:	aa 1f       	adc	r26, r26
 c50:	64 9f       	mul	r22, r20
 c52:	66 27       	eor	r22, r22
 c54:	b0 0d       	add	r27, r0
 c56:	a1 1d       	adc	r26, r1
 c58:	66 1f       	adc	r22, r22
 c5a:	82 9f       	mul	r24, r18
 c5c:	22 27       	eor	r18, r18
 c5e:	b0 0d       	add	r27, r0
 c60:	a1 1d       	adc	r26, r1
 c62:	62 1f       	adc	r22, r18
 c64:	73 9f       	mul	r23, r19
 c66:	b0 0d       	add	r27, r0
 c68:	a1 1d       	adc	r26, r1
 c6a:	62 1f       	adc	r22, r18
 c6c:	83 9f       	mul	r24, r19
 c6e:	a0 0d       	add	r26, r0
 c70:	61 1d       	adc	r22, r1
 c72:	22 1f       	adc	r18, r18
 c74:	74 9f       	mul	r23, r20
 c76:	33 27       	eor	r19, r19
 c78:	a0 0d       	add	r26, r0
 c7a:	61 1d       	adc	r22, r1
 c7c:	23 1f       	adc	r18, r19
 c7e:	84 9f       	mul	r24, r20
 c80:	60 0d       	add	r22, r0
 c82:	21 1d       	adc	r18, r1
 c84:	82 2f       	mov	r24, r18
 c86:	76 2f       	mov	r23, r22
 c88:	6a 2f       	mov	r22, r26
 c8a:	11 24       	eor	r1, r1
 c8c:	9f 57       	subi	r25, 0x7F	; 127
 c8e:	50 40       	sbci	r21, 0x00	; 0
 c90:	9a f0       	brmi	.+38     	; 0xcb8 <__mulsf3_pse+0x88>
 c92:	f1 f0       	breq	.+60     	; 0xcd0 <__mulsf3_pse+0xa0>
 c94:	88 23       	and	r24, r24
 c96:	4a f0       	brmi	.+18     	; 0xcaa <__mulsf3_pse+0x7a>
 c98:	ee 0f       	add	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	bb 1f       	adc	r27, r27
 c9e:	66 1f       	adc	r22, r22
 ca0:	77 1f       	adc	r23, r23
 ca2:	88 1f       	adc	r24, r24
 ca4:	91 50       	subi	r25, 0x01	; 1
 ca6:	50 40       	sbci	r21, 0x00	; 0
 ca8:	a9 f7       	brne	.-22     	; 0xc94 <__mulsf3_pse+0x64>
 caa:	9e 3f       	cpi	r25, 0xFE	; 254
 cac:	51 05       	cpc	r21, r1
 cae:	80 f0       	brcs	.+32     	; 0xcd0 <__mulsf3_pse+0xa0>
 cb0:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_inf>
 cb4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_szero>
 cb8:	5f 3f       	cpi	r21, 0xFF	; 255
 cba:	e4 f3       	brlt	.-8      	; 0xcb4 <__mulsf3_pse+0x84>
 cbc:	98 3e       	cpi	r25, 0xE8	; 232
 cbe:	d4 f3       	brlt	.-12     	; 0xcb4 <__mulsf3_pse+0x84>
 cc0:	86 95       	lsr	r24
 cc2:	77 95       	ror	r23
 cc4:	67 95       	ror	r22
 cc6:	b7 95       	ror	r27
 cc8:	f7 95       	ror	r31
 cca:	e7 95       	ror	r30
 ccc:	9f 5f       	subi	r25, 0xFF	; 255
 cce:	c1 f7       	brne	.-16     	; 0xcc0 <__mulsf3_pse+0x90>
 cd0:	fe 2b       	or	r31, r30
 cd2:	88 0f       	add	r24, r24
 cd4:	91 1d       	adc	r25, r1
 cd6:	96 95       	lsr	r25
 cd8:	87 95       	ror	r24
 cda:	97 f9       	bld	r25, 7
 cdc:	08 95       	ret

00000cde <__divmodhi4>:
 cde:	97 fb       	bst	r25, 7
 ce0:	07 2e       	mov	r0, r23
 ce2:	16 f4       	brtc	.+4      	; 0xce8 <__divmodhi4+0xa>
 ce4:	00 94       	com	r0
 ce6:	07 d0       	rcall	.+14     	; 0xcf6 <__divmodhi4_neg1>
 ce8:	77 fd       	sbrc	r23, 7
 cea:	09 d0       	rcall	.+18     	; 0xcfe <__divmodhi4_neg2>
 cec:	0e 94 b0 06 	call	0xd60	; 0xd60 <__udivmodhi4>
 cf0:	07 fc       	sbrc	r0, 7
 cf2:	05 d0       	rcall	.+10     	; 0xcfe <__divmodhi4_neg2>
 cf4:	3e f4       	brtc	.+14     	; 0xd04 <__divmodhi4_exit>

00000cf6 <__divmodhi4_neg1>:
 cf6:	90 95       	com	r25
 cf8:	81 95       	neg	r24
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	08 95       	ret

00000cfe <__divmodhi4_neg2>:
 cfe:	70 95       	com	r23
 d00:	61 95       	neg	r22
 d02:	7f 4f       	sbci	r23, 0xFF	; 255

00000d04 <__divmodhi4_exit>:
 d04:	08 95       	ret

00000d06 <__udivmodsi4>:
 d06:	a1 e2       	ldi	r26, 0x21	; 33
 d08:	1a 2e       	mov	r1, r26
 d0a:	aa 1b       	sub	r26, r26
 d0c:	bb 1b       	sub	r27, r27
 d0e:	fd 01       	movw	r30, r26
 d10:	0d c0       	rjmp	.+26     	; 0xd2c <__udivmodsi4_ep>

00000d12 <__udivmodsi4_loop>:
 d12:	aa 1f       	adc	r26, r26
 d14:	bb 1f       	adc	r27, r27
 d16:	ee 1f       	adc	r30, r30
 d18:	ff 1f       	adc	r31, r31
 d1a:	a2 17       	cp	r26, r18
 d1c:	b3 07       	cpc	r27, r19
 d1e:	e4 07       	cpc	r30, r20
 d20:	f5 07       	cpc	r31, r21
 d22:	20 f0       	brcs	.+8      	; 0xd2c <__udivmodsi4_ep>
 d24:	a2 1b       	sub	r26, r18
 d26:	b3 0b       	sbc	r27, r19
 d28:	e4 0b       	sbc	r30, r20
 d2a:	f5 0b       	sbc	r31, r21

00000d2c <__udivmodsi4_ep>:
 d2c:	66 1f       	adc	r22, r22
 d2e:	77 1f       	adc	r23, r23
 d30:	88 1f       	adc	r24, r24
 d32:	99 1f       	adc	r25, r25
 d34:	1a 94       	dec	r1
 d36:	69 f7       	brne	.-38     	; 0xd12 <__udivmodsi4_loop>
 d38:	60 95       	com	r22
 d3a:	70 95       	com	r23
 d3c:	80 95       	com	r24
 d3e:	90 95       	com	r25
 d40:	9b 01       	movw	r18, r22
 d42:	ac 01       	movw	r20, r24
 d44:	bd 01       	movw	r22, r26
 d46:	cf 01       	movw	r24, r30
 d48:	08 95       	ret

00000d4a <__muluhisi3>:
 d4a:	0e 94 c4 06 	call	0xd88	; 0xd88 <__umulhisi3>
 d4e:	a5 9f       	mul	r26, r21
 d50:	90 0d       	add	r25, r0
 d52:	b4 9f       	mul	r27, r20
 d54:	90 0d       	add	r25, r0
 d56:	a4 9f       	mul	r26, r20
 d58:	80 0d       	add	r24, r0
 d5a:	91 1d       	adc	r25, r1
 d5c:	11 24       	eor	r1, r1
 d5e:	08 95       	ret

00000d60 <__udivmodhi4>:
 d60:	aa 1b       	sub	r26, r26
 d62:	bb 1b       	sub	r27, r27
 d64:	51 e1       	ldi	r21, 0x11	; 17
 d66:	07 c0       	rjmp	.+14     	; 0xd76 <__udivmodhi4_ep>

00000d68 <__udivmodhi4_loop>:
 d68:	aa 1f       	adc	r26, r26
 d6a:	bb 1f       	adc	r27, r27
 d6c:	a6 17       	cp	r26, r22
 d6e:	b7 07       	cpc	r27, r23
 d70:	10 f0       	brcs	.+4      	; 0xd76 <__udivmodhi4_ep>
 d72:	a6 1b       	sub	r26, r22
 d74:	b7 0b       	sbc	r27, r23

00000d76 <__udivmodhi4_ep>:
 d76:	88 1f       	adc	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	5a 95       	dec	r21
 d7c:	a9 f7       	brne	.-22     	; 0xd68 <__udivmodhi4_loop>
 d7e:	80 95       	com	r24
 d80:	90 95       	com	r25
 d82:	bc 01       	movw	r22, r24
 d84:	cd 01       	movw	r24, r26
 d86:	08 95       	ret

00000d88 <__umulhisi3>:
 d88:	a2 9f       	mul	r26, r18
 d8a:	b0 01       	movw	r22, r0
 d8c:	b3 9f       	mul	r27, r19
 d8e:	c0 01       	movw	r24, r0
 d90:	a3 9f       	mul	r26, r19
 d92:	70 0d       	add	r23, r0
 d94:	81 1d       	adc	r24, r1
 d96:	11 24       	eor	r1, r1
 d98:	91 1d       	adc	r25, r1
 d9a:	b2 9f       	mul	r27, r18
 d9c:	70 0d       	add	r23, r0
 d9e:	81 1d       	adc	r24, r1
 da0:	11 24       	eor	r1, r1
 da2:	91 1d       	adc	r25, r1
 da4:	08 95       	ret

00000da6 <_exit>:
 da6:	f8 94       	cli

00000da8 <__stop_program>:
 da8:	ff cf       	rjmp	.-2      	; 0xda8 <__stop_program>
