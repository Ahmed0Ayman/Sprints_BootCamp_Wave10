
CommunicationProtocols.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00001174  00001208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  008000f4  008000f4  0000129c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a18  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001278  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001eeb  00000000  00000000  000062d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  000081bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000104e  00000000  00000000  00008a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002482  00000000  00000000  00009a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000bf0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__vector_1>
       8:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_2>
       c:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__vector_3>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	d2 01       	movw	r26, r4
      56:	d5 01       	movw	r26, r10
      58:	d8 01       	movw	r26, r16
      5a:	db 01       	movw	r26, r22
      5c:	de 01       	movw	r26, r28
      5e:	e1 01       	movw	r28, r2
      60:	e4 01       	movw	r28, r8
      62:	e7 01       	movw	r28, r14

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e7       	ldi	r30, 0x74	; 116
      78:	f1 e1       	ldi	r31, 0x11	; 17
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a4 3f       	cpi	r26, 0xF4	; 244
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	a4 ef       	ldi	r26, 0xF4	; 244
      8a:	b0 e0       	ldi	r27, 0x00	; 0
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a0 32       	cpi	r26, 0x20	; 32
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <main>
      9a:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Uart_Transmit_Only>:



void Uart_Transmit_Only(void)
{
	uint8_t ExitKey = 0 ; 
      a2:	80 e0       	ldi	r24, 0x00	; 0
	while(!ExitKey)
      a4:	0e c0       	rjmp	.+28     	; 0xc2 <Uart_Transmit_Only+0x20>
	{
		HAL_UART_TRANSMIT(&UART_Handler ,UART_TXBuffer ,  UART_RXBuffer_SIZE );
      a6:	4f e0       	ldi	r20, 0x0F	; 15
      a8:	50 e0       	ldi	r21, 0x00	; 0
      aa:	66 ea       	ldi	r22, 0xA6	; 166
      ac:	70 e0       	ldi	r23, 0x00	; 0
      ae:	80 e6       	ldi	r24, 0x60	; 96
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 5d 07 	call	0xeba	; 0xeba <HAL_UART_TRANSMIT>
		ControlFlag  = 0  ;
      b6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ControlFlag>
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
      ba:	85 eb       	ldi	r24, 0xB5	; 181
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	0e 94 3a 02 	call	0x474	; 0x474 <KeyPad_GetPressedKey>


void Uart_Transmit_Only(void)
{
	uint8_t ExitKey = 0 ; 
	while(!ExitKey)
      c2:	88 23       	and	r24, r24
      c4:	81 f3       	breq	.-32     	; 0xa6 <Uart_Transmit_Only+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c6:	2f ef       	ldi	r18, 0xFF	; 255
      c8:	81 ee       	ldi	r24, 0xE1	; 225
      ca:	94 e0       	ldi	r25, 0x04	; 4
      cc:	21 50       	subi	r18, 0x01	; 1
      ce:	80 40       	sbci	r24, 0x00	; 0
      d0:	90 40       	sbci	r25, 0x00	; 0
      d2:	e1 f7       	brne	.-8      	; 0xcc <Uart_Transmit_Only+0x2a>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <Uart_Transmit_Only+0x34>
      d6:	00 00       	nop
      d8:	08 95       	ret

000000da <Uart_ECHO_Only>:

void Uart_ECHO_Only(void)
{
	uint8_t ExitKey = 0 ;

		HAL_UART_RECEIVE(&UART_Handler ,UART_RXBuffer ,  UART_RXBuffer_SIZE );
      da:	4f e0       	ldi	r20, 0x0F	; 15
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	68 e0       	ldi	r22, 0x08	; 8
      e0:	71 e0       	ldi	r23, 0x01	; 1
      e2:	80 e6       	ldi	r24, 0x60	; 96
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 7a 07 	call	0xef4	; 0xef4 <HAL_UART_RECEIVE>
		HAL_UART_TRANSMIT(&UART_Handler ,UART_RXBuffer ,  UART_RXBuffer_SIZE );
      ea:	4f e0       	ldi	r20, 0x0F	; 15
      ec:	50 e0       	ldi	r21, 0x00	; 0
      ee:	68 e0       	ldi	r22, 0x08	; 8
      f0:	71 e0       	ldi	r23, 0x01	; 1
      f2:	80 e6       	ldi	r24, 0x60	; 96
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0e 94 5d 07 	call	0xeba	; 0xeba <HAL_UART_TRANSMIT>
		_delay_ms(100);
}

void Uart_ECHO_Only(void)
{
	uint8_t ExitKey = 0 ;
      fa:	80 e0       	ldi	r24, 0x00	; 0

		HAL_UART_RECEIVE(&UART_Handler ,UART_RXBuffer ,  UART_RXBuffer_SIZE );
		HAL_UART_TRANSMIT(&UART_Handler ,UART_RXBuffer ,  UART_RXBuffer_SIZE );
	while(!ExitKey)
      fc:	04 c0       	rjmp	.+8      	; 0x106 <Uart_ECHO_Only+0x2c>
	{
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
      fe:	85 eb       	ldi	r24, 0xB5	; 181
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 3a 02 	call	0x474	; 0x474 <KeyPad_GetPressedKey>
{
	uint8_t ExitKey = 0 ;

		HAL_UART_RECEIVE(&UART_Handler ,UART_RXBuffer ,  UART_RXBuffer_SIZE );
		HAL_UART_TRANSMIT(&UART_Handler ,UART_RXBuffer ,  UART_RXBuffer_SIZE );
	while(!ExitKey)
     106:	88 23       	and	r24, r24
     108:	d1 f3       	breq	.-12     	; 0xfe <Uart_ECHO_Only+0x24>
	{
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
	}
		ControlFlag  = 0  ;
     10a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ControlFlag>
     10e:	2f ef       	ldi	r18, 0xFF	; 255
     110:	81 ee       	ldi	r24, 0xE1	; 225
     112:	94 e0       	ldi	r25, 0x04	; 4
     114:	21 50       	subi	r18, 0x01	; 1
     116:	80 40       	sbci	r24, 0x00	; 0
     118:	90 40       	sbci	r25, 0x00	; 0
     11a:	e1 f7       	brne	.-8      	; 0x114 <Uart_ECHO_Only+0x3a>
     11c:	00 c0       	rjmp	.+0      	; 0x11e <Uart_ECHO_Only+0x44>
     11e:	00 00       	nop
     120:	08 95       	ret

00000122 <SPI_Transmit_Only>:
}

void SPI_Transmit_Only(void)
{

		HAL_UART_RECEIVE(&UART_Handler , SPI_RXBuffer , SPI_RXBuffer_SIZE);
     122:	4f e0       	ldi	r20, 0x0F	; 15
     124:	50 e0       	ldi	r21, 0x00	; 0
     126:	69 ef       	ldi	r22, 0xF9	; 249
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	80 e6       	ldi	r24, 0x60	; 96
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 7a 07 	call	0xef4	; 0xef4 <HAL_UART_RECEIVE>
		HAL_SPI_Transmit(&SPI_Handler , SPI_RXBuffer ,SPI_TXBuffer_SIZE );
     132:	4f e0       	ldi	r20, 0x0F	; 15
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	69 ef       	ldi	r22, 0xF9	; 249
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	81 e7       	ldi	r24, 0x71	; 113
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 f5 06 	call	0xdea	; 0xdea <HAL_SPI_Transmit>
		ControlFlag  = 0  ;
     142:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ControlFlag>
     146:	2f ef       	ldi	r18, 0xFF	; 255
     148:	81 ee       	ldi	r24, 0xE1	; 225
     14a:	94 e0       	ldi	r25, 0x04	; 4
     14c:	21 50       	subi	r18, 0x01	; 1
     14e:	80 40       	sbci	r24, 0x00	; 0
     150:	90 40       	sbci	r25, 0x00	; 0
     152:	e1 f7       	brne	.-8      	; 0x14c <SPI_Transmit_Only+0x2a>
     154:	00 c0       	rjmp	.+0      	; 0x156 <SPI_Transmit_Only+0x34>
     156:	00 00       	nop
     158:	08 95       	ret

0000015a <I2C_Transmit_Only>:

	_delay_ms(100);
}

void I2C_Transmit_Only(void)
{
     15a:	ef 92       	push	r14
     15c:	0f 93       	push	r16
     15e:	1f 93       	push	r17
	uint8_t ExitKey = 0 ;
     160:	80 e0       	ldi	r24, 0x00	; 0
	while(!ExitKey)
     162:	14 c0       	rjmp	.+40     	; 0x18c <I2C_Transmit_Only+0x32>
	{
		HAL_I2C_Mem_Write(&I2C_Handler , 0xa0 ,I2C_MEM_START_ADD ,I2C_MEM_ADD_SIZE ,I2C_Buffer ,I2C_Buffer_SIZE);
     164:	0f 2e       	mov	r0, r31
     166:	ff e0       	ldi	r31, 0x0F	; 15
     168:	ef 2e       	mov	r14, r31
     16a:	f0 2d       	mov	r31, r0
     16c:	08 e8       	ldi	r16, 0x88	; 136
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	22 e0       	ldi	r18, 0x02	; 2
     172:	40 e0       	ldi	r20, 0x00	; 0
     174:	50 e0       	ldi	r21, 0x00	; 0
     176:	60 ea       	ldi	r22, 0xA0	; 160
     178:	8f e7       	ldi	r24, 0x7F	; 127
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 ef 05 	call	0xbde	; 0xbde <HAL_I2C_Mem_Write>
		ControlFlag  = 0  ;
     180:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ControlFlag>
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
     184:	85 eb       	ldi	r24, 0xB5	; 181
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 3a 02 	call	0x474	; 0x474 <KeyPad_GetPressedKey>
}

void I2C_Transmit_Only(void)
{
	uint8_t ExitKey = 0 ;
	while(!ExitKey)
     18c:	88 23       	and	r24, r24
     18e:	51 f3       	breq	.-44     	; 0x164 <I2C_Transmit_Only+0xa>
     190:	2f ef       	ldi	r18, 0xFF	; 255
     192:	81 ee       	ldi	r24, 0xE1	; 225
     194:	94 e0       	ldi	r25, 0x04	; 4
     196:	21 50       	subi	r18, 0x01	; 1
     198:	80 40       	sbci	r24, 0x00	; 0
     19a:	90 40       	sbci	r25, 0x00	; 0
     19c:	e1 f7       	brne	.-8      	; 0x196 <I2C_Transmit_Only+0x3c>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <I2C_Transmit_Only+0x46>
     1a0:	00 00       	nop
		HAL_I2C_Mem_Write(&I2C_Handler , 0xa0 ,I2C_MEM_START_ADD ,I2C_MEM_ADD_SIZE ,I2C_Buffer ,I2C_Buffer_SIZE);
		ControlFlag  = 0  ;
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
	}
	_delay_ms(100);
}
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	ef 90       	pop	r14
     1a8:	08 95       	ret

000001aa <ALL_Transmit_Only>:

void ALL_Transmit_Only(void)
{
     1aa:	ef 92       	push	r14
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
	uint8_t ExitKey = 0 ;

		HAL_UART_TRANSMIT(&UART_Handler ,UART_TXBuffer ,  UART_TXBuffer_SIZE );
     1b0:	4f e0       	ldi	r20, 0x0F	; 15
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	66 ea       	ldi	r22, 0xA6	; 166
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	80 e6       	ldi	r24, 0x60	; 96
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 5d 07 	call	0xeba	; 0xeba <HAL_UART_TRANSMIT>
		HAL_SPI_Transmit(&SPI_Handler , SPI_TXBuffer ,SPI_TXBuffer_SIZE );
     1c0:	4f e0       	ldi	r20, 0x0F	; 15
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	67 e9       	ldi	r22, 0x97	; 151
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	81 e7       	ldi	r24, 0x71	; 113
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 f5 06 	call	0xdea	; 0xdea <HAL_SPI_Transmit>
		HAL_I2C_Mem_Write(&I2C_Handler , 0xaa ,5 , 1 ,I2C_Buffer ,I2C_Buffer_SIZE);
     1d0:	0f 2e       	mov	r0, r31
     1d2:	ff e0       	ldi	r31, 0x0F	; 15
     1d4:	ef 2e       	mov	r14, r31
     1d6:	f0 2d       	mov	r31, r0
     1d8:	08 e8       	ldi	r16, 0x88	; 136
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	21 e0       	ldi	r18, 0x01	; 1
     1de:	45 e0       	ldi	r20, 0x05	; 5
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	6a ea       	ldi	r22, 0xAA	; 170
     1e4:	8f e7       	ldi	r24, 0x7F	; 127
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 ef 05 	call	0xbde	; 0xbde <HAL_I2C_Mem_Write>
	_delay_ms(100);
}

void ALL_Transmit_Only(void)
{
	uint8_t ExitKey = 0 ;
     1ec:	80 e0       	ldi	r24, 0x00	; 0

		HAL_UART_TRANSMIT(&UART_Handler ,UART_TXBuffer ,  UART_TXBuffer_SIZE );
		HAL_SPI_Transmit(&SPI_Handler , SPI_TXBuffer ,SPI_TXBuffer_SIZE );
		HAL_I2C_Mem_Write(&I2C_Handler , 0xaa ,5 , 1 ,I2C_Buffer ,I2C_Buffer_SIZE);
	while(!ExitKey)
     1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <ALL_Transmit_Only+0x4e>
	{
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
     1f0:	85 eb       	ldi	r24, 0xB5	; 181
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 3a 02 	call	0x474	; 0x474 <KeyPad_GetPressedKey>
	uint8_t ExitKey = 0 ;

		HAL_UART_TRANSMIT(&UART_Handler ,UART_TXBuffer ,  UART_TXBuffer_SIZE );
		HAL_SPI_Transmit(&SPI_Handler , SPI_TXBuffer ,SPI_TXBuffer_SIZE );
		HAL_I2C_Mem_Write(&I2C_Handler , 0xaa ,5 , 1 ,I2C_Buffer ,I2C_Buffer_SIZE);
	while(!ExitKey)
     1f8:	88 23       	and	r24, r24
     1fa:	d1 f3       	breq	.-12     	; 0x1f0 <ALL_Transmit_Only+0x46>
	{
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
	}
		ControlFlag  = 0  ;
     1fc:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ControlFlag>
     200:	2f ef       	ldi	r18, 0xFF	; 255
     202:	81 ee       	ldi	r24, 0xE1	; 225
     204:	94 e0       	ldi	r25, 0x04	; 4
     206:	21 50       	subi	r18, 0x01	; 1
     208:	80 40       	sbci	r24, 0x00	; 0
     20a:	90 40       	sbci	r25, 0x00	; 0
     20c:	e1 f7       	brne	.-8      	; 0x206 <ALL_Transmit_Only+0x5c>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <ALL_Transmit_Only+0x66>
     210:	00 00       	nop
		_delay_ms(100);
}
     212:	1f 91       	pop	r17
     214:	0f 91       	pop	r16
     216:	ef 90       	pop	r14
     218:	08 95       	ret

0000021a <EEPROM_Read_Only>:
}



void EEPROM_Read_Only(void)
{
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	2c 97       	sbiw	r28, 0x0c	; 12
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
	uint8_t ExitKey = 0 ;
	uint8_t RXByte[EEPROM_DATA_SIZE] = {0} ;
     22e:	fe 01       	movw	r30, r28
     230:	31 96       	adiw	r30, 0x01	; 1
     232:	8c e0       	ldi	r24, 0x0C	; 12
     234:	df 01       	movw	r26, r30
     236:	1d 92       	st	X+, r1
     238:	8a 95       	dec	r24
     23a:	e9 f7       	brne	.-6      	; 0x236 <EEPROM_Read_Only+0x1c>



void EEPROM_Read_Only(void)
{
	uint8_t ExitKey = 0 ;
     23c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t RXByte[EEPROM_DATA_SIZE] = {0} ;
	while(!ExitKey)
     23e:	0c c0       	rjmp	.+24     	; 0x258 <EEPROM_Read_Only+0x3e>
	{
		EEPROM_ReadByteS(10,RXByte , EEPROM_DATA_SIZE);
     240:	4c e0       	ldi	r20, 0x0C	; 12
     242:	be 01       	movw	r22, r28
     244:	6f 5f       	subi	r22, 0xFF	; 255
     246:	7f 4f       	sbci	r23, 0xFF	; 255
     248:	8a e0       	ldi	r24, 0x0A	; 10
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 14 04 	call	0x828	; 0x828 <EEPROM_ReadByteS>
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
     250:	85 eb       	ldi	r24, 0xB5	; 181
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 3a 02 	call	0x474	; 0x474 <KeyPad_GetPressedKey>

void EEPROM_Read_Only(void)
{
	uint8_t ExitKey = 0 ;
	uint8_t RXByte[EEPROM_DATA_SIZE] = {0} ;
	while(!ExitKey)
     258:	88 23       	and	r24, r24
     25a:	91 f3       	breq	.-28     	; 0x240 <EEPROM_Read_Only+0x26>
	{
		EEPROM_ReadByteS(10,RXByte , EEPROM_DATA_SIZE);
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
	}
	LCD_Send_Command( LCD_COMMANED_CLEAR_LCD);
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Send_Command>
	LCD_Send_String_WithLoc(1,1,RXByte );
     262:	ae 01       	movw	r20, r28
     264:	4f 5f       	subi	r20, 0xFF	; 255
     266:	5f 4f       	sbci	r21, 0xFF	; 255
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_Send_String_WithLoc>
	ControlFlag  = 0  ;
     270:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ControlFlag>
     274:	bf ef       	ldi	r27, 0xFF	; 255
     276:	23 ed       	ldi	r18, 0xD3	; 211
     278:	80 e3       	ldi	r24, 0x30	; 48
     27a:	b1 50       	subi	r27, 0x01	; 1
     27c:	20 40       	sbci	r18, 0x00	; 0
     27e:	80 40       	sbci	r24, 0x00	; 0
     280:	e1 f7       	brne	.-8      	; 0x27a <EEPROM_Read_Only+0x60>
     282:	00 c0       	rjmp	.+0      	; 0x284 <EEPROM_Read_Only+0x6a>
     284:	00 00       	nop
	_delay_ms(1000);
}
     286:	2c 96       	adiw	r28, 0x0c	; 12
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	f8 94       	cli
     28c:	de bf       	out	0x3e, r29	; 62
     28e:	0f be       	out	0x3f, r0	; 63
     290:	cd bf       	out	0x3d, r28	; 61
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <EEPROM_Write_Only>:




void EEPROM_Write_Only(void)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	2c 97       	sbiw	r28, 0x0c	; 12
     2a2:	0f b6       	in	r0, 0x3f	; 63
     2a4:	f8 94       	cli
     2a6:	de bf       	out	0x3e, r29	; 62
     2a8:	0f be       	out	0x3f, r0	; 63
     2aa:	cd bf       	out	0x3d, r28	; 61
	uint8_t ExitKey = 0 ;
	uint8_t TXByte[EEPROM_DATA_SIZE] = "HI , THIER " ;
     2ac:	8c e0       	ldi	r24, 0x0C	; 12
     2ae:	e5 ee       	ldi	r30, 0xE5	; 229
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	de 01       	movw	r26, r28
     2b4:	11 96       	adiw	r26, 0x01	; 1
     2b6:	01 90       	ld	r0, Z+
     2b8:	0d 92       	st	X+, r0
     2ba:	8a 95       	dec	r24
     2bc:	e1 f7       	brne	.-8      	; 0x2b6 <EEPROM_Write_Only+0x1e>



void EEPROM_Write_Only(void)
{
	uint8_t ExitKey = 0 ;
     2be:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t TXByte[EEPROM_DATA_SIZE] = "HI , THIER " ;
	while(!ExitKey)
     2c0:	0c c0       	rjmp	.+24     	; 0x2da <EEPROM_Write_Only+0x42>
	{
		EEPROM_WriteByteS(10,TXByte , EEPROM_DATA_SIZE);
     2c2:	4c e0       	ldi	r20, 0x0C	; 12
     2c4:	be 01       	movw	r22, r28
     2c6:	6f 5f       	subi	r22, 0xFF	; 255
     2c8:	7f 4f       	sbci	r23, 0xFF	; 255
     2ca:	8a e0       	ldi	r24, 0x0A	; 10
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 76 04 	call	0x8ec	; 0x8ec <EEPROM_WriteByteS>
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
     2d2:	85 eb       	ldi	r24, 0xB5	; 181
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 3a 02 	call	0x474	; 0x474 <KeyPad_GetPressedKey>

void EEPROM_Write_Only(void)
{
	uint8_t ExitKey = 0 ;
	uint8_t TXByte[EEPROM_DATA_SIZE] = "HI , THIER " ;
	while(!ExitKey)
     2da:	88 23       	and	r24, r24
     2dc:	91 f3       	breq	.-28     	; 0x2c2 <EEPROM_Write_Only+0x2a>
	{
		EEPROM_WriteByteS(10,TXByte , EEPROM_DATA_SIZE);
		ExitKey = KeyPad_GetPressedKey(&KeyPad);
	}
	ControlFlag  = 0  ;
     2de:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <ControlFlag>
     2e2:	2f ef       	ldi	r18, 0xFF	; 255
     2e4:	81 ee       	ldi	r24, 0xE1	; 225
     2e6:	94 e0       	ldi	r25, 0x04	; 4
     2e8:	21 50       	subi	r18, 0x01	; 1
     2ea:	80 40       	sbci	r24, 0x00	; 0
     2ec:	90 40       	sbci	r25, 0x00	; 0
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <EEPROM_Write_Only+0x50>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <EEPROM_Write_Only+0x5a>
     2f2:	00 00       	nop
	_delay_ms(100);
}
     2f4:	2c 96       	adiw	r28, 0x0c	; 12
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	f8 94       	cli
     2fa:	de bf       	out	0x3e, r29	; 62
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <APP_Init>:
								
								

void APP_Init(void)
{
	KeyPad_Initialization(&KeyPad);
     306:	85 eb       	ldi	r24, 0xB5	; 181
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <KeyPad_Initialization>
	LCD_Initializaion();
     30e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <LCD_Initializaion>
	EXTI_Init(&EXIT_Handler);
     312:	84 ef       	ldi	r24, 0xF4	; 244
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 dd 04 	call	0x9ba	; 0x9ba <EXTI_Init>
//	EXIT_INT0_CallBack()	
	//I2C_Init(&I2C_Handler);
	EEPROM_Init();
     31a:	0e 94 0e 04 	call	0x81c	; 0x81c <EEPROM_Init>
	HAL_SPI_Init(&SPI_Handler);
     31e:	81 e7       	ldi	r24, 0x71	; 113
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 93 06 	call	0xd26	; 0xd26 <HAL_SPI_Init>
	HAL_UART_Init(&UART_Handler);
     326:	80 e6       	ldi	r24, 0x60	; 96
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 24 07 	call	0xe48	; 0xe48 <HAL_UART_Init>
	sei();
     32e:	78 94       	sei
     330:	08 95       	ret

00000332 <APP_UPdate>:


void APP_UPdate(void)
{
			
			*KeypadKey = 0 ;
     332:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <KeypadKey>
			while(!KeypadKey[0])
     336:	06 c0       	rjmp	.+12     	; 0x344 <APP_UPdate+0x12>
			KeypadKey[0] = KeyPad_GetPressedKey(&KeyPad);
     338:	85 eb       	ldi	r24, 0xB5	; 181
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 3a 02 	call	0x474	; 0x474 <KeyPad_GetPressedKey>
     340:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <KeypadKey>

void APP_UPdate(void)
{
			
			*KeypadKey = 0 ;
			while(!KeypadKey[0])
     344:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <KeypadKey>
     348:	88 23       	and	r24, r24
     34a:	b1 f3       	breq	.-20     	; 0x338 <APP_UPdate+0x6>
			KeypadKey[0] = KeyPad_GetPressedKey(&KeyPad);
			LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Send_Command>
			LCD_Send_Character_WithLoc(1,1,KeypadKey[0]);
     352:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <KeypadKey>
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	0e 94 56 03 	call	0x6ac	; 0x6ac <LCD_Send_Character_WithLoc>
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	81 ee       	ldi	r24, 0xE1	; 225
     362:	94 e0       	ldi	r25, 0x04	; 4
     364:	21 50       	subi	r18, 0x01	; 1
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <APP_UPdate+0x32>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <APP_UPdate+0x3c>
     36e:	00 00       	nop
			_delay_ms(100);

			ControlFlag  = atoi((char*)KeypadKey) ;
     370:	88 e1       	ldi	r24, 0x18	; 24
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 52 08 	call	0x10a4	; 0x10a4 <atoi>
     378:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ControlFlag>
			LCD_Send_Integer_WithLoc(1,1,ControlFlag, 4);
     37c:	48 2f       	mov	r20, r24
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	24 e0       	ldi	r18, 0x04	; 4
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 c5 03 	call	0x78a	; 0x78a <LCD_Send_Integer_WithLoc>
			switch(ControlFlag)
     38a:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <ControlFlag>
     38e:	8e 2f       	mov	r24, r30
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	fc 01       	movw	r30, r24
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	e8 30       	cpi	r30, 0x08	; 8
     398:	f1 05       	cpc	r31, r1
     39a:	10 f5       	brcc	.+68     	; 0x3e0 <APP_UPdate+0xae>
     39c:	e6 5d       	subi	r30, 0xD6	; 214
     39e:	ff 4f       	sbci	r31, 0xFF	; 255
     3a0:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__tablejump2__>
			{

				case  1 :
						Uart_Transmit_Only();
     3a4:	0e 94 51 00 	call	0xa2	; 0xa2 <Uart_Transmit_Only>
					break;
     3a8:	08 95       	ret
				case  2 :
						SPI_Transmit_Only();
     3aa:	0e 94 91 00 	call	0x122	; 0x122 <SPI_Transmit_Only>
					break;
     3ae:	08 95       	ret
				case  3 :
						I2C_Transmit_Only();
     3b0:	0e 94 ad 00 	call	0x15a	; 0x15a <I2C_Transmit_Only>
					break;
     3b4:	08 95       	ret
				case 4 :
						ALL_Transmit_Only();			
     3b6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <ALL_Transmit_Only>
					break;
     3ba:	08 95       	ret
				case 5 :
						Uart_ECHO_Only();
     3bc:	0e 94 6d 00 	call	0xda	; 0xda <Uart_ECHO_Only>
					break;
     3c0:	08 95       	ret
				case 6 :
						EEPROM_Read_Only();
     3c2:	0e 94 0d 01 	call	0x21a	; 0x21a <EEPROM_Read_Only>
					break; 
     3c6:	08 95       	ret
				case 7 :
						EEPROM_Write_Only();
     3c8:	0e 94 4c 01 	call	0x298	; 0x298 <EEPROM_Write_Only>
					break;
     3cc:	08 95       	ret
     3ce:	2f ef       	ldi	r18, 0xFF	; 255
     3d0:	81 ee       	ldi	r24, 0xE1	; 225
     3d2:	94 e0       	ldi	r25, 0x04	; 4
     3d4:	21 50       	subi	r18, 0x01	; 1
     3d6:	80 40       	sbci	r24, 0x00	; 0
     3d8:	90 40       	sbci	r25, 0x00	; 0
     3da:	e1 f7       	brne	.-8      	; 0x3d4 <APP_UPdate+0xa2>
     3dc:	00 c0       	rjmp	.+0      	; 0x3de <APP_UPdate+0xac>
     3de:	00 00       	nop
     3e0:	08 95       	ret

000003e2 <KeyPad_Initialization>:
 * brief  : this function used to initialize keypad
 * param. : KeyPadInit pointer to the handler of keypad
 * return : void 
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	8c 01       	movw	r16, r24
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <KeyPad_gpio+0x1>
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
     3f4:	f1 2c       	mov	r15, r1
     3f6:	19 c0       	rjmp	.+50     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	{
		KeyPad_gpio.pin = KeyPad->ColumnPins[iter].Pin ;
     3f8:	cf 2d       	mov	r28, r15
     3fa:	d0 e0       	ldi	r29, 0x00	; 0
     3fc:	ce 01       	movw	r24, r28
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	c8 0f       	add	r28, r24
     404:	d9 1f       	adc	r29, r25
     406:	c0 0f       	add	r28, r16
     408:	d1 1f       	adc	r29, r17
     40a:	8b 85       	ldd	r24, Y+11	; 0x0b
     40c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <KeyPad_gpio>
		HAL_GPIO_Pin_Init(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
     410:	66 ef       	ldi	r22, 0xF6	; 246
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	89 85       	ldd	r24, Y+9	; 0x09
     416:	9a 85       	ldd	r25, Y+10	; 0x0a
     418:	0e 94 86 05 	call	0xb0c	; 0xb0c <HAL_GPIO_Pin_Init>
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
     41c:	41 e0       	ldi	r20, 0x01	; 1
     41e:	6b 85       	ldd	r22, Y+11	; 0x0b
     420:	89 85       	ldd	r24, Y+9	; 0x09
     422:	9a 85       	ldd	r25, Y+10	; 0x0a
     424:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
     428:	f3 94       	inc	r15
     42a:	82 e0       	ldi	r24, 0x02	; 2
     42c:	8f 15       	cp	r24, r15
     42e:	20 f7       	brcc	.-56     	; 0x3f8 <KeyPad_Initialization+0x16>
		HAL_GPIO_Pin_Init(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
     430:	e6 ef       	ldi	r30, 0xF6	; 246
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	11 82       	std	Z+1, r1	; 0x01
	KeyPad_gpio.pull = WRIGHT_SECOND ;
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	82 83       	std	Z+2, r24	; 0x02
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
     43a:	c0 e0       	ldi	r28, 0x00	; 0
     43c:	13 c0       	rjmp	.+38     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	{
		KeyPad_gpio.pin = KeyPad->RowPins[iter].Pin ;
     43e:	ec 2f       	mov	r30, r28
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	cf 01       	movw	r24, r30
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	e8 0f       	add	r30, r24
     44a:	f9 1f       	adc	r31, r25
     44c:	e0 0f       	add	r30, r16
     44e:	f1 1f       	adc	r31, r17
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <KeyPad_gpio>
		HAL_GPIO_Pin_Init(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
     456:	66 ef       	ldi	r22, 0xF6	; 246
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	91 81       	ldd	r25, Z+1	; 0x01
     45e:	0e 94 86 05 	call	0xb0c	; 0xb0c <HAL_GPIO_Pin_Init>
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
	KeyPad_gpio.pull = WRIGHT_SECOND ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
     462:	cf 5f       	subi	r28, 0xFF	; 255
     464:	c3 30       	cpi	r28, 0x03	; 3
     466:	58 f3       	brcs	.-42     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		HAL_GPIO_Pin_Init(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
	}	
	


}/* END_FUN KeyPad_Initialization()*/
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	1f 91       	pop	r17
     46e:	0f 91       	pop	r16
     470:	ff 90       	pop	r15
     472:	08 95       	ret

00000474 <KeyPad_GetPressedKey>:
 * brief  : this function used to return the pressed key 
 * param. : void
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	8c 01       	movw	r16, r24
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
     486:	c1 2c       	mov	r12, r1
     488:	4b c0       	rjmp	.+150    	; 0x520 <KeyPad_GetPressedKey+0xac>
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
     48a:	cc 2d       	mov	r28, r12
     48c:	d0 e0       	ldi	r29, 0x00	; 0
     48e:	fe 01       	movw	r30, r28
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	ec 0f       	add	r30, r28
     496:	fd 1f       	adc	r31, r29
     498:	e0 0f       	add	r30, r16
     49a:	f1 1f       	adc	r31, r17
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	63 85       	ldd	r22, Z+11	; 0x0b
     4a0:	81 85       	ldd	r24, Z+9	; 0x09
     4a2:	92 85       	ldd	r25, Z+10	; 0x0a
     4a4:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
     4a8:	d1 2c       	mov	r13, r1
     4aa:	29 c0       	rjmp	.+82     	; 0x4fe <KeyPad_GetPressedKey+0x8a>
		{
			
			if ( HAL_GPIO_READPIN(KeyPad->RowPins[iterROW].Port ,KeyPad->RowPins[iterROW].Pin ) == WRIGHT_FIRST )
     4ac:	ed 2c       	mov	r14, r13
     4ae:	f1 2c       	mov	r15, r1
     4b0:	f7 01       	movw	r30, r14
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	ee 0d       	add	r30, r14
     4b8:	ff 1d       	adc	r31, r15
     4ba:	e0 0f       	add	r30, r16
     4bc:	f1 1f       	adc	r31, r17
     4be:	62 81       	ldd	r22, Z+2	; 0x02
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	0e 94 99 05 	call	0xb32	; 0xb32 <HAL_GPIO_READPIN>
     4c8:	81 11       	cpse	r24, r1
     4ca:	18 c0       	rjmp	.+48     	; 0x4fc <KeyPad_GetPressedKey+0x88>
			{
				
				HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
     4cc:	fe 01       	movw	r30, r28
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	ec 0f       	add	r30, r28
     4d4:	fd 1f       	adc	r31, r29
     4d6:	e0 0f       	add	r30, r16
     4d8:	f1 1f       	adc	r31, r17
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	63 85       	ldd	r22, Z+11	; 0x0b
     4de:	81 85       	ldd	r24, Z+9	; 0x09
     4e0:	92 85       	ldd	r25, Z+10	; 0x0a
     4e2:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
				return arr_KeyPad_char[iterROW][iterCOL] ;
     4e6:	c7 01       	movw	r24, r14
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	8e 0d       	add	r24, r14
     4ee:	9f 1d       	adc	r25, r15
     4f0:	89 53       	subi	r24, 0x39	; 57
     4f2:	9f 4f       	sbci	r25, 0xFF	; 255
     4f4:	c8 0f       	add	r28, r24
     4f6:	d9 1f       	adc	r29, r25
     4f8:	88 81       	ld	r24, Y
     4fa:	17 c0       	rjmp	.+46     	; 0x52a <KeyPad_GetPressedKey+0xb6>
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
     4fc:	d3 94       	inc	r13
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	8d 15       	cp	r24, r13
     502:	a0 f6       	brcc	.-88     	; 0x4ac <KeyPad_GetPressedKey+0x38>
				return arr_KeyPad_char[iterROW][iterCOL] ;
			}else{
				;
			}
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
     504:	ce 01       	movw	r24, r28
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	c8 0f       	add	r28, r24
     50c:	d9 1f       	adc	r29, r25
     50e:	c0 0f       	add	r28, r16
     510:	d1 1f       	adc	r29, r17
     512:	41 e0       	ldi	r20, 0x01	; 1
     514:	6b 85       	ldd	r22, Y+11	; 0x0b
     516:	89 85       	ldd	r24, Y+9	; 0x09
     518:	9a 85       	ldd	r25, Y+10	; 0x0a
     51a:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
     51e:	c3 94       	inc	r12
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	8c 15       	cp	r24, r12
     524:	08 f0       	brcs	.+2      	; 0x528 <KeyPad_GetPressedKey+0xb4>
     526:	b1 cf       	rjmp	.-158    	; 0x48a <KeyPad_GetPressedKey+0x16>
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;

	}
	
return Key ;
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	08 95       	ret

0000053c <LCD_Triger_Enable>:
	LCD_Send_Character_CurrLoc('.');
	LCD_Send_Integer_CurrLoc(decimalValue,5);
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Float_Withloc()*/
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	c0 ed       	ldi	r28, 0xD0	; 208
     542:	d0 e0       	ldi	r29, 0x00	; 0
     544:	41 e0       	ldi	r20, 0x01	; 1
     546:	68 85       	ldd	r22, Y+8	; 0x08
     548:	8e 81       	ldd	r24, Y+6	; 0x06
     54a:	9f 81       	ldd	r25, Y+7	; 0x07
     54c:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     550:	85 e0       	ldi	r24, 0x05	; 5
     552:	8a 95       	dec	r24
     554:	f1 f7       	brne	.-4      	; 0x552 <LCD_Triger_Enable+0x16>
     556:	00 00       	nop
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	68 85       	ldd	r22, Y+8	; 0x08
     55c:	8e 81       	ldd	r24, Y+6	; 0x06
     55e:	9f 81       	ldd	r25, Y+7	; 0x07
     560:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     564:	8f e3       	ldi	r24, 0x3F	; 63
     566:	9f e1       	ldi	r25, 0x1F	; 31
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <LCD_Triger_Enable+0x2c>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <LCD_Triger_Enable+0x32>
     56e:	00 00       	nop
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <LCD_Send_4BitData>:
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	c8 2f       	mov	r28, r24
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	23 c0       	rjmp	.+70     	; 0x5ca <LCD_Send_4BitData+0x54>
     584:	8c 01       	movw	r16, r24
     586:	0f 5f       	subi	r16, 0xFF	; 255
     588:	1f 4f       	sbci	r17, 0xFF	; 255
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	00 2e       	mov	r0, r16
     590:	02 c0       	rjmp	.+4      	; 0x596 <LCD_Send_4BitData+0x20>
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	0a 94       	dec	r0
     598:	e2 f7       	brpl	.-8      	; 0x592 <LCD_Send_4BitData+0x1c>
     59a:	2c 2f       	mov	r18, r28
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	42 23       	and	r20, r18
     5a0:	53 23       	and	r21, r19
     5a2:	00 2e       	mov	r0, r16
     5a4:	02 c0       	rjmp	.+4      	; 0x5aa <LCD_Send_4BitData+0x34>
     5a6:	55 95       	asr	r21
     5a8:	47 95       	ror	r20
     5aa:	0a 94       	dec	r0
     5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <LCD_Send_4BitData+0x30>
     5ae:	fc 01       	movw	r30, r24
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	8e 0f       	add	r24, r30
     5b6:	9f 1f       	adc	r25, r31
     5b8:	fc 01       	movw	r30, r24
     5ba:	e0 53       	subi	r30, 0x30	; 48
     5bc:	ff 4f       	sbci	r31, 0xFF	; 255
     5be:	62 81       	ldd	r22, Z+2	; 0x02
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     5c8:	c8 01       	movw	r24, r16
     5ca:	87 30       	cpi	r24, 0x07	; 7
     5cc:	91 05       	cpc	r25, r1
     5ce:	d4 f2       	brlt	.-76     	; 0x584 <LCD_Send_4BitData+0xe>
     5d0:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_Triger_Enable>
     5d4:	03 e0       	ldi	r16, 0x03	; 3
     5d6:	10 e0       	ldi	r17, 0x00	; 0
     5d8:	21 c0       	rjmp	.+66     	; 0x61c <LCD_Send_4BitData+0xa6>
     5da:	c8 01       	movw	r24, r16
     5dc:	03 97       	sbiw	r24, 0x03	; 3
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	08 2e       	mov	r0, r24
     5e4:	02 c0       	rjmp	.+4      	; 0x5ea <LCD_Send_4BitData+0x74>
     5e6:	44 0f       	add	r20, r20
     5e8:	55 1f       	adc	r21, r21
     5ea:	0a 94       	dec	r0
     5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <LCD_Send_4BitData+0x70>
     5ee:	2c 2f       	mov	r18, r28
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	42 23       	and	r20, r18
     5f4:	53 23       	and	r21, r19
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <LCD_Send_4BitData+0x86>
     5f8:	55 95       	asr	r21
     5fa:	47 95       	ror	r20
     5fc:	8a 95       	dec	r24
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <LCD_Send_4BitData+0x82>
     600:	f8 01       	movw	r30, r16
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	e0 0f       	add	r30, r16
     608:	f1 1f       	adc	r31, r17
     60a:	e0 53       	subi	r30, 0x30	; 48
     60c:	ff 4f       	sbci	r31, 0xFF	; 255
     60e:	62 81       	ldd	r22, Z+2	; 0x02
     610:	80 81       	ld	r24, Z
     612:	91 81       	ldd	r25, Z+1	; 0x01
     614:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     618:	0f 5f       	subi	r16, 0xFF	; 255
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
     61c:	07 30       	cpi	r16, 0x07	; 7
     61e:	11 05       	cpc	r17, r1
     620:	e4 f2       	brlt	.-72     	; 0x5da <LCD_Send_4BitData+0x64>
     622:	0e 94 9e 02 	call	0x53c	; 0x53c <LCD_Triger_Enable>
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret

0000062e <LCD_Send_Character_CurrLoc>:
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	18 2f       	mov	r17, r24
     636:	c0 ed       	ldi	r28, 0xD0	; 208
     638:	d0 e0       	ldi	r29, 0x00	; 0
     63a:	41 e0       	ldi	r20, 0x01	; 1
     63c:	6a 81       	ldd	r22, Y+2	; 0x02
     63e:	88 81       	ld	r24, Y
     640:	99 81       	ldd	r25, Y+1	; 0x01
     642:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     646:	40 e0       	ldi	r20, 0x00	; 0
     648:	6d 81       	ldd	r22, Y+5	; 0x05
     64a:	8b 81       	ldd	r24, Y+3	; 0x03
     64c:	9c 81       	ldd	r25, Y+4	; 0x04
     64e:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     652:	81 2f       	mov	r24, r17
     654:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_Send_4BitData>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	08 95       	ret

00000662 <LCD_Send_Command>:
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	18 2f       	mov	r17, r24
     66a:	c0 ed       	ldi	r28, 0xD0	; 208
     66c:	d0 e0       	ldi	r29, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	6a 81       	ldd	r22, Y+2	; 0x02
     672:	88 81       	ld	r24, Y
     674:	99 81       	ldd	r25, Y+1	; 0x01
     676:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	6d 81       	ldd	r22, Y+5	; 0x05
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	9c 81       	ldd	r25, Y+4	; 0x04
     682:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     686:	81 2f       	mov	r24, r17
     688:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_Send_4BitData>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	08 95       	ret

00000696 <LCD_Goto_Location>:
     696:	e8 2f       	mov	r30, r24
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	e0 51       	subi	r30, 0x10	; 16
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	80 81       	ld	r24, Z
     6a0:	86 0f       	add	r24, r22
     6a2:	81 50       	subi	r24, 0x01	; 1
     6a4:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Send_Command>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	08 95       	ret

000006ac <LCD_Send_Character_WithLoc>:
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	14 2f       	mov	r17, r20
     6b4:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Goto_Location>
     6b8:	c0 ed       	ldi	r28, 0xD0	; 208
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	6a 81       	ldd	r22, Y+2	; 0x02
     6c0:	88 81       	ld	r24, Y
     6c2:	99 81       	ldd	r25, Y+1	; 0x01
     6c4:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	6d 81       	ldd	r22, Y+5	; 0x05
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
     6d4:	81 2f       	mov	r24, r17
     6d6:	0e 94 bb 02 	call	0x576	; 0x576 <LCD_Send_4BitData>
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	08 95       	ret

000006e4 <LCD_Initializaion>:
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <LCD_Initializaion+0xa>
     6ee:	1f 92       	push	r1
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	2f ef       	ldi	r18, 0xFF	; 255
     6f6:	89 ef       	ldi	r24, 0xF9	; 249
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	21 50       	subi	r18, 0x01	; 1
     6fc:	80 40       	sbci	r24, 0x00	; 0
     6fe:	90 40       	sbci	r25, 0x00	; 0
     700:	e1 f7       	brne	.-8      	; 0x6fa <LCD_Initializaion+0x16>
     702:	00 c0       	rjmp	.+0      	; 0x704 <LCD_Initializaion+0x20>
     704:	00 00       	nop
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	8a 83       	std	Y+2, r24	; 0x02
     70a:	1b 82       	std	Y+3, r1	; 0x03
     70c:	00 e0       	ldi	r16, 0x00	; 0
     70e:	10 e0       	ldi	r17, 0x00	; 0
     710:	12 c0       	rjmp	.+36     	; 0x736 <LCD_Initializaion+0x52>
     712:	f8 01       	movw	r30, r16
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	e0 0f       	add	r30, r16
     71a:	f1 1f       	adc	r31, r17
     71c:	e0 53       	subi	r30, 0x30	; 48
     71e:	ff 4f       	sbci	r31, 0xFF	; 255
     720:	82 81       	ldd	r24, Z+2	; 0x02
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	be 01       	movw	r22, r28
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	0e 94 86 05 	call	0xb0c	; 0xb0c <HAL_GPIO_Pin_Init>
     732:	0f 5f       	subi	r16, 0xFF	; 255
     734:	1f 4f       	sbci	r17, 0xFF	; 255
     736:	07 30       	cpi	r16, 0x07	; 7
     738:	11 05       	cpc	r17, r1
     73a:	5c f3       	brlt	.-42     	; 0x712 <LCD_Initializaion+0x2e>
     73c:	83 e3       	ldi	r24, 0x33	; 51
     73e:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Send_Command>
     742:	82 e3       	ldi	r24, 0x32	; 50
     744:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Send_Command>
     748:	88 e2       	ldi	r24, 0x28	; 40
     74a:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Send_Command>
     74e:	8c e0       	ldi	r24, 0x0C	; 12
     750:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Send_Command>
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	0e 94 31 03 	call	0x662	; 0x662 <LCD_Send_Command>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	08 95       	ret

0000076c <LCD_Send_String_WithLoc>:
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	ea 01       	movw	r28, r20
     772:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Goto_Location>
     776:	03 c0       	rjmp	.+6      	; 0x77e <LCD_Send_String_WithLoc+0x12>
     778:	21 96       	adiw	r28, 0x01	; 1
     77a:	0e 94 17 03 	call	0x62e	; 0x62e <LCD_Send_Character_CurrLoc>
     77e:	88 81       	ld	r24, Y
     780:	81 11       	cpse	r24, r1
     782:	fa cf       	rjmp	.-12     	; 0x778 <LCD_Send_String_WithLoc+0xc>
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <LCD_Send_Integer_WithLoc>:
 * param. : IntegerToDisplay this is the integer value that you want to display
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_WithLoc(uint8_t y, uint8_t x, uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
     78a:	8f 92       	push	r8
     78c:	9f 92       	push	r9
     78e:	af 92       	push	r10
     790:	bf 92       	push	r11
     792:	cf 92       	push	r12
     794:	df 92       	push	r13
     796:	ef 92       	push	r14
     798:	ff 92       	push	r15
     79a:	0f 93       	push	r16
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62
     7a6:	98 2e       	mov	r9, r24
     7a8:	86 2e       	mov	r8, r22
     7aa:	ca 01       	movw	r24, r20
	LCD_Send_String_WithLoc(y,x,StringToDisplay);
	
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_WithLoc()*/
     7ac:	ad b6       	in	r10, 0x3d	; 61
     7ae:	be b6       	in	r11, 0x3e	; 62
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_WithLoc(uint8_t y, uint8_t x, uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
	uint8_t StringToDisplay[NumberOfDigits];   /* create array with required size */
     7b0:	e2 2e       	mov	r14, r18
     7b2:	f1 2c       	mov	r15, r1
     7b4:	2d b7       	in	r18, 0x3d	; 61
     7b6:	3e b7       	in	r19, 0x3e	; 62
     7b8:	2e 19       	sub	r18, r14
     7ba:	3f 09       	sbc	r19, r15
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	3e bf       	out	0x3e, r19	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	2d bf       	out	0x3d, r18	; 61
     7c6:	2f 5f       	subi	r18, 0xFF	; 255
     7c8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ca:	69 01       	movw	r12, r18
	itoa(IntegerToDisplay,StringToDisplay,10); /* convert from int num. to char num. */
     7cc:	4a e0       	ldi	r20, 0x0A	; 10
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	b9 01       	movw	r22, r18
     7d2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <itoa>
	for (uint16_t i=0;i<NumberOfDigits;i++)
     7d6:	00 e0       	ldi	r16, 0x00	; 0
     7d8:	10 e0       	ldi	r17, 0x00	; 0
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <LCD_Send_Integer_WithLoc+0x5c>
		LCD_Send_Character_CurrLoc(' ');
     7dc:	80 e2       	ldi	r24, 0x20	; 32
     7de:	0e 94 17 03 	call	0x62e	; 0x62e <LCD_Send_Character_CurrLoc>
 */
LCD_Status_t LCD_Send_Integer_WithLoc(uint8_t y, uint8_t x, uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
	uint8_t StringToDisplay[NumberOfDigits];   /* create array with required size */
	itoa(IntegerToDisplay,StringToDisplay,10); /* convert from int num. to char num. */
	for (uint16_t i=0;i<NumberOfDigits;i++)
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
     7e6:	0e 15       	cp	r16, r14
     7e8:	1f 05       	cpc	r17, r15
     7ea:	c0 f3       	brcs	.-16     	; 0x7dc <LCD_Send_Integer_WithLoc+0x52>
		LCD_Send_Character_CurrLoc(' ');
		
	LCD_Send_String_WithLoc(y,x,StringToDisplay);
     7ec:	a6 01       	movw	r20, r12
     7ee:	68 2d       	mov	r22, r8
     7f0:	89 2d       	mov	r24, r9
     7f2:	0e 94 b6 03 	call	0x76c	; 0x76c <LCD_Send_String_WithLoc>
	
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_WithLoc()*/
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	be be       	out	0x3e, r11	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	ad be       	out	0x3d, r10	; 61
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	bf 90       	pop	r11
     814:	af 90       	pop	r10
     816:	9f 90       	pop	r9
     818:	8f 90       	pop	r8
     81a:	08 95       	ret

0000081c <EEPROM_Init>:
	
	
	HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS ,(PageNum )*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE), ATM_CARD_ADDRESS_SIZE , TXBuffer , EEPROM_NUMBER_OF_BYTES_FOR_PAGE);
	return EEPROM_OK ;
	
}
     81c:	8f e7       	ldi	r24, 0x7F	; 127
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 ae 05 	call	0xb5c	; 0xb5c <I2C_Init>
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	08 95       	ret

00000828 <EEPROM_ReadByteS>:


EEPROM_Status_t EEPROM_ReadByteS(uint16_t StartByteNum , uint8_t * RXByte , uint8_t DataSize)
{
     828:	8f 92       	push	r8
     82a:	9f 92       	push	r9
     82c:	af 92       	push	r10
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
	
	if ((RXByte == NULL) || ( DataSize <= 0))
     83c:	61 15       	cp	r22, r1
     83e:	71 05       	cpc	r23, r1
     840:	09 f4       	brne	.+2      	; 0x844 <EEPROM_ReadByteS+0x1c>
     842:	46 c0       	rjmp	.+140    	; 0x8d0 <__stack+0x71>
     844:	44 23       	and	r20, r20
     846:	09 f4       	brne	.+2      	; 0x84a <EEPROM_ReadByteS+0x22>
     848:	45 c0       	rjmp	.+138    	; 0x8d4 <__stack+0x75>
     84a:	c4 2f       	mov	r28, r20
     84c:	6b 01       	movw	r12, r22
     84e:	ac 01       	movw	r20, r24
	
		

		
		uint16_t PageNum =0 , ByteAddress =0 ;
		PageNum = StartByteNum/EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
     850:	5c 01       	movw	r10, r24
     852:	aa 0c       	add	r10, r10
     854:	ab 2c       	mov	r10, r11
     856:	aa 1c       	adc	r10, r10
     858:	bb 08       	sbc	r11, r11
     85a:	b1 94       	neg	r11
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
     85c:	4c 01       	movw	r8, r24
     85e:	e8 94       	clt
     860:	87 f8       	bld	r8, 7
     862:	99 24       	eor	r9, r9
		if((ByteAddress + DataSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
     864:	c4 01       	movw	r24, r8
     866:	8c 0f       	add	r24, r28
     868:	91 1d       	adc	r25, r1
     86a:	81 38       	cpi	r24, 0x81	; 129
     86c:	91 05       	cpc	r25, r1
     86e:	30 f1       	brcs	.+76     	; 0x8bc <__stack+0x5d>
		{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte ,
     870:	80 e8       	ldi	r24, 0x80	; 128
     872:	e8 2e       	mov	r14, r24
     874:	e8 18       	sub	r14, r8
     876:	8b 01       	movw	r16, r22
     878:	22 e0       	ldi	r18, 0x02	; 2
     87a:	60 ea       	ldi	r22, 0xA0	; 160
     87c:	8f e7       	ldi	r24, 0x7F	; 127
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 32 06 	call	0xc64	; 0xc64 <HAL_I2C_Mem_Read>
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
						ATM_CARD_ADDRESS_SIZE , RXByte + EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress , DataSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);
     884:	00 e8       	ldi	r16, 0x80	; 128
     886:	10 e0       	ldi	r17, 0x00	; 0
     888:	08 19       	sub	r16, r8
     88a:	19 09       	sbc	r17, r9
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
		if((ByteAddress + DataSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
		{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte ,
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
     88c:	8c 2f       	mov	r24, r28
     88e:	88 0d       	add	r24, r8
     890:	68 94       	set
     892:	ee 24       	eor	r14, r14
     894:	e7 f8       	bld	r14, 7
     896:	e8 0e       	add	r14, r24
     898:	0c 0d       	add	r16, r12
     89a:	1d 1d       	adc	r17, r13
     89c:	a5 01       	movw	r20, r10
     89e:	4f 5f       	subi	r20, 0xFF	; 255
     8a0:	5f 4f       	sbci	r21, 0xFF	; 255
     8a2:	56 95       	lsr	r21
     8a4:	54 2f       	mov	r21, r20
     8a6:	44 27       	eor	r20, r20
     8a8:	57 95       	ror	r21
     8aa:	47 95       	ror	r20
     8ac:	22 e0       	ldi	r18, 0x02	; 2
     8ae:	60 ea       	ldi	r22, 0xA0	; 160
     8b0:	8f e7       	ldi	r24, 0x7F	; 127
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 32 06 	call	0xc64	; 0xc64 <HAL_I2C_Mem_Read>
		}
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
		}
	
	return EEPROM_OK ;	
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <__stack+0x77>
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
						ATM_CARD_ADDRESS_SIZE , RXByte + EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress , DataSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);
		}
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
     8bc:	ec 2e       	mov	r14, r28
     8be:	8b 01       	movw	r16, r22
     8c0:	22 e0       	ldi	r18, 0x02	; 2
     8c2:	60 ea       	ldi	r22, 0xA0	; 160
     8c4:	8f e7       	ldi	r24, 0x7F	; 127
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 32 06 	call	0xc64	; 0xc64 <HAL_I2C_Mem_Read>
		}
	
	return EEPROM_OK ;	
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <__stack+0x77>
EEPROM_Status_t EEPROM_ReadByteS(uint16_t StartByteNum , uint8_t * RXByte , uint8_t DataSize)
{
	
	if ((RXByte == NULL) || ( DataSize <= 0))
	{
		return EEPROM_PARAM_ERROR ;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <__stack+0x77>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
		}
	
	return EEPROM_OK ;	
}
     8d6:	cf 91       	pop	r28
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ef 90       	pop	r14
     8de:	df 90       	pop	r13
     8e0:	cf 90       	pop	r12
     8e2:	bf 90       	pop	r11
     8e4:	af 90       	pop	r10
     8e6:	9f 90       	pop	r9
     8e8:	8f 90       	pop	r8
     8ea:	08 95       	ret

000008ec <EEPROM_WriteByteS>:

EEPROM_Status_t EEPROM_WriteByteS(uint16_t StartByteNum , uint8_t  * TXByte , uint8_t BufferSize)
{
     8ec:	8f 92       	push	r8
     8ee:	9f 92       	push	r9
     8f0:	af 92       	push	r10
     8f2:	bf 92       	push	r11
     8f4:	cf 92       	push	r12
     8f6:	df 92       	push	r13
     8f8:	ef 92       	push	r14
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
	uint16_t PageNum =0 , ByteAddress =0  ;
	if ((TXByte == NULL) || (BufferSize <= 0))
     900:	61 15       	cp	r22, r1
     902:	71 05       	cpc	r23, r1
     904:	09 f4       	brne	.+2      	; 0x908 <EEPROM_WriteByteS+0x1c>
     906:	46 c0       	rjmp	.+140    	; 0x994 <EEPROM_WriteByteS+0xa8>
     908:	44 23       	and	r20, r20
     90a:	09 f4       	brne	.+2      	; 0x90e <EEPROM_WriteByteS+0x22>
     90c:	45 c0       	rjmp	.+138    	; 0x998 <EEPROM_WriteByteS+0xac>
     90e:	c4 2f       	mov	r28, r20
     910:	6b 01       	movw	r12, r22
     912:	ac 01       	movw	r20, r24
	{
		;
	}
	

		PageNum = StartByteNum/EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
     914:	5c 01       	movw	r10, r24
     916:	aa 0c       	add	r10, r10
     918:	ab 2c       	mov	r10, r11
     91a:	aa 1c       	adc	r10, r10
     91c:	bb 08       	sbc	r11, r11
     91e:	b1 94       	neg	r11
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
     920:	4c 01       	movw	r8, r24
     922:	e8 94       	clt
     924:	87 f8       	bld	r8, 7
     926:	99 24       	eor	r9, r9

	if((ByteAddress + BufferSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
     928:	c4 01       	movw	r24, r8
     92a:	8c 0f       	add	r24, r28
     92c:	91 1d       	adc	r25, r1
     92e:	81 38       	cpi	r24, 0x81	; 129
     930:	91 05       	cpc	r25, r1
     932:	30 f1       	brcs	.+76     	; 0x980 <EEPROM_WriteByteS+0x94>
	{
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte ,  
     934:	80 e8       	ldi	r24, 0x80	; 128
     936:	e8 2e       	mov	r14, r24
     938:	e8 18       	sub	r14, r8
     93a:	8b 01       	movw	r16, r22
     93c:	22 e0       	ldi	r18, 0x02	; 2
     93e:	60 ea       	ldi	r22, 0xA0	; 160
     940:	8f e7       	ldi	r24, 0x7F	; 127
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 ef 05 	call	0xbde	; 0xbde <HAL_I2C_Mem_Write>
							EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress );
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE) , ATM_CARD_ADDRESS_SIZE , TXByte + (EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress), 
     948:	00 e8       	ldi	r16, 0x80	; 128
     94a:	10 e0       	ldi	r17, 0x00	; 0
     94c:	08 19       	sub	r16, r8
     94e:	19 09       	sbc	r17, r9
     950:	8c 2f       	mov	r24, r28
     952:	88 0d       	add	r24, r8
     954:	68 94       	set
     956:	ee 24       	eor	r14, r14
     958:	e7 f8       	bld	r14, 7
     95a:	e8 0e       	add	r14, r24
     95c:	0c 0d       	add	r16, r12
     95e:	1d 1d       	adc	r17, r13
     960:	a5 01       	movw	r20, r10
     962:	4f 5f       	subi	r20, 0xFF	; 255
     964:	5f 4f       	sbci	r21, 0xFF	; 255
     966:	56 95       	lsr	r21
     968:	54 2f       	mov	r21, r20
     96a:	44 27       	eor	r20, r20
     96c:	57 95       	ror	r21
     96e:	47 95       	ror	r20
     970:	22 e0       	ldi	r18, 0x02	; 2
     972:	60 ea       	ldi	r22, 0xA0	; 160
     974:	8f e7       	ldi	r24, 0x7F	; 127
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 ef 05 	call	0xbde	; 0xbde <HAL_I2C_Mem_Write>
		}else
		{
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0d c0       	rjmp	.+26     	; 0x99a <EEPROM_WriteByteS+0xae>
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte ,  
							EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress );
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE) , ATM_CARD_ADDRESS_SIZE , TXByte + (EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress), 
							 BufferSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);	
	}else{
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte , BufferSize);
     980:	ec 2e       	mov	r14, r28
     982:	8b 01       	movw	r16, r22
     984:	22 e0       	ldi	r18, 0x02	; 2
     986:	60 ea       	ldi	r22, 0xA0	; 160
     988:	8f e7       	ldi	r24, 0x7F	; 127
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 ef 05 	call	0xbde	; 0xbde <HAL_I2C_Mem_Write>
		}else
		{
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	03 c0       	rjmp	.+6      	; 0x99a <EEPROM_WriteByteS+0xae>
EEPROM_Status_t EEPROM_WriteByteS(uint16_t StartByteNum , uint8_t  * TXByte , uint8_t BufferSize)
{
	uint16_t PageNum =0 , ByteAddress =0  ;
	if ((TXByte == NULL) || (BufferSize <= 0))
	{
		return EEPROM_PARAM_ERROR ;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	01 c0       	rjmp	.+2      	; 0x99a <EEPROM_WriteByteS+0xae>
     998:	81 e0       	ldi	r24, 0x01	; 1
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	

}
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	af 90       	pop	r10
     9aa:	9f 90       	pop	r9
     9ac:	8f 90       	pop	r8
     9ae:	08 95       	ret

000009b0 <main>:


int main(void)
{
    /* Replace with your application code */
	APP_Init();
     9b0:	0e 94 83 01 	call	0x306	; 0x306 <APP_Init>
    while (1) 
    {
		APP_UPdate();
     9b4:	0e 94 99 01 	call	0x332	; 0x332 <APP_UPdate>
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <main+0x4>

000009ba <EXTI_Init>:
 * param : Handler is a pointer to struct that hold all information a bout the INIT 
 * return : void 
*/  
void EXIT_DISABLE(EXIT_Handler_t * Handler)
{
	GICR &=~(1<<(5+Handler->EXTI_NUM));  /* disable the required INIT */
     9ba:	fc 01       	movw	r30, r24
     9bc:	80 81       	ld	r24, Z
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	71 f4       	brne	.+28     	; 0x9de <EXTI_Init+0x24>
     9c2:	81 81       	ldd	r24, Z+1	; 0x01
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <EXTI_Init+0x16>
     9c8:	84 b7       	in	r24, 0x34	; 52
     9ca:	8f 7b       	andi	r24, 0xBF	; 191
     9cc:	84 bf       	out	0x34, r24	; 52
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <EXTI_Init+0x1c>
     9d0:	84 b7       	in	r24, 0x34	; 52
     9d2:	80 64       	ori	r24, 0x40	; 64
     9d4:	84 bf       	out	0x34, r24	; 52
     9d6:	8b b7       	in	r24, 0x3b	; 59
     9d8:	80 62       	ori	r24, 0x20	; 32
     9da:	8b bf       	out	0x3b, r24	; 59
     9dc:	20 c0       	rjmp	.+64     	; 0xa1e <EXTI_Init+0x64>
     9de:	85 b7       	in	r24, 0x35	; 53
     9e0:	80 7f       	andi	r24, 0xF0	; 240
     9e2:	85 bf       	out	0x35, r24	; 53
     9e4:	80 81       	ld	r24, Z
     9e6:	81 11       	cpse	r24, r1
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <EXTI_Init+0x40>
     9ea:	95 b7       	in	r25, 0x35	; 53
     9ec:	81 81       	ldd	r24, Z+1	; 0x01
     9ee:	89 2b       	or	r24, r25
     9f0:	85 bf       	out	0x35, r24	; 53
     9f2:	8b b7       	in	r24, 0x3b	; 59
     9f4:	80 64       	ori	r24, 0x40	; 64
     9f6:	8b bf       	out	0x3b, r24	; 59
     9f8:	12 c0       	rjmp	.+36     	; 0xa1e <EXTI_Init+0x64>
     9fa:	45 b7       	in	r20, 0x35	; 53
     9fc:	21 81       	ldd	r18, Z+1	; 0x01
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	b9 01       	movw	r22, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <EXTI_Init+0x54>
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	8a 95       	dec	r24
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <EXTI_Init+0x50>
     a12:	cb 01       	movw	r24, r22
     a14:	84 2b       	or	r24, r20
     a16:	85 bf       	out	0x35, r24	; 53
     a18:	8b b7       	in	r24, 0x3b	; 59
     a1a:	80 68       	ori	r24, 0x80	; 128
     a1c:	8b bf       	out	0x3b, r24	; 59
     a1e:	78 94       	sei
     a20:	08 95       	ret

00000a22 <__vector_1>:
}


/* INIT0 Function */
ISR(INT0_vect)
{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	2f 93       	push	r18
     a2e:	3f 93       	push	r19
     a30:	4f 93       	push	r20
     a32:	5f 93       	push	r21
     a34:	6f 93       	push	r22
     a36:	7f 93       	push	r23
     a38:	8f 93       	push	r24
     a3a:	9f 93       	push	r25
     a3c:	af 93       	push	r26
     a3e:	bf 93       	push	r27
     a40:	ef 93       	push	r30
     a42:	ff 93       	push	r31
	ptr_INT0();
     a44:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <ptr_INT0>
     a48:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <ptr_INT0+0x1>
     a4c:	09 95       	icall
}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_2>:
/* INIT0 Function */
ISR(INT1_vect)
{
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	2f 93       	push	r18
     a7c:	3f 93       	push	r19
     a7e:	4f 93       	push	r20
     a80:	5f 93       	push	r21
     a82:	6f 93       	push	r22
     a84:	7f 93       	push	r23
     a86:	8f 93       	push	r24
     a88:	9f 93       	push	r25
     a8a:	af 93       	push	r26
     a8c:	bf 93       	push	r27
     a8e:	ef 93       	push	r30
     a90:	ff 93       	push	r31
	ptr_INT1();
     a92:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <ptr_INT1>
     a96:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <ptr_INT1+0x1>
     a9a:	09 95       	icall
}
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_3>:
/* INIT0 Function */
ISR(INT2_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	ef 93       	push	r30
     ade:	ff 93       	push	r31
	ptr_INT2();
     ae0:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <ptr_INT2>
     ae4:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <ptr_INT2+0x1>
     ae8:	09 95       	icall
     aea:	ff 91       	pop	r31
     aec:	ef 91       	pop	r30
     aee:	bf 91       	pop	r27
     af0:	af 91       	pop	r26
     af2:	9f 91       	pop	r25
     af4:	8f 91       	pop	r24
     af6:	7f 91       	pop	r23
     af8:	6f 91       	pop	r22
     afa:	5f 91       	pop	r21
     afc:	4f 91       	pop	r20
     afe:	3f 91       	pop	r19
     b00:	2f 91       	pop	r18
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	0f 90       	pop	r0
     b08:	1f 90       	pop	r1
     b0a:	18 95       	reti

00000b0c <HAL_GPIO_Pin_Init>:
 * param. : PORT pointer to GPIO port
 * param. : PIN_CONFIG pointer to struct hold all configuration
 * return : void 
 */
void HAL_GPIO_Pin_Init(StrGPIO_t PORT, GPIO_InitTypeDef *  PIN_CONFIG)
{
     b0c:	fc 01       	movw	r30, r24

		if(PIN_CONFIG->mode == GPIO_MODE_OUTPUT)
     b0e:	db 01       	movw	r26, r22
     b10:	11 96       	adiw	r26, 0x01	; 1
     b12:	8c 91       	ld	r24, X
     b14:	11 97       	sbiw	r26, 0x01	; 1
     b16:	81 30       	cpi	r24, 0x01	; 1
     b18:	29 f4       	brne	.+10     	; 0xb24 <HAL_GPIO_Pin_Init+0x18>
		{
			PORT->DDR_REG  |= PIN_CONFIG->pin ;      //SET ALL PINS AS OUTPUT
     b1a:	8c 91       	ld	r24, X
     b1c:	91 81       	ldd	r25, Z+1	; 0x01
     b1e:	89 2b       	or	r24, r25
     b20:	81 83       	std	Z+1, r24	; 0x01
     b22:	08 95       	ret
		}else{  // PINS MODE CONFIGURED AS INPUT
			if(PIN_CONFIG->pull == GPIO_PULLUP)
			{
			//	PORT->PIN_REG |= PIN_CONFIG->pin ;     // SET PULL UP RES.
			}
			PORT->DDR_REG &= ~(PIN_CONFIG->pin);
     b24:	db 01       	movw	r26, r22
     b26:	9c 91       	ld	r25, X
     b28:	90 95       	com	r25
     b2a:	81 81       	ldd	r24, Z+1	; 0x01
     b2c:	98 23       	and	r25, r24
     b2e:	91 83       	std	Z+1, r25	; 0x01
     b30:	08 95       	ret

00000b32 <HAL_GPIO_READPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_ 
 * return : return on of  GPIO_PIN_RESET or GPIO_PIN_SET 
 */
GPIO_PinState HAL_GPIO_READPIN(StrGPIO_t PORT,uint8_t PIN_NUM)
{
	if(PORT->PIN_REG & PIN_NUM)  /* check if specific pin is set */
     b32:	fc 01       	movw	r30, r24
     b34:	80 81       	ld	r24, Z
     b36:	68 23       	and	r22, r24
     b38:	11 f0       	breq	.+4      	; 0xb3e <HAL_GPIO_READPIN+0xc>
	{
		return GPIO_PIN_SET ;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	08 95       	ret
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
     b3e:	80 e0       	ldi	r24, 0x00	; 0
	}
}/* END_FUN HAL_GPIO_READPIN()*/
     b40:	08 95       	ret

00000b42 <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
     b42:	44 23       	and	r20, r20
     b44:	29 f0       	breq	.+10     	; 0xb50 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
     b46:	fc 01       	movw	r30, r24
     b48:	22 81       	ldd	r18, Z+2	; 0x02
     b4a:	62 2b       	or	r22, r18
     b4c:	62 83       	std	Z+2, r22	; 0x02
     b4e:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
     b50:	60 95       	com	r22
     b52:	fc 01       	movw	r30, r24
     b54:	22 81       	ldd	r18, Z+2	; 0x02
     b56:	62 23       	and	r22, r18
     b58:	62 83       	std	Z+2, r22	; 0x02
     b5a:	08 95       	ret

00000b5c <I2C_Init>:
		I2C_EN_NACK() ;
	
	
		return I2C_NORMAL ;
	
}/* END_FUN I2C_SLAVE_TRANSMIT() */
     b5c:	8f 92       	push	r8
     b5e:	9f 92       	push	r9
     b60:	af 92       	push	r10
     b62:	bf 92       	push	r11
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	ec 01       	movw	r28, r24
     b74:	28 81       	ld	r18, Y
     b76:	39 81       	ldd	r19, Y+1	; 0x01
     b78:	4a 81       	ldd	r20, Y+2	; 0x02
     b7a:	5b 81       	ldd	r21, Y+3	; 0x03
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	74 e2       	ldi	r23, 0x24	; 36
     b80:	84 ef       	ldi	r24, 0xF4	; 244
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 00 08 	call	0x1000	; 0x1000 <__udivmodsi4>
     b88:	49 01       	movw	r8, r18
     b8a:	5a 01       	movw	r10, r20
     b8c:	39 2d       	mov	r19, r9
     b8e:	4a 2d       	mov	r20, r10
     b90:	5b 2d       	mov	r21, r11
     b92:	60 e0       	ldi	r22, 0x00	; 0
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 ef       	ldi	r26, 0xF0	; 240
     b9c:	0e 94 46 08 	call	0x108c	; 0x108c <__adddi3_s8>
     ba0:	01 e0       	ldi	r16, 0x01	; 1
     ba2:	0e 94 2a 08 	call	0x1054	; 0x1054 <__lshrdi3>
     ba6:	20 b9       	out	0x00, r18	; 0
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	82 b9       	out	0x02, r24	; 2
     bac:	16 be       	out	0x36, r1	; 54
     bae:	11 b8       	out	0x01, r1	; 1
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	29 f4       	brne	.+10     	; 0xbc0 <I2C_Init+0x64>
     bb6:	78 94       	sei
     bb8:	86 b7       	in	r24, 0x36	; 54
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	86 bf       	out	0x36, r24	; 54
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <I2C_Init+0x6a>
     bc0:	86 b7       	in	r24, 0x36	; 54
     bc2:	8e 7f       	andi	r24, 0xFE	; 254
     bc4:	86 bf       	out	0x36, r24	; 54
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	bf 90       	pop	r11
     bd6:	af 90       	pop	r10
     bd8:	9f 90       	pop	r9
     bda:	8f 90       	pop	r8
     bdc:	08 95       	ret

00000bde <HAL_I2C_Mem_Write>:
 * param.  : memAdd this is the internal memory address that you need to write data to 
 * param.  : pRxData this is pointer to the buffer that hold the writing data 
 * param.  : DataSize number of bytes that you need to write 
*/ 
I2C_STATUS HAL_I2C_Mem_Write(I2C_Handler_t * Handler ,uint8_t DevAdd,uint16_t MemAdd ,uint8_t MemAddSize ,uint8_t * pTxData ,uint8_t DataSize )
{
     bde:	ef 92       	push	r14
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	dc 01       	movw	r26, r24
	Handler->buffer = pTxData ;
     be6:	17 96       	adiw	r26, 0x07	; 7
     be8:	1c 93       	st	X, r17
     bea:	0e 93       	st	-X, r16
     bec:	16 97       	sbiw	r26, 0x06	; 6
	Handler->BufferSize   = DataSize;
     bee:	18 96       	adiw	r26, 0x08	; 8
     bf0:	ec 92       	st	X, r14
     bf2:	18 97       	sbiw	r26, 0x08	; 8
	
	I2C_EN_START();WAIT_FLAG();
     bf4:	84 ea       	ldi	r24, 0xA4	; 164
     bf6:	86 bf       	out	0x36, r24	; 54
     bf8:	06 b6       	in	r0, 0x36	; 54
     bfa:	07 fe       	sbrs	r0, 7
     bfc:	fd cf       	rjmp	.-6      	; 0xbf8 <HAL_I2C_Mem_Write+0x1a>
	I2C->I2C_TWDR = DevAdd ;
     bfe:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
     c00:	84 e8       	ldi	r24, 0x84	; 132
     c02:	86 bf       	out	0x36, r24	; 54
     c04:	06 b6       	in	r0, 0x36	; 54
     c06:	07 fe       	sbrs	r0, 7
     c08:	fd cf       	rjmp	.-6      	; 0xc04 <HAL_I2C_Mem_Write+0x26>

	if (MemAddSize == 2)
     c0a:	22 30       	cpi	r18, 0x02	; 2
     c0c:	31 f4       	brne	.+12     	; 0xc1a <HAL_I2C_Mem_Write+0x3c>
	{
		I2C->I2C_TWDR =( MemAdd>>8 & 0xff );
     c0e:	53 b9       	out	0x03, r21	; 3
		I2C_EN();WAIT_FLAG();
     c10:	84 e8       	ldi	r24, 0x84	; 132
     c12:	86 bf       	out	0x36, r24	; 54
     c14:	06 b6       	in	r0, 0x36	; 54
     c16:	07 fe       	sbrs	r0, 7
     c18:	fd cf       	rjmp	.-6      	; 0xc14 <HAL_I2C_Mem_Write+0x36>
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
     c1a:	43 b9       	out	0x03, r20	; 3
	I2C_EN();WAIT_FLAG();
     c1c:	84 e8       	ldi	r24, 0x84	; 132
     c1e:	86 bf       	out	0x36, r24	; 54
     c20:	06 b6       	in	r0, 0x36	; 54
     c22:	07 fe       	sbrs	r0, 7
     c24:	fd cf       	rjmp	.-6      	; 0xc20 <HAL_I2C_Mem_Write+0x42>
     c26:	13 c0       	rjmp	.+38     	; 0xc4e <HAL_I2C_Mem_Write+0x70>

	while(DataSize-- > 0)
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
     c28:	16 96       	adiw	r26, 0x06	; 6
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	9f 01       	movw	r18, r30
     c32:	2f 5f       	subi	r18, 0xFF	; 255
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	17 96       	adiw	r26, 0x07	; 7
     c38:	3c 93       	st	X, r19
     c3a:	2e 93       	st	-X, r18
     c3c:	16 97       	sbiw	r26, 0x06	; 6
     c3e:	90 81       	ld	r25, Z
     c40:	93 b9       	out	0x03, r25	; 3
		I2C_EN();WAIT_FLAG();
     c42:	94 e8       	ldi	r25, 0x84	; 132
     c44:	96 bf       	out	0x36, r25	; 54
     c46:	06 b6       	in	r0, 0x36	; 54
     c48:	07 fe       	sbrs	r0, 7
     c4a:	fd cf       	rjmp	.-6      	; 0xc46 <HAL_I2C_Mem_Write+0x68>
		I2C_EN();WAIT_FLAG();
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
	I2C_EN();WAIT_FLAG();

	while(DataSize-- > 0)
     c4c:	e8 2e       	mov	r14, r24
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	8e 0d       	add	r24, r14
     c52:	e1 10       	cpse	r14, r1
     c54:	e9 cf       	rjmp	.-46     	; 0xc28 <HAL_I2C_Mem_Write+0x4a>
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
		I2C_EN();WAIT_FLAG();

	}
	I2C_EN_STOP();
     c56:	84 e9       	ldi	r24, 0x94	; 148
     c58:	86 bf       	out	0x36, r24	; 54

	return I2C_NORMAL ;
	
}/* END_FUN I2C_MEM_WRITE() */
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ef 90       	pop	r14
     c62:	08 95       	ret

00000c64 <HAL_I2C_Mem_Read>:
 * param.  : memAdd this is the internal memory address that you need to read data from it 
 * param.  : pRxData this is pointer to the buffer that will hold the reading data 
 * param.  : DataSize number of bytes that you need to read 
*/ 
I2C_STATUS HAL_I2C_Mem_Read(I2C_Handler_t * Handler ,uint8_t DevAdd,uint16_t MemAdd ,uint8_t MemAddSize ,uint8_t * pRxData ,uint8_t DataSize )
{
     c64:	ef 92       	push	r14
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	dc 01       	movw	r26, r24
     c6c:	9e 2d       	mov	r25, r14
	Handler->buffer = pRxData ;
     c6e:	17 96       	adiw	r26, 0x07	; 7
     c70:	1c 93       	st	X, r17
     c72:	0e 93       	st	-X, r16
     c74:	16 97       	sbiw	r26, 0x06	; 6
	Handler->BufferSize = DataSize;
     c76:	18 96       	adiw	r26, 0x08	; 8
     c78:	ec 92       	st	X, r14
     c7a:	18 97       	sbiw	r26, 0x08	; 8
	
	I2C_EN_START();WAIT_FLAG();
     c7c:	84 ea       	ldi	r24, 0xA4	; 164
     c7e:	86 bf       	out	0x36, r24	; 54
     c80:	06 b6       	in	r0, 0x36	; 54
     c82:	07 fe       	sbrs	r0, 7
     c84:	fd cf       	rjmp	.-6      	; 0xc80 <HAL_I2C_Mem_Read+0x1c>
	I2C->I2C_TWDR = DevAdd ;
     c86:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
     c88:	84 e8       	ldi	r24, 0x84	; 132
     c8a:	86 bf       	out	0x36, r24	; 54
     c8c:	06 b6       	in	r0, 0x36	; 54
     c8e:	07 fe       	sbrs	r0, 7
     c90:	fd cf       	rjmp	.-6      	; 0xc8c <HAL_I2C_Mem_Read+0x28>
	if (MemAddSize == 2)
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 f4       	brne	.+12     	; 0xca2 <HAL_I2C_Mem_Read+0x3e>
	{
		I2C->I2C_TWDR =( MemAdd>>8 & 0xff );
     c96:	53 b9       	out	0x03, r21	; 3
		I2C_EN();WAIT_FLAG();
     c98:	84 e8       	ldi	r24, 0x84	; 132
     c9a:	86 bf       	out	0x36, r24	; 54
     c9c:	06 b6       	in	r0, 0x36	; 54
     c9e:	07 fe       	sbrs	r0, 7
     ca0:	fd cf       	rjmp	.-6      	; 0xc9c <HAL_I2C_Mem_Read+0x38>
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
     ca2:	43 b9       	out	0x03, r20	; 3
	I2C_EN();WAIT_FLAG();
     ca4:	84 e8       	ldi	r24, 0x84	; 132
     ca6:	86 bf       	out	0x36, r24	; 54
     ca8:	06 b6       	in	r0, 0x36	; 54
     caa:	07 fe       	sbrs	r0, 7
     cac:	fd cf       	rjmp	.-6      	; 0xca8 <HAL_I2C_Mem_Read+0x44>
	I2C_EN_START();WAIT_FLAG();
     cae:	84 ea       	ldi	r24, 0xA4	; 164
     cb0:	86 bf       	out	0x36, r24	; 54
     cb2:	06 b6       	in	r0, 0x36	; 54
     cb4:	07 fe       	sbrs	r0, 7
     cb6:	fd cf       	rjmp	.-6      	; 0xcb2 <HAL_I2C_Mem_Read+0x4e>
	I2C->I2C_TWDR = DevAdd | 1 ;
     cb8:	61 60       	ori	r22, 0x01	; 1
     cba:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
     cbc:	84 e8       	ldi	r24, 0x84	; 132
     cbe:	86 bf       	out	0x36, r24	; 54
     cc0:	06 b6       	in	r0, 0x36	; 54
     cc2:	07 fe       	sbrs	r0, 7
     cc4:	fd cf       	rjmp	.-6      	; 0xcc0 <HAL_I2C_Mem_Read+0x5c>
     cc6:	13 c0       	rjmp	.+38     	; 0xcee <HAL_I2C_Mem_Read+0x8a>
	while(DataSize-- > 1)	
	{
		I2C_EN_ACK();WAIT_FLAG();
     cc8:	94 ec       	ldi	r25, 0xC4	; 196
     cca:	96 bf       	out	0x36, r25	; 54
     ccc:	06 b6       	in	r0, 0x36	; 54
     cce:	07 fe       	sbrs	r0, 7
     cd0:	fd cf       	rjmp	.-6      	; 0xccc <HAL_I2C_Mem_Read+0x68>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
     cd2:	16 96       	adiw	r26, 0x06	; 6
     cd4:	ed 91       	ld	r30, X+
     cd6:	fc 91       	ld	r31, X
     cd8:	17 97       	sbiw	r26, 0x07	; 7
     cda:	9f 01       	movw	r18, r30
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	17 96       	adiw	r26, 0x07	; 7
     ce2:	3c 93       	st	X, r19
     ce4:	2e 93       	st	-X, r18
     ce6:	16 97       	sbiw	r26, 0x06	; 6
     ce8:	93 b1       	in	r25, 0x03	; 3
     cea:	90 83       	st	Z, r25
	I2C->I2C_TWDR =( MemAdd & 0xff );
	I2C_EN();WAIT_FLAG();
	I2C_EN_START();WAIT_FLAG();
	I2C->I2C_TWDR = DevAdd | 1 ;
	I2C_EN();WAIT_FLAG();
	while(DataSize-- > 1)	
     cec:	98 2f       	mov	r25, r24
     cee:	8f ef       	ldi	r24, 0xFF	; 255
     cf0:	89 0f       	add	r24, r25
     cf2:	92 30       	cpi	r25, 0x02	; 2
     cf4:	48 f7       	brcc	.-46     	; 0xcc8 <HAL_I2C_Mem_Read+0x64>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
	}
	
	
	/* Last Byte Will received with NACK */
	I2C_EN();WAIT_FLAG();
     cf6:	84 e8       	ldi	r24, 0x84	; 132
     cf8:	86 bf       	out	0x36, r24	; 54
     cfa:	06 b6       	in	r0, 0x36	; 54
     cfc:	07 fe       	sbrs	r0, 7
     cfe:	fd cf       	rjmp	.-6      	; 0xcfa <HAL_I2C_Mem_Read+0x96>
	*(Handler->buffer++) = I2C->I2C_TWDR ;
     d00:	16 96       	adiw	r26, 0x06	; 6
     d02:	ed 91       	ld	r30, X+
     d04:	fc 91       	ld	r31, X
     d06:	17 97       	sbiw	r26, 0x07	; 7
     d08:	cf 01       	movw	r24, r30
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	17 96       	adiw	r26, 0x07	; 7
     d0e:	9c 93       	st	X, r25
     d10:	8e 93       	st	-X, r24
     d12:	16 97       	sbiw	r26, 0x06	; 6
     d14:	83 b1       	in	r24, 0x03	; 3
     d16:	80 83       	st	Z, r24

	
	/* Send Stop Bit allow another Master to acquire the bus */
	I2C_EN_STOP();
     d18:	84 e9       	ldi	r24, 0x94	; 148
     d1a:	86 bf       	out	0x36, r24	; 54
	
	
	return I2C_NORMAL ;
} /* END_FUN I2C_MEM_READ() */
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ef 90       	pop	r14
     d24:	08 95       	ret

00000d26 <HAL_SPI_Init>:
 * brief  : this function used to initialize the SPI peripheral 
 * param. : handler this var hold all initialization required by the application   
 * return :void 
*/
 void HAL_SPI_Init(SPI_Handler_t * Handler)
{
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <HAL_SPI_Init+0xa>
     d30:	1f 92       	push	r1
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	8c 01       	movw	r16, r24
	GPIO_InitTypeDef SPI_GpioPin;  // used by  this function to initialize the gpio peripheral to work as spi 
	/* ONLY ONE REGISTER CONTROL SPI OPREATION AND ONE STRUCT HOLD ALL CONFIG.*/
	if((Handler->strSPI_Init.CLKPrescaler) & 0x80)    /* set the selected prescaler so first check if it is required to set the SPI2X bit  */
     d38:	fc 01       	movw	r30, r24
     d3a:	83 81       	ldd	r24, Z+3	; 0x03
     d3c:	88 23       	and	r24, r24
     d3e:	44 f4       	brge	.+16     	; 0xd50 <HAL_SPI_Init+0x2a>
	{
	 SPI_PREPH->SPI_SPCR |=((Handler->strSPI_Init.CLKPrescaler)&0x3u);
     d40:	9d b1       	in	r25, 0x0d	; 13
     d42:	83 70       	andi	r24, 0x03	; 3
     d44:	89 2b       	or	r24, r25
     d46:	8d b9       	out	0x0d, r24	; 13
	 SPI_PREPH->SPI_SPSR |= SPI_SPSR_SPR2;
     d48:	8e b1       	in	r24, 0x0e	; 14
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	8e b9       	out	0x0e, r24	; 14
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <HAL_SPI_Init+0x32>
	}else{
	 SPI_PREPH->SPI_SPCR |=((Handler->strSPI_Init.CLKPrescaler)&0x3u);		
     d50:	9d b1       	in	r25, 0x0d	; 13
     d52:	83 70       	andi	r24, 0x03	; 3
     d54:	89 2b       	or	r24, r25
     d56:	8d b9       	out	0x0d, r24	; 13
	}
	if(Handler->strSPI_Init.Mode & SPI_SPCR_MSTR)  /* master mode GPIO configuration */ 
     d58:	f8 01       	movw	r30, r16
     d5a:	80 81       	ld	r24, Z
     d5c:	84 ff       	sbrs	r24, 4
     d5e:	16 c0       	rjmp	.+44     	; 0xd8c <HAL_SPI_Init+0x66>
	{
		SPI_GpioPin.mode = GPIO_MODE_OUTPUT ;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	8a 83       	std	Y+2, r24	; 0x02
		SPI_GpioPin.pin  = SPI_PIN_MOSI | SPI_PIN_SS | SPI_PIN_SCK;
     d64:	80 eb       	ldi	r24, 0xB0	; 176
     d66:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_Pin_Init(GPIOB,&SPI_GpioPin);
     d68:	be 01       	movw	r22, r28
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	86 e3       	ldi	r24, 0x36	; 54
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 86 05 	call	0xb0c	; 0xb0c <HAL_GPIO_Pin_Init>

		SPI_GpioPin.mode = GPIO_MODE_INPUT ;
     d76:	1a 82       	std	Y+2, r1	; 0x02
		SPI_GpioPin.pin  = SPI_PIN_MISO ;
     d78:	80 e4       	ldi	r24, 0x40	; 64
     d7a:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_Pin_Init(GPIOB,&SPI_GpioPin);		
     d7c:	be 01       	movw	r22, r28
     d7e:	6f 5f       	subi	r22, 0xFF	; 255
     d80:	7f 4f       	sbci	r23, 0xFF	; 255
     d82:	86 e3       	ldi	r24, 0x36	; 54
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 86 05 	call	0xb0c	; 0xb0c <HAL_GPIO_Pin_Init>
     d8a:	15 c0       	rjmp	.+42     	; 0xdb6 <HAL_SPI_Init+0x90>
		
		
	}else{           /* slave mode GPIO configuration */
		SPI_GpioPin.mode = GPIO_MODE_INPUT ;
     d8c:	1a 82       	std	Y+2, r1	; 0x02
		SPI_GpioPin.pin  = SPI_PIN_SCK | SPI_PIN_MOSI | SPI_PIN_SS;
     d8e:	80 eb       	ldi	r24, 0xB0	; 176
     d90:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_Pin_Init(GPIOB,&SPI_GpioPin);
     d92:	be 01       	movw	r22, r28
     d94:	6f 5f       	subi	r22, 0xFF	; 255
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	86 e3       	ldi	r24, 0x36	; 54
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 86 05 	call	0xb0c	; 0xb0c <HAL_GPIO_Pin_Init>

		SPI_GpioPin.mode = GPIO_MODE_OUTPUT ;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8a 83       	std	Y+2, r24	; 0x02
		SPI_GpioPin.pin  = SPI_PIN_MISO ;
     da4:	80 e4       	ldi	r24, 0x40	; 64
     da6:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_Pin_Init(GPIOB,&SPI_GpioPin);
     da8:	be 01       	movw	r22, r28
     daa:	6f 5f       	subi	r22, 0xFF	; 255
     dac:	7f 4f       	sbci	r23, 0xFF	; 255
     dae:	86 e3       	ldi	r24, 0x36	; 54
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 86 05 	call	0xb0c	; 0xb0c <HAL_GPIO_Pin_Init>
	}
	/* set the select attribute of the SPI peripheral */
	 SPI_PREPH->SPI_SPCR  = Handler->strSPI_Init.CLKPhase | Handler->strSPI_Init.CLKPolarity |Handler->strSPI_Init.FirstBit |Handler->strSPI_Init.IT_EN |Handler->strSPI_Init.Mode ;
     db6:	f8 01       	movw	r30, r16
     db8:	42 81       	ldd	r20, Z+2	; 0x02
     dba:	81 81       	ldd	r24, Z+1	; 0x01
     dbc:	34 81       	ldd	r19, Z+4	; 0x04
     dbe:	25 81       	ldd	r18, Z+5	; 0x05
     dc0:	90 81       	ld	r25, Z
     dc2:	84 2b       	or	r24, r20
     dc4:	83 2b       	or	r24, r19
     dc6:	82 2b       	or	r24, r18
     dc8:	89 2b       	or	r24, r25
     dca:	8d b9       	out	0x0d, r24	; 13
	 SPI_PREPH->SPI_SPCR |= SPI_SPCR_SPE ; 	
     dcc:	8d b1       	in	r24, 0x0d	; 13
     dce:	80 64       	ori	r24, 0x40	; 64
     dd0:	8d b9       	out	0x0d, r24	; 13
	if(Handler->strSPI_Init.IT_EN == SPI_IT_MODE_ENABLE)   /* if SPI interrupt enable then enable the global interrupt */
     dd2:	85 81       	ldd	r24, Z+5	; 0x05
     dd4:	80 38       	cpi	r24, 0x80	; 128
     dd6:	09 f4       	brne	.+2      	; 0xdda <HAL_SPI_Init+0xb4>
		sei();
     dd8:	78 94       	sei
			
			
	
}/* END_FUN HAL_SPI_Init()*/
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	08 95       	ret

00000dea <HAL_SPI_Transmit>:
 * param. :Handler : this handler of SPI peripheral 
 * param. :pTxData : pointer to the tx buffer  
 * param. :size the required number of bytes to transmit 
*/
 void HAL_SPI_Transmit(SPI_Handler_t * Handler,uint8_t * pTxData,uint16_t size )
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	ec 01       	movw	r28, r24

    /* set the SPI Handler data trans and buffer size */
	Handler->RxBuffer = NULL ;
     df0:	19 86       	std	Y+9, r1	; 0x09
     df2:	18 86       	std	Y+8, r1	; 0x08
	Handler->RxBufferSize = 0;
     df4:	1d 86       	std	Y+13, r1	; 0x0d
     df6:	1c 86       	std	Y+12, r1	; 0x0c

	Handler->TxBuffer = pTxData  ;
     df8:	7f 83       	std	Y+7, r23	; 0x07
     dfa:	6e 83       	std	Y+6, r22	; 0x06
	Handler->TxBufferSize = size;
     dfc:	5b 87       	std	Y+11, r21	; 0x0b
     dfe:	4a 87       	std	Y+10, r20	; 0x0a
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_RESET); 	
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	60 e1       	ldi	r22, 0x10	; 16
     e04:	86 e3       	ldi	r24, 0x36	; 54
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
	while(Handler->TxBufferSize-- > 0)   /* block mode so this function will block till the size of buffer is equal to zero */
     e0c:	0b c0       	rjmp	.+22     	; 0xe24 <HAL_SPI_Transmit+0x3a>
	{
		SPI_PREPH->SPI_SPDR = *(Handler->TxBuffer);
     e0e:	ee 81       	ldd	r30, Y+6	; 0x06
     e10:	ff 81       	ldd	r31, Y+7	; 0x07
     e12:	80 81       	ld	r24, Z
     e14:	8f b9       	out	0x0f, r24	; 15
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF)); /* wait till the SPI send byte and set SPIIF bit */
     e16:	77 9b       	sbis	0x0e, 7	; 14
     e18:	fe cf       	rjmp	.-4      	; 0xe16 <HAL_SPI_Transmit+0x2c>
		++(Handler->TxBuffer);
     e1a:	8e 81       	ldd	r24, Y+6	; 0x06
     e1c:	9f 81       	ldd	r25, Y+7	; 0x07
     e1e:	01 96       	adiw	r24, 0x01	; 1
     e20:	9f 83       	std	Y+7, r25	; 0x07
     e22:	8e 83       	std	Y+6, r24	; 0x06
	Handler->RxBufferSize = 0;

	Handler->TxBuffer = pTxData  ;
	Handler->TxBufferSize = size;
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_RESET); 	
	while(Handler->TxBufferSize-- > 0)   /* block mode so this function will block till the size of buffer is equal to zero */
     e24:	8a 85       	ldd	r24, Y+10	; 0x0a
     e26:	9b 85       	ldd	r25, Y+11	; 0x0b
     e28:	9c 01       	movw	r18, r24
     e2a:	21 50       	subi	r18, 0x01	; 1
     e2c:	31 09       	sbc	r19, r1
     e2e:	3b 87       	std	Y+11, r19	; 0x0b
     e30:	2a 87       	std	Y+10, r18	; 0x0a
     e32:	89 2b       	or	r24, r25
     e34:	61 f7       	brne	.-40     	; 0xe0e <HAL_SPI_Transmit+0x24>
	{
		SPI_PREPH->SPI_SPDR = *(Handler->TxBuffer);
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF)); /* wait till the SPI send byte and set SPIIF bit */
		++(Handler->TxBuffer);
	}
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_SET);
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	60 e1       	ldi	r22, 0x10	; 16
     e3a:	86 e3       	ldi	r24, 0x36	; 54
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 a1 05 	call	0xb42	; 0xb42 <HAL_GPIO_WRITEPIN>
	 
	
}/* END_FUN HAL_SPI_Transmit()*/
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <HAL_UART_Init>:
 * brief : this function used to initialization  UART peripheral 
 * param : Handler pointer to the struct hold UART configuration 
 * return : void 
 */
void HAL_UART_Init(UART_Handler_t * Handler )
{
     e48:	fc 01       	movw	r30, r24
	uint16_t BaudRateCal =0 ;
	
	UCSRB = 0x00 ;
     e4a:	1a b8       	out	0x0a, r1	; 10
	UCSRC = (1 << URSEL) | 0x00 ;    /* clear UCSRC register to set a new configurations */
     e4c:	80 e8       	ldi	r24, 0x80	; 128
     e4e:	80 bd       	out	0x20, r24	; 32
	UCSRB |= Handler->Init.Mode ;   /* enable uart in tx or rx or both */
     e50:	9a b1       	in	r25, 0x0a	; 10
     e52:	87 81       	ldd	r24, Z+7	; 0x07
     e54:	89 2b       	or	r24, r25
     e56:	8a b9       	out	0x0a, r24	; 10

	/* set the word size and parity and stop bits */
	UCSRC  |= (1 << URSEL) |((Handler->Init.wordLen) & (0x06)) | (Handler->Init.StopBits);
     e58:	20 b5       	in	r18, 0x20	; 32
     e5a:	94 81       	ldd	r25, Z+4	; 0x04
     e5c:	85 81       	ldd	r24, Z+5	; 0x05
     e5e:	96 70       	andi	r25, 0x06	; 6
     e60:	98 2b       	or	r25, r24
     e62:	92 2b       	or	r25, r18
     e64:	90 68       	ori	r25, 0x80	; 128
     e66:	90 bd       	out	0x20, r25	; 32

	

	/* now set the baud rate */
	BaudRateCal = (F_CPU/(16ul *Handler->Init.BaudRate))-1;
     e68:	80 81       	ld	r24, Z
     e6a:	91 81       	ldd	r25, Z+1	; 0x01
     e6c:	a2 81       	ldd	r26, Z+2	; 0x02
     e6e:	b3 81       	ldd	r27, Z+3	; 0x03
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	aa 1f       	adc	r26, r26
     e76:	bb 1f       	adc	r27, r27
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	aa 1f       	adc	r26, r26
     e7e:	bb 1f       	adc	r27, r27
     e80:	9c 01       	movw	r18, r24
     e82:	ad 01       	movw	r20, r26
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	44 1f       	adc	r20, r20
     e8a:	55 1f       	adc	r21, r21
     e8c:	22 0f       	add	r18, r18
     e8e:	33 1f       	adc	r19, r19
     e90:	44 1f       	adc	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	74 e2       	ldi	r23, 0x24	; 36
     e98:	84 ef       	ldi	r24, 0xF4	; 244
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 00 08 	call	0x1000	; 0x1000 <__udivmodsi4>
     ea0:	21 50       	subi	r18, 0x01	; 1
     ea2:	31 09       	sbc	r19, r1
	UBRRL = BaudRateCal ;
     ea4:	29 b9       	out	0x09, r18	; 9
	UBRRH =(BaudRateCal>>8)&(0x0f);
     ea6:	83 2f       	mov	r24, r19
     ea8:	8f 70       	andi	r24, 0x0F	; 15
     eaa:	80 bd       	out	0x20, r24	; 32

	
	DDRD  |= 0x02 ;
     eac:	81 b3       	in	r24, 0x11	; 17
     eae:	82 60       	ori	r24, 0x02	; 2
     eb0:	81 bb       	out	0x11, r24	; 17
	DDRD  &= ~(1<<0);
     eb2:	81 b3       	in	r24, 0x11	; 17
     eb4:	8e 7f       	andi	r24, 0xFE	; 254
     eb6:	81 bb       	out	0x11, r24	; 17
     eb8:	08 95       	ret

00000eba <HAL_UART_TRANSMIT>:
 * param : TxBuffer pointer to the transmitted buffer 
 * param : Size hold the size of transmitted data 
 * return : void 
 */
void HAL_UART_TRANSMIT(UART_Handler_t * Handler ,uint8_t * TxBuffer ,uint16_t Size )
{
     eba:	fc 01       	movw	r30, r24
	Handler->TxBuffer = TxBuffer ;
     ebc:	71 87       	std	Z+9, r23	; 0x09
     ebe:	60 87       	std	Z+8, r22	; 0x08
	Handler->TxSize = Size ;
     ec0:	55 87       	std	Z+13, r21	; 0x0d
     ec2:	44 87       	std	Z+12, r20	; 0x0c
	
	for (uint16_t iterator =0 ;iterator<Handler->TxSize;iterator++)
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <HAL_UART_TRANSMIT+0x2e>
	{
	   while(!(UCSRA &(1<<UDRE)));
     eca:	5d 9b       	sbis	0x0b, 5	; 11
     ecc:	fe cf       	rjmp	.-4      	; 0xeca <HAL_UART_TRANSMIT+0x10>
	   	if(Handler->Init.wordLen == UART_WordLen_9)
     ece:	84 81       	ldd	r24, Z+4	; 0x04
     ed0:	86 31       	cpi	r24, 0x16	; 22
     ed2:	19 f4       	brne	.+6      	; 0xeda <HAL_UART_TRANSMIT+0x20>
		   {
			  UCSRB |=((0x100)&(Handler->TxBuffer[iterator]))>>8|0x01; 
     ed4:	8a b1       	in	r24, 0x0a	; 10
     ed6:	81 60       	ori	r24, 0x01	; 1
     ed8:	8a b9       	out	0x0a, r24	; 10
		   }
			UDR =(TxBuffer[iterator]);
     eda:	db 01       	movw	r26, r22
     edc:	a2 0f       	add	r26, r18
     ede:	b3 1f       	adc	r27, r19
     ee0:	8c 91       	ld	r24, X
     ee2:	8c b9       	out	0x0c, r24	; 12
void HAL_UART_TRANSMIT(UART_Handler_t * Handler ,uint8_t * TxBuffer ,uint16_t Size )
{
	Handler->TxBuffer = TxBuffer ;
	Handler->TxSize = Size ;
	
	for (uint16_t iterator =0 ;iterator<Handler->TxSize;iterator++)
     ee4:	2f 5f       	subi	r18, 0xFF	; 255
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	84 85       	ldd	r24, Z+12	; 0x0c
     eea:	95 85       	ldd	r25, Z+13	; 0x0d
     eec:	28 17       	cp	r18, r24
     eee:	39 07       	cpc	r19, r25
     ef0:	60 f3       	brcs	.-40     	; 0xeca <HAL_UART_TRANSMIT+0x10>

	}
	
	
	
}/* END_FUN HAL_UART_TRANSMIT() */
     ef2:	08 95       	ret

00000ef4 <HAL_UART_RECEIVE>:
 * param : Size hold the size of transmitted data 
 * return : void 
 */

void HAL_UART_RECEIVE(UART_Handler_t * Handler ,uint8_t * RxBuffer ,uint16_t Size )
{
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	fc 01       	movw	r30, r24
	
	Handler->TxBuffer = NULL;
     efa:	11 86       	std	Z+9, r1	; 0x09
     efc:	10 86       	std	Z+8, r1	; 0x08
	Handler->TxSize =0 ;
     efe:	15 86       	std	Z+13, r1	; 0x0d
     f00:	14 86       	std	Z+12, r1	; 0x0c
	Handler->RxBuffer = RxBuffer ;
     f02:	73 87       	std	Z+11, r23	; 0x0b
     f04:	62 87       	std	Z+10, r22	; 0x0a
	Handler->RxSize = Size ;
     f06:	57 87       	std	Z+15, r21	; 0x0f
     f08:	46 87       	std	Z+14, r20	; 0x0e
	uint8_t TempData = 0 ;
	
	for (uint16_t iterator =0 ; ;iterator++)
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
	{
		while(!(UCSRA & (1<<RXC)));
     f0e:	5f 9b       	sbis	0x0b, 7	; 11
     f10:	fe cf       	rjmp	.-4      	; 0xf0e <HAL_UART_RECEIVE+0x1a>
		TempData = UDR ;
     f12:	9c b1       	in	r25, 0x0c	; 12

			if (iterator <= Handler->RxSize)
     f14:	66 85       	ldd	r22, Z+14	; 0x0e
     f16:	77 85       	ldd	r23, Z+15	; 0x0f
     f18:	62 17       	cp	r22, r18
     f1a:	73 07       	cpc	r23, r19
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <HAL_UART_RECEIVE+0x2c>
     f1e:	55 c0       	rjmp	.+170    	; 0xfca <HAL_UART_RECEIVE+0xd6>
			{
				if(Handler->Init.wordLen == UART_WordLen_9)
     f20:	84 81       	ldd	r24, Z+4	; 0x04
     f22:	86 31       	cpi	r24, 0x16	; 22
     f24:	b1 f5       	brne	.+108    	; 0xf92 <HAL_UART_RECEIVE+0x9e>
				{
					*(((uint16_t *)Handler->RxBuffer)+iterator)  = (((uint16_t)UCSRB & 0x02)<<7) ;     // the ninth bit must be read first 
     f26:	a2 85       	ldd	r26, Z+10	; 0x0a
     f28:	b3 85       	ldd	r27, Z+11	; 0x0b
     f2a:	e9 01       	movw	r28, r18
     f2c:	cc 0f       	add	r28, r28
     f2e:	dd 1f       	adc	r29, r29
     f30:	ac 0f       	add	r26, r28
     f32:	bd 1f       	adc	r27, r29
     f34:	6a b1       	in	r22, 0x0a	; 10
     f36:	62 70       	andi	r22, 0x02	; 2
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	76 95       	lsr	r23
     f3c:	76 2f       	mov	r23, r22
     f3e:	66 27       	eor	r22, r22
     f40:	77 95       	ror	r23
     f42:	67 95       	ror	r22
     f44:	6d 93       	st	X+, r22
     f46:	7c 93       	st	X, r23
					*(((uint16_t *)Handler->RxBuffer)+iterator) |= TempData ;
     f48:	a2 85       	ldd	r26, Z+10	; 0x0a
     f4a:	b3 85       	ldd	r27, Z+11	; 0x0b
     f4c:	ac 0f       	add	r26, r28
     f4e:	bd 1f       	adc	r27, r29
     f50:	6d 91       	ld	r22, X+
     f52:	7c 91       	ld	r23, X
     f54:	11 97       	sbiw	r26, 0x01	; 1
     f56:	69 2b       	or	r22, r25
     f58:	6d 93       	st	X+, r22
     f5a:	7c 93       	st	X, r23
					if((TempData == '\r')||(TempData == '\n'))
     f5c:	9d 30       	cpi	r25, 0x0D	; 13
     f5e:	19 f0       	breq	.+6      	; 0xf66 <HAL_UART_RECEIVE+0x72>
     f60:	9a 30       	cpi	r25, 0x0A	; 10
     f62:	09 f0       	breq	.+2      	; 0xf66 <HAL_UART_RECEIVE+0x72>
     f64:	47 c0       	rjmp	.+142    	; 0xff4 <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
     f66:	86 85       	ldd	r24, Z+14	; 0x0e
     f68:	97 85       	ldd	r25, Z+15	; 0x0f
     f6a:	28 17       	cp	r18, r24
     f6c:	39 07       	cpc	r19, r25
     f6e:	38 f4       	brcc	.+14     	; 0xf7e <HAL_UART_RECEIVE+0x8a>
						*(((uint16_t *)Handler->RxBuffer)+iterator) = '\0' ;
     f70:	82 85       	ldd	r24, Z+10	; 0x0a
     f72:	93 85       	ldd	r25, Z+11	; 0x0b
     f74:	c8 0f       	add	r28, r24
     f76:	d9 1f       	adc	r29, r25
     f78:	19 82       	std	Y+1, r1	; 0x01
     f7a:	18 82       	st	Y, r1
     f7c:	3e c0       	rjmp	.+124    	; 0xffa <HAL_UART_RECEIVE+0x106>
						else
						*(((uint16_t *)Handler->RxBuffer)+Size) = '\0' ;
     f7e:	02 84       	ldd	r0, Z+10	; 0x0a
     f80:	f3 85       	ldd	r31, Z+11	; 0x0b
     f82:	e0 2d       	mov	r30, r0
     f84:	44 0f       	add	r20, r20
     f86:	55 1f       	adc	r21, r21
     f88:	e4 0f       	add	r30, r20
     f8a:	f5 1f       	adc	r31, r21
     f8c:	11 82       	std	Z+1, r1	; 0x01
     f8e:	10 82       	st	Z, r1
     f90:	34 c0       	rjmp	.+104    	; 0xffa <HAL_UART_RECEIVE+0x106>
						
						break ;
					}
				}else{
					Handler->RxBuffer[iterator] = TempData ;
     f92:	a2 85       	ldd	r26, Z+10	; 0x0a
     f94:	b3 85       	ldd	r27, Z+11	; 0x0b
     f96:	a2 0f       	add	r26, r18
     f98:	b3 1f       	adc	r27, r19
     f9a:	9c 93       	st	X, r25
					if((TempData == '\r')||(TempData == '\n'))
     f9c:	9d 30       	cpi	r25, 0x0D	; 13
     f9e:	11 f0       	breq	.+4      	; 0xfa4 <HAL_UART_RECEIVE+0xb0>
     fa0:	9a 30       	cpi	r25, 0x0A	; 10
     fa2:	41 f5       	brne	.+80     	; 0xff4 <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
     fa4:	86 85       	ldd	r24, Z+14	; 0x0e
     fa6:	97 85       	ldd	r25, Z+15	; 0x0f
     fa8:	28 17       	cp	r18, r24
     faa:	39 07       	cpc	r19, r25
     fac:	38 f4       	brcc	.+14     	; 0xfbc <HAL_UART_RECEIVE+0xc8>
						Handler->RxBuffer[iterator] = '\0' ;
     fae:	82 85       	ldd	r24, Z+10	; 0x0a
     fb0:	93 85       	ldd	r25, Z+11	; 0x0b
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	10 82       	st	Z, r1
     fba:	1f c0       	rjmp	.+62     	; 0xffa <HAL_UART_RECEIVE+0x106>
						else
						Handler->RxBuffer[Size] = '\0' ;
     fbc:	82 85       	ldd	r24, Z+10	; 0x0a
     fbe:	93 85       	ldd	r25, Z+11	; 0x0b
     fc0:	fc 01       	movw	r30, r24
     fc2:	e4 0f       	add	r30, r20
     fc4:	f5 1f       	adc	r31, r21
     fc6:	10 82       	st	Z, r1
     fc8:	18 c0       	rjmp	.+48     	; 0xffa <HAL_UART_RECEIVE+0x106>
						break;
					}
				}
			}else{
				
					if((TempData == '\r')||(TempData == '\n'))
     fca:	9d 30       	cpi	r25, 0x0D	; 13
     fcc:	11 f0       	breq	.+4      	; 0xfd2 <HAL_UART_RECEIVE+0xde>
     fce:	9a 30       	cpi	r25, 0x0A	; 10
     fd0:	89 f4       	brne	.+34     	; 0xff4 <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
     fd2:	26 17       	cp	r18, r22
     fd4:	37 07       	cpc	r19, r23
     fd6:	38 f4       	brcc	.+14     	; 0xfe6 <HAL_UART_RECEIVE+0xf2>
						Handler->RxBuffer[iterator] = '\0' ;
     fd8:	82 85       	ldd	r24, Z+10	; 0x0a
     fda:	93 85       	ldd	r25, Z+11	; 0x0b
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	10 82       	st	Z, r1
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <HAL_UART_RECEIVE+0x106>
						else
						Handler->RxBuffer[Size] = '\0' ;
     fe6:	82 85       	ldd	r24, Z+10	; 0x0a
     fe8:	93 85       	ldd	r25, Z+11	; 0x0b
     fea:	fc 01       	movw	r30, r24
     fec:	e4 0f       	add	r30, r20
     fee:	f5 1f       	adc	r31, r21
     ff0:	10 82       	st	Z, r1
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <HAL_UART_RECEIVE+0x106>
	Handler->TxSize =0 ;
	Handler->RxBuffer = RxBuffer ;
	Handler->RxSize = Size ;
	uint8_t TempData = 0 ;
	
	for (uint16_t iterator =0 ; ;iterator++)
     ff4:	2f 5f       	subi	r18, 0xFF	; 255
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
						Handler->RxBuffer[Size] = '\0' ;
										
						break;
					}
				}
		}
     ff8:	8a cf       	rjmp	.-236    	; 0xf0e <HAL_UART_RECEIVE+0x1a>
	
	
}/* END_FUN HAL_UART_RECEIVE() */
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <__udivmodsi4>:
    1000:	a1 e2       	ldi	r26, 0x21	; 33
    1002:	1a 2e       	mov	r1, r26
    1004:	aa 1b       	sub	r26, r26
    1006:	bb 1b       	sub	r27, r27
    1008:	fd 01       	movw	r30, r26
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <__udivmodsi4_ep>

0000100c <__udivmodsi4_loop>:
    100c:	aa 1f       	adc	r26, r26
    100e:	bb 1f       	adc	r27, r27
    1010:	ee 1f       	adc	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	a2 17       	cp	r26, r18
    1016:	b3 07       	cpc	r27, r19
    1018:	e4 07       	cpc	r30, r20
    101a:	f5 07       	cpc	r31, r21
    101c:	20 f0       	brcs	.+8      	; 0x1026 <__udivmodsi4_ep>
    101e:	a2 1b       	sub	r26, r18
    1020:	b3 0b       	sbc	r27, r19
    1022:	e4 0b       	sbc	r30, r20
    1024:	f5 0b       	sbc	r31, r21

00001026 <__udivmodsi4_ep>:
    1026:	66 1f       	adc	r22, r22
    1028:	77 1f       	adc	r23, r23
    102a:	88 1f       	adc	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	1a 94       	dec	r1
    1030:	69 f7       	brne	.-38     	; 0x100c <__udivmodsi4_loop>
    1032:	60 95       	com	r22
    1034:	70 95       	com	r23
    1036:	80 95       	com	r24
    1038:	90 95       	com	r25
    103a:	9b 01       	movw	r18, r22
    103c:	ac 01       	movw	r20, r24
    103e:	bd 01       	movw	r22, r26
    1040:	cf 01       	movw	r24, r30
    1042:	08 95       	ret

00001044 <__tablejump2__>:
    1044:	ee 0f       	add	r30, r30
    1046:	ff 1f       	adc	r31, r31
    1048:	05 90       	lpm	r0, Z+
    104a:	f4 91       	lpm	r31, Z
    104c:	e0 2d       	mov	r30, r0
    104e:	09 94       	ijmp

00001050 <__ashrdi3>:
    1050:	97 fb       	bst	r25, 7
    1052:	10 f8       	bld	r1, 0

00001054 <__lshrdi3>:
    1054:	16 94       	lsr	r1
    1056:	00 08       	sbc	r0, r0
    1058:	0f 93       	push	r16
    105a:	08 30       	cpi	r16, 0x08	; 8
    105c:	98 f0       	brcs	.+38     	; 0x1084 <__lshrdi3+0x30>
    105e:	08 50       	subi	r16, 0x08	; 8
    1060:	23 2f       	mov	r18, r19
    1062:	34 2f       	mov	r19, r20
    1064:	45 2f       	mov	r20, r21
    1066:	56 2f       	mov	r21, r22
    1068:	67 2f       	mov	r22, r23
    106a:	78 2f       	mov	r23, r24
    106c:	89 2f       	mov	r24, r25
    106e:	90 2d       	mov	r25, r0
    1070:	f4 cf       	rjmp	.-24     	; 0x105a <__lshrdi3+0x6>
    1072:	05 94       	asr	r0
    1074:	97 95       	ror	r25
    1076:	87 95       	ror	r24
    1078:	77 95       	ror	r23
    107a:	67 95       	ror	r22
    107c:	57 95       	ror	r21
    107e:	47 95       	ror	r20
    1080:	37 95       	ror	r19
    1082:	27 95       	ror	r18
    1084:	0a 95       	dec	r16
    1086:	aa f7       	brpl	.-22     	; 0x1072 <__lshrdi3+0x1e>
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <__adddi3_s8>:
    108c:	00 24       	eor	r0, r0
    108e:	a7 fd       	sbrc	r26, 7
    1090:	00 94       	com	r0
    1092:	2a 0f       	add	r18, r26
    1094:	30 1d       	adc	r19, r0
    1096:	40 1d       	adc	r20, r0
    1098:	50 1d       	adc	r21, r0
    109a:	60 1d       	adc	r22, r0
    109c:	70 1d       	adc	r23, r0
    109e:	80 1d       	adc	r24, r0
    10a0:	90 1d       	adc	r25, r0
    10a2:	08 95       	ret

000010a4 <atoi>:
    10a4:	fc 01       	movw	r30, r24
    10a6:	88 27       	eor	r24, r24
    10a8:	99 27       	eor	r25, r25
    10aa:	e8 94       	clt
    10ac:	21 91       	ld	r18, Z+
    10ae:	20 32       	cpi	r18, 0x20	; 32
    10b0:	e9 f3       	breq	.-6      	; 0x10ac <atoi+0x8>
    10b2:	29 30       	cpi	r18, 0x09	; 9
    10b4:	10 f0       	brcs	.+4      	; 0x10ba <atoi+0x16>
    10b6:	2e 30       	cpi	r18, 0x0E	; 14
    10b8:	c8 f3       	brcs	.-14     	; 0x10ac <atoi+0x8>
    10ba:	2b 32       	cpi	r18, 0x2B	; 43
    10bc:	41 f0       	breq	.+16     	; 0x10ce <atoi+0x2a>
    10be:	2d 32       	cpi	r18, 0x2D	; 45
    10c0:	39 f4       	brne	.+14     	; 0x10d0 <atoi+0x2c>
    10c2:	68 94       	set
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <atoi+0x2a>
    10c6:	0e 94 86 08 	call	0x110c	; 0x110c <__mulhi_const_10>
    10ca:	82 0f       	add	r24, r18
    10cc:	91 1d       	adc	r25, r1
    10ce:	21 91       	ld	r18, Z+
    10d0:	20 53       	subi	r18, 0x30	; 48
    10d2:	2a 30       	cpi	r18, 0x0A	; 10
    10d4:	c0 f3       	brcs	.-16     	; 0x10c6 <atoi+0x22>
    10d6:	1e f4       	brtc	.+6      	; 0x10de <atoi+0x3a>
    10d8:	90 95       	com	r25
    10da:	81 95       	neg	r24
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	08 95       	ret

000010e0 <itoa>:
    10e0:	45 32       	cpi	r20, 0x25	; 37
    10e2:	51 05       	cpc	r21, r1
    10e4:	20 f4       	brcc	.+8      	; 0x10ee <itoa+0xe>
    10e6:	42 30       	cpi	r20, 0x02	; 2
    10e8:	10 f0       	brcs	.+4      	; 0x10ee <itoa+0xe>
    10ea:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__itoa_ncheck>
    10ee:	fb 01       	movw	r30, r22
    10f0:	10 82       	st	Z, r1
    10f2:	cb 01       	movw	r24, r22
    10f4:	08 95       	ret

000010f6 <__itoa_ncheck>:
    10f6:	bb 27       	eor	r27, r27
    10f8:	4a 30       	cpi	r20, 0x0A	; 10
    10fa:	31 f4       	brne	.+12     	; 0x1108 <__itoa_ncheck+0x12>
    10fc:	99 23       	and	r25, r25
    10fe:	22 f4       	brpl	.+8      	; 0x1108 <__itoa_ncheck+0x12>
    1100:	bd e2       	ldi	r27, 0x2D	; 45
    1102:	90 95       	com	r25
    1104:	81 95       	neg	r24
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__utoa_common>

0000110c <__mulhi_const_10>:
    110c:	7a e0       	ldi	r23, 0x0A	; 10
    110e:	97 9f       	mul	r25, r23
    1110:	90 2d       	mov	r25, r0
    1112:	87 9f       	mul	r24, r23
    1114:	80 2d       	mov	r24, r0
    1116:	91 0d       	add	r25, r1
    1118:	11 24       	eor	r1, r1
    111a:	08 95       	ret

0000111c <__utoa_ncheck>:
    111c:	bb 27       	eor	r27, r27

0000111e <__utoa_common>:
    111e:	fb 01       	movw	r30, r22
    1120:	55 27       	eor	r21, r21
    1122:	aa 27       	eor	r26, r26
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	aa 1f       	adc	r26, r26
    112a:	a4 17       	cp	r26, r20
    112c:	10 f0       	brcs	.+4      	; 0x1132 <__utoa_common+0x14>
    112e:	a4 1b       	sub	r26, r20
    1130:	83 95       	inc	r24
    1132:	50 51       	subi	r21, 0x10	; 16
    1134:	b9 f7       	brne	.-18     	; 0x1124 <__utoa_common+0x6>
    1136:	a0 5d       	subi	r26, 0xD0	; 208
    1138:	aa 33       	cpi	r26, 0x3A	; 58
    113a:	08 f0       	brcs	.+2      	; 0x113e <__utoa_common+0x20>
    113c:	a9 5d       	subi	r26, 0xD9	; 217
    113e:	a1 93       	st	Z+, r26
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	79 f7       	brne	.-34     	; 0x1122 <__utoa_common+0x4>
    1144:	b1 11       	cpse	r27, r1
    1146:	b1 93       	st	Z+, r27
    1148:	11 92       	st	Z+, r1
    114a:	cb 01       	movw	r24, r22
    114c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <strrev>

00001150 <strrev>:
    1150:	dc 01       	movw	r26, r24
    1152:	fc 01       	movw	r30, r24
    1154:	67 2f       	mov	r22, r23
    1156:	71 91       	ld	r23, Z+
    1158:	77 23       	and	r23, r23
    115a:	e1 f7       	brne	.-8      	; 0x1154 <strrev+0x4>
    115c:	32 97       	sbiw	r30, 0x02	; 2
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <strrev+0x18>
    1160:	7c 91       	ld	r23, X
    1162:	6d 93       	st	X+, r22
    1164:	70 83       	st	Z, r23
    1166:	62 91       	ld	r22, -Z
    1168:	ae 17       	cp	r26, r30
    116a:	bf 07       	cpc	r27, r31
    116c:	c8 f3       	brcs	.-14     	; 0x1160 <strrev+0x10>
    116e:	08 95       	ret

00001170 <_exit>:
    1170:	f8 94       	cli

00001172 <__stop_program>:
    1172:	ff cf       	rjmp	.-2      	; 0x1172 <__stop_program>
