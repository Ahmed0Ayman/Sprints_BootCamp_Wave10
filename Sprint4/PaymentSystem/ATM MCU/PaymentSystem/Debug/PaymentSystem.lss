
PaymentSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000753c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  0000753c  000075d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009d  00800184  00800184  000076f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000076f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005f8  00000000  00000000  0000778c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007f5f  00000000  00000000  00007d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002023  00000000  00000000  0000fce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004648  00000000  00000000  00011d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000014f0  00000000  00000000  00016350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002221  00000000  00000000  00017840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000054a0  00000000  00000000  00019a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000538  00000000  00000000  0001ef01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <__ctors_end>
       4:	0c 94 c7 2d 	jmp	0x5b8e	; 0x5b8e <__vector_1>
       8:	0c 94 ee 2d 	jmp	0x5bdc	; 0x5bdc <__vector_2>
       c:	0c 94 15 2e 	jmp	0x5c2a	; 0x5c2a <__vector_3>
      10:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      14:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      18:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      1c:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      20:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      24:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <__vector_9>
      28:	0c 94 44 32 	jmp	0x6488	; 0x6488 <__vector_10>
      2c:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      30:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      34:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      38:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      3c:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      40:	0c 94 77 2e 	jmp	0x5cee	; 0x5cee <__vector_16>
      44:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      48:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      4c:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      50:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <__bad_interrupt>
      54:	60 22       	and	r6, r16
      56:	63 22       	and	r6, r19
      58:	66 22       	and	r6, r22
      5a:	69 22       	and	r6, r25
      5c:	6c 22       	and	r6, r28
      5e:	9d 22       	and	r9, r29
      60:	e3 22       	and	r14, r19
      62:	e6 22       	and	r14, r22

00000064 <__trampolines_end>:
      64:	20 0a       	sbc	r2, r16
	...

00000067 <__c.3151>:
      67:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
      77:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
      87:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
      97:	2a 2a 2a 2a 0a 00                                   ****..

0000009d <__c.3149>:
      9d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
      ad:	2a 2a 2a 2a 2a 2a 2a 2a 20 77 65 6c 63 6f 6d 65     ******** welcome
      bd:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
      cd:	2a 2a 2a 2a 0a 00                                   ****..

000000d3 <__c.3147>:
      d3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
      e3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
      f3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     103:	2a 2a 2a 2a 0a 00                                   ****..

00000109 <__c.3145>:
     109:	20 0a 00                                             ..

0000010c <__c.3143>:
     10c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     11c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     12c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     13c:	2a 2a 2a 2a 0a 00                                   ****..

00000142 <__c.3141>:
     142:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     152:	2a 0a 00                                            *..

00000155 <__c.3139>:
     155:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     165:	2a 2a 20 20 00                                      **  .

0000016a <__c.3137>:
     16a:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     17a:	2a 2a 2a 0a 00                                      ***..

0000017f <__c.3135>:
     17f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     18f:	2a 20 20 00                                         *  .

00000193 <__c.3133>:
     193:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1a3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1b3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1c3:	2a 2a 2a 2a 0a 00                                   ****..

000001c9 <__c.3127>:
     1c9:	20 0a 00                                             ..

000001cc <__c.3125>:
     1cc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1dc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1ec:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1fc:	2a 2a 2a 2a 0a 00                                   ****..

00000202 <__c.3123>:
     202:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 53 77 69 74 63     ********** Switc
     212:	68 69 6e 67 20 74 6f 20 4f 50 45 52 41 54 49 4f     hing to OPERATIO
     222:	4e 20 6d 6f 64 65 20 2a 2a 2a 2a 2a 2a 2a 2a 2a     N mode *********
     232:	2a 2a 2a 2a 0a 00                                   ****..

00000238 <__c.3121>:
     238:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     248:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     258:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     268:	2a 2a 2a 2a 0a 00                                   ****..

0000026e <__c.3119>:
     26e:	20 0a 00                                             ..

00000271 <__c.3117>:
     271:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     281:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     291:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2a1:	2a 2a 2a 2a 0a 00                                   ****..

000002a7 <__c.3115>:
     2a7:	2a 2a 2a 2a 2a 2a 2a 2a 20 53 77 69 74 63 68 69     ******** Switchi
     2b7:	6e 67 20 74 6f 20 70 72 6f 67 72 61 6d 6d 69 6e     ng to programmin
     2c7:	67 20 6d 6f 64 65 20 20 2a 2a 2a 2a 2a 2a 2a 2a     g mode  ********
     2d7:	2a 2a 2a 0a 00                                      ***..

000002dc <__c.3113>:
     2dc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2ec:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2fc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     30c:	2a 2a 2a 2a 0a 00                                   ****..

00000312 <__c.3108>:
     312:	20 0a 00                                             ..

00000315 <__c.3106>:
     315:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     325:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     335:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     345:	2a 2a 2a 2a 0a 00                                   ****..

0000034b <__c.3104>:
     34b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     35b:	2a 20 57 72 6f 6e 67 20 50 61 73 73 77 6f 72 64     * Wrong Password
     36b:	20 21 21 21 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      !!! ***********
     37b:	2a 2a 2a 2a 0a 00                                   ****..

00000381 <__c.3102>:
     381:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     391:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3a1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3b1:	2a 2a 2a 2a 0a 00                                   ****..

000003b7 <__c.3100>:
     3b7:	20 0a 00                                             ..

000003ba <__c.3098>:
     3ba:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3ca:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3da:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3ea:	2a 2a 2a 2a 0a 00                                   ****..

000003f0 <__c.3096>:
     3f0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 45 6e 74 65     *********** Ente
     400:	72 20 59 6f 75 72 20 50 61 73 73 77 6f 72 64 20     r Your Password 
     410:	3a 20 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     :  *************
     420:	2a 2a 2a 2a 0a 00                                   ****..

00000426 <__c.3094>:
     426:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     436:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     446:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     456:	2a 2a 2a 2a 0a 00                                   ****..

0000045c <__c.3710>:
     45c:	20 0a 00                                             ..

0000045f <__c.3708>:
     45f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     46f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     47f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     48f:	2a 2a 2a 2a 0a 00                                   ****..

00000495 <__c.3706>:
     495:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20     *************** 
     4a5:	50 6c 65 61 73 65 20 43 61 6c 6c 20 58 58 58 58     Please Call XXXX
     4b5:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     4c5:	2a 2a 2a 2a 0a 00                                   ****..

000004cb <__c.3704>:
     4cb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20     *************** 
     4db:	20 20 20 20 4c 4f 43 4b 45 44 20 20 20 20 20 20         LOCKED      
     4eb:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     4fb:	2a 2a 2a 2a 0a 00                                   ****..

00000501 <__c.3702>:
     501:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     511:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     521:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     531:	2a 2a 2a 2a 0a 00                                   ****..

00000537 <__c.3694>:
     537:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     547:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     557:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     567:	2a 2a 2a 2a 0a 00                                   ****..

0000056d <__c.3692>:
     56d:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     57d:	20 0a 00                                             ..

00000580 <__c.3690>:
     580:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     590:	2a 20 20 00                                         *  .

00000594 <__c.3688>:
     594:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     5a4:	0a 00                                               ..

000005a6 <__c.3686>:
     5a6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5b6:	2a 20 20 00                                         *  .

000005ba <__c.3684>:
     5ba:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5ca:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5da:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5ea:	2a 2a 2a 2a 0a 00                                   ****..

000005f0 <__c.3682>:
     5f0:	20 0a 00                                             ..

000005f3 <__c.3680>:
     5f3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     603:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     613:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     623:	0a 00                                               ..

00000625 <__c.3678>:
     625:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     635:	2a 2a 20 20 4e 4f 54 20 52 45 41 44 59 20 2a 2a     **  NOT READY **
     645:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     655:	0a 00                                               ..

00000657 <__c.3676>:
     657:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     667:	2a 2a 20 20 20 20 43 41 52 44 20 20 20 20 2a 2a     **    CARD    **
     677:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     687:	0a 00                                               ..

00000689 <__c.3674>:
     689:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     699:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6a9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6b9:	0a 00                                               ..

000006bb <__c.3667>:
     6bb:	20 0a 00                                             ..

000006be <__c.3665>:
     6be:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6ce:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6de:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     6ee:	2a 2a 2a 2a 0a 00                                   ****..

000006f4 <__c.3663>:
     6f4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     704:	2a 2a 2a 2a 2a 2a 2a 2a 20 54 68 61 6e 6b 20 59     ******** Thank Y
     714:	6f 75 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ou *************
     724:	2a 2a 2a 2a 0a 00                                   ****..

0000072a <__c.3661>:
     72a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     73a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     74a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     75a:	2a 2a 2a 2a 0a 00                                   ****..

00000760 <__c.3653>:
     760:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     770:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     780:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     790:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7a0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7b0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000007bd <__c.3651>:
     7bd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7cd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     7dd:	2a 2a 2a 2a 20 57 72 6f 6e 67 20 43 6f 6d 6d 61     **** Wrong Comma
     7ed:	6e 64 20 20 20 20 21 21 21 2a 2a 2a 2a 2a 2a 2a     nd    !!!*******
     7fd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     80d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

0000081a <__c.3649>:
     81a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     82a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     83a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     84a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     85a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     86a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000877 <__c.3640>:
     877:	0a 00                                               ..

00000879 <__c.3638>:
     879:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     889:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     899:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     8a9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     8b9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     8c9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000008d6 <__c.3636>:
     8d6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     8e6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     8f6:	2a 2a 2a 2a 20 45 4e 44 20 4f 46 20 53 45 4c 45     **** END OF SELE
     906:	43 54 49 4f 4e 20 21 21 21 2a 2a 2a 2a 2a 2a 2a     CTION !!!*******
     916:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     926:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000933 <__c.3634>:
     933:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     943:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     953:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     963:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     973:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     983:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000990 <__c.3632>:
     990:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     9a0:	2a 2a 2a 2a 2a 2a 2a 2a 20 32 2d 20 45 78 69 74     ******** 2- Exit
     9b0:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     9c0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     9d0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     9e0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000009ed <__c.3630>:
     9ed:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     9fd:	2a 2a 2a 2a 2a 2a 2a 2a 20 31 2d 20 54 72 79 20     ******** 1- Try 
     a0d:	61 6e 6f 74 68 65 72 20 54 72 61 6e 73 61 63 74     another Transact
     a1d:	69 6f 6e 20 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ion  ***********
     a2d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a3d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000a4a <__c.3628>:
     a4a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a5a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a6a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a7a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a8a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a9a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000aa7 <__c.3626>:
     aa7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     ab7:	2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20 43     ******* Please C
     ac7:	68 6f 6f 73 65 20 6f 6e 65 20 6f 66 20 74 68 65     hoose one of the
     ad7:	20 66 6f 6c 6c 6f 77 69 6e 67 20 43 6f 6d 6d 61      following Comma
     ae7:	6e 64 73 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     nds ************
     af7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000b04 <__c.3624>:
     b04:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b14:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b24:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b34:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b44:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b54:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00000b61 <__c.3622>:
     b61:	20 0a 00                                             ..

00000b64 <__c.3620>:
     b64:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b74:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b84:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b94:	2a 2a 2a 2a 0a 00                                   ****..

00000b9a <__c.3618>:
     b9a:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     baa:	20 0a 00                                             ..

00000bad <__c.3616>:
     bad:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     bbd:	2a 20 20 00                                         *  .

00000bc1 <__c.3614>:
     bc1:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     bd1:	0a 00                                               ..

00000bd3 <__c.3612>:
     bd3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     be3:	2a 20 20 00                                         *  .

00000be7 <__c.3610>:
     be7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     bf7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c07:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c17:	2a 2a 2a 2a 0a 00                                   ****..

00000c1d <__c.3603>:
     c1d:	20 0a 00                                             ..

00000c20 <__c.3601>:
     c20:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c30:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c40:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c50:	2a 2a 2a 2a 0a 00                                   ****..

00000c56 <__c.3599>:
     c56:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     c66:	2a 0a 00                                            *..

00000c69 <__c.3597>:
     c69:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c79:	2a 20 20 00                                         *  .

00000c7d <__c.3595>:
     c7d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c8d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     c9d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     cad:	2a 2a 2a 2a 0a 00                                   ****..

00000cb3 <__c.3593>:
     cb3:	20 0a 00                                             ..

00000cb6 <__c.3591>:
     cb6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     cc6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     cd6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     ce6:	2a 2a 2a 2a 0a 00                                   ****..

00000cec <__c.3589>:
     cec:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     cfc:	2a 20 0a 00                                         * ..

00000d00 <__c.3587>:
     d00:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d10:	2a 20 20 00                                         *  .

00000d14 <__c.3585>:
     d14:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     d24:	2a 0a 00                                            *..

00000d27 <__c.3583>:
     d27:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d37:	2a 20 20 00                                         *  .

00000d3b <__c.3581>:
     d3b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d4b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d5b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d6b:	2a 2a 2a 2a 0a 00                                   ****..

00000d71 <__c.3579>:
     d71:	20 0a 00                                             ..

00000d74 <__c.3577>:
     d74:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d84:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     d94:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     da4:	0a 00                                               ..

00000da6 <__c.3575>:
     da6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 4e 6f     ************* No
     db6:	74 20 65 78 69 73 74 20 43 61 72 64 20 44 61 74     t exist Card Dat
     dc6:	61 20 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     a  *************
     dd6:	0a 00                                               ..

00000dd8 <__c.3573>:
     dd8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     de8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     df8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e08:	0a 00                                               ..

00000e0a <__c.3571>:
     e0a:	20 0a 00                                             ..

00000e0d <__c.3569>:
     e0d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e1d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e2d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00000e3d <__c.3567>:
     e3d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 54 68 69     ************ Thi
     e4d:	73 20 63 61 72 64 20 49 73 20 45 78 69 73 74 20     s card Is Exist 
     e5d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00000e6d <__c.3565>:
     e6d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e7d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     e8d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00000e9d <__c.3560>:
     e9d:	20 0a 00                                             ..

00000ea0 <__c.3558>:
     ea0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     eb0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     ec0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     ed0:	2a 2a 2a 2a 0a 00                                   ****..

00000ed6 <__c.3556>:
     ed6:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     ee6:	2a 0a 00                                            *..

00000ee9 <__c.3554>:
     ee9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     ef9:	2a 20 20 00                                         *  .

00000efd <__c.3552>:
     efd:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     f0d:	0a 00                                               ..

00000f0f <__c.3550>:
     f0f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     f1f:	2a 20 20 00                                         *  .

00000f23 <__c.3548>:
     f23:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     f33:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     f43:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     f53:	2a 2a 2a 2a 0a 00                                   ****..

00000f59 <__c.3546>:
     f59:	20 0a 00                                             ..

00000f5c <__c.3544>:
     f5c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     f6c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     f7c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     f8c:	2a 2a 2a 2a 0a 00                                   ****..

00000f92 <__c.3542>:
     f92:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     fa2:	0a 00                                               ..

00000fa4 <__c.3540>:
     fa4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fb4:	2a 20 20 00                                         *  .

00000fb8 <__c.3538>:
     fb8:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
     fc8:	2a 0a 00                                            *..

00000fcb <__c.3536>:
     fcb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fdb:	2a 20 20 00                                         *  .

00000fdf <__c.3534>:
     fdf:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fef:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fff:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    100f:	2a 2a 2a 2a 0a 00                                   ****..

00001015 <__c.3233>:
    1015:	20 0a 00                                             ..

00001018 <__c.3231>:
    1018:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1028:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1038:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1048:	0a 00                                               ..

0000104a <__c.3229>:
    104a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 4e 6f     ************* No
    105a:	74 20 65 78 69 73 74 20 43 61 72 64 20 44 61 74     t exist Card Dat
    106a:	61 20 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     a  *************
    107a:	0a 00                                               ..

0000107c <__c.3227>:
    107c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    108c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    109c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    10ac:	0a 00                                               ..

000010ae <__c.3225>:
    10ae:	20 0a 00                                             ..

000010b1 <__c.3223>:
    10b1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    10c1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    10d1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

000010e1 <__c.3221>:
    10e1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 54 68 69     ************ Thi
    10f1:	73 20 63 61 72 64 20 49 73 20 45 78 69 73 74 20     s card Is Exist 
    1101:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00001111 <__c.3219>:
    1111:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1121:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1131:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00     **************..

00001141 <__c.3217>:
    1141:	20 0a 00                                             ..

00001144 <__c.3215>:
    1144:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1154:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1164:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1174:	2a 0a 00                                            *..

00001177 <__c.3213>:
    1177:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 50 6c     ************* Pl
    1187:	65 61 73 65 20 65 6e 74 65 72 20 43 61 72 64 20     ease enter Card 
    1197:	50 41 4e 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     PAN ************
    11a7:	2a 0a 00                                            *..

000011aa <__c.3211>:
    11aa:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    11ba:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    11ca:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    11da:	2a 0a 00                                            *..

000011dd <__c.3205>:
    11dd:	20 0a 00                                             ..

000011e0 <__c.3203>:
    11e0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    11f0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1200:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1210:	2a 0a 00                                            *..

00001213 <__c.3201>:
    1213:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 4e 6f 74     ************ Not
    1223:	20 65 78 69 73 74 20 43 61 72 64 20 44 61 74 61      exist Card Data
    1233:	20 3a 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      : *************
    1243:	2a 0a 00                                            *..

00001246 <__c.3199>:
    1246:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1256:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1266:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1276:	2a 0a 00                                            *..

00001279 <__c.3197>:
    1279:	20 0a 00                                             ..

0000127c <__c.3195>:
    127c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    128c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    129c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    12ac:	2a 0a 00                                            *..

000012af <__c.3193>:
    12af:	2a 2a 2a 2a 2a 2a 2a 20 57 61 69 74 20 55 6e 74     ******* Wait Unt
    12bf:	69 6c 20 72 65 6d 6f 76 65 20 74 68 69 73 20 43     il remove this C
    12cf:	61 72 64 20 44 61 74 61 20 3a 20 2a 2a 2a 2a 2a     ard Data : *****
    12df:	2a 0a 00                                            *..

000012e2 <__c.3191>:
    12e2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    12f2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1302:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1312:	2a 0a 00                                            *..

00001315 <__c.3189>:
    1315:	20 0a 00                                             ..

00001318 <__c.3187>:
    1318:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1328:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1338:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1348:	2a 0a 00                                            *..

0000134b <__c.3185>:
    134b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65     ********* Please
    135b:	20 65 6e 74 65 72 20 43 61 72 64 20 50 41 4e 20      enter Card PAN 
    136b:	20 3a 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      : *************
    137b:	2a 0a 00                                            *..

0000137e <__c.3183>:
    137e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    138e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    139e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    13ae:	2a 0a 00                                            *..

000013b1 <__c.3177>:
    13b1:	20 0a 00                                             ..

000013b4 <__c.3175>:
    13b4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    13c4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    13d4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    13e4:	2a 0a 00                                            *..

000013e7 <__c.3173>:
    13e7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 20 74 68 69 73 20 63     ********* this c
    13f7:	61 72 64 20 61 6c 72 65 61 64 79 20 65 78 69 73     ard already exis
    1407:	74 20 21 21 21 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     t !!! **********
    1417:	2a 0a 00                                            *..

0000141a <__c.3171>:
    141a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    142a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    143a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    144a:	2a 0a 00                                            *..

0000144d <__c.3169>:
    144d:	20 0a 00                                             ..

00001450 <__c.3167>:
    1450:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1460:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1470:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1480:	2a 0a 00                                            *..

00001483 <__c.3165>:
    1483:	2a 2a 2a 2a 2a 2a 2a 2a 20 54 68 65 72 65 20 69     ******** There i
    1493:	73 20 6e 6f 20 65 6e 6f 75 67 68 20 73 70 61 63     s no enough spac
    14a3:	65 20 21 21 21 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     e !!! **********
    14b3:	2a 0a 00                                            *..

000014b6 <__c.3163>:
    14b6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    14c6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    14d6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    14e6:	2a 0a 00                                            *..

000014e9 <__c.3161>:
    14e9:	20 0a 00                                             ..

000014ec <__c.3159>:
    14ec:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    14fc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    150c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    151c:	2a 0a 00                                            *..

0000151f <__c.3157>:
    151f:	2a 2a 2a 2a 2a 2a 20 47 72 65 61 74 20 61 20 6e     ****** Great a n
    152f:	65 77 20 43 61 72 64 20 61 64 64 65 64 20 73 75     ew Card added su
    153f:	63 63 65 73 73 66 75 6c 6c 79 20 2a 2a 2a 2a 2a     ccessfully *****
    154f:	2a 0a 00                                            *..

00001552 <__c.3155>:
    1552:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1562:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1572:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1582:	2a 0a 00                                            *..

00001585 <__c.3153>:
    1585:	0a 00                                               ..

00001587 <__c.3151>:
    1587:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1597:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    15a7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    15b7:	2a 0a 00                                            *..

000015ba <__c.3149>:
    15ba:	2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20 65     ******* Please e
    15ca:	6e 74 65 72 20 43 61 72 64 20 54 6f 74 61 6c 20     nter Card Total 
    15da:	42 61 6c 61 6e 63 65 2a 2a 2a 2a 2a 2a 2a 2a 2a     Balance*********
    15ea:	2a 0a 00                                            *..

000015ed <__c.3147>:
    15ed:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    15fd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    160d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    161d:	2a 0a 00                                            *..

00001620 <__c.3145>:
    1620:	20 0a 00                                             ..

00001623 <__c.3143>:
    1623:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1633:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1643:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1653:	2a 0a 00                                            *..

00001656 <__c.3141>:
    1656:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 50 6c 65     ************ Ple
    1666:	61 73 65 20 65 6e 74 65 72 20 43 61 72 64 20 50     ase enter Card P
    1676:	49 4e 20 3a 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     IN : ***********
    1686:	2a 0a 00                                            *..

00001689 <__c.3139>:
    1689:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1699:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    16a9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    16b9:	2a 0a 00                                            *..

000016bc <__c.3137>:
    16bc:	20 0a 00                                             ..

000016bf <__c.3135>:
    16bf:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    16cf:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    16df:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    16ef:	2a 0a 00                                            *..

000016f2 <__c.3133>:
    16f2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61     *********** Plea
    1702:	73 65 20 65 6e 74 65 72 20 43 61 72 64 20 50 41     se enter Card PA
    1712:	4e 20 20 3a 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     N  : ***********
    1722:	2a 0a 00                                            *..

00001725 <__c.3131>:
    1725:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1735:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1745:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1755:	2a 0a 00                                            *..

00001758 <__c.3129>:
    1758:	20 0a 00                                             ..

0000175b <__c.3127>:
    175b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    176b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    177b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    178b:	2a 0a 00                                            *..

0000178e <__c.3125>:
    178e:	2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20 65     ******* Please e
    179e:	6e 74 65 72 20 43 61 72 64 20 48 6f 6c 64 65 72     nter Card Holder
    17ae:	20 4e 61 6d 65 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      Name **********
    17be:	2a 0a 00                                            *..

000017c1 <__c.3123>:
    17c1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    17d1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    17e1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    17f1:	2a 0a 00                                            *..

000017f4 <__c.3116>:
    17f4:	0a 00                                               ..

000017f6 <__c.3114>:
    17f6:	20 0a 00                                             ..

000017f9 <__c.3112>:
    17f9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1809:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1819:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1829:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1839:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1849:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001856 <__c.3110>:
    1856:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1866:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1876:	2a 2a 2a 2a 2a 2a 20 45 4e 44 20 4f 46 20 53 45     ****** END OF SE
    1886:	4c 45 43 54 49 4f 4e 20 21 21 21 2a 2a 2a 2a 2a     LECTION !!!*****
    1896:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    18a6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000018b3 <__c.3108>:
    18b3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    18c3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    18d3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    18e3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    18f3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1903:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001910 <__c.3106>:
    1910:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1920:	2a 2a 2a 2a 2a 2a 2a 2a 20 38 2d 20 45 78 69 74     ******** 8- Exit
    1930:	20 50 72 6f 67 72 61 6d 6d 69 6e 67 20 6d 6f 64      Programming mod
    1940:	65 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     e **************
    1950:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1960:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

0000196d <__c.3104>:
    196d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    197d:	2a 2a 2a 2a 2a 2a 2a 2a 20 37 2d 20 41 64 6d 69     ******** 7- Admi
    198d:	6e 20 4d 6f 64 69 66 79 20 44 61 74 61 20 2a 2a     n Modify Data **
    199d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    19ad:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    19bd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

000019ca <__c.3102>:
    19ca:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    19da:	2a 2a 2a 2a 2a 2a 2a 2a 20 36 2d 20 52 65 73 65     ******** 6- Rese
    19ea:	74 20 44 61 74 61 20 42 61 73 65 20 2a 2a 2a 2a     t Data Base ****
    19fa:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1a0a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1a1a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001a27 <__c.3100>:
    1a27:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1a37:	2a 2a 2a 2a 2a 2a 2a 2a 20 35 2d 20 54 6f 74 61     ******** 5- Tota
    1a47:	6c 20 4e 55 4d 20 6f 66 20 43 75 72 72 65 6e 74     l NUM of Current
    1a57:	20 43 41 52 44 73 20 2a 2a 2a 2a 2a 2a 2a 2a 2a      CARDs *********
    1a67:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1a77:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001a84 <__c.3098>:
    1a84:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1a94:	2a 2a 2a 2a 2a 2a 2a 2a 20 34 2d 20 53 65 61 72     ******** 4- Sear
    1aa4:	63 68 20 57 69 74 68 20 43 61 72 64 20 48 6f 6c     ch With Card Hol
    1ab4:	64 65 72 20 4e 61 6d 65 20 2a 2a 2a 2a 2a 2a 2a     der Name *******
    1ac4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1ad4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001ae1 <__c.3096>:
    1ae1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1af1:	2a 2a 2a 2a 2a 2a 2a 2a 20 33 2d 20 53 65 61 72     ******** 3- Sear
    1b01:	63 68 20 46 6f 72 20 43 61 72 64 20 57 69 74 68     ch For Card With
    1b11:	20 50 41 4e 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      PAN ***********
    1b21:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1b31:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001b3e <__c.3094>:
    1b3e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1b4e:	2a 2a 2a 2a 2a 2a 2a 2a 20 32 2d 20 52 65 6d 6f     ******** 2- Remo
    1b5e:	76 65 20 43 61 72 64 20 20 20 2a 2a 2a 2a 2a 2a     ve Card   ******
    1b6e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1b7e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1b8e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001b9b <__c.3092>:
    1b9b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1bab:	2a 2a 2a 2a 2a 2a 2a 2a 20 31 2d 20 41 64 64 20     ******** 1- Add 
    1bbb:	43 61 72 64 09 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     Card. **********
    1bcb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1bdb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1beb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001bf8 <__c.3090>:
    1bf8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1c08:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1c18:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1c28:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1c38:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1c48:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001c55 <__c.3088>:
    1c55:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1c65:	2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20 43     ******* Please C
    1c75:	68 6f 6f 73 65 20 6f 6e 65 20 6f 66 20 74 68 65     hoose one of the
    1c85:	20 66 6f 6c 6c 6f 77 69 6e 67 20 43 6f 6d 6d 61      following Comma
    1c95:	6e 64 73 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     nds ************
    1ca5:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001cb2 <__c.3086>:
    1cb2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1cc2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1cd2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1ce2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1cf2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1d02:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00001d0f <__c.3513>:
    1d0f:	20 0a 00                                             ..

00001d12 <__c.3511>:
    1d12:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1d22:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1d32:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1d42:	2a 2a 2a 2a 0a 00                                   ****..

00001d48 <__c.3509>:
    1d48:	2a 2a 2a 2a 2a 2a 2a 2a 20 57 72 6f 6e 67 20 63     ******** Wrong c
    1d58:	68 6f 73 65 20 50 6c 65 61 73 65 20 54 72 79 20     hose Please Try 
    1d68:	61 67 61 69 6e 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     again **********
    1d78:	2a 2a 2a 2a 0a 00                                   ****..

00001d7e <__c.3507>:
    1d7e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1d8e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1d9e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1dae:	2a 2a 2a 2a 0a 00                                   ****..

00001db4 <__c.3504>:
    1db4:	20 0a 00                                             ..

00001db7 <__c.3502>:
    1db7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1dc7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1dd7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1de7:	0a 00                                               ..

00001de9 <__c.3500>:
    1de9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1df9:	2a 2a 20 20 77 61 69 74 20 21 21 21 20 2a 2a 2a     **  wait !!! ***
    1e09:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e19:	0a 00                                               ..

00001e1b <__c.3498>:
    1e1b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e2b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e3b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e4b:	0a 00                                               ..

00001e4d <__c.3494>:
    1e4d:	20 0a 00                                             ..

00001e50 <__c.3492>:
    1e50:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e60:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e70:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e80:	2a 2a 2a 2a 2a 2a 0a 00                             ******..

00001e88 <__c.3490>:
    1e88:	2a 2a 2a 2a 2a 20 70 72 6f 62 6c 65 6d 20 57 69     ***** problem Wi
    1e98:	74 68 20 44 61 74 61 20 42 61 73 65 20 43 61 6c     th Data Base Cal
    1ea8:	6c 20 53 65 72 76 69 63 65 20 53 75 70 70 6f 72     l Service Suppor
    1eb8:	74 20 2a 2a 2a 2a 0a 00                             t ****..

00001ec0 <__c.3488>:
    1ec0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1ed0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1ee0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1ef0:	2a 2a 2a 2a 2a 2a 0a 00                             ******..

00001ef8 <__c.3486>:
    1ef8:	20 0a 00                                             ..

00001efb <__c.3484>:
    1efb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f0b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f1b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f2b:	2a 2a 2a 2a 0a 00                                   ****..

00001f31 <__c.3482>:
    1f31:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 20 44     *************  D
    1f41:	65 6c 65 74 65 64 20 73 75 63 63 65 73 73 66 75     eleted successfu
    1f51:	6c 6c 79 20 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     lly  ***********
    1f61:	2a 2a 2a 2a 0a 00                                   ****..

00001f67 <__c.3480>:
    1f67:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f77:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f87:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1f97:	2a 2a 2a 2a 0a 00                                   ****..

00001f9d <__c.3477>:
    1f9d:	20 0a 00                                             ..

00001fa0 <__c.3475>:
    1fa0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1fb0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1fc0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1fd0:	2a 2a 2a 2a 0a 00                                   ****..

00001fd6 <__c.3473>:
    1fd6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 0a 00           *********** ..

00001fe4 <__c.3471>:
    1fe4:	2a 2a 2a 2a 2a 20 54 68 65 20 4e 75 6d 62 65 72     ***** The Number
    1ff4:	20 6f 66 20 49 6e 73 74 61 6c 6c 65 64 20 43 61      of Installed Ca
    2004:	72 64 73 20 69 73 20 3a 00                          rds is :.

0000200d <__c.3469>:
    200d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    201d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    202d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    203d:	2a 2a 2a 2a 0a 00                                   ****..

00002043 <__c.3461>:
    2043:	20 0a 00                                             ..

00002046 <__c.3459>:
    2046:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2056:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2066:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2076:	2a 2a 2a 2a 0a 00                                   ****..

0000207c <__c.3457>:
    207c:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
    208c:	2a 0a 00                                            *..

0000208f <__c.3455>:
    208f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    209f:	2a 20 20 00                                         *  .

000020a3 <__c.3453>:
    20a3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    20b3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    20c3:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    20d3:	2a 2a 2a 2a 0a 00                                   ****..

000020d9 <__c.3451>:
    20d9:	20 0a 00                                             ..

000020dc <__c.3449>:
    20dc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    20ec:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    20fc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    210c:	2a 2a 2a 2a 0a 00                                   ****..

00002112 <__c.3447>:
    2112:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
    2122:	0a 00                                               ..

00002124 <__c.3445>:
    2124:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2134:	20 00                                                .

00002136 <__c.3443>:
    2136:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
    2146:	2a 0a 00                                            *..

00002149 <__c.3441>:
    2149:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2159:	2a 20 20 00                                         *  .

0000215d <__c.3439>:
    215d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    216d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    217d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    218d:	2a 2a 2a 2a 0a 00                                   ****..

00002193 <__c.3428>:
    2193:	20 0a 00                                             ..

00002196 <__c.3426>:
    2196:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    21a6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    21b6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    21c6:	2a 2a 2a 2a 0a 00                                   ****..

000021cc <__c.3424>:
    21cc:	2a 2a 2a 2a 2a 20 20 45 58 49 54 20 41 64 6d 69     *****  EXIT Admi
    21dc:	6e 20 4d 6f 64 69 66 79 69 6e 67 20 6d 6f 64 65     n Modifying mode
    21ec:	20 73 75 63 63 65 73 73 66 75 6c 6c 79 20 2a 2a      successfully **
    21fc:	2a 2a 2a 2a 0a 00                                   ****..

00002202 <__c.3422>:
    2202:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2212:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2222:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2232:	2a 2a 2a 2a 0a 00                                   ****..

00002238 <__c.3419>:
    2238:	20 0a 00                                             ..

0000223b <__c.3417>:
    223b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    224b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    225b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    226b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    227b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00                    *********..

00002286 <__c.3415>:
    2286:	2a 2a 2a 2a 2a 2a 2a 2a 2a 20 4d 61 78 69 6d 75     ********* Maximu
    2296:	6d 20 44 61 69 6c 79 20 41 6d 6f 75 6e 74 20 44     m Daily Amount D
    22a6:	6f 65 73 20 4e 6f 74 20 53 65 74 20 53 75 63 63     oes Not Set Succ
    22b6:	65 73 73 66 75 6c 6c 79 20 21 21 21 21 20 2a 2a     essfully !!!! **
    22c6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00                    *********..

000022d1 <__c.3413>:
    22d1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    22e1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    22f1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2301:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2311:	2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00                    *********..

0000231c <__c.3411>:
    231c:	20 0a 00                                             ..

0000231f <__c.3409>:
    231f:	20 0a 00                                             ..

00002322 <__c.3407>:
    2322:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2332:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2342:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2352:	0a 00                                               ..

00002354 <__c.3405>:
    2354:	2a 2a 2a 2a 2a 20 20 4d 61 78 69 6d 75 6d 20 44     *****  Maximum D
    2364:	61 69 6c 79 20 41 6d 6f 75 6e 74 20 53 75 63 63     aily Amount Succ
    2374:	65 73 73 66 75 6c 6c 79 20 20 2a 2a 2a 2a 2a 2a     essfully  ******
    2384:	0a 00                                               ..

00002386 <__c.3403>:
    2386:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2396:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    23a6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    23b6:	0a 00                                               ..

000023b8 <__c.3401>:
    23b8:	20 0a 00                                             ..

000023bb <__c.3399>:
    23bb:	20 0a 00                                             ..

000023be <__c.3397>:
    23be:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    23ce:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    23de:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    23ee:	0a 00                                               ..

000023f0 <__c.3395>:
    23f0:	2a 2a 2a 2a 2a 20 20 50 6c 65 61 73 65 20 45 6e     *****  Please En
    2400:	74 65 72 20 74 68 65 20 4d 41 78 20 44 61 69 6c     ter the MAx Dail
    2410:	79 20 41 6d 6f 75 6e 74 20 2a 2a 2a 2a 2a 2a 2a     y Amount *******
    2420:	0a 00                                               ..

00002422 <__c.3393>:
    2422:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2432:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2442:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2452:	0a 00                                               ..

00002454 <__c.3390>:
    2454:	20 0a 00                                             ..

00002457 <__c.3388>:
    2457:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2467:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2477:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2487:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00                 **********..

00002493 <__c.3386>:
    2493:	2a 2a 2a 2a 2a 2a 2a 2a 20 45 72 72 6f 72 20 44     ******** Error D
    24a3:	6f 65 73 20 4e 6f 74 20 43 6c 65 61 72 65 64 20     oes Not Cleared 
    24b3:	53 75 63 63 65 73 73 66 75 6c 6c 79 20 21 21 21     Successfully !!!
    24c3:	21 20 20 2a 2a 2a 2a 2a 2a 2a 0a 00                 !  *******..

000024cf <__c.3384>:
    24cf:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    24df:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    24ef:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    24ff:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00                 **********..

0000250b <__c.3382>:
    250b:	20 0a 00                                             ..

0000250e <__c.3380>:
    250e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    251e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    252e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    253e:	0a 00                                               ..

00002540 <__c.3378>:
    2540:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 20 45 72 72 6f     **********  Erro
    2550:	72 20 43 6c 65 61 72 65 64 20 53 75 63 63 65 73     r Cleared Succes
    2560:	73 66 75 6c 6c 79 20 2a 2a 2a 2a 2a 2a 2a 2a 2a     sfully *********
    2570:	0a 00                                               ..

00002572 <__c.3376>:
    2572:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2582:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2592:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    25a2:	0a 00                                               ..

000025a4 <__c.3373>:
    25a4:	20 0a 00                                             ..

000025a7 <__c.3371>:
    25a7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    25b7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    25c7:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    25d7:	0a 00                                               ..

000025d9 <__c.3369>:
    25d9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 20 50     *************  P
    25e9:	6c 65 61 73 65 20 54 72 79 20 41 67 61 69 6e 20     lease Try Again 
    25f9:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
    2609:	0a 00                                               ..

0000260b <__c.3367>:
    260b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    261b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    262b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    263b:	0a 00                                               ..

0000263d <__c.3365>:
    263d:	20 0a 00                                             ..

00002640 <__c.3363>:
    2640:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2650:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2660:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2670:	0a 00                                               ..

00002672 <__c.3361>:
    2672:	2a 2a 2a 2a 2a 20 41 64 6d 69 6e 20 44 61 74 61     ***** Admin Data
    2682:	20 53 74 6f 72 65 64 20 53 75 63 63 65 73 73 66      Stored Successf
    2692:	75 6c 6c 79 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ully ***********
    26a2:	0a 00                                               ..

000026a4 <__c.3359>:
    26a4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    26b4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    26c4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    26d4:	0a 00                                               ..

000026d6 <__c.3357>:
    26d6:	20 0a 00                                             ..

000026d9 <__c.3355>:
    26d9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    26e9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    26f9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2709:	0a 00                                               ..

0000270b <__c.3353>:
    270b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    271b:	2a 2a 20 20 77 61 69 74 20 21 21 21 20 2a 2a 2a     **  wait !!! ***
    272b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    273b:	0a 00                                               ..

0000273d <__c.3351>:
    273d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    274d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    275d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    276d:	0a 00                                               ..

0000276f <__c.3349>:
    276f:	20 0a 00                                             ..

00002772 <__c.3347>:
    2772:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2782:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2792:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    27a2:	0a 00                                               ..

000027a4 <__c.3345>:
    27a4:	2a 2a 2a 2a 2a 2a 20 45 6e 74 65 72 20 61 20 6e     ****** Enter a n
    27b4:	65 77 20 61 64 6d 69 6e 20 4d 41 58 20 54 65 6d     ew admin MAX Tem
    27c4:	70 20 76 61 6c 75 65 3a 2a 2a 2a 2a 2a 2a 2a 2a     p value:********
    27d4:	0a 00                                               ..

000027d6 <__c.3343>:
    27d6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    27e6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    27f6:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2806:	0a 00                                               ..

00002808 <__c.3339>:
    2808:	20 0a 00                                             ..

0000280b <__c.3337>:
    280b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    281b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    282b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    283b:	0a 00                                               ..

0000283d <__c.3335>:
    283d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 20 50     *************  P
    284d:	6c 65 61 73 65 20 54 72 79 20 41 67 61 69 6e 20     lease Try Again 
    285d:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
    286d:	0a 00                                               ..

0000286f <__c.3333>:
    286f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    287f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    288f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    289f:	0a 00                                               ..

000028a1 <__c.3331>:
    28a1:	20 0a 00                                             ..

000028a4 <__c.3329>:
    28a4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    28b4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    28c4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    28d4:	0a 00                                               ..

000028d6 <__c.3327>:
    28d6:	2a 2a 2a 2a 2a 2a 2a 2a 20 41 64 6d 69 6e 20 44     ******** Admin D
    28e6:	61 74 61 20 53 74 6f 72 65 64 20 53 75 63 63 65     ata Stored Succe
    28f6:	73 73 66 75 6c 6c 79 20 20 2a 2a 2a 2a 2a 2a 2a     ssfully  *******
    2906:	0a 00                                               ..

00002908 <__c.3325>:
    2908:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2918:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2928:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2938:	0a 00                                               ..

0000293a <__c.3323>:
    293a:	20 0a 00                                             ..

0000293d <__c.3321>:
    293d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    294d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    295d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    296d:	0a 00                                               ..

0000296f <__c.3319>:
    296f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    297f:	2a 2a 20 20 77 61 69 74 20 21 21 21 20 2a 2a 2a     **  wait !!! ***
    298f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    299f:	0a 00                                               ..

000029a1 <__c.3317>:
    29a1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    29b1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    29c1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    29d1:	0a 00                                               ..

000029d3 <__c.3315>:
    29d3:	20 0a 00                                             ..

000029d6 <__c.3313>:
    29d6:	20 0a 00                                             ..

000029d9 <__c.3311>:
    29d9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    29e9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    29f9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2a09:	0a 00                                               ..

00002a0b <__c.3309>:
    2a0b:	2a 2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20     ******** Please 
    2a1b:	65 6e 74 65 72 20 61 20 6e 65 77 20 61 64 6d 69     enter a new admi
    2a2b:	6e 20 70 61 73 73 20 3a 20 2a 2a 2a 2a 2a 2a 2a     n pass : *******
    2a3b:	0a 00                                               ..

00002a3d <__c.3307>:
    2a3d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2a4d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2a5d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2a6d:	0a 00                                               ..

00002a6f <__c.3305>:
    2a6f:	20 0a 00                                             ..

00002a72 <__c.3303>:
    2a72:	20 0a 00                                             ..

00002a75 <__c.3301>:
    2a75:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2a85:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2a95:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2aa5:	0a 00                                               ..

00002aa7 <__c.3299>:
    2aa7:	2a 2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20     ******** Please 
    2ab7:	65 6e 74 65 72 20 61 20 6e 65 77 20 61 64 6d 69     enter a new admi
    2ac7:	6e 20 6e 61 6d 65 20 3a 20 2a 2a 2a 2a 2a 2a 2a     n name : *******
    2ad7:	0a 00                                               ..

00002ad9 <__c.3297>:
    2ad9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2ae9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2af9:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2b09:	0a 00                                               ..

00002b0b <__c.3294>:
    2b0b:	20 0a 00                                             ..

00002b0e <__c.3292>:
    2b0e:	0a 00                                               ..

00002b10 <__c.3290>:
    2b10:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2b20:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2b30:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2b40:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2b50:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2b60:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002b6d <__c.3288>:
    2b6d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2b7d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2b8d:	2a 2a 2a 2a 20 45 4e 44 20 4f 46 20 53 45 4c 45     **** END OF SELE
    2b9d:	43 54 49 4f 4e 20 21 21 21 2a 2a 2a 2a 2a 2a 2a     CTION !!!*******
    2bad:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2bbd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002bca <__c.3286>:
    2bca:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2bda:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2bea:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2bfa:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2c0a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2c1a:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002c27 <__c.3284>:
    2c27:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2c37:	2a 2a 2a 2a 2a 2a 2a 2a 20 35 2d 20 45 78 69 74     ******** 5- Exit
    2c47:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
    2c57:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2c67:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2c77:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002c84 <__c.3282>:
    2c84:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2c94:	2a 2a 2a 2a 2a 2a 2a 2a 20 34 2d 20 53 65 74 20     ******** 4- Set 
    2ca4:	4d 61 78 20 44 61 69 6c 79 20 41 6d 6f 75 6e 74     Max Daily Amount
    2cb4:	20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a      ***************
    2cc4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2cd4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002ce1 <__c.3280>:
    2ce1:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2cf1:	2a 2a 2a 2a 2a 2a 2a 2a 20 33 2d 20 43 6c 65 61     ******** 3- Clea
    2d01:	72 20 45 72 72 6f 72 20 46 6c 61 67 20 2a 2a 2a     r Error Flag ***
    2d11:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2d21:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2d31:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002d3e <__c.3278>:
    2d3e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2d4e:	2a 2a 2a 2a 2a 2a 2a 2a 20 32 2d 20 53 65 74 20     ******** 2- Set 
    2d5e:	41 64 6d 69 6e 20 4d 61 78 69 6d 75 6d 20 54 65     Admin Maximum Te
    2d6e:	6d 70 65 72 61 74 75 72 65 20 2a 2a 2a 2a 2a 2a     mperature ******
    2d7e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2d8e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002d9b <__c.3276>:
    2d9b:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2dab:	2a 2a 2a 2a 2a 2a 2a 2a 20 31 2d 20 53 65 74 20     ******** 1- Set 
    2dbb:	41 64 6d 69 6e 20 50 61 73 73 77 6f 72 64 20 61     Admin Password a
    2dcb:	6e 64 20 4e 61 6d 65 20 2a 2a 2a 2a 2a 2a 2a 2a     nd Name ********
    2ddb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2deb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002df8 <__c.3274>:
    2df8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2e08:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2e18:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2e28:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2e38:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2e48:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002e55 <__c.3272>:
    2e55:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2e65:	2a 2a 2a 2a 2a 2a 2a 20 50 6c 65 61 73 65 20 43     ******* Please C
    2e75:	68 6f 6f 73 65 20 6f 6e 65 20 6f 66 20 74 68 65     hoose one of the
    2e85:	20 66 6f 6c 6c 6f 77 69 6e 67 20 43 6f 6d 6d 61      following Comma
    2e95:	6e 64 73 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     nds ************
    2ea5:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002eb2 <__c.3270>:
    2eb2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2ec2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2ed2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2ee2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2ef2:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2f02:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 0a 00              ***********..

00002f0f <__c.3261>:
    2f0f:	20 0a 00                                             ..

00002f12 <__c.3259>:
    2f12:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2f22:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2f32:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2f42:	0a 00                                               ..

00002f44 <__c.3257>:
    2f44:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 54 68     ************* Th
    2f54:	69 73 20 63 61 72 64 20 49 73 20 6e 6f 74 20 45     is card Is not E
    2f64:	78 69 73 74 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     xist ***********
    2f74:	0a 00                                               ..

00002f76 <__c.3255>:
    2f76:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2f86:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2f96:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2fa6:	0a 00                                               ..

00002fa8 <__c.3253>:
    2fa8:	20 0a 00                                             ..

00002fab <__c.3251>:
    2fab:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2fbb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2fcb:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2fdb:	0a 00                                               ..

00002fdd <__c.3249>:
    2fdd:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 54 68     ************* Th
    2fed:	69 73 20 63 61 72 64 20 20 49 73 20 45 78 69 73     is card  Is Exis
    2ffd:	74 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     t **************
    300d:	0a 00                                               ..

0000300f <__c.3247>:
    300f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    301f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    302f:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    303f:	0a 00                                               ..

00003041 <__c.3245>:
    3041:	20 0a 00                                             ..

00003044 <__c.3243>:
    3044:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    3054:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    3064:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    3074:	0a 00                                               ..

00003076 <__c.3241>:
    3076:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 20 50 6c     ************* Pl
    3086:	65 61 73 65 20 65 6e 74 65 72 20 43 61 72 64 20     ease enter Card 
    3096:	4e 61 6d 65 3a 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     Name: **********
    30a6:	0a 00                                               ..

000030a8 <__c.3239>:
    30a8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    30b8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    30c8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    30d8:	0a 00                                               ..

000030da <LCD_StrF>:
    30da:	57 45 4c 43 4f 4d 45 20 4f 50 45 52 41 54 45 00     WELCOME OPERATE.
    30ea:	00 00 00 00 20 20 20 20 20 4d 4f 44 45 20 20 20     ....     MODE   
    30fa:	20 20 20 00 00 00 00 00 20 20 50 4c 45 41 53 45        .....  PLEASE
    310a:	20 45 4e 54 45 52 20 00 00 00 00 00 20 20 20 20      ENTER .....    
    311a:	20 43 41 52 44 20 20 20 20 20 20 00 00 00 00 00      CARD      .....
    312a:	20 20 45 4e 54 45 52 20 54 48 45 20 20 20 20 00       ENTER THE    .
    313a:	00 00 00 00 54 52 41 4e 53 41 43 20 41 4d 4f 55     ....TRANSAC AMOU
    314a:	4e 54 20 00 00 00 00 00 54 52 41 4e 53 41 43 54     NT .....TRANSACT
    315a:	49 4f 4e 20 20 3a 20 00 00 00 00 00 20 20 20 20     ION  : .....    
    316a:	20 57 72 6f 6e 67 20 20 20 20 20 00 00 00 00 00      Wrong     .....
    317a:	20 20 54 72 61 6e 73 61 63 74 69 6f 6e 20 20 00       Transaction  .
    318a:	00 00 00 00 20 20 45 52 52 4f 52 5f 54 65 6d 70     ....  ERROR_Temp
    319a:	20 20 20 00 00 00 00 00 20 20 43 41 4c 4c 5f 58        .....  CALL_X
    31aa:	58 58 58 58 58 20 20 00 00 00 00 00 09 44 72 61     XXXXX  ......Dra
    31ba:	67 6f 6e 73 20 20 20 20 20 00 00 00 00 00 00 00     gons     .......
    31ca:	20 20 41 54 4d 20 53 79 73 74 65 6d 20 20 20 00       ATM System   .
    31da:	00 00 00 00 65 6e 74 65 72 20 50 72 6f 67 72 61     ....enter Progra
    31ea:	6d 20 20 00 00 00 00 00 20 20 20 20 20 4d 6f 64     m  .....     Mod
    31fa:	65 20 20 20 20 20 20 00 00 00 00 00 50 72 6f 67     e      .....Prog
    320a:	72 61 6d 20 4d 6f 64 45 20 20 20 00 00 00 00 00     ram ModE   .....
    321a:	20 20 20 20 43 41 52 44 20 20 20 20 20 20 20 00         CARD       .
    322a:	00 00 00 00 20 20 20 4e 4f 54 20 52 45 41 44 59     ....   NOT READY
    323a:	20 20 20 00 00 00 00 00 20 20 20 54 48 41 4e 4b        .....   THANK
    324a:	20 20 20 20 20 20 20 00 00 00 00 00 20 20 20 20            .....    
    325a:	59 4f 55 20 20 20 20 20 20 20 20 00 00 00 00 00     YOU        .....
    326a:	20 20 20 53 75 63 63 65 73 73 20 20 20 20 20 00        Success     .
    327a:	00 00 00 00                                         ....

0000327e <__c.3075>:
    327e:	48 69 6e 74 21 21 21 21 20 45 6d 70 74 79 20 44     Hint!!!! Empty D
    328e:	61 74 61 42 61 73 65 20 0a 00                       ataBase ..

00003298 <__ctors_end>:
    3298:	11 24       	eor	r1, r1
    329a:	1f be       	out	0x3f, r1	; 63
    329c:	cf e5       	ldi	r28, 0x5F	; 95
    329e:	d8 e0       	ldi	r29, 0x08	; 8
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	cd bf       	out	0x3d, r28	; 61

000032a4 <__do_copy_data>:
    32a4:	11 e0       	ldi	r17, 0x01	; 1
    32a6:	a0 e6       	ldi	r26, 0x60	; 96
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	ec e3       	ldi	r30, 0x3C	; 60
    32ac:	f5 e7       	ldi	r31, 0x75	; 117
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <__do_copy_data+0x10>
    32b0:	05 90       	lpm	r0, Z+
    32b2:	0d 92       	st	X+, r0
    32b4:	a4 38       	cpi	r26, 0x84	; 132
    32b6:	b1 07       	cpc	r27, r17
    32b8:	d9 f7       	brne	.-10     	; 0x32b0 <__do_copy_data+0xc>

000032ba <__do_clear_bss>:
    32ba:	22 e0       	ldi	r18, 0x02	; 2
    32bc:	a4 e8       	ldi	r26, 0x84	; 132
    32be:	b1 e0       	ldi	r27, 0x01	; 1
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <.do_clear_bss_start>

000032c2 <.do_clear_bss_loop>:
    32c2:	1d 92       	st	X+, r1

000032c4 <.do_clear_bss_start>:
    32c4:	a1 32       	cpi	r26, 0x21	; 33
    32c6:	b2 07       	cpc	r27, r18
    32c8:	e1 f7       	brne	.-8      	; 0x32c2 <.do_clear_bss_loop>
    32ca:	0e 94 bf 2d 	call	0x5b7e	; 0x5b7e <main>
    32ce:	0c 94 9c 3a 	jmp	0x7538	; 0x7538 <_exit>

000032d2 <__bad_interrupt>:
    32d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000032d6 <Tim_1_CallBAck>:




void INT0_CALLBACK(void)
{
    32d6:	08 95       	ret

000032d8 <usart_putchar_printf>:
    32d8:	cf 93       	push	r28
    32da:	df 93       	push	r29
    32dc:	00 d0       	rcall	.+0      	; 0x32de <usart_putchar_printf+0x6>
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62
    32e2:	89 83       	std	Y+1, r24	; 0x01
    32e4:	9d e0       	ldi	r25, 0x0D	; 13
    32e6:	9a 83       	std	Y+2, r25	; 0x02
    32e8:	8a 30       	cpi	r24, 0x0A	; 10
    32ea:	49 f4       	brne	.+18     	; 0x32fe <usart_putchar_printf+0x26>
    32ec:	41 e0       	ldi	r20, 0x01	; 1
    32ee:	50 e0       	ldi	r21, 0x00	; 0
    32f0:	be 01       	movw	r22, r28
    32f2:	6e 5f       	subi	r22, 0xFE	; 254
    32f4:	7f 4f       	sbci	r23, 0xFF	; 255
    32f6:	87 e7       	ldi	r24, 0x77	; 119
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 a4 32 	call	0x6548	; 0x6548 <HAL_UART_TRANSMIT>
    32fe:	41 e0       	ldi	r20, 0x01	; 1
    3300:	50 e0       	ldi	r21, 0x00	; 0
    3302:	be 01       	movw	r22, r28
    3304:	6f 5f       	subi	r22, 0xFF	; 255
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	87 e7       	ldi	r24, 0x77	; 119
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	0e 94 a4 32 	call	0x6548	; 0x6548 <HAL_UART_TRANSMIT>
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	df 91       	pop	r29
    331a:	cf 91       	pop	r28
    331c:	08 95       	ret

0000331e <App_Get_Command>:
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	6e 97       	sbiw	r28, 0x1e	; 30
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	8a e0       	ldi	r24, 0x0A	; 10
    3338:	fe 01       	movw	r30, r28
    333a:	31 96       	adiw	r30, 0x01	; 1
    333c:	df 01       	movw	r26, r30
    333e:	98 2f       	mov	r25, r24
    3340:	1d 92       	st	X+, r1
    3342:	9a 95       	dec	r25
    3344:	e9 f7       	brne	.-6      	; 0x3340 <App_Get_Command+0x22>
    3346:	3a 96       	adiw	r30, 0x0a	; 10
    3348:	df 01       	movw	r26, r30
    334a:	98 2f       	mov	r25, r24
    334c:	1d 92       	st	X+, r1
    334e:	9a 95       	dec	r25
    3350:	e9 f7       	brne	.-6      	; 0x334c <App_Get_Command+0x2e>
    3352:	3a 96       	adiw	r30, 0x0a	; 10
    3354:	df 01       	movw	r26, r30
    3356:	1d 92       	st	X+, r1
    3358:	8a 95       	dec	r24
    335a:	e9 f7       	brne	.-6      	; 0x3356 <App_Get_Command+0x38>
    335c:	61 e0       	ldi	r22, 0x01	; 1
    335e:	81 e7       	ldi	r24, 0x71	; 113
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <Button_Read>
    3366:	81 11       	cpse	r24, r1
    3368:	83 c0       	rjmp	.+262    	; 0x3470 <App_Get_Command+0x152>
    336a:	8e 01       	movw	r16, r28
    336c:	05 5f       	subi	r16, 0xF5	; 245
    336e:	1f 4f       	sbci	r17, 0xFF	; 255
    3370:	be 01       	movw	r22, r28
    3372:	6f 5f       	subi	r22, 0xFF	; 255
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	c8 01       	movw	r24, r16
    3378:	0e 94 a0 28 	call	0x5140	; 0x5140 <SERVER_ADMIN_Get_Pass>
    337c:	1f 93       	push	r17
    337e:	0f 93       	push	r16
    3380:	86 e0       	ldi	r24, 0x06	; 6
    3382:	91 e0       	ldi	r25, 0x01	; 1
    3384:	9f 93       	push	r25
    3386:	8f 93       	push	r24
    3388:	0e 94 88 37 	call	0x6f10	; 0x6f10 <printf>
    338c:	86 e2       	ldi	r24, 0x26	; 38
    338e:	94 e0       	ldi	r25, 0x04	; 4
    3390:	9f 93       	push	r25
    3392:	8f 93       	push	r24
    3394:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3398:	80 ef       	ldi	r24, 0xF0	; 240
    339a:	93 e0       	ldi	r25, 0x03	; 3
    339c:	9f 93       	push	r25
    339e:	8f 93       	push	r24
    33a0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    33a4:	8a eb       	ldi	r24, 0xBA	; 186
    33a6:	93 e0       	ldi	r25, 0x03	; 3
    33a8:	9f 93       	push	r25
    33aa:	8f 93       	push	r24
    33ac:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    33b0:	87 eb       	ldi	r24, 0xB7	; 183
    33b2:	93 e0       	ldi	r25, 0x03	; 3
    33b4:	9f 93       	push	r25
    33b6:	8f 93       	push	r24
    33b8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    33bc:	ce 01       	movw	r24, r28
    33be:	45 96       	adiw	r24, 0x15	; 21
    33c0:	2a e0       	ldi	r18, 0x0A	; 10
    33c2:	fc 01       	movw	r30, r24
    33c4:	11 92       	st	Z+, r1
    33c6:	2a 95       	dec	r18
    33c8:	e9 f7       	brne	.-6      	; 0x33c4 <App_Get_Command+0xa6>
    33ca:	6a e0       	ldi	r22, 0x0A	; 10
    33cc:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	22 c0       	rjmp	.+68     	; 0x3420 <App_Get_Command+0x102>
    33dc:	81 e8       	ldi	r24, 0x81	; 129
    33de:	93 e0       	ldi	r25, 0x03	; 3
    33e0:	9f 93       	push	r25
    33e2:	8f 93       	push	r24
    33e4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    33e8:	8b e4       	ldi	r24, 0x4B	; 75
    33ea:	93 e0       	ldi	r25, 0x03	; 3
    33ec:	9f 93       	push	r25
    33ee:	8f 93       	push	r24
    33f0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    33f4:	85 e1       	ldi	r24, 0x15	; 21
    33f6:	93 e0       	ldi	r25, 0x03	; 3
    33f8:	9f 93       	push	r25
    33fa:	8f 93       	push	r24
    33fc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3400:	82 e1       	ldi	r24, 0x12	; 18
    3402:	93 e0       	ldi	r25, 0x03	; 3
    3404:	9f 93       	push	r25
    3406:	8f 93       	push	r24
    3408:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    340c:	6a e0       	ldi	r22, 0x0A	; 10
    340e:	ce 01       	movw	r24, r28
    3410:	45 96       	adiw	r24, 0x15	; 21
    3412:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	be 01       	movw	r22, r28
    3422:	6b 5e       	subi	r22, 0xEB	; 235
    3424:	7f 4f       	sbci	r23, 0xFF	; 255
    3426:	ce 01       	movw	r24, r28
    3428:	01 96       	adiw	r24, 0x01	; 1
    342a:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <strcmp>
    342e:	89 2b       	or	r24, r25
    3430:	a9 f6       	brne	.-86     	; 0x33dc <App_Get_Command+0xbe>
    3432:	8c ed       	ldi	r24, 0xDC	; 220
    3434:	92 e0       	ldi	r25, 0x02	; 2
    3436:	9f 93       	push	r25
    3438:	8f 93       	push	r24
    343a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    343e:	87 ea       	ldi	r24, 0xA7	; 167
    3440:	92 e0       	ldi	r25, 0x02	; 2
    3442:	9f 93       	push	r25
    3444:	8f 93       	push	r24
    3446:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    344a:	81 e7       	ldi	r24, 0x71	; 113
    344c:	92 e0       	ldi	r25, 0x02	; 2
    344e:	9f 93       	push	r25
    3450:	8f 93       	push	r24
    3452:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3456:	8e e6       	ldi	r24, 0x6E	; 110
    3458:	92 e0       	ldi	r25, 0x02	; 2
    345a:	9f 93       	push	r25
    345c:	8f 93       	push	r24
    345e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	1e c0       	rjmp	.+60     	; 0x34ac <App_Get_Command+0x18e>
    3470:	88 e3       	ldi	r24, 0x38	; 56
    3472:	92 e0       	ldi	r25, 0x02	; 2
    3474:	9f 93       	push	r25
    3476:	8f 93       	push	r24
    3478:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	92 e0       	ldi	r25, 0x02	; 2
    3480:	9f 93       	push	r25
    3482:	8f 93       	push	r24
    3484:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3488:	8c ec       	ldi	r24, 0xCC	; 204
    348a:	91 e0       	ldi	r25, 0x01	; 1
    348c:	9f 93       	push	r25
    348e:	8f 93       	push	r24
    3490:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3494:	89 ec       	ldi	r24, 0xC9	; 201
    3496:	91 e0       	ldi	r25, 0x01	; 1
    3498:	9f 93       	push	r25
    349a:	8f 93       	push	r24
    349c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	80 e0       	ldi	r24, 0x00	; 0
    34ac:	6e 96       	adiw	r28, 0x1e	; 30
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	df 91       	pop	r29
    34ba:	cf 91       	pop	r28
    34bc:	1f 91       	pop	r17
    34be:	0f 91       	pop	r16
    34c0:	08 95       	ret

000034c2 <APP_UPdate>:
    34c2:	86 eb       	ldi	r24, 0xB6	; 182
    34c4:	91 e3       	ldi	r25, 0x31	; 49
    34c6:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    34ca:	ac 01       	movw	r20, r24
    34cc:	61 e0       	ldi	r22, 0x01	; 1
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
    34d4:	8a ec       	ldi	r24, 0xCA	; 202
    34d6:	91 e3       	ldi	r25, 0x31	; 49
    34d8:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    34dc:	ac 01       	movw	r20, r24
    34de:	61 e0       	ldi	r22, 0x01	; 1
    34e0:	82 e0       	ldi	r24, 0x02	; 2
    34e2:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
    34e6:	83 e9       	ldi	r24, 0x93	; 147
    34e8:	91 e0       	ldi	r25, 0x01	; 1
    34ea:	9f 93       	push	r25
    34ec:	8f 93       	push	r24
    34ee:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    34f2:	8f e7       	ldi	r24, 0x7F	; 127
    34f4:	91 e0       	ldi	r25, 0x01	; 1
    34f6:	9f 93       	push	r25
    34f8:	8f 93       	push	r24
    34fa:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    34fe:	86 eb       	ldi	r24, 0xB6	; 182
    3500:	91 e3       	ldi	r25, 0x31	; 49
    3502:	9f 93       	push	r25
    3504:	8f 93       	push	r24
    3506:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    350a:	8a e6       	ldi	r24, 0x6A	; 106
    350c:	91 e0       	ldi	r25, 0x01	; 1
    350e:	9f 93       	push	r25
    3510:	8f 93       	push	r24
    3512:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3516:	85 e5       	ldi	r24, 0x55	; 85
    3518:	91 e0       	ldi	r25, 0x01	; 1
    351a:	9f 93       	push	r25
    351c:	8f 93       	push	r24
    351e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3522:	8a ec       	ldi	r24, 0xCA	; 202
    3524:	91 e3       	ldi	r25, 0x31	; 49
    3526:	9f 93       	push	r25
    3528:	8f 93       	push	r24
    352a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    352e:	82 e4       	ldi	r24, 0x42	; 66
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	9f 93       	push	r25
    3534:	8f 93       	push	r24
    3536:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    353a:	8c e0       	ldi	r24, 0x0C	; 12
    353c:	91 e0       	ldi	r25, 0x01	; 1
    353e:	9f 93       	push	r25
    3540:	8f 93       	push	r24
    3542:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3546:	89 e0       	ldi	r24, 0x09	; 9
    3548:	91 e0       	ldi	r25, 0x01	; 1
    354a:	9f 93       	push	r25
    354c:	8f 93       	push	r24
    354e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3552:	2f ef       	ldi	r18, 0xFF	; 255
    3554:	3d e3       	ldi	r19, 0x3D	; 61
    3556:	89 e4       	ldi	r24, 0x49	; 73
    3558:	21 50       	subi	r18, 0x01	; 1
    355a:	30 40       	sbci	r19, 0x00	; 0
    355c:	80 40       	sbci	r24, 0x00	; 0
    355e:	e1 f7       	brne	.-8      	; 0x3558 <APP_UPdate+0x96>
    3560:	00 c0       	rjmp	.+0      	; 0x3562 <APP_UPdate+0xa0>
    3562:	00 00       	nop
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
    356a:	4c e1       	ldi	r20, 0x1C	; 28
    356c:	51 e0       	ldi	r21, 0x01	; 1
    356e:	65 e0       	ldi	r22, 0x05	; 5
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
    3576:	83 ed       	ldi	r24, 0xD3	; 211
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9f 93       	push	r25
    357c:	8f 93       	push	r24
    357e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3582:	8d e9       	ldi	r24, 0x9D	; 157
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	9f 93       	push	r25
    3588:	8f 93       	push	r24
    358a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    358e:	87 e6       	ldi	r24, 0x67	; 103
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	9f 93       	push	r25
    3594:	8f 93       	push	r24
    3596:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    359a:	84 e6       	ldi	r24, 0x64	; 100
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	9f 93       	push	r25
    35a0:	8f 93       	push	r24
    35a2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    35a6:	9f ef       	ldi	r25, 0xFF	; 255
    35a8:	2d e3       	ldi	r18, 0x3D	; 61
    35aa:	39 e4       	ldi	r19, 0x49	; 73
    35ac:	91 50       	subi	r25, 0x01	; 1
    35ae:	20 40       	sbci	r18, 0x00	; 0
    35b0:	30 40       	sbci	r19, 0x00	; 0
    35b2:	e1 f7       	brne	.-8      	; 0x35ac <APP_UPdate+0xea>
    35b4:	00 c0       	rjmp	.+0      	; 0x35b6 <APP_UPdate+0xf4>
    35b6:	00 00       	nop
    35b8:	81 e0       	ldi	r24, 0x01	; 1
    35ba:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
    35be:	0e 94 8f 19 	call	0x331e	; 0x331e <App_Get_Command>
    35c2:	2d b7       	in	r18, 0x3d	; 61
    35c4:	3e b7       	in	r19, 0x3e	; 62
    35c6:	26 5e       	subi	r18, 0xE6	; 230
    35c8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	3e bf       	out	0x3e, r19	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	2d bf       	out	0x3d, r18	; 61
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	11 f4       	brne	.+4      	; 0x35dc <APP_UPdate+0x11a>
    35d8:	0e 94 be 21 	call	0x437c	; 0x437c <ATM_Programming_mode>
    35dc:	78 94       	sei
    35de:	87 e6       	ldi	r24, 0x67	; 103
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0e 94 37 31 	call	0x626e	; 0x626e <TIM_Start>
    35e6:	0e 94 32 29 	call	0x5264	; 0x5264 <SERVER_ADMIN_Error_Get>
    35ea:	81 11       	cpse	r24, r1
    35ec:	03 c0       	rjmp	.+6      	; 0x35f4 <APP_UPdate+0x132>
    35ee:	0e 94 36 23 	call	0x466c	; 0x466c <ATM_Operation_mode>
    35f2:	f4 cf       	rjmp	.-24     	; 0x35dc <APP_UPdate+0x11a>
    35f4:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <ATM_Lock_Fun>
    35f8:	f1 cf       	rjmp	.-30     	; 0x35dc <APP_UPdate+0x11a>

000035fa <ATM_Buttons_GPIO_Init>:
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <ATM_Buttons_GPIO_Init+0x6>
    3600:	1f 92       	push	r1
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	80 e8       	ldi	r24, 0x80	; 128
    3608:	89 83       	std	Y+1, r24	; 0x01
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	8a 83       	std	Y+2, r24	; 0x02
    360e:	8b 83       	std	Y+3, r24	; 0x03
    3610:	be 01       	movw	r22, r28
    3612:	6f 5f       	subi	r22, 0xFF	; 255
    3614:	7f 4f       	sbci	r23, 0xFF	; 255
    3616:	80 e3       	ldi	r24, 0x30	; 48
    3618:	90 e0       	ldi	r25, 0x00	; 0
    361a:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
    361e:	88 e0       	ldi	r24, 0x08	; 8
    3620:	89 83       	std	Y+1, r24	; 0x01
    3622:	be 01       	movw	r22, r28
    3624:	6f 5f       	subi	r22, 0xFF	; 255
    3626:	7f 4f       	sbci	r23, 0xFF	; 255
    3628:	80 e3       	ldi	r24, 0x30	; 48
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
    3630:	81 e7       	ldi	r24, 0x71	; 113
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <Button_Init>
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	0f 90       	pop	r0
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	08 95       	ret

00003644 <APP_Init>:
    3644:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <Motor_Init>
    3648:	0e 94 36 2c 	call	0x586c	; 0x586c <Motor_Start>
    364c:	8b eb       	ldi	r24, 0xBB	; 187
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	0e 94 69 29 	call	0x52d2	; 0x52d2 <KeyPad_Initialization>
    3654:	0e 94 0b 2b 	call	0x5616	; 0x5616 <LCD_Initializaion>
    3658:	86 e9       	ldi	r24, 0x96	; 150
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <I2C_Init>
    3660:	0e 94 ae 2c 	call	0x595c	; 0x595c <EEPROM_Init>
    3664:	88 e8       	ldi	r24, 0x88	; 136
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <HAL_SPI_Init>
    366c:	87 e7       	ldi	r24, 0x77	; 119
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <HAL_UART_Init>
    3674:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <ATM_Buttons_GPIO_Init>
    3678:	87 e6       	ldi	r24, 0x67	; 103
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <TIM_NormalModeInit>
    3680:	6b e6       	ldi	r22, 0x6B	; 107
    3682:	79 e1       	ldi	r23, 0x19	; 25
    3684:	84 e0       	ldi	r24, 0x04	; 4
    3686:	0e 94 21 32 	call	0x6442	; 0x6442 <TIM_CallBack_FuctionSet>
    368a:	80 e6       	ldi	r24, 0x60	; 96
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <ADC_Init>
    3692:	f8 94       	cli
    3694:	89 b7       	in	r24, 0x39	; 57
    3696:	84 60       	ori	r24, 0x04	; 4
    3698:	89 bf       	out	0x39, r24	; 57
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	80 e6       	ldi	r24, 0x60	; 96
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	0e 94 5c 2e 	call	0x5cb8	; 0x5cb8 <ADC_Get_Value_IT>
    36a4:	8d ee       	ldi	r24, 0xED	; 237
    36a6:	91 e0       	ldi	r25, 0x01	; 1
    36a8:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <SERVER_ADMIN_Get_Temp>
    36ac:	8d ee       	ldi	r24, 0xED	; 237
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <atoi>
    36b4:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
    36b8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
    36bc:	01 96       	adiw	r24, 0x01	; 1
    36be:	31 f4       	brne	.+12     	; 0x36cc <APP_Init+0x88>
    36c0:	82 e3       	ldi	r24, 0x32	; 50
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__data_end+0x1>
    36c8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
    36cc:	8f e9       	ldi	r24, 0x9F	; 159
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <__iob+0x3>
    36d4:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <__iob+0x2>
    36d8:	08 95       	ret

000036da <__vector_9>:
	
	
}

ISR(TIMER1_OVF_vect)
{
    36da:	1f 92       	push	r1
    36dc:	0f 92       	push	r0
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	0f 92       	push	r0
    36e2:	11 24       	eor	r1, r1
    36e4:	0f 90       	pop	r0
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	0f 90       	pop	r0
    36ea:	1f 90       	pop	r1
    36ec:	18 95       	reti

000036ee <ATM_Get_UserCommand>:




uint8_t ATM_Get_UserCommand(void)
{
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	1f 92       	push	r1
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t command = 0; 	
    36f8:	19 82       	std	Y+1, r1	; 0x01
	printf_P(PSTR("*******************************************************************************************\n"	));
    36fa:	82 eb       	ldi	r24, 0xB2	; 178
    36fc:	9c e1       	ldi	r25, 0x1C	; 28
    36fe:	9f 93       	push	r25
    3700:	8f 93       	push	r24
    3702:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*********************** Please Choose one of the following Commands ***********************\n" ));
    3706:	85 e5       	ldi	r24, 0x55	; 85
    3708:	9c e1       	ldi	r25, 0x1C	; 28
    370a:	9f 93       	push	r25
    370c:	8f 93       	push	r24
    370e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*******************************************************************************************\n" ));
    3712:	88 ef       	ldi	r24, 0xF8	; 248
    3714:	9b e1       	ldi	r25, 0x1B	; 27
    3716:	9f 93       	push	r25
    3718:	8f 93       	push	r24
    371a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************ 1- Add Card	 *****************************************************\n" ));
    371e:	8b e9       	ldi	r24, 0x9B	; 155
    3720:	9b e1       	ldi	r25, 0x1B	; 27
    3722:	9f 93       	push	r25
    3724:	8f 93       	push	r24
    3726:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************ 2- Remove Card   *************************************************\n" ));
    372a:	8e e3       	ldi	r24, 0x3E	; 62
    372c:	9b e1       	ldi	r25, 0x1B	; 27
    372e:	9f 93       	push	r25
    3730:	8f 93       	push	r24
    3732:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************ 3- Search For Card With PAN **************************************\n" ));
    3736:	81 ee       	ldi	r24, 0xE1	; 225
    3738:	9a e1       	ldi	r25, 0x1A	; 26
    373a:	9f 93       	push	r25
    373c:	8f 93       	push	r24
    373e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************ 4- Search With Card Holder Name **********************************\n" ));
    3742:	84 e8       	ldi	r24, 0x84	; 132
    3744:	9a e1       	ldi	r25, 0x1A	; 26
    3746:	9f 93       	push	r25
    3748:	8f 93       	push	r24
    374a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************ 5- Total NUM of Current CARDs ************************************\n" ));
    374e:	87 e2       	ldi	r24, 0x27	; 39
    3750:	9a e1       	ldi	r25, 0x1A	; 26
    3752:	9f 93       	push	r25
    3754:	8f 93       	push	r24
    3756:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************ 6- Reset Data Base ***********************************************\n" ));
    375a:	8a ec       	ldi	r24, 0xCA	; 202
    375c:	99 e1       	ldi	r25, 0x19	; 25
    375e:	9f 93       	push	r25
    3760:	8f 93       	push	r24
    3762:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************ 7- Admin Modify Data *********************************************\n" ));
    3766:	8d e6       	ldi	r24, 0x6D	; 109
    3768:	99 e1       	ldi	r25, 0x19	; 25
    376a:	9f 93       	push	r25
    376c:	8f 93       	push	r24
    376e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************ 8- Exit Programming mode *****************************************\n" ));
    3772:	80 e1       	ldi	r24, 0x10	; 16
    3774:	99 e1       	ldi	r25, 0x19	; 25
    3776:	9f 93       	push	r25
    3778:	8f 93       	push	r24
    377a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*******************************************************************************************\n" ));
    377e:	83 eb       	ldi	r24, 0xB3	; 179
    3780:	98 e1       	ldi	r25, 0x18	; 24
    3782:	9f 93       	push	r25
    3784:	8f 93       	push	r24
    3786:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("************************************** END OF SELECTION !!!********************************\n" ));
    378a:	86 e5       	ldi	r24, 0x56	; 86
    378c:	98 e1       	ldi	r25, 0x18	; 24
    378e:	9f 93       	push	r25
    3790:	8f 93       	push	r24
    3792:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*******************************************************************************************\n"	));
    3796:	89 ef       	ldi	r24, 0xF9	; 249
    3798:	97 e1       	ldi	r25, 0x17	; 23
    379a:	9f 93       	push	r25
    379c:	8f 93       	push	r24
    379e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" \n" ));	
    37a2:	86 ef       	ldi	r24, 0xF6	; 246
    37a4:	97 e1       	ldi	r25, 0x17	; 23
    37a6:	9f 93       	push	r25
    37a8:	8f 93       	push	r24
    37aa:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>

	HAL_UART_RECEIVE(&UART_Handler , &command , 0x01) ;
    37ae:	41 e0       	ldi	r20, 0x01	; 1
    37b0:	50 e0       	ldi	r21, 0x00	; 0
    37b2:	be 01       	movw	r22, r28
    37b4:	6f 5f       	subi	r22, 0xFF	; 255
    37b6:	7f 4f       	sbci	r23, 0xFF	; 255
    37b8:	87 e7       	ldi	r24, 0x77	; 119
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	0e 94 c1 32 	call	0x6582	; 0x6582 <HAL_UART_RECEIVE>
	printf_P(PSTR("\n")) ;
    37c0:	84 ef       	ldi	r24, 0xF4	; 244
    37c2:	97 e1       	ldi	r25, 0x17	; 23
    37c4:	9f 93       	push	r25
    37c6:	8f 93       	push	r24
    37c8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	return command ; 
    37cc:	0f b6       	in	r0, 0x3f	; 63
    37ce:	f8 94       	cli
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	cd bf       	out	0x3d, r28	; 61
	
	

}
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	0f 90       	pop	r0
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	08 95       	ret

000037e0 <ATM_Collect_CardData>:
		while(1);
}


void ATM_Collect_CardData(CardData_t * CardData)
{
    37e0:	1f 93       	push	r17
    37e2:	cf 93       	push	r28
    37e4:	df 93       	push	r29
	uint8_t Flag = 0 ; 
	if (CardData == NULL)
    37e6:	00 97       	sbiw	r24, 0x00	; 0
    37e8:	09 f4       	brne	.+2      	; 0x37ec <ATM_Collect_CardData+0xc>
    37ea:	85 c0       	rjmp	.+266    	; 0x38f6 <ATM_Collect_CardData+0x116>
    37ec:	ec 01       	movw	r28, r24
    37ee:	10 e0       	ldi	r17, 0x00	; 0
    37f0:	7f c0       	rjmp	.+254    	; 0x38f0 <ATM_Collect_CardData+0x110>
		return ;
	}
	while(!Flag)
	{
		
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_SET);
    37f2:	41 e0       	ldi	r20, 0x01	; 1
    37f4:	68 e0       	ldi	r22, 0x08	; 8
    37f6:	80 e3       	ldi	r24, 0x30	; 48
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
		HAL_SPI_Recieve(&SPI_Handler ,(uint8_t*) CardData , 29) ;
    37fe:	4d e1       	ldi	r20, 0x1D	; 29
    3800:	50 e0       	ldi	r21, 0x00	; 0
    3802:	be 01       	movw	r22, r28
    3804:	88 e8       	ldi	r24, 0x88	; 136
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	0e 94 5d 30 	call	0x60ba	; 0x60ba <HAL_SPI_Recieve>
		if(strcmp((char * )CardData , "NOT READY" ) == 0 )
    380c:	65 e2       	ldi	r22, 0x25	; 37
    380e:	71 e0       	ldi	r23, 0x01	; 1
    3810:	ce 01       	movw	r24, r28
    3812:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <strcmp>
    3816:	89 2b       	or	r24, r25
    3818:	09 f0       	breq	.+2      	; 0x381c <ATM_Collect_CardData+0x3c>
    381a:	5a c0       	rjmp	.+180    	; 0x38d0 <ATM_Collect_CardData+0xf0>
		{
			printf_P(PSTR("************************************************\n"	));
    381c:	89 e8       	ldi	r24, 0x89	; 137
    381e:	96 e0       	ldi	r25, 0x06	; 6
    3820:	9f 93       	push	r25
    3822:	8f 93       	push	r24
    3824:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("******************    CARD    ******************\n" ));
    3828:	87 e5       	ldi	r24, 0x57	; 87
    382a:	96 e0       	ldi	r25, 0x06	; 6
    382c:	9f 93       	push	r25
    382e:	8f 93       	push	r24
    3830:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("******************  NOT READY ******************\n" ));
    3834:	85 e2       	ldi	r24, 0x25	; 37
    3836:	96 e0       	ldi	r25, 0x06	; 6
    3838:	9f 93       	push	r25
    383a:	8f 93       	push	r24
    383c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("************************************************\n"	));
    3840:	83 ef       	ldi	r24, 0xF3	; 243
    3842:	95 e0       	ldi	r25, 0x05	; 5
    3844:	9f 93       	push	r25
    3846:	8f 93       	push	r24
    3848:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR(" \n" ));
    384c:	80 ef       	ldi	r24, 0xF0	; 240
    384e:	95 e0       	ldi	r25, 0x05	; 5
    3850:	9f 93       	push	r25
    3852:	8f 93       	push	r24
    3854:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
			printf_P(PSTR("****************************************************\n"	));
    385e:	8a eb       	ldi	r24, 0xBA	; 186
    3860:	95 e0       	ldi	r25, 0x05	; 5
    3862:	9f 93       	push	r25
    3864:	8f 93       	push	r24
    3866:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("*****************  "));
    386a:	86 ea       	ldi	r24, 0xA6	; 166
    386c:	95 e0       	ldi	r25, 0x05	; 5
    386e:	9f 93       	push	r25
    3870:	8f 93       	push	r24
    3872:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P((char *)LCD_StrF[LCD_Print_CARD]);
    3876:	8a e1       	ldi	r24, 0x1A	; 26
    3878:	92 e3       	ldi	r25, 0x32	; 50
    387a:	9f 93       	push	r25
    387c:	8f 93       	push	r24
    387e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR(" ***************\n" ));
    3882:	84 e9       	ldi	r24, 0x94	; 148
    3884:	95 e0       	ldi	r25, 0x05	; 5
    3886:	9f 93       	push	r25
    3888:	8f 93       	push	r24
    388a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("*****************  "));
    388e:	80 e8       	ldi	r24, 0x80	; 128
    3890:	95 e0       	ldi	r25, 0x05	; 5
    3892:	9f 93       	push	r25
    3894:	8f 93       	push	r24
    3896:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P((char *)LCD_StrF[LCD_Print_NOT_READY]);
    389a:	8e e2       	ldi	r24, 0x2E	; 46
    389c:	92 e3       	ldi	r25, 0x32	; 50
    389e:	9f 93       	push	r25
    38a0:	8f 93       	push	r24
    38a2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR(" *************** \n" ));
    38a6:	8d e6       	ldi	r24, 0x6D	; 109
    38a8:	95 e0       	ldi	r25, 0x05	; 5
    38aa:	9f 93       	push	r25
    38ac:	8f 93       	push	r24
    38ae:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("****************************************************\n"	));		
    38b2:	87 e3       	ldi	r24, 0x37	; 55
    38b4:	95 e0       	ldi	r25, 0x05	; 5
    38b6:	9f 93       	push	r25
    38b8:	8f 93       	push	r24
    38ba:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    38be:	8d b7       	in	r24, 0x3d	; 61
    38c0:	9e b7       	in	r25, 0x3e	; 62
    38c2:	4a 96       	adiw	r24, 0x1a	; 26
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	f8 94       	cli
    38c8:	9e bf       	out	0x3e, r25	; 62
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	8d bf       	out	0x3d, r24	; 61
    38ce:	01 c0       	rjmp	.+2      	; 0x38d2 <ATM_Collect_CardData+0xf2>
		}
		else
		{
			Flag = 1;
    38d0:	11 e0       	ldi	r17, 0x01	; 1
		}
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_RESET);
    38d2:	40 e0       	ldi	r20, 0x00	; 0
    38d4:	68 e0       	ldi	r22, 0x08	; 8
    38d6:	80 e3       	ldi	r24, 0x30	; 48
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    38de:	9f ef       	ldi	r25, 0xFF	; 255
    38e0:	27 ea       	ldi	r18, 0xA7	; 167
    38e2:	81 e6       	ldi	r24, 0x61	; 97
    38e4:	91 50       	subi	r25, 0x01	; 1
    38e6:	20 40       	sbci	r18, 0x00	; 0
    38e8:	80 40       	sbci	r24, 0x00	; 0
    38ea:	e1 f7       	brne	.-8      	; 0x38e4 <ATM_Collect_CardData+0x104>
    38ec:	00 c0       	rjmp	.+0      	; 0x38ee <ATM_Collect_CardData+0x10e>
    38ee:	00 00       	nop
	uint8_t Flag = 0 ; 
	if (CardData == NULL)
	{
		return ;
	}
	while(!Flag)
    38f0:	11 23       	and	r17, r17
    38f2:	09 f4       	brne	.+2      	; 0x38f6 <ATM_Collect_CardData+0x116>
    38f4:	7e cf       	rjmp	.-260    	; 0x37f2 <ATM_Collect_CardData+0x12>
		}
		HAL_GPIO_WRITEPIN(GPIOD , GPIO_PIN_3, GPIO_PIN_RESET);
		_delay_ms(2000);
	}
	
}
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	08 95       	ret

000038fe <Print_F>:
 


uint8_t * Print_F(uint8_t const * const Str_F)
{
	if (Str_F == NULL)
    38fe:	00 97       	sbiw	r24, 0x00	; 0
    3900:	41 f0       	breq	.+16     	; 0x3912 <Print_F+0x14>
    3902:	bc 01       	movw	r22, r24
	{
		return NULL ;
	}
	static uint8_t Buffer_Ram[20] ;
	strcpy_P((char *)Buffer_Ram , (char*)Str_F);
    3904:	86 e8       	ldi	r24, 0x86	; 134
    3906:	91 e0       	ldi	r25, 0x01	; 1
    3908:	0e 94 39 37 	call	0x6e72	; 0x6e72 <strcpy_P>
	return Buffer_Ram ; 
    390c:	86 e8       	ldi	r24, 0x86	; 134
    390e:	91 e0       	ldi	r25, 0x01	; 1
    3910:	08 95       	ret

uint8_t * Print_F(uint8_t const * const Str_F)
{
	if (Str_F == NULL)
	{
		return NULL ;
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	90 e0       	ldi	r25, 0x00	; 0
	}
	static uint8_t Buffer_Ram[20] ;
	strcpy_P((char *)Buffer_Ram , (char*)Str_F);
	return Buffer_Ram ; 
}
    3916:	08 95       	ret

00003918 <ATM_Terminal_GetString>:


uint8_t ATM_Terminal_GetString(uint8_t * RxBuffer , uint8_t BufferSize )
{
    3918:	0f 93       	push	r16
    391a:	1f 93       	push	r17
    391c:	cf 93       	push	r28
    391e:	df 93       	push	r29
	if((RxBuffer == NULL)||(BufferSize == 0))	return -1 ;
    3920:	00 97       	sbiw	r24, 0x00	; 0
    3922:	91 f0       	breq	.+36     	; 0x3948 <ATM_Terminal_GetString+0x30>
    3924:	66 23       	and	r22, r22
    3926:	91 f0       	breq	.+36     	; 0x394c <ATM_Terminal_GetString+0x34>
    3928:	ec 01       	movw	r28, r24
	memset(RxBuffer , 0 , BufferSize);
    392a:	06 2f       	mov	r16, r22
    392c:	10 e0       	ldi	r17, 0x00	; 0
    392e:	a8 01       	movw	r20, r16
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	70 e0       	ldi	r23, 0x00	; 0
    3934:	0e 94 40 37 	call	0x6e80	; 0x6e80 <memset>
	HAL_UART_RECEIVE(&UART_Handler , RxBuffer , BufferSize);
    3938:	a8 01       	movw	r20, r16
    393a:	be 01       	movw	r22, r28
    393c:	87 e7       	ldi	r24, 0x77	; 119
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	0e 94 c1 32 	call	0x6582	; 0x6582 <HAL_UART_RECEIVE>
 
	
	return 0 ;
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	03 c0       	rjmp	.+6      	; 0x394e <ATM_Terminal_GetString+0x36>
}


uint8_t ATM_Terminal_GetString(uint8_t * RxBuffer , uint8_t BufferSize )
{
	if((RxBuffer == NULL)||(BufferSize == 0))	return -1 ;
    3948:	8f ef       	ldi	r24, 0xFF	; 255
    394a:	01 c0       	rjmp	.+2      	; 0x394e <ATM_Terminal_GetString+0x36>
    394c:	8f ef       	ldi	r24, 0xFF	; 255
	memset(RxBuffer , 0 , BufferSize);
	HAL_UART_RECEIVE(&UART_Handler , RxBuffer , BufferSize);
 
	
	return 0 ;
}
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	1f 91       	pop	r17
    3954:	0f 91       	pop	r16
    3956:	08 95       	ret

00003958 <ATM_Add_CardData>:
	

}

void ATM_Add_CardData(void)
{
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	cd b7       	in	r28, 0x3d	; 61
    3962:	de b7       	in	r29, 0x3e	; 62
    3964:	a3 97       	sbiw	r28, 0x23	; 35
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61
		uint8_t  flag = 0 ;
		CardData_t TempCard = {0};		
    3970:	8e 01       	movw	r16, r28
    3972:	0f 5f       	subi	r16, 0xFF	; 255
    3974:	1f 4f       	sbci	r17, 0xFF	; 255
    3976:	83 e2       	ldi	r24, 0x23	; 35
    3978:	f8 01       	movw	r30, r16
    397a:	11 92       	st	Z+, r1
    397c:	8a 95       	dec	r24
    397e:	e9 f7       	brne	.-6      	; 0x397a <ATM_Add_CardData+0x22>
				printf_P(PSTR("*************************************************\n"	));
    3980:	81 ec       	ldi	r24, 0xC1	; 193
    3982:	97 e1       	ldi	r25, 0x17	; 23
    3984:	9f 93       	push	r25
    3986:	8f 93       	push	r24
    3988:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******* Please enter Card Holder Name ***********\n" ));
    398c:	8e e8       	ldi	r24, 0x8E	; 142
    398e:	97 e1       	ldi	r25, 0x17	; 23
    3990:	9f 93       	push	r25
    3992:	8f 93       	push	r24
    3994:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3998:	8b e5       	ldi	r24, 0x5B	; 91
    399a:	97 e1       	ldi	r25, 0x17	; 23
    399c:	9f 93       	push	r25
    399e:	8f 93       	push	r24
    39a0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));					
    39a4:	88 e5       	ldi	r24, 0x58	; 88
    39a6:	97 e1       	ldi	r25, 0x17	; 23
    39a8:	9f 93       	push	r25
    39aa:	8f 93       	push	r24
    39ac:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN +1);
    39b0:	6b e0       	ldi	r22, 0x0B	; 11
    39b2:	c8 01       	movw	r24, r16
    39b4:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
				printf_P(PSTR("*************************************************\n"	));
    39b8:	85 e2       	ldi	r24, 0x25	; 37
    39ba:	97 e1       	ldi	r25, 0x17	; 23
    39bc:	9f 93       	push	r25
    39be:	8f 93       	push	r24
    39c0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*********** Please enter Card PAN  : ************\n" ));
    39c4:	82 ef       	ldi	r24, 0xF2	; 242
    39c6:	96 e1       	ldi	r25, 0x16	; 22
    39c8:	9f 93       	push	r25
    39ca:	8f 93       	push	r24
    39cc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    39d0:	8f eb       	ldi	r24, 0xBF	; 191
    39d2:	96 e1       	ldi	r25, 0x16	; 22
    39d4:	9f 93       	push	r25
    39d6:	8f 93       	push	r24
    39d8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    39dc:	8c eb       	ldi	r24, 0xBC	; 188
    39de:	96 e1       	ldi	r25, 0x16	; 22
    39e0:	9f 93       	push	r25
    39e2:	8f 93       	push	r24
    39e4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);
    39e8:	6b e0       	ldi	r22, 0x0B	; 11
    39ea:	ce 01       	movw	r24, r28
    39ec:	0c 96       	adiw	r24, 0x0c	; 12
    39ee:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
				printf_P(PSTR("*************************************************\n"	));
    39f2:	89 e8       	ldi	r24, 0x89	; 137
    39f4:	96 e1       	ldi	r25, 0x16	; 22
    39f6:	9f 93       	push	r25
    39f8:	8f 93       	push	r24
    39fa:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************ Please enter Card PIN : ************\n" ));
    39fe:	86 e5       	ldi	r24, 0x56	; 86
    3a00:	96 e1       	ldi	r25, 0x16	; 22
    3a02:	9f 93       	push	r25
    3a04:	8f 93       	push	r24
    3a06:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3a0a:	83 e2       	ldi	r24, 0x23	; 35
    3a0c:	96 e1       	ldi	r25, 0x16	; 22
    3a0e:	9f 93       	push	r25
    3a10:	8f 93       	push	r24
    3a12:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    3a16:	80 e2       	ldi	r24, 0x20	; 32
    3a18:	96 e1       	ldi	r25, 0x16	; 22
    3a1a:	9f 93       	push	r25
    3a1c:	8f 93       	push	r24
    3a1e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		ATM_Terminal_GetString(TempCard.CardPIN , CARD_PIN_LEN+1);
    3a22:	66 e0       	ldi	r22, 0x06	; 6
    3a24:	ce 01       	movw	r24, r28
    3a26:	47 96       	adiw	r24, 0x17	; 23
    3a28:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
				printf_P(PSTR("*************************************************\n"	));
    3a2c:	8d ee       	ldi	r24, 0xED	; 237
    3a2e:	95 e1       	ldi	r25, 0x15	; 21
    3a30:	9f 93       	push	r25
    3a32:	8f 93       	push	r24
    3a34:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******* Please enter Card Total Balance**********\n" ));
    3a38:	8a eb       	ldi	r24, 0xBA	; 186
    3a3a:	95 e1       	ldi	r25, 0x15	; 21
    3a3c:	9f 93       	push	r25
    3a3e:	8f 93       	push	r24
    3a40:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3a44:	87 e8       	ldi	r24, 0x87	; 135
    3a46:	95 e1       	ldi	r25, 0x15	; 21
    3a48:	9f 93       	push	r25
    3a4a:	8f 93       	push	r24
    3a4c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("\n" ));
    3a50:	85 e8       	ldi	r24, 0x85	; 133
    3a52:	95 e1       	ldi	r25, 0x15	; 21
    3a54:	9f 93       	push	r25
    3a56:	8f 93       	push	r24
    3a58:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		ATM_Terminal_GetString(TempCard.CardBalance , CARD_BALANCE_LEN+1);	
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	de bf       	out	0x3e, r29	; 62
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	67 e0       	ldi	r22, 0x07	; 7
    3a68:	ce 01       	movw	r24, r28
    3a6a:	4d 96       	adiw	r24, 0x1d	; 29
    3a6c:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
		/********************************************************
		*					Add Card Data	to SERVER			*
		********************************************************/						
		flag = SERVER_OPER_Add_CARD(&TempCard);
    3a70:	c8 01       	movw	r24, r16
    3a72:	0e 94 d4 27 	call	0x4fa8	; 0x4fa8 <SERVER_OPER_Add_CARD>
				
		if (flag == SERVER_OPER_OK ) // if SERVER returned with Success operation 
    3a76:	81 11       	cpse	r24, r1
    3a78:	1e c0       	rjmp	.+60     	; 0x3ab6 <ATM_Add_CardData+0x15e>
		{
				printf_P(PSTR("*************************************************\n"	));
    3a7a:	82 e5       	ldi	r24, 0x52	; 82
    3a7c:	95 e1       	ldi	r25, 0x15	; 21
    3a7e:	9f 93       	push	r25
    3a80:	8f 93       	push	r24
    3a82:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("****** Great a new Card added successfully ******\n" ));
    3a86:	8f e1       	ldi	r24, 0x1F	; 31
    3a88:	95 e1       	ldi	r25, 0x15	; 21
    3a8a:	9f 93       	push	r25
    3a8c:	8f 93       	push	r24
    3a8e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3a92:	8c ee       	ldi	r24, 0xEC	; 236
    3a94:	94 e1       	ldi	r25, 0x14	; 20
    3a96:	9f 93       	push	r25
    3a98:	8f 93       	push	r24
    3a9a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));			
    3a9e:	89 ee       	ldi	r24, 0xE9	; 233
    3aa0:	94 e1       	ldi	r25, 0x14	; 20
    3aa2:	9f 93       	push	r25
    3aa4:	8f 93       	push	r24
    3aa6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	cd bf       	out	0x3d, r28	; 61
    3ab4:	3d c0       	rjmp	.+122    	; 0x3b30 <ATM_Add_CardData+0x1d8>
		}
		else if (flag == SERVER_OPER_FullSpace)
    3ab6:	83 30       	cpi	r24, 0x03	; 3
    3ab8:	f1 f4       	brne	.+60     	; 0x3af6 <ATM_Add_CardData+0x19e>
		{
				printf_P(PSTR("*************************************************\n"	));
    3aba:	86 eb       	ldi	r24, 0xB6	; 182
    3abc:	94 e1       	ldi	r25, 0x14	; 20
    3abe:	9f 93       	push	r25
    3ac0:	8f 93       	push	r24
    3ac2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******** There is no enough space !!! ***********\n" ));
    3ac6:	83 e8       	ldi	r24, 0x83	; 131
    3ac8:	94 e1       	ldi	r25, 0x14	; 20
    3aca:	9f 93       	push	r25
    3acc:	8f 93       	push	r24
    3ace:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3ad2:	80 e5       	ldi	r24, 0x50	; 80
    3ad4:	94 e1       	ldi	r25, 0x14	; 20
    3ad6:	9f 93       	push	r25
    3ad8:	8f 93       	push	r24
    3ada:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    3ade:	8d e4       	ldi	r24, 0x4D	; 77
    3ae0:	94 e1       	ldi	r25, 0x14	; 20
    3ae2:	9f 93       	push	r25
    3ae4:	8f 93       	push	r24
    3ae6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3aea:	0f b6       	in	r0, 0x3f	; 63
    3aec:	f8 94       	cli
    3aee:	de bf       	out	0x3e, r29	; 62
    3af0:	0f be       	out	0x3f, r0	; 63
    3af2:	cd bf       	out	0x3d, r28	; 61
    3af4:	1d c0       	rjmp	.+58     	; 0x3b30 <ATM_Add_CardData+0x1d8>
		}else{
				printf_P(PSTR("*************************************************\n"	));
    3af6:	8a e1       	ldi	r24, 0x1A	; 26
    3af8:	94 e1       	ldi	r25, 0x14	; 20
    3afa:	9f 93       	push	r25
    3afc:	8f 93       	push	r24
    3afe:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("********* this card already exist !!! ***********\n" ));
    3b02:	87 ee       	ldi	r24, 0xE7	; 231
    3b04:	93 e1       	ldi	r25, 0x13	; 19
    3b06:	9f 93       	push	r25
    3b08:	8f 93       	push	r24
    3b0a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3b0e:	84 eb       	ldi	r24, 0xB4	; 180
    3b10:	93 e1       	ldi	r25, 0x13	; 19
    3b12:	9f 93       	push	r25
    3b14:	8f 93       	push	r24
    3b16:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    3b1a:	81 eb       	ldi	r24, 0xB1	; 177
    3b1c:	93 e1       	ldi	r25, 0x13	; 19
    3b1e:	9f 93       	push	r25
    3b20:	8f 93       	push	r24
    3b22:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
		}
				
}
    3b30:	a3 96       	adiw	r28, 0x23	; 35
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	cd bf       	out	0x3d, r28	; 61
    3b3c:	df 91       	pop	r29
    3b3e:	cf 91       	pop	r28
    3b40:	1f 91       	pop	r17
    3b42:	0f 91       	pop	r16
    3b44:	08 95       	ret

00003b46 <ATM_Remove_Card>:

void ATM_Remove_Card(void)
{
    3b46:	0f 93       	push	r16
    3b48:	1f 93       	push	r17
    3b4a:	cf 93       	push	r28
    3b4c:	df 93       	push	r29
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
    3b52:	a3 97       	sbiw	r28, 0x23	; 35
    3b54:	0f b6       	in	r0, 0x3f	; 63
    3b56:	f8 94       	cli
    3b58:	de bf       	out	0x3e, r29	; 62
    3b5a:	0f be       	out	0x3f, r0	; 63
    3b5c:	cd bf       	out	0x3d, r28	; 61
		CardData_t TempCard = {0};	
    3b5e:	8e 01       	movw	r16, r28
    3b60:	0f 5f       	subi	r16, 0xFF	; 255
    3b62:	1f 4f       	sbci	r17, 0xFF	; 255
    3b64:	83 e2       	ldi	r24, 0x23	; 35
    3b66:	f8 01       	movw	r30, r16
    3b68:	11 92       	st	Z+, r1
    3b6a:	8a 95       	dec	r24
    3b6c:	e9 f7       	brne	.-6      	; 0x3b68 <ATM_Remove_Card+0x22>
				printf_P(PSTR("*************************************************\n"	));
    3b6e:	8e e7       	ldi	r24, 0x7E	; 126
    3b70:	93 e1       	ldi	r25, 0x13	; 19
    3b72:	9f 93       	push	r25
    3b74:	8f 93       	push	r24
    3b76:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("********* Please enter Card PAN  : **************\n" ));
    3b7a:	8b e4       	ldi	r24, 0x4B	; 75
    3b7c:	93 e1       	ldi	r25, 0x13	; 19
    3b7e:	9f 93       	push	r25
    3b80:	8f 93       	push	r24
    3b82:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3b86:	88 e1       	ldi	r24, 0x18	; 24
    3b88:	93 e1       	ldi	r25, 0x13	; 19
    3b8a:	9f 93       	push	r25
    3b8c:	8f 93       	push	r24
    3b8e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    3b92:	85 e1       	ldi	r24, 0x15	; 21
    3b94:	93 e1       	ldi	r25, 0x13	; 19
    3b96:	9f 93       	push	r25
    3b98:	8f 93       	push	r24
    3b9a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);
    3b9e:	6b e0       	ldi	r22, 0x0B	; 11
    3ba0:	ce 01       	movw	r24, r28
    3ba2:	0c 96       	adiw	r24, 0x0c	; 12
    3ba4:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
				
		/********************************************************
		*				Search Card Data From DataBase			*
		********************************************************/ 
		if (SERVER_OPER_Remove_CARD(&TempCard)  == SERVER_OPER_OK ) // if Card data is exist 
    3ba8:	c8 01       	movw	r24, r16
    3baa:	0e 94 28 28 	call	0x5050	; 0x5050 <SERVER_OPER_Remove_CARD>
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	81 11       	cpse	r24, r1
    3bba:	1e c0       	rjmp	.+60     	; 0x3bf8 <ATM_Remove_Card+0xb2>
		{
				printf_P(PSTR("*************************************************\n"	));
    3bbc:	82 ee       	ldi	r24, 0xE2	; 226
    3bbe:	92 e1       	ldi	r25, 0x12	; 18
    3bc0:	9f 93       	push	r25
    3bc2:	8f 93       	push	r24
    3bc4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******* Wait Until remove this Card Data : ******\n" ));
    3bc8:	8f ea       	ldi	r24, 0xAF	; 175
    3bca:	92 e1       	ldi	r25, 0x12	; 18
    3bcc:	9f 93       	push	r25
    3bce:	8f 93       	push	r24
    3bd0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3bd4:	8c e7       	ldi	r24, 0x7C	; 124
    3bd6:	92 e1       	ldi	r25, 0x12	; 18
    3bd8:	9f 93       	push	r25
    3bda:	8f 93       	push	r24
    3bdc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));				
    3be0:	89 e7       	ldi	r24, 0x79	; 121
    3be2:	92 e1       	ldi	r25, 0x12	; 18
    3be4:	9f 93       	push	r25
    3be6:	8f 93       	push	r24
    3be8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	f8 94       	cli
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	cd bf       	out	0x3d, r28	; 61
    3bf6:	1d c0       	rjmp	.+58     	; 0x3c32 <ATM_Remove_Card+0xec>
		}else  // if  Card data dose not exist 
		{	
				printf_P(PSTR("*************************************************\n"	));
    3bf8:	86 e4       	ldi	r24, 0x46	; 70
    3bfa:	92 e1       	ldi	r25, 0x12	; 18
    3bfc:	9f 93       	push	r25
    3bfe:	8f 93       	push	r24
    3c00:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************ Not exist Card Data : **************\n" ));
    3c04:	83 e1       	ldi	r24, 0x13	; 19
    3c06:	92 e1       	ldi	r25, 0x12	; 18
    3c08:	9f 93       	push	r25
    3c0a:	8f 93       	push	r24
    3c0c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*************************************************\n"	));
    3c10:	80 ee       	ldi	r24, 0xE0	; 224
    3c12:	91 e1       	ldi	r25, 0x11	; 17
    3c14:	9f 93       	push	r25
    3c16:	8f 93       	push	r24
    3c18:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    3c1c:	8d ed       	ldi	r24, 0xDD	; 221
    3c1e:	91 e1       	ldi	r25, 0x11	; 17
    3c20:	9f 93       	push	r25
    3c22:	8f 93       	push	r24
    3c24:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	de bf       	out	0x3e, r29	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	cd bf       	out	0x3d, r28	; 61
		}

}
    3c32:	a3 96       	adiw	r28, 0x23	; 35
    3c34:	0f b6       	in	r0, 0x3f	; 63
    3c36:	f8 94       	cli
    3c38:	de bf       	out	0x3e, r29	; 62
    3c3a:	0f be       	out	0x3f, r0	; 63
    3c3c:	cd bf       	out	0x3d, r28	; 61
    3c3e:	df 91       	pop	r29
    3c40:	cf 91       	pop	r28
    3c42:	1f 91       	pop	r17
    3c44:	0f 91       	pop	r16
    3c46:	08 95       	ret

00003c48 <ATM_Search_Card_WithPAN>:


SERVER_OPER_Status_t ATM_Search_Card_WithPAN(void)
{
    3c48:	0f 93       	push	r16
    3c4a:	1f 93       	push	r17
    3c4c:	cf 93       	push	r28
    3c4e:	df 93       	push	r29
    3c50:	cd b7       	in	r28, 0x3d	; 61
    3c52:	de b7       	in	r29, 0x3e	; 62
    3c54:	a3 97       	sbiw	r28, 0x23	; 35
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
	CardData_t TempCard = {0};
    3c60:	8e 01       	movw	r16, r28
    3c62:	0f 5f       	subi	r16, 0xFF	; 255
    3c64:	1f 4f       	sbci	r17, 0xFF	; 255
    3c66:	83 e2       	ldi	r24, 0x23	; 35
    3c68:	f8 01       	movw	r30, r16
    3c6a:	11 92       	st	Z+, r1
    3c6c:	8a 95       	dec	r24
    3c6e:	e9 f7       	brne	.-6      	; 0x3c6a <ATM_Search_Card_WithPAN+0x22>
		printf_P(PSTR("*************************************************\n"	));
    3c70:	8a ea       	ldi	r24, 0xAA	; 170
    3c72:	91 e1       	ldi	r25, 0x11	; 17
    3c74:	9f 93       	push	r25
    3c76:	8f 93       	push	r24
    3c78:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************* Please enter Card PAN *************\n" ));
    3c7c:	87 e7       	ldi	r24, 0x77	; 119
    3c7e:	91 e1       	ldi	r25, 0x11	; 17
    3c80:	9f 93       	push	r25
    3c82:	8f 93       	push	r24
    3c84:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*************************************************\n"	));
    3c88:	84 e4       	ldi	r24, 0x44	; 68
    3c8a:	91 e1       	ldi	r25, 0x11	; 17
    3c8c:	9f 93       	push	r25
    3c8e:	8f 93       	push	r24
    3c90:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" \n" ));
    3c94:	81 e4       	ldi	r24, 0x41	; 65
    3c96:	91 e1       	ldi	r25, 0x11	; 17
    3c98:	9f 93       	push	r25
    3c9a:	8f 93       	push	r24
    3c9c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		ATM_Terminal_GetString(TempCard.CardPAN , CARD_PAN_LEN+1);
    3ca0:	6b e0       	ldi	r22, 0x0B	; 11
    3ca2:	ce 01       	movw	r24, r28
    3ca4:	0c 96       	adiw	r24, 0x0c	; 12
    3ca6:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
	// access SERVER here and return result
	if (SERVER_OPER_Search_CARD(&TempCard , ATM_SEARCH_BY_PAN)  != -1 ) // if data exist
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	c8 01       	movw	r24, r16
    3cae:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <SERVER_OPER_Search_CARD>
    3cb2:	0f b6       	in	r0, 0x3f	; 63
    3cb4:	f8 94       	cli
    3cb6:	de bf       	out	0x3e, r29	; 62
    3cb8:	0f be       	out	0x3f, r0	; 63
    3cba:	cd bf       	out	0x3d, r28	; 61
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	f9 f0       	breq	.+62     	; 0x3cfe <ATM_Search_Card_WithPAN+0xb6>
	{
		printf_P(PSTR("**********************************************\n"	));	
    3cc0:	81 e1       	ldi	r24, 0x11	; 17
    3cc2:	91 e1       	ldi	r25, 0x11	; 17
    3cc4:	9f 93       	push	r25
    3cc6:	8f 93       	push	r24
    3cc8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************ This card Is Exist **************\n" ));
    3ccc:	81 ee       	ldi	r24, 0xE1	; 225
    3cce:	90 e1       	ldi	r25, 0x10	; 16
    3cd0:	9f 93       	push	r25
    3cd2:	8f 93       	push	r24
    3cd4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("**********************************************\n"	));
    3cd8:	81 eb       	ldi	r24, 0xB1	; 177
    3cda:	90 e1       	ldi	r25, 0x10	; 16
    3cdc:	9f 93       	push	r25
    3cde:	8f 93       	push	r24
    3ce0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" \n" ));	
    3ce4:	8e ea       	ldi	r24, 0xAE	; 174
    3ce6:	90 e1       	ldi	r25, 0x10	; 16
    3ce8:	9f 93       	push	r25
    3cea:	8f 93       	push	r24
    3cec:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		return  SERVER_OPER_Exist ;
    3cf0:	0f b6       	in	r0, 0x3f	; 63
    3cf2:	f8 94       	cli
    3cf4:	de bf       	out	0x3e, r29	; 62
    3cf6:	0f be       	out	0x3f, r0	; 63
    3cf8:	cd bf       	out	0x3d, r28	; 61
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	1e c0       	rjmp	.+60     	; 0x3d3a <ATM_Search_Card_WithPAN+0xf2>
	}else  // if data dose not exist
	{
		printf_P(PSTR("************************************************\n"	));
    3cfe:	8c e7       	ldi	r24, 0x7C	; 124
    3d00:	90 e1       	ldi	r25, 0x10	; 16
    3d02:	9f 93       	push	r25
    3d04:	8f 93       	push	r24
    3d06:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************* Not exist Card Data  *************\n" ));
    3d0a:	8a e4       	ldi	r24, 0x4A	; 74
    3d0c:	90 e1       	ldi	r25, 0x10	; 16
    3d0e:	9f 93       	push	r25
    3d10:	8f 93       	push	r24
    3d12:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************************************\n"	));
    3d16:	88 e1       	ldi	r24, 0x18	; 24
    3d18:	90 e1       	ldi	r25, 0x10	; 16
    3d1a:	9f 93       	push	r25
    3d1c:	8f 93       	push	r24
    3d1e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" \n" ));
    3d22:	85 e1       	ldi	r24, 0x15	; 21
    3d24:	90 e1       	ldi	r25, 0x10	; 16
    3d26:	9f 93       	push	r25
    3d28:	8f 93       	push	r24
    3d2a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		return  SERVER_OPER_Not_Exist ;
    3d2e:	0f b6       	in	r0, 0x3f	; 63
    3d30:	f8 94       	cli
    3d32:	de bf       	out	0x3e, r29	; 62
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	cd bf       	out	0x3d, r28	; 61
    3d38:	82 e0       	ldi	r24, 0x02	; 2
	}
}
    3d3a:	a3 96       	adiw	r28, 0x23	; 35
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	f8 94       	cli
    3d40:	de bf       	out	0x3e, r29	; 62
    3d42:	0f be       	out	0x3f, r0	; 63
    3d44:	cd bf       	out	0x3d, r28	; 61
    3d46:	df 91       	pop	r29
    3d48:	cf 91       	pop	r28
    3d4a:	1f 91       	pop	r17
    3d4c:	0f 91       	pop	r16
    3d4e:	08 95       	ret

00003d50 <ATM_Search_Card_ByName>:

void ATM_Search_Card_ByName(void)
{
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
    3d5c:	a3 97       	sbiw	r28, 0x23	; 35
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	f8 94       	cli
    3d62:	de bf       	out	0x3e, r29	; 62
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	cd bf       	out	0x3d, r28	; 61
	CardData_t TempCard = {0};	
    3d68:	8e 01       	movw	r16, r28
    3d6a:	0f 5f       	subi	r16, 0xFF	; 255
    3d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6e:	83 e2       	ldi	r24, 0x23	; 35
    3d70:	f8 01       	movw	r30, r16
    3d72:	11 92       	st	Z+, r1
    3d74:	8a 95       	dec	r24
    3d76:	e9 f7       	brne	.-6      	; 0x3d72 <ATM_Search_Card_ByName+0x22>
		printf_P(PSTR("************************************************\n"	));
    3d78:	88 ea       	ldi	r24, 0xA8	; 168
    3d7a:	90 e3       	ldi	r25, 0x30	; 48
    3d7c:	9f 93       	push	r25
    3d7e:	8f 93       	push	r24
    3d80:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************* Please enter Card Name: **********\n" ));
    3d84:	86 e7       	ldi	r24, 0x76	; 118
    3d86:	90 e3       	ldi	r25, 0x30	; 48
    3d88:	9f 93       	push	r25
    3d8a:	8f 93       	push	r24
    3d8c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************************************\n"	));
    3d90:	84 e4       	ldi	r24, 0x44	; 68
    3d92:	90 e3       	ldi	r25, 0x30	; 48
    3d94:	9f 93       	push	r25
    3d96:	8f 93       	push	r24
    3d98:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" \n" ));
    3d9c:	81 e4       	ldi	r24, 0x41	; 65
    3d9e:	90 e3       	ldi	r25, 0x30	; 48
    3da0:	9f 93       	push	r25
    3da2:	8f 93       	push	r24
    3da4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    3da8:	6a e0       	ldi	r22, 0x0A	; 10
    3daa:	c8 01       	movw	r24, r16
    3dac:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
	// access SERVER here and return result
	if (SERVER_OPER_Search_CARD(&TempCard , ATM_SEARCH_BY_NAME)  != -1 ) // if card data is exist
    3db0:	61 e0       	ldi	r22, 0x01	; 1
    3db2:	c8 01       	movw	r24, r16
    3db4:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <SERVER_OPER_Search_CARD>
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	f8 94       	cli
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	cd bf       	out	0x3d, r28	; 61
    3dc2:	01 96       	adiw	r24, 0x01	; 1
    3dc4:	f1 f0       	breq	.+60     	; 0x3e02 <ATM_Search_Card_ByName+0xb2>
	{
		printf_P(PSTR("************************************************\n"	));
    3dc6:	8f e0       	ldi	r24, 0x0F	; 15
    3dc8:	90 e3       	ldi	r25, 0x30	; 48
    3dca:	9f 93       	push	r25
    3dcc:	8f 93       	push	r24
    3dce:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************* This card  Is Exist **************\n" ));
    3dd2:	8d ed       	ldi	r24, 0xDD	; 221
    3dd4:	9f e2       	ldi	r25, 0x2F	; 47
    3dd6:	9f 93       	push	r25
    3dd8:	8f 93       	push	r24
    3dda:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************************************\n"	));
    3dde:	8b ea       	ldi	r24, 0xAB	; 171
    3de0:	9f e2       	ldi	r25, 0x2F	; 47
    3de2:	9f 93       	push	r25
    3de4:	8f 93       	push	r24
    3de6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" \n" ));
    3dea:	88 ea       	ldi	r24, 0xA8	; 168
    3dec:	9f e2       	ldi	r25, 0x2F	; 47
    3dee:	9f 93       	push	r25
    3df0:	8f 93       	push	r24
    3df2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	de bf       	out	0x3e, r29	; 62
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	cd bf       	out	0x3d, r28	; 61
    3e00:	1d c0       	rjmp	.+58     	; 0x3e3c <ATM_Search_Card_ByName+0xec>
	}else  // if data dose is not exist
	{
		printf_P(PSTR("************************************************\n"	));
    3e02:	86 e7       	ldi	r24, 0x76	; 118
    3e04:	9f e2       	ldi	r25, 0x2F	; 47
    3e06:	9f 93       	push	r25
    3e08:	8f 93       	push	r24
    3e0a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************* This card Is not Exist ***********\n" ));
    3e0e:	84 e4       	ldi	r24, 0x44	; 68
    3e10:	9f e2       	ldi	r25, 0x2F	; 47
    3e12:	9f 93       	push	r25
    3e14:	8f 93       	push	r24
    3e16:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************************************\n"	));
    3e1a:	82 e1       	ldi	r24, 0x12	; 18
    3e1c:	9f e2       	ldi	r25, 0x2F	; 47
    3e1e:	9f 93       	push	r25
    3e20:	8f 93       	push	r24
    3e22:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" \n" ));
    3e26:	8f e0       	ldi	r24, 0x0F	; 15
    3e28:	9f e2       	ldi	r25, 0x2F	; 47
    3e2a:	9f 93       	push	r25
    3e2c:	8f 93       	push	r24
    3e2e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
	}
}
    3e3c:	a3 96       	adiw	r28, 0x23	; 35
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	cd bf       	out	0x3d, r28	; 61
    3e48:	df 91       	pop	r29
    3e4a:	cf 91       	pop	r28
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	08 95       	ret

00003e52 <ATM_Admin_Modifying_Data>:



void ATM_Admin_Modifying_Data(void)
{
    3e52:	1f 93       	push	r17
    3e54:	cf 93       	push	r28
    3e56:	df 93       	push	r29
    3e58:	cd b7       	in	r28, 0x3d	; 61
    3e5a:	de b7       	in	r29, 0x3e	; 62
    3e5c:	ae 97       	sbiw	r28, 0x2e	; 46
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	de bf       	out	0x3e, r29	; 62
    3e64:	0f be       	out	0x3f, r0	; 63
    3e66:	cd bf       	out	0x3d, r28	; 61
	uint8_t ExitFlag = 0 , command =0  ;
    3e68:	19 82       	std	Y+1, r1	; 0x01
	CardData_t TempCard = {0};
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	32 96       	adiw	r30, 0x02	; 2
    3e6e:	83 e2       	ldi	r24, 0x23	; 35
    3e70:	df 01       	movw	r26, r30
    3e72:	1d 92       	st	X+, r1
    3e74:	8a 95       	dec	r24
    3e76:	e9 f7       	brne	.-6      	; 0x3e72 <ATM_Admin_Modifying_Data+0x20>



void ATM_Admin_Modifying_Data(void)
{
	uint8_t ExitFlag = 0 , command =0  ;
    3e78:	10 e0       	ldi	r17, 0x00	; 0
	CardData_t TempCard = {0};
	uint8_t MaxDailyWithDraw[MaxDailyWithDraw_Size]  ;
	while(!ExitFlag)
    3e7a:	73 c2       	rjmp	.+1254   	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
	{

		printf_P(PSTR("*******************************************************************************************\n"));
    3e7c:	82 eb       	ldi	r24, 0xB2	; 178
    3e7e:	9e e2       	ldi	r25, 0x2E	; 46
    3e80:	9f 93       	push	r25
    3e82:	8f 93       	push	r24
    3e84:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*********************** Please Choose one of the following Commands ***********************\n" ));
    3e88:	85 e5       	ldi	r24, 0x55	; 85
    3e8a:	9e e2       	ldi	r25, 0x2E	; 46
    3e8c:	9f 93       	push	r25
    3e8e:	8f 93       	push	r24
    3e90:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*******************************************************************************************\n" ));
    3e94:	88 ef       	ldi	r24, 0xF8	; 248
    3e96:	9d e2       	ldi	r25, 0x2D	; 45
    3e98:	9f 93       	push	r25
    3e9a:	8f 93       	push	r24
    3e9c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************ 1- Set Admin Password and Name ***********************************\n" ));
    3ea0:	8b e9       	ldi	r24, 0x9B	; 155
    3ea2:	9d e2       	ldi	r25, 0x2D	; 45
    3ea4:	9f 93       	push	r25
    3ea6:	8f 93       	push	r24
    3ea8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************ 2- Set Admin Maximum Temperature *********************************\n" ));
    3eac:	8e e3       	ldi	r24, 0x3E	; 62
    3eae:	9d e2       	ldi	r25, 0x2D	; 45
    3eb0:	9f 93       	push	r25
    3eb2:	8f 93       	push	r24
    3eb4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************ 3- Clear Error Flag **********************************************\n" ));
    3eb8:	81 ee       	ldi	r24, 0xE1	; 225
    3eba:	9c e2       	ldi	r25, 0x2C	; 44
    3ebc:	9f 93       	push	r25
    3ebe:	8f 93       	push	r24
    3ec0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************ 4- Set Max Daily Amount ******************************************\n" ));
    3ec4:	84 e8       	ldi	r24, 0x84	; 132
    3ec6:	9c e2       	ldi	r25, 0x2C	; 44
    3ec8:	9f 93       	push	r25
    3eca:	8f 93       	push	r24
    3ecc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************ 5- Exit **********************************************************\n" ));
    3ed0:	87 e2       	ldi	r24, 0x27	; 39
    3ed2:	9c e2       	ldi	r25, 0x2C	; 44
    3ed4:	9f 93       	push	r25
    3ed6:	8f 93       	push	r24
    3ed8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*******************************************************************************************\n" ));
    3edc:	8a ec       	ldi	r24, 0xCA	; 202
    3ede:	9b e2       	ldi	r25, 0x2B	; 43
    3ee0:	9f 93       	push	r25
    3ee2:	8f 93       	push	r24
    3ee4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************************ END OF SELECTION !!!**********************************\n" ));				
    3ee8:	8d e6       	ldi	r24, 0x6D	; 109
    3eea:	9b e2       	ldi	r25, 0x2B	; 43
    3eec:	9f 93       	push	r25
    3eee:	8f 93       	push	r24
    3ef0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*******************************************************************************************\n"));
    3ef4:	80 e1       	ldi	r24, 0x10	; 16
    3ef6:	9b e2       	ldi	r25, 0x2B	; 43
    3ef8:	9f 93       	push	r25
    3efa:	8f 93       	push	r24
    3efc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("\n" ));
    3f00:	8e e0       	ldi	r24, 0x0E	; 14
    3f02:	9b e2       	ldi	r25, 0x2B	; 43
    3f04:	9f 93       	push	r25
    3f06:	8f 93       	push	r24
    3f08:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		HAL_UART_RECEIVE(&UART_Handler , &command , 0x01) ;
    3f0c:	41 e0       	ldi	r20, 0x01	; 1
    3f0e:	50 e0       	ldi	r21, 0x00	; 0
    3f10:	be 01       	movw	r22, r28
    3f12:	6f 5f       	subi	r22, 0xFF	; 255
    3f14:	7f 4f       	sbci	r23, 0xFF	; 255
    3f16:	87 e7       	ldi	r24, 0x77	; 119
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	0e 94 c1 32 	call	0x6582	; 0x6582 <HAL_UART_RECEIVE>
		printf_P(PSTR(" \n" ));
    3f1e:	8b e0       	ldi	r24, 0x0B	; 11
    3f20:	9b e2       	ldi	r25, 0x2B	; 43
    3f22:	9f 93       	push	r25
    3f24:	8f 93       	push	r24
    3f26:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		switch(command)
    3f2a:	0f b6       	in	r0, 0x3f	; 63
    3f2c:	f8 94       	cli
    3f2e:	de bf       	out	0x3e, r29	; 62
    3f30:	0f be       	out	0x3f, r0	; 63
    3f32:	cd bf       	out	0x3d, r28	; 61
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	83 33       	cpi	r24, 0x33	; 51
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <ATM_Admin_Modifying_Data+0xea>
    3f3a:	44 c1       	rjmp	.+648    	; 0x41c4 <ATM_Admin_Modifying_Data+0x372>
    3f3c:	30 f4       	brcc	.+12     	; 0x3f4a <ATM_Admin_Modifying_Data+0xf8>
    3f3e:	81 33       	cpi	r24, 0x31	; 49
    3f40:	59 f0       	breq	.+22     	; 0x3f58 <ATM_Admin_Modifying_Data+0x106>
    3f42:	82 33       	cpi	r24, 0x32	; 50
    3f44:	09 f4       	brne	.+2      	; 0x3f48 <ATM_Admin_Modifying_Data+0xf6>
    3f46:	b9 c0       	rjmp	.+370    	; 0x40ba <ATM_Admin_Modifying_Data+0x268>
    3f48:	0c c2       	rjmp	.+1048   	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
    3f4a:	84 33       	cpi	r24, 0x34	; 52
    3f4c:	09 f4       	brne	.+2      	; 0x3f50 <ATM_Admin_Modifying_Data+0xfe>
    3f4e:	7b c1       	rjmp	.+758    	; 0x4246 <ATM_Admin_Modifying_Data+0x3f4>
    3f50:	85 33       	cpi	r24, 0x35	; 53
    3f52:	09 f4       	brne	.+2      	; 0x3f56 <ATM_Admin_Modifying_Data+0x104>
    3f54:	e8 c1       	rjmp	.+976    	; 0x4326 <ATM_Admin_Modifying_Data+0x4d4>
    3f56:	05 c2       	rjmp	.+1034   	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
		{
			case ATM_ADMIN_COMMAN_SET_PASS :
				printf_P(PSTR("************************************************\n"	));
    3f58:	89 ed       	ldi	r24, 0xD9	; 217
    3f5a:	9a e2       	ldi	r25, 0x2A	; 42
    3f5c:	9f 93       	push	r25
    3f5e:	8f 93       	push	r24
    3f60:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******** Please enter a new admin name : *******\n" ));
    3f64:	87 ea       	ldi	r24, 0xA7	; 167
    3f66:	9a e2       	ldi	r25, 0x2A	; 42
    3f68:	9f 93       	push	r25
    3f6a:	8f 93       	push	r24
    3f6c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************************************************\n"	));
    3f70:	85 e7       	ldi	r24, 0x75	; 117
    3f72:	9a e2       	ldi	r25, 0x2A	; 42
    3f74:	9f 93       	push	r25
    3f76:	8f 93       	push	r24
    3f78:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    3f7c:	82 e7       	ldi	r24, 0x72	; 114
    3f7e:	9a e2       	ldi	r25, 0x2A	; 42
    3f80:	9f 93       	push	r25
    3f82:	8f 93       	push	r24
    3f84:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    3f88:	6a e0       	ldi	r22, 0x0A	; 10
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	02 96       	adiw	r24, 0x02	; 2
    3f8e:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
				printf_P(PSTR(" \n" ));
    3f92:	8f e6       	ldi	r24, 0x6F	; 111
    3f94:	9a e2       	ldi	r25, 0x2A	; 42
    3f96:	9f 93       	push	r25
    3f98:	8f 93       	push	r24
    3f9a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************************************************\n"	));
    3f9e:	8d e3       	ldi	r24, 0x3D	; 61
    3fa0:	9a e2       	ldi	r25, 0x2A	; 42
    3fa2:	9f 93       	push	r25
    3fa4:	8f 93       	push	r24
    3fa6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******** Please enter a new admin pass : *******\n" ));
    3faa:	8b e0       	ldi	r24, 0x0B	; 11
    3fac:	9a e2       	ldi	r25, 0x2A	; 42
    3fae:	9f 93       	push	r25
    3fb0:	8f 93       	push	r24
    3fb2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************************************************\n"	));
    3fb6:	89 ed       	ldi	r24, 0xD9	; 217
    3fb8:	99 e2       	ldi	r25, 0x29	; 41
    3fba:	9f 93       	push	r25
    3fbc:	8f 93       	push	r24
    3fbe:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    3fc2:	86 ed       	ldi	r24, 0xD6	; 214
    3fc4:	99 e2       	ldi	r25, 0x29	; 41
    3fc6:	9f 93       	push	r25
    3fc8:	8f 93       	push	r24
    3fca:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				ATM_Terminal_GetString(TempCard.CardPAN , CARD_NAME_LEN );
    3fce:	6a e0       	ldi	r22, 0x0A	; 10
    3fd0:	ce 01       	movw	r24, r28
    3fd2:	0d 96       	adiw	r24, 0x0d	; 13
    3fd4:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
			
				printf_P(PSTR(" \n" ));
    3fd8:	83 ed       	ldi	r24, 0xD3	; 211
    3fda:	99 e2       	ldi	r25, 0x29	; 41
    3fdc:	9f 93       	push	r25
    3fde:	8f 93       	push	r24
    3fe0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************************************************\n"	));
    3fe4:	81 ea       	ldi	r24, 0xA1	; 161
    3fe6:	99 e2       	ldi	r25, 0x29	; 41
    3fe8:	9f 93       	push	r25
    3fea:	8f 93       	push	r24
    3fec:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******************  wait !!! *******************\n" ));
    3ff0:	8f e6       	ldi	r24, 0x6F	; 111
    3ff2:	99 e2       	ldi	r25, 0x29	; 41
    3ff4:	9f 93       	push	r25
    3ff6:	8f 93       	push	r24
    3ff8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************************************************\n"	));
    3ffc:	8d e3       	ldi	r24, 0x3D	; 61
    3ffe:	99 e2       	ldi	r25, 0x29	; 41
    4000:	9f 93       	push	r25
    4002:	8f 93       	push	r24
    4004:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    4008:	8a e3       	ldi	r24, 0x3A	; 58
    400a:	99 e2       	ldi	r25, 0x29	; 41
    400c:	9f 93       	push	r25
    400e:	8f 93       	push	r24
    4010:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    4014:	3f ef       	ldi	r19, 0xFF	; 255
    4016:	8d e3       	ldi	r24, 0x3D	; 61
    4018:	99 e4       	ldi	r25, 0x49	; 73
    401a:	31 50       	subi	r19, 0x01	; 1
    401c:	80 40       	sbci	r24, 0x00	; 0
    401e:	90 40       	sbci	r25, 0x00	; 0
    4020:	e1 f7       	brne	.-8      	; 0x401a <ATM_Admin_Modifying_Data+0x1c8>
    4022:	00 c0       	rjmp	.+0      	; 0x4024 <ATM_Admin_Modifying_Data+0x1d2>
    4024:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if( SERVER_ADMIN_Set_Pass(TempCard.CardName , TempCard.CardPAN) == SERVER_OPER_OK )
    4026:	be 01       	movw	r22, r28
    4028:	63 5f       	subi	r22, 0xF3	; 243
    402a:	7f 4f       	sbci	r23, 0xFF	; 255
    402c:	ce 01       	movw	r24, r28
    402e:	02 96       	adiw	r24, 0x02	; 2
    4030:	0e 94 76 28 	call	0x50ec	; 0x50ec <SERVER_ADMIN_Set_Pass>
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	f8 94       	cli
    4038:	de bf       	out	0x3e, r29	; 62
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	cd bf       	out	0x3d, r28	; 61
    403e:	81 11       	cpse	r24, r1
    4040:	1e c0       	rjmp	.+60     	; 0x407e <ATM_Admin_Modifying_Data+0x22c>
				{
					printf_P(PSTR("************************************************\n"	));
    4042:	88 e0       	ldi	r24, 0x08	; 8
    4044:	99 e2       	ldi	r25, 0x29	; 41
    4046:	9f 93       	push	r25
    4048:	8f 93       	push	r24
    404a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("******** Admin Data Stored Successfully  *******\n" ));
    404e:	86 ed       	ldi	r24, 0xD6	; 214
    4050:	98 e2       	ldi	r25, 0x28	; 40
    4052:	9f 93       	push	r25
    4054:	8f 93       	push	r24
    4056:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("************************************************\n"	));
    405a:	84 ea       	ldi	r24, 0xA4	; 164
    405c:	98 e2       	ldi	r25, 0x28	; 40
    405e:	9f 93       	push	r25
    4060:	8f 93       	push	r24
    4062:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    4066:	81 ea       	ldi	r24, 0xA1	; 161
    4068:	98 e2       	ldi	r25, 0x28	; 40
    406a:	9f 93       	push	r25
    406c:	8f 93       	push	r24
    406e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    4072:	0f b6       	in	r0, 0x3f	; 63
    4074:	f8 94       	cli
    4076:	de bf       	out	0x3e, r29	; 62
    4078:	0f be       	out	0x3f, r0	; 63
    407a:	cd bf       	out	0x3d, r28	; 61
    407c:	72 c1       	rjmp	.+740    	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
				}else
				{
					printf_P(PSTR("************************************************\n"	));
    407e:	8f e6       	ldi	r24, 0x6F	; 111
    4080:	98 e2       	ldi	r25, 0x28	; 40
    4082:	9f 93       	push	r25
    4084:	8f 93       	push	r24
    4086:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*************  Please Try Again  ***************\n" ));
    408a:	8d e3       	ldi	r24, 0x3D	; 61
    408c:	98 e2       	ldi	r25, 0x28	; 40
    408e:	9f 93       	push	r25
    4090:	8f 93       	push	r24
    4092:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("************************************************\n"	));
    4096:	8b e0       	ldi	r24, 0x0B	; 11
    4098:	98 e2       	ldi	r25, 0x28	; 40
    409a:	9f 93       	push	r25
    409c:	8f 93       	push	r24
    409e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    40a2:	88 e0       	ldi	r24, 0x08	; 8
    40a4:	98 e2       	ldi	r25, 0x28	; 40
    40a6:	9f 93       	push	r25
    40a8:	8f 93       	push	r24
    40aa:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    40ae:	0f b6       	in	r0, 0x3f	; 63
    40b0:	f8 94       	cli
    40b2:	de bf       	out	0x3e, r29	; 62
    40b4:	0f be       	out	0x3f, r0	; 63
    40b6:	cd bf       	out	0x3d, r28	; 61
    40b8:	54 c1       	rjmp	.+680    	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
				}
			
				break;
			case  ATM_ADMIN_COMMAN_SET_TEMP :

				printf_P(PSTR("************************************************\n"	));
    40ba:	86 ed       	ldi	r24, 0xD6	; 214
    40bc:	97 e2       	ldi	r25, 0x27	; 39
    40be:	9f 93       	push	r25
    40c0:	8f 93       	push	r24
    40c2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("****** Enter a new admin MAX Temp value:********\n" ));
    40c6:	84 ea       	ldi	r24, 0xA4	; 164
    40c8:	97 e2       	ldi	r25, 0x27	; 39
    40ca:	9f 93       	push	r25
    40cc:	8f 93       	push	r24
    40ce:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************************************************\n"	));
    40d2:	82 e7       	ldi	r24, 0x72	; 114
    40d4:	97 e2       	ldi	r25, 0x27	; 39
    40d6:	9f 93       	push	r25
    40d8:	8f 93       	push	r24
    40da:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    40de:	8f e6       	ldi	r24, 0x6F	; 111
    40e0:	97 e2       	ldi	r25, 0x27	; 39
    40e2:	9f 93       	push	r25
    40e4:	8f 93       	push	r24
    40e6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				ATM_Terminal_GetString(TempCard.CardName , CARD_NAME_LEN );
    40ea:	6a e0       	ldi	r22, 0x0A	; 10
    40ec:	ce 01       	movw	r24, r28
    40ee:	02 96       	adiw	r24, 0x02	; 2
    40f0:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
				printf_P(PSTR("************************************************\n"	));
    40f4:	8d e3       	ldi	r24, 0x3D	; 61
    40f6:	97 e2       	ldi	r25, 0x27	; 39
    40f8:	9f 93       	push	r25
    40fa:	8f 93       	push	r24
    40fc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******************  wait !!! *******************\n" ));
    4100:	8b e0       	ldi	r24, 0x0B	; 11
    4102:	97 e2       	ldi	r25, 0x27	; 39
    4104:	9f 93       	push	r25
    4106:	8f 93       	push	r24
    4108:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************************************************\n"	));
    410c:	89 ed       	ldi	r24, 0xD9	; 217
    410e:	96 e2       	ldi	r25, 0x26	; 38
    4110:	9f 93       	push	r25
    4112:	8f 93       	push	r24
    4114:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    4118:	86 ed       	ldi	r24, 0xD6	; 214
    411a:	96 e2       	ldi	r25, 0x26	; 38
    411c:	9f 93       	push	r25
    411e:	8f 93       	push	r24
    4120:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    4124:	9f ef       	ldi	r25, 0xFF	; 255
    4126:	ad e3       	ldi	r26, 0x3D	; 61
    4128:	b9 e4       	ldi	r27, 0x49	; 73
    412a:	91 50       	subi	r25, 0x01	; 1
    412c:	a0 40       	sbci	r26, 0x00	; 0
    412e:	b0 40       	sbci	r27, 0x00	; 0
    4130:	e1 f7       	brne	.-8      	; 0x412a <ATM_Admin_Modifying_Data+0x2d8>
    4132:	00 c0       	rjmp	.+0      	; 0x4134 <ATM_Admin_Modifying_Data+0x2e2>
    4134:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if( SERVER_ADMIN_Set_Temp(TempCard.CardName) == SERVER_OPER_OK )
    4136:	ce 01       	movw	r24, r28
    4138:	02 96       	adiw	r24, 0x02	; 2
    413a:	0e 94 cc 28 	call	0x5198	; 0x5198 <SERVER_ADMIN_Set_Temp>
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	81 11       	cpse	r24, r1
    414a:	1e c0       	rjmp	.+60     	; 0x4188 <ATM_Admin_Modifying_Data+0x336>
				{
					printf_P(PSTR("************************************************\n"	));
    414c:	84 ea       	ldi	r24, 0xA4	; 164
    414e:	96 e2       	ldi	r25, 0x26	; 38
    4150:	9f 93       	push	r25
    4152:	8f 93       	push	r24
    4154:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("***** Admin Data Stored Successfully ***********\n" ));
    4158:	82 e7       	ldi	r24, 0x72	; 114
    415a:	96 e2       	ldi	r25, 0x26	; 38
    415c:	9f 93       	push	r25
    415e:	8f 93       	push	r24
    4160:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("************************************************\n"	));
    4164:	80 e4       	ldi	r24, 0x40	; 64
    4166:	96 e2       	ldi	r25, 0x26	; 38
    4168:	9f 93       	push	r25
    416a:	8f 93       	push	r24
    416c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    4170:	8d e3       	ldi	r24, 0x3D	; 61
    4172:	96 e2       	ldi	r25, 0x26	; 38
    4174:	9f 93       	push	r25
    4176:	8f 93       	push	r24
    4178:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    417c:	0f b6       	in	r0, 0x3f	; 63
    417e:	f8 94       	cli
    4180:	de bf       	out	0x3e, r29	; 62
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	cd bf       	out	0x3d, r28	; 61
    4186:	ed c0       	rjmp	.+474    	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
				}else
				{
					printf_P(PSTR("************************************************\n"	));
    4188:	8b e0       	ldi	r24, 0x0B	; 11
    418a:	96 e2       	ldi	r25, 0x26	; 38
    418c:	9f 93       	push	r25
    418e:	8f 93       	push	r24
    4190:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*************  Please Try Again  ***************\n" ));
    4194:	89 ed       	ldi	r24, 0xD9	; 217
    4196:	95 e2       	ldi	r25, 0x25	; 37
    4198:	9f 93       	push	r25
    419a:	8f 93       	push	r24
    419c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("************************************************\n"	));
    41a0:	87 ea       	ldi	r24, 0xA7	; 167
    41a2:	95 e2       	ldi	r25, 0x25	; 37
    41a4:	9f 93       	push	r25
    41a6:	8f 93       	push	r24
    41a8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    41ac:	84 ea       	ldi	r24, 0xA4	; 164
    41ae:	95 e2       	ldi	r25, 0x25	; 37
    41b0:	9f 93       	push	r25
    41b2:	8f 93       	push	r24
    41b4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    41b8:	0f b6       	in	r0, 0x3f	; 63
    41ba:	f8 94       	cli
    41bc:	de bf       	out	0x3e, r29	; 62
    41be:	0f be       	out	0x3f, r0	; 63
    41c0:	cd bf       	out	0x3d, r28	; 61
    41c2:	cf c0       	rjmp	.+414    	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
				}
			
				break;
			case ATM_ADMIN_ERROR_CLEAR :
				if( SERVER_ADMIN_Error( ADMIN_ERROR_CLEAR ) == SERVER_OPER_OK )
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <SERVER_ADMIN_Error>
    41ca:	81 11       	cpse	r24, r1
    41cc:	1e c0       	rjmp	.+60     	; 0x420a <ATM_Admin_Modifying_Data+0x3b8>
				{
					printf_P(PSTR("************************************************\n"	));
    41ce:	82 e7       	ldi	r24, 0x72	; 114
    41d0:	95 e2       	ldi	r25, 0x25	; 37
    41d2:	9f 93       	push	r25
    41d4:	8f 93       	push	r24
    41d6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("**********  Error Cleared Successfully *********\n" ));
    41da:	80 e4       	ldi	r24, 0x40	; 64
    41dc:	95 e2       	ldi	r25, 0x25	; 37
    41de:	9f 93       	push	r25
    41e0:	8f 93       	push	r24
    41e2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("************************************************\n"	));
    41e6:	8e e0       	ldi	r24, 0x0E	; 14
    41e8:	95 e2       	ldi	r25, 0x25	; 37
    41ea:	9f 93       	push	r25
    41ec:	8f 93       	push	r24
    41ee:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    41f2:	8b e0       	ldi	r24, 0x0B	; 11
    41f4:	95 e2       	ldi	r25, 0x25	; 37
    41f6:	9f 93       	push	r25
    41f8:	8f 93       	push	r24
    41fa:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	ac c0       	rjmp	.+344    	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
				}else
				{
					printf_P(PSTR("**********************************************************\n"	));
    420a:	8f ec       	ldi	r24, 0xCF	; 207
    420c:	94 e2       	ldi	r25, 0x24	; 36
    420e:	9f 93       	push	r25
    4210:	8f 93       	push	r24
    4212:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("******** Error Does Not Cleared Successfully !!!!  *******\n" ));
    4216:	83 e9       	ldi	r24, 0x93	; 147
    4218:	94 e2       	ldi	r25, 0x24	; 36
    421a:	9f 93       	push	r25
    421c:	8f 93       	push	r24
    421e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("**********************************************************\n"	));
    4222:	87 e5       	ldi	r24, 0x57	; 87
    4224:	94 e2       	ldi	r25, 0x24	; 36
    4226:	9f 93       	push	r25
    4228:	8f 93       	push	r24
    422a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    422e:	84 e5       	ldi	r24, 0x54	; 84
    4230:	94 e2       	ldi	r25, 0x24	; 36
    4232:	9f 93       	push	r25
    4234:	8f 93       	push	r24
    4236:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    423a:	0f b6       	in	r0, 0x3f	; 63
    423c:	f8 94       	cli
    423e:	de bf       	out	0x3e, r29	; 62
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	cd bf       	out	0x3d, r28	; 61
    4244:	8e c0       	rjmp	.+284    	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
				}
				break;
			case ATM_ADMIN_MAX_Daliy_Amount :
					printf_P(PSTR("************************************************\n"	));
    4246:	82 e2       	ldi	r24, 0x22	; 34
    4248:	94 e2       	ldi	r25, 0x24	; 36
    424a:	9f 93       	push	r25
    424c:	8f 93       	push	r24
    424e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*****  Please Enter the MAx Daily Amount *******\n" ));
    4252:	80 ef       	ldi	r24, 0xF0	; 240
    4254:	93 e2       	ldi	r25, 0x23	; 35
    4256:	9f 93       	push	r25
    4258:	8f 93       	push	r24
    425a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("************************************************\n"	));
    425e:	8e eb       	ldi	r24, 0xBE	; 190
    4260:	93 e2       	ldi	r25, 0x23	; 35
    4262:	9f 93       	push	r25
    4264:	8f 93       	push	r24
    4266:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    426a:	8b eb       	ldi	r24, 0xBB	; 187
    426c:	93 e2       	ldi	r25, 0x23	; 35
    426e:	9f 93       	push	r25
    4270:	8f 93       	push	r24
    4272:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					ATM_Terminal_GetString(MaxDailyWithDraw , MaxDailyWithDraw_Size);
    4276:	6a e0       	ldi	r22, 0x0A	; 10
    4278:	ce 01       	movw	r24, r28
    427a:	85 96       	adiw	r24, 0x25	; 37
    427c:	0e 94 8c 1c 	call	0x3918	; 0x3918 <ATM_Terminal_GetString>
					printf_P(PSTR(" \n" ));			 
    4280:	88 eb       	ldi	r24, 0xB8	; 184
    4282:	93 e2       	ldi	r25, 0x23	; 35
    4284:	9f 93       	push	r25
    4286:	8f 93       	push	r24
    4288:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				if(SERVER_ADMIN_Set_MAximum_DailyAmount(MaxDailyWithDraw) == SERVER_OPER_OK )
    428c:	ce 01       	movw	r24, r28
    428e:	85 96       	adiw	r24, 0x25	; 37
    4290:	0e 94 61 29 	call	0x52c2	; 0x52c2 <SERVER_ADMIN_Set_MAximum_DailyAmount>
    4294:	0f b6       	in	r0, 0x3f	; 63
    4296:	f8 94       	cli
    4298:	de bf       	out	0x3e, r29	; 62
    429a:	0f be       	out	0x3f, r0	; 63
    429c:	cd bf       	out	0x3d, r28	; 61
    429e:	81 11       	cpse	r24, r1
    42a0:	1e c0       	rjmp	.+60     	; 0x42de <ATM_Admin_Modifying_Data+0x48c>
				{
					printf_P(PSTR("************************************************\n"	));
    42a2:	86 e8       	ldi	r24, 0x86	; 134
    42a4:	93 e2       	ldi	r25, 0x23	; 35
    42a6:	9f 93       	push	r25
    42a8:	8f 93       	push	r24
    42aa:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*****  Maximum Daily Amount Successfully  ******\n" ));
    42ae:	84 e5       	ldi	r24, 0x54	; 84
    42b0:	93 e2       	ldi	r25, 0x23	; 35
    42b2:	9f 93       	push	r25
    42b4:	8f 93       	push	r24
    42b6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("************************************************\n"	));
    42ba:	82 e2       	ldi	r24, 0x22	; 34
    42bc:	93 e2       	ldi	r25, 0x23	; 35
    42be:	9f 93       	push	r25
    42c0:	8f 93       	push	r24
    42c2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    42c6:	8f e1       	ldi	r24, 0x1F	; 31
    42c8:	93 e2       	ldi	r25, 0x23	; 35
    42ca:	9f 93       	push	r25
    42cc:	8f 93       	push	r24
    42ce:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    42d2:	0f b6       	in	r0, 0x3f	; 63
    42d4:	f8 94       	cli
    42d6:	de bf       	out	0x3e, r29	; 62
    42d8:	0f be       	out	0x3f, r0	; 63
    42da:	cd bf       	out	0x3d, r28	; 61
    42dc:	42 c0       	rjmp	.+132    	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
				}else
				{
					printf_P(PSTR(" \n"));
    42de:	8c e1       	ldi	r24, 0x1C	; 28
    42e0:	93 e2       	ldi	r25, 0x23	; 35
    42e2:	9f 93       	push	r25
    42e4:	8f 93       	push	r24
    42e6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*************************************************************************\n"	));
    42ea:	81 ed       	ldi	r24, 0xD1	; 209
    42ec:	92 e2       	ldi	r25, 0x22	; 34
    42ee:	9f 93       	push	r25
    42f0:	8f 93       	push	r24
    42f2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("********* Maximum Daily Amount Does Not Set Successfully !!!! ***********\n" ));
    42f6:	86 e8       	ldi	r24, 0x86	; 134
    42f8:	92 e2       	ldi	r25, 0x22	; 34
    42fa:	9f 93       	push	r25
    42fc:	8f 93       	push	r24
    42fe:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*************************************************************************\n"	));
    4302:	8b e3       	ldi	r24, 0x3B	; 59
    4304:	92 e2       	ldi	r25, 0x22	; 34
    4306:	9f 93       	push	r25
    4308:	8f 93       	push	r24
    430a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    430e:	88 e3       	ldi	r24, 0x38	; 56
    4310:	92 e2       	ldi	r25, 0x22	; 34
    4312:	9f 93       	push	r25
    4314:	8f 93       	push	r24
    4316:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    431a:	0f b6       	in	r0, 0x3f	; 63
    431c:	f8 94       	cli
    431e:	de bf       	out	0x3e, r29	; 62
    4320:	0f be       	out	0x3f, r0	; 63
    4322:	cd bf       	out	0x3d, r28	; 61
    4324:	1e c0       	rjmp	.+60     	; 0x4362 <ATM_Admin_Modifying_Data+0x510>
				}
				break;
			case ATM_ADMIN_Exit :
				printf_P(PSTR("****************************************************\n"	));
    4326:	82 e0       	ldi	r24, 0x02	; 2
    4328:	92 e2       	ldi	r25, 0x22	; 34
    432a:	9f 93       	push	r25
    432c:	8f 93       	push	r24
    432e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*****  EXIT Admin Modifying mode successfully ******\n" ));
    4332:	8c ec       	ldi	r24, 0xCC	; 204
    4334:	91 e2       	ldi	r25, 0x21	; 33
    4336:	9f 93       	push	r25
    4338:	8f 93       	push	r24
    433a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("****************************************************\n"	));
    433e:	86 e9       	ldi	r24, 0x96	; 150
    4340:	91 e2       	ldi	r25, 0x21	; 33
    4342:	9f 93       	push	r25
    4344:	8f 93       	push	r24
    4346:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    434a:	83 e9       	ldi	r24, 0x93	; 147
    434c:	91 e2       	ldi	r25, 0x21	; 33
    434e:	9f 93       	push	r25
    4350:	8f 93       	push	r24
    4352:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				ExitFlag = 1 ;
				break;
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	f8 94       	cli
    435a:	de bf       	out	0x3e, r29	; 62
    435c:	0f be       	out	0x3f, r0	; 63
    435e:	cd bf       	out	0x3d, r28	; 61
			case ATM_ADMIN_Exit :
				printf_P(PSTR("****************************************************\n"	));
				printf_P(PSTR("*****  EXIT Admin Modifying mode successfully ******\n" ));
				printf_P(PSTR("****************************************************\n"	));
				printf_P(PSTR(" \n" ));
				ExitFlag = 1 ;
    4360:	11 e0       	ldi	r17, 0x01	; 1
void ATM_Admin_Modifying_Data(void)
{
	uint8_t ExitFlag = 0 , command =0  ;
	CardData_t TempCard = {0};
	uint8_t MaxDailyWithDraw[MaxDailyWithDraw_Size]  ;
	while(!ExitFlag)
    4362:	11 23       	and	r17, r17
    4364:	09 f4       	brne	.+2      	; 0x4368 <ATM_Admin_Modifying_Data+0x516>
    4366:	8a cd       	rjmp	.-1260   	; 0x3e7c <ATM_Admin_Modifying_Data+0x2a>
			
			
				break;
				}
		}
}
    4368:	ae 96       	adiw	r28, 0x2e	; 46
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	f8 94       	cli
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	cd bf       	out	0x3d, r28	; 61
    4374:	df 91       	pop	r29
    4376:	cf 91       	pop	r28
    4378:	1f 91       	pop	r17
    437a:	08 95       	ret

0000437c <ATM_Programming_mode>:




void ATM_Programming_mode(void)
{
    437c:	cf 93       	push	r28
 	uint8_t ExitFlag = 0 ;
	uint8_t command = 0; 
	
	
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_enter_Programing] ));	
    437e:	8e ed       	ldi	r24, 0xDE	; 222
    4380:	91 e3       	ldi	r25, 0x31	; 49
    4382:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4386:	ac 01       	movw	r20, r24
    4388:	61 e0       	ldi	r22, 0x01	; 1
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_Mode] ));
    4390:	82 ef       	ldi	r24, 0xF2	; 242
    4392:	91 e3       	ldi	r25, 0x31	; 49
    4394:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4398:	ac 01       	movw	r20, r24
    439a:	61 e0       	ldi	r22, 0x01	; 1
    439c:	82 e0       	ldi	r24, 0x02	; 2
    439e:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
	printf_P(PSTR("****************************************************\n"	));
    43a2:	8d e5       	ldi	r24, 0x5D	; 93
    43a4:	91 e2       	ldi	r25, 0x21	; 33
    43a6:	9f 93       	push	r25
    43a8:	8f 93       	push	r24
    43aa:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*****************  "));
    43ae:	89 e4       	ldi	r24, 0x49	; 73
    43b0:	91 e2       	ldi	r25, 0x21	; 33
    43b2:	9f 93       	push	r25
    43b4:	8f 93       	push	r24
    43b6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P((char *)LCD_StrF[LCD_Print_enter_Programing]);
    43ba:	8e ed       	ldi	r24, 0xDE	; 222
    43bc:	91 e3       	ldi	r25, 0x31	; 49
    43be:	9f 93       	push	r25
    43c0:	8f 93       	push	r24
    43c2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" ****************\n" ));
    43c6:	86 e3       	ldi	r24, 0x36	; 54
    43c8:	91 e2       	ldi	r25, 0x21	; 33
    43ca:	9f 93       	push	r25
    43cc:	8f 93       	push	r24
    43ce:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("**************** "));
    43d2:	84 e2       	ldi	r24, 0x24	; 36
    43d4:	91 e2       	ldi	r25, 0x21	; 33
    43d6:	9f 93       	push	r25
    43d8:	8f 93       	push	r24
    43da:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P((char *)LCD_StrF[LCD_Print_Mode]);
    43de:	82 ef       	ldi	r24, 0xF2	; 242
    43e0:	91 e3       	ldi	r25, 0x31	; 49
    43e2:	9f 93       	push	r25
    43e4:	8f 93       	push	r24
    43e6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" ***************\n" ));
    43ea:	82 e1       	ldi	r24, 0x12	; 18
    43ec:	91 e2       	ldi	r25, 0x21	; 33
    43ee:	9f 93       	push	r25
    43f0:	8f 93       	push	r24
    43f2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("****************************************************\n"	));
    43f6:	8c ed       	ldi	r24, 0xDC	; 220
    43f8:	90 e2       	ldi	r25, 0x20	; 32
    43fa:	9f 93       	push	r25
    43fc:	8f 93       	push	r24
    43fe:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" \n" ));
    4402:	89 ed       	ldi	r24, 0xD9	; 217
    4404:	90 e2       	ldi	r25, 0x20	; 32
    4406:	9f 93       	push	r25
    4408:	8f 93       	push	r24
    440a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    440e:	2f ef       	ldi	r18, 0xFF	; 255
    4410:	8d e3       	ldi	r24, 0x3D	; 61
    4412:	99 e4       	ldi	r25, 0x49	; 73
    4414:	21 50       	subi	r18, 0x01	; 1
    4416:	80 40       	sbci	r24, 0x00	; 0
    4418:	90 40       	sbci	r25, 0x00	; 0
    441a:	e1 f7       	brne	.-8      	; 0x4414 <ATM_Programming_mode+0x98>
    441c:	00 c0       	rjmp	.+0      	; 0x441e <ATM_Programming_mode+0xa2>
    441e:	00 00       	nop
	_delay_ms(ATM_DLEAY_IN_S );
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
	printf_P(PSTR("****************************************************\n"	));
    4426:	83 ea       	ldi	r24, 0xA3	; 163
    4428:	90 e2       	ldi	r25, 0x20	; 32
    442a:	9f 93       	push	r25
    442c:	8f 93       	push	r24
    442e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*****************  "));
    4432:	8f e8       	ldi	r24, 0x8F	; 143
    4434:	90 e2       	ldi	r25, 0x20	; 32
    4436:	9f 93       	push	r25
    4438:	8f 93       	push	r24
    443a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P((char *)LCD_StrF[LCD_Print_Programing_Mode]);
    443e:	86 e0       	ldi	r24, 0x06	; 6
    4440:	92 e3       	ldi	r25, 0x32	; 50
    4442:	9f 93       	push	r25
    4444:	8f 93       	push	r24
    4446:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" ****************\n" ));
    444a:	8c e7       	ldi	r24, 0x7C	; 124
    444c:	90 e2       	ldi	r25, 0x20	; 32
    444e:	9f 93       	push	r25
    4450:	8f 93       	push	r24
    4452:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("****************************************************\n"	));
    4456:	86 e4       	ldi	r24, 0x46	; 70
    4458:	90 e2       	ldi	r25, 0x20	; 32
    445a:	9f 93       	push	r25
    445c:	8f 93       	push	r24
    445e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" \n" ));
    4462:	83 e4       	ldi	r24, 0x43	; 67
    4464:	90 e2       	ldi	r25, 0x20	; 32
    4466:	9f 93       	push	r25
    4468:	8f 93       	push	r24
    446a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_Programing_Mode]));
    446e:	86 e0       	ldi	r24, 0x06	; 6
    4470:	92 e3       	ldi	r25, 0x32	; 50
    4472:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4476:	ac 01       	movw	r20, r24
    4478:	61 e0       	ldi	r22, 0x01	; 1
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
    4480:	2f ef       	ldi	r18, 0xFF	; 255
    4482:	8d e3       	ldi	r24, 0x3D	; 61
    4484:	99 e4       	ldi	r25, 0x49	; 73
    4486:	21 50       	subi	r18, 0x01	; 1
    4488:	80 40       	sbci	r24, 0x00	; 0
    448a:	90 40       	sbci	r25, 0x00	; 0
    448c:	e1 f7       	brne	.-8      	; 0x4486 <ATM_Programming_mode+0x10a>
    448e:	00 c0       	rjmp	.+0      	; 0x4490 <ATM_Programming_mode+0x114>
    4490:	00 00       	nop
    4492:	8d b7       	in	r24, 0x3d	; 61
    4494:	9e b7       	in	r25, 0x3e	; 62
    4496:	4e 96       	adiw	r24, 0x1e	; 30
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	f8 94       	cli
    449c:	9e bf       	out	0x3e, r25	; 62
    449e:	0f be       	out	0x3f, r0	; 63
    44a0:	8d bf       	out	0x3d, r24	; 61



void ATM_Programming_mode(void)
{
 	uint8_t ExitFlag = 0 ;
    44a2:	c0 e0       	ldi	r28, 0x00	; 0
    44a4:	de c0       	rjmp	.+444    	; 0x4662 <ATM_Programming_mode+0x2e6>
	
	
	while(!ExitFlag)
	{
		
		command =  ATM_Get_UserCommand();
    44a6:	0e 94 77 1b 	call	0x36ee	; 0x36ee <ATM_Get_UserCommand>
		switch(command)
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	fc 01       	movw	r30, r24
    44ae:	f1 97       	sbiw	r30, 0x31	; 49
    44b0:	e8 30       	cpi	r30, 0x08	; 8
    44b2:	f1 05       	cpc	r31, r1
    44b4:	08 f0       	brcs	.+2      	; 0x44b8 <ATM_Programming_mode+0x13c>
    44b6:	b5 c0       	rjmp	.+362    	; 0x4622 <ATM_Programming_mode+0x2a6>
    44b8:	e6 5d       	subi	r30, 0xD6	; 214
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	0c 94 bd 36 	jmp	0x6d7a	; 0x6d7a <__tablejump2__>
			case  ATM_ADD_Card :		// Add card
			
				/********************************************************
				*					Collect Card Data					*
				********************************************************/
			  	ATM_Add_CardData() ;
    44c0:	0e 94 ac 1c 	call	0x3958	; 0x3958 <ATM_Add_CardData>
				break; 	
    44c4:	ce c0       	rjmp	.+412    	; 0x4662 <ATM_Programming_mode+0x2e6>
			case ATM_REMOVE_CARD :		// Remove Card 
				/********************************************************
				*			Remove Card Data From DataBase				*
				********************************************************/
				ATM_Remove_Card();
    44c6:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <ATM_Remove_Card>
				break;	
    44ca:	cb c0       	rjmp	.+406    	; 0x4662 <ATM_Programming_mode+0x2e6>
			case  ATM_SEARCH_FOR_CARD_PAN :		// Search For Specific Card
			
					/********************************************************
					*				Search Card Data in DataBase			*
					********************************************************/ 		 
					ATM_Search_Card_WithPAN();
    44cc:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <ATM_Search_Card_WithPAN>
					break;				
    44d0:	c8 c0       	rjmp	.+400    	; 0x4662 <ATM_Programming_mode+0x2e6>
					
			case  ATM_SEARCH_FOR_CARD_NAME :
					/********************************************************
					*		Search Card Data With Name In DataBASE			*
					********************************************************/ 		
					ATM_Search_Card_ByName();
    44d2:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <ATM_Search_Card_ByName>
					break;					
    44d6:	c5 c0       	rjmp	.+394    	; 0x4662 <ATM_Programming_mode+0x2e6>
				
			case   ATM_TOTAL_NUM_OF_CARDs :	
				/********************************************************
				*			Return Total Num Of Installed Card 			*
				********************************************************/ 
					printf_P(PSTR("****************************************************\n"));
    44d8:	8d e0       	ldi	r24, 0x0D	; 13
    44da:	90 e2       	ldi	r25, 0x20	; 32
    44dc:	9f 93       	push	r25
    44de:	8f 93       	push	r24
    44e0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("***** The Number of Installed Cards is :" ));
    44e4:	84 ee       	ldi	r24, 0xE4	; 228
    44e6:	9f e1       	ldi	r25, 0x1F	; 31
    44e8:	9f 93       	push	r25
    44ea:	8f 93       	push	r24
    44ec:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf("%i" , SERVER_OPER_GetTotal_CARDNum());
    44f0:	0e 94 60 28 	call	0x50c0	; 0x50c0 <SERVER_OPER_GetTotal_CARDNum>
    44f4:	9f 93       	push	r25
    44f6:	8f 93       	push	r24
    44f8:	8f e2       	ldi	r24, 0x2F	; 47
    44fa:	91 e0       	ldi	r25, 0x01	; 1
    44fc:	9f 93       	push	r25
    44fe:	8f 93       	push	r24
    4500:	0e 94 88 37 	call	0x6f10	; 0x6f10 <printf>
					printf_P(PSTR("*********** \n"));
    4504:	86 ed       	ldi	r24, 0xD6	; 214
    4506:	9f e1       	ldi	r25, 0x1F	; 31
    4508:	9f 93       	push	r25
    450a:	8f 93       	push	r24
    450c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("****************************************************\n"	));
    4510:	80 ea       	ldi	r24, 0xA0	; 160
    4512:	9f e1       	ldi	r25, 0x1F	; 31
    4514:	9f 93       	push	r25
    4516:	8f 93       	push	r24
    4518:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    451c:	8d e9       	ldi	r24, 0x9D	; 157
    451e:	9f e1       	ldi	r25, 0x1F	; 31
    4520:	9f 93       	push	r25
    4522:	8f 93       	push	r24
    4524:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				break;
    4528:	8d b7       	in	r24, 0x3d	; 61
    452a:	9e b7       	in	r25, 0x3e	; 62
    452c:	0e 96       	adiw	r24, 0x0e	; 14
    452e:	0f b6       	in	r0, 0x3f	; 63
    4530:	f8 94       	cli
    4532:	9e bf       	out	0x3e, r25	; 62
    4534:	0f be       	out	0x3f, r0	; 63
    4536:	8d bf       	out	0x3d, r24	; 61
    4538:	94 c0       	rjmp	.+296    	; 0x4662 <ATM_Programming_mode+0x2e6>
			case   ATM_RESET_DATA_BASE :	
				/********************************************************
				*					Reset Database			 			*
				********************************************************/				
				if(SERVER_OPER_DataBase_Reset() == SERVER_OPER_OK)
    453a:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <SERVER_OPER_DataBase_Reset>
    453e:	81 11       	cpse	r24, r1
    4540:	21 c0       	rjmp	.+66     	; 0x4584 <ATM_Programming_mode+0x208>
				{
					printf_P(PSTR("****************************************************\n"));
    4542:	87 e6       	ldi	r24, 0x67	; 103
    4544:	9f e1       	ldi	r25, 0x1F	; 31
    4546:	9f 93       	push	r25
    4548:	8f 93       	push	r24
    454a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*************  Deleted successfully  ***************\n"));
    454e:	81 e3       	ldi	r24, 0x31	; 49
    4550:	9f e1       	ldi	r25, 0x1F	; 31
    4552:	9f 93       	push	r25
    4554:	8f 93       	push	r24
    4556:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("****************************************************\n"));
    455a:	8b ef       	ldi	r24, 0xFB	; 251
    455c:	9e e1       	ldi	r25, 0x1E	; 30
    455e:	9f 93       	push	r25
    4560:	8f 93       	push	r24
    4562:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    4566:	88 ef       	ldi	r24, 0xF8	; 248
    4568:	9e e1       	ldi	r25, 0x1E	; 30
    456a:	9f 93       	push	r25
    456c:	8f 93       	push	r24
    456e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    4572:	8d b7       	in	r24, 0x3d	; 61
    4574:	9e b7       	in	r25, 0x3e	; 62
    4576:	08 96       	adiw	r24, 0x08	; 8
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	f8 94       	cli
    457c:	9e bf       	out	0x3e, r25	; 62
    457e:	0f be       	out	0x3f, r0	; 63
    4580:	8d bf       	out	0x3d, r24	; 61
    4582:	6f c0       	rjmp	.+222    	; 0x4662 <ATM_Programming_mode+0x2e6>
				}else{
					printf_P(PSTR("******************************************************\n"));
    4584:	80 ec       	ldi	r24, 0xC0	; 192
    4586:	9e e1       	ldi	r25, 0x1E	; 30
    4588:	9f 93       	push	r25
    458a:	8f 93       	push	r24
    458c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("***** problem With Data Base Call Service Support ****\n"));
    4590:	88 e8       	ldi	r24, 0x88	; 136
    4592:	9e e1       	ldi	r25, 0x1E	; 30
    4594:	9f 93       	push	r25
    4596:	8f 93       	push	r24
    4598:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("******************************************************\n"));
    459c:	80 e5       	ldi	r24, 0x50	; 80
    459e:	9e e1       	ldi	r25, 0x1E	; 30
    45a0:	9f 93       	push	r25
    45a2:	8f 93       	push	r24
    45a4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    45a8:	8d e4       	ldi	r24, 0x4D	; 77
    45aa:	9e e1       	ldi	r25, 0x1E	; 30
    45ac:	9f 93       	push	r25
    45ae:	8f 93       	push	r24
    45b0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    45b4:	8d b7       	in	r24, 0x3d	; 61
    45b6:	9e b7       	in	r25, 0x3e	; 62
    45b8:	08 96       	adiw	r24, 0x08	; 8
    45ba:	0f b6       	in	r0, 0x3f	; 63
    45bc:	f8 94       	cli
    45be:	9e bf       	out	0x3e, r25	; 62
    45c0:	0f be       	out	0x3f, r0	; 63
    45c2:	8d bf       	out	0x3d, r24	; 61
    45c4:	4e c0       	rjmp	.+156    	; 0x4662 <ATM_Programming_mode+0x2e6>
				break;
			case  ATM_ADMIN_MODIFY :
				/********************************************************
				*					Modify Admin Data 					*
				********************************************************/		
				ATM_Admin_Modifying_Data();
    45c6:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <ATM_Admin_Modifying_Data>
				break;
    45ca:	4b c0       	rjmp	.+150    	; 0x4662 <ATM_Programming_mode+0x2e6>
			case    ATM_EXIT_PROGRAMMING_MODE :
				/********************************************************
				*			Switching to Operating Mode					*
				********************************************************/
				printf_P(PSTR("************************************************\n"	));
    45cc:	8b e1       	ldi	r24, 0x1B	; 27
    45ce:	9e e1       	ldi	r25, 0x1E	; 30
    45d0:	9f 93       	push	r25
    45d2:	8f 93       	push	r24
    45d4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******************  wait !!! *******************\n" ));
    45d8:	89 ee       	ldi	r24, 0xE9	; 233
    45da:	9d e1       	ldi	r25, 0x1D	; 29
    45dc:	9f 93       	push	r25
    45de:	8f 93       	push	r24
    45e0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("************************************************\n"	));
    45e4:	87 eb       	ldi	r24, 0xB7	; 183
    45e6:	9d e1       	ldi	r25, 0x1D	; 29
    45e8:	9f 93       	push	r25
    45ea:	8f 93       	push	r24
    45ec:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    45f0:	84 eb       	ldi	r24, 0xB4	; 180
    45f2:	9d e1       	ldi	r25, 0x1D	; 29
    45f4:	9f 93       	push	r25
    45f6:	8f 93       	push	r24
    45f8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    45fc:	9f ef       	ldi	r25, 0xFF	; 255
    45fe:	2d e3       	ldi	r18, 0x3D	; 61
    4600:	89 e4       	ldi	r24, 0x49	; 73
    4602:	91 50       	subi	r25, 0x01	; 1
    4604:	20 40       	sbci	r18, 0x00	; 0
    4606:	80 40       	sbci	r24, 0x00	; 0
    4608:	e1 f7       	brne	.-8      	; 0x4602 <ATM_Programming_mode+0x286>
    460a:	00 c0       	rjmp	.+0      	; 0x460c <ATM_Programming_mode+0x290>
    460c:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				ExitFlag = 1 ;
			break;				
    460e:	8d b7       	in	r24, 0x3d	; 61
    4610:	9e b7       	in	r25, 0x3e	; 62
    4612:	08 96       	adiw	r24, 0x08	; 8
    4614:	0f b6       	in	r0, 0x3f	; 63
    4616:	f8 94       	cli
    4618:	9e bf       	out	0x3e, r25	; 62
    461a:	0f be       	out	0x3f, r0	; 63
    461c:	8d bf       	out	0x3d, r24	; 61
				printf_P(PSTR("************************************************\n"	));
				printf_P(PSTR("******************  wait !!! *******************\n" ));
				printf_P(PSTR("************************************************\n"	));
				printf_P(PSTR(" \n" ));
				_delay_ms(ATM_DLEAY_IN_S);
				ExitFlag = 1 ;
    461e:	c1 e0       	ldi	r28, 0x01	; 1
			break;				
    4620:	20 c0       	rjmp	.+64     	; 0x4662 <ATM_Programming_mode+0x2e6>
			default:
				/********************************************************
				*			Handling All Wrong Commands					*
				********************************************************/			
				printf_P(PSTR("****************************************************\n"	));
    4622:	8e e7       	ldi	r24, 0x7E	; 126
    4624:	9d e1       	ldi	r25, 0x1D	; 29
    4626:	9f 93       	push	r25
    4628:	8f 93       	push	r24
    462a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("******** Wrong chose Please Try again **************\n" ));
    462e:	88 e4       	ldi	r24, 0x48	; 72
    4630:	9d e1       	ldi	r25, 0x1D	; 29
    4632:	9f 93       	push	r25
    4634:	8f 93       	push	r24
    4636:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("****************************************************\n"	));
    463a:	82 e1       	ldi	r24, 0x12	; 18
    463c:	9d e1       	ldi	r25, 0x1D	; 29
    463e:	9f 93       	push	r25
    4640:	8f 93       	push	r24
    4642:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    4646:	8f e0       	ldi	r24, 0x0F	; 15
    4648:	9d e1       	ldi	r25, 0x1D	; 29
    464a:	9f 93       	push	r25
    464c:	8f 93       	push	r24
    464e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				break ;
    4652:	8d b7       	in	r24, 0x3d	; 61
    4654:	9e b7       	in	r25, 0x3e	; 62
    4656:	08 96       	adiw	r24, 0x08	; 8
    4658:	0f b6       	in	r0, 0x3f	; 63
    465a:	f8 94       	cli
    465c:	9e bf       	out	0x3e, r25	; 62
    465e:	0f be       	out	0x3f, r0	; 63
    4660:	8d bf       	out	0x3d, r24	; 61
	printf_P(PSTR(" \n" ));
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_Programing_Mode]));
	_delay_ms(ATM_DLEAY_IN_S);
	
	
	while(!ExitFlag)
    4662:	cc 23       	and	r28, r28
    4664:	09 f4       	brne	.+2      	; 0x4668 <ATM_Programming_mode+0x2ec>
    4666:	1f cf       	rjmp	.-450    	; 0x44a6 <ATM_Programming_mode+0x12a>
				break ;
			
			
		}	
	}
}
    4668:	cf 91       	pop	r28
    466a:	08 95       	ret

0000466c <ATM_Operation_mode>:
		uint8_t ExitFlag =0 ; 
void ATM_Operation_mode(void)
{	
	uint8_t index =0 ;
	uint8_t	CommandFlag  =0 ;	
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_WELCOME_OPERATE]));
    466c:	8a ed       	ldi	r24, 0xDA	; 218
    466e:	90 e3       	ldi	r25, 0x30	; 48
    4670:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4674:	ac 01       	movw	r20, r24
    4676:	61 e0       	ldi	r22, 0x01	; 1
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_MODE]));
    467e:	8e ee       	ldi	r24, 0xEE	; 238
    4680:	90 e3       	ldi	r25, 0x30	; 48
    4682:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4686:	ac 01       	movw	r20, r24
    4688:	61 e0       	ldi	r22, 0x01	; 1
    468a:	82 e0       	ldi	r24, 0x02	; 2
    468c:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
	printf_P(PSTR("****************************************************\n"	));
    4690:	8f ed       	ldi	r24, 0xDF	; 223
    4692:	9f e0       	ldi	r25, 0x0F	; 15
    4694:	9f 93       	push	r25
    4696:	8f 93       	push	r24
    4698:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*****************  "));
    469c:	8b ec       	ldi	r24, 0xCB	; 203
    469e:	9f e0       	ldi	r25, 0x0F	; 15
    46a0:	9f 93       	push	r25
    46a2:	8f 93       	push	r24
    46a4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P((char *)LCD_StrF[LCD_Print_WELCOME_OPERATE]);
    46a8:	8a ed       	ldi	r24, 0xDA	; 218
    46aa:	90 e3       	ldi	r25, 0x30	; 48
    46ac:	9f 93       	push	r25
    46ae:	8f 93       	push	r24
    46b0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" ****************\n" ));
    46b4:	88 eb       	ldi	r24, 0xB8	; 184
    46b6:	9f e0       	ldi	r25, 0x0F	; 15
    46b8:	9f 93       	push	r25
    46ba:	8f 93       	push	r24
    46bc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*****************  "));
    46c0:	84 ea       	ldi	r24, 0xA4	; 164
    46c2:	9f e0       	ldi	r25, 0x0F	; 15
    46c4:	9f 93       	push	r25
    46c6:	8f 93       	push	r24
    46c8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P((char *)LCD_StrF[LCD_Print_MODE]);
    46cc:	8e ee       	ldi	r24, 0xEE	; 238
    46ce:	90 e3       	ldi	r25, 0x30	; 48
    46d0:	9f 93       	push	r25
    46d2:	8f 93       	push	r24
    46d4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" ***************\n" ));
    46d8:	82 e9       	ldi	r24, 0x92	; 146
    46da:	9f e0       	ldi	r25, 0x0F	; 15
    46dc:	9f 93       	push	r25
    46de:	8f 93       	push	r24
    46e0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("****************************************************\n"	));
    46e4:	8c e5       	ldi	r24, 0x5C	; 92
    46e6:	9f e0       	ldi	r25, 0x0F	; 15
    46e8:	9f 93       	push	r25
    46ea:	8f 93       	push	r24
    46ec:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" \n" ));
    46f0:	89 e5       	ldi	r24, 0x59	; 89
    46f2:	9f e0       	ldi	r25, 0x0F	; 15
    46f4:	9f 93       	push	r25
    46f6:	8f 93       	push	r24
    46f8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    46fc:	2f ef       	ldi	r18, 0xFF	; 255
    46fe:	8d e3       	ldi	r24, 0x3D	; 61
    4700:	99 e4       	ldi	r25, 0x49	; 73
    4702:	21 50       	subi	r18, 0x01	; 1
    4704:	80 40       	sbci	r24, 0x00	; 0
    4706:	90 40       	sbci	r25, 0x00	; 0
    4708:	e1 f7       	brne	.-8      	; 0x4702 <ATM_Operation_mode+0x96>
    470a:	00 c0       	rjmp	.+0      	; 0x470c <ATM_Operation_mode+0xa0>
    470c:	00 00       	nop
    470e:	ad b7       	in	r26, 0x3d	; 61
    4710:	be b7       	in	r27, 0x3e	; 62
    4712:	52 96       	adiw	r26, 0x12	; 18
    4714:	0f b6       	in	r0, 0x3f	; 63
    4716:	f8 94       	cli
    4718:	be bf       	out	0x3e, r27	; 62
    471a:	0f be       	out	0x3f, r0	; 63
    471c:	ad bf       	out	0x3d, r26	; 61
    471e:	38 c3       	rjmp	.+1648   	; 0x4d90 <ATM_Operation_mode+0x724>
	_delay_ms(ATM_DLEAY_IN_S);


	while(!ExitFlag)
	{
		index = 0 , KeyPad_Key = 0;
    4720:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <KeyPad_Key>
		memset(TempBlance , 0 , ADMIN_MAX_DAILY_LEN);
    4724:	86 e0       	ldi	r24, 0x06	; 6
    4726:	e5 eb       	ldi	r30, 0xB5	; 181
    4728:	f0 e0       	ldi	r31, 0x00	; 0
    472a:	df 01       	movw	r26, r30
    472c:	1d 92       	st	X+, r1
    472e:	8a 95       	dec	r24
    4730:	e9 f7       	brne	.-6      	; 0x472c <ATM_Operation_mode+0xc0>

		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD) ;
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_PLEASE_ENTER]));
    4738:	82 e0       	ldi	r24, 0x02	; 2
    473a:	91 e3       	ldi	r25, 0x31	; 49
    473c:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4740:	ac 01       	movw	r20, r24
    4742:	61 e0       	ldi	r22, 0x01	; 1
    4744:	81 e0       	ldi	r24, 0x01	; 1
    4746:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_CARD]));
    474a:	8a e1       	ldi	r24, 0x1A	; 26
    474c:	92 e3       	ldi	r25, 0x32	; 50
    474e:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4752:	ac 01       	movw	r20, r24
    4754:	61 e0       	ldi	r22, 0x01	; 1
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
		printf_P(PSTR("****************************************************\n"	));
    475c:	83 e2       	ldi	r24, 0x23	; 35
    475e:	9f e0       	ldi	r25, 0x0F	; 15
    4760:	9f 93       	push	r25
    4762:	8f 93       	push	r24
    4764:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*****************  "));
    4768:	8f e0       	ldi	r24, 0x0F	; 15
    476a:	9f e0       	ldi	r25, 0x0F	; 15
    476c:	9f 93       	push	r25
    476e:	8f 93       	push	r24
    4770:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P((char *)LCD_StrF[LCD_Print_PLEASE_ENTER]);
    4774:	82 e0       	ldi	r24, 0x02	; 2
    4776:	91 e3       	ldi	r25, 0x31	; 49
    4778:	9f 93       	push	r25
    477a:	8f 93       	push	r24
    477c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" ***************\n" ));
    4780:	8d ef       	ldi	r24, 0xFD	; 253
    4782:	9e e0       	ldi	r25, 0x0E	; 14
    4784:	9f 93       	push	r25
    4786:	8f 93       	push	r24
    4788:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*****************  "));
    478c:	89 ee       	ldi	r24, 0xE9	; 233
    478e:	9e e0       	ldi	r25, 0x0E	; 14
    4790:	9f 93       	push	r25
    4792:	8f 93       	push	r24
    4794:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P((char *)LCD_StrF[LCD_Print_CARD]);
    4798:	8a e1       	ldi	r24, 0x1A	; 26
    479a:	92 e3       	ldi	r25, 0x32	; 50
    479c:	9f 93       	push	r25
    479e:	8f 93       	push	r24
    47a0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" ****************\n" ));
    47a4:	86 ed       	ldi	r24, 0xD6	; 214
    47a6:	9e e0       	ldi	r25, 0x0E	; 14
    47a8:	9f 93       	push	r25
    47aa:	8f 93       	push	r24
    47ac:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("****************************************************\n"	));
    47b0:	80 ea       	ldi	r24, 0xA0	; 160
    47b2:	9e e0       	ldi	r25, 0x0E	; 14
    47b4:	9f 93       	push	r25
    47b6:	8f 93       	push	r24
    47b8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" \n" ));
    47bc:	8d e9       	ldi	r24, 0x9D	; 157
    47be:	9e e0       	ldi	r25, 0x0E	; 14
    47c0:	9f 93       	push	r25
    47c2:	8f 93       	push	r24
    47c4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>

		while(Button_Read(ATM_Buttons, ATM_Insert_Card_Button_INDEX) == State_HIGH);
    47c8:	8d b7       	in	r24, 0x3d	; 61
    47ca:	9e b7       	in	r25, 0x3e	; 62
    47cc:	42 96       	adiw	r24, 0x12	; 18
    47ce:	0f b6       	in	r0, 0x3f	; 63
    47d0:	f8 94       	cli
    47d2:	9e bf       	out	0x3e, r25	; 62
    47d4:	0f be       	out	0x3f, r0	; 63
    47d6:	8d bf       	out	0x3d, r24	; 61
    47d8:	60 e0       	ldi	r22, 0x00	; 0
    47da:	81 e7       	ldi	r24, 0x71	; 113
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <Button_Read>
    47e2:	81 30       	cpi	r24, 0x01	; 1
    47e4:	c9 f3       	breq	.-14     	; 0x47d8 <ATM_Operation_mode+0x16c>
		if(Button_Read(ATM_Buttons, ATM_Insert_Card_Button_INDEX) == State_LOW)
    47e6:	60 e0       	ldi	r22, 0x00	; 0
    47e8:	81 e7       	ldi	r24, 0x71	; 113
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <Button_Read>
    47f0:	81 11       	cpse	r24, r1
    47f2:	2b c2       	rjmp	.+1110   	; 0x4c4a <ATM_Operation_mode+0x5de>
		{
			 ATM_Collect_CardData(&CardData);
    47f4:	82 ef       	ldi	r24, 0xF2	; 242
    47f6:	91 e0       	ldi	r25, 0x01	; 1
    47f8:	0e 94 f0 1b 	call	0x37e0	; 0x37e0 <ATM_Collect_CardData>
			CardAdd = SERVER_OPER_Search_CARD(&CardData , ATM_SEARCH_BY_PAN) ;
    47fc:	60 e0       	ldi	r22, 0x00	; 0
    47fe:	82 ef       	ldi	r24, 0xF2	; 242
    4800:	91 e0       	ldi	r25, 0x01	; 1
    4802:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <SERVER_OPER_Search_CARD>
    4806:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <CardAdd+0x1>
    480a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <CardAdd>
		
		if ( CardAdd != -1 ) // if data exist
    480e:	8f 3f       	cpi	r24, 0xFF	; 255
    4810:	af ef       	ldi	r26, 0xFF	; 255
    4812:	9a 07       	cpc	r25, r26
    4814:	c9 f1       	breq	.+114    	; 0x4888 <ATM_Operation_mode+0x21c>
		{
			EEPROM_ReadByteS(CardAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE);	
    4816:	44 e2       	ldi	r20, 0x24	; 36
    4818:	67 ea       	ldi	r22, 0xA7	; 167
    481a:	71 e0       	ldi	r23, 0x01	; 1
    481c:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
			CardBalance = atoi((char *)TempCardData.CardBalance) ;
    4820:	83 ec       	ldi	r24, 0xC3	; 195
    4822:	91 e0       	ldi	r25, 0x01	; 1
    4824:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <atoi>
    4828:	09 2e       	mov	r0, r25
    482a:	00 0c       	add	r0, r0
    482c:	aa 0b       	sbc	r26, r26
    482e:	bb 0b       	sbc	r27, r27
    4830:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <CardBalance>
    4834:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <CardBalance+0x1>
    4838:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <CardBalance+0x2>
    483c:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <CardBalance+0x3>
			printf_P(PSTR("**********************************************\n"	));
    4840:	8d e6       	ldi	r24, 0x6D	; 109
    4842:	9e e0       	ldi	r25, 0x0E	; 14
    4844:	9f 93       	push	r25
    4846:	8f 93       	push	r24
    4848:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("************ This card Is Exist **************\n" ));
    484c:	8d e3       	ldi	r24, 0x3D	; 61
    484e:	9e e0       	ldi	r25, 0x0E	; 14
    4850:	9f 93       	push	r25
    4852:	8f 93       	push	r24
    4854:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("**********************************************\n"	));
    4858:	8d e0       	ldi	r24, 0x0D	; 13
    485a:	9e e0       	ldi	r25, 0x0E	; 14
    485c:	9f 93       	push	r25
    485e:	8f 93       	push	r24
    4860:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR(" \n" ));
    4864:	8a e0       	ldi	r24, 0x0A	; 10
    4866:	9e e0       	ldi	r25, 0x0E	; 14
    4868:	9f 93       	push	r25
    486a:	8f 93       	push	r24
    486c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			CardDataExist = 1 ;
    4870:	81 e0       	ldi	r24, 0x01	; 1
    4872:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <CardDataExist>
    4876:	8d b7       	in	r24, 0x3d	; 61
    4878:	9e b7       	in	r25, 0x3e	; 62
    487a:	08 96       	adiw	r24, 0x08	; 8
    487c:	0f b6       	in	r0, 0x3f	; 63
    487e:	f8 94       	cli
    4880:	9e bf       	out	0x3e, r25	; 62
    4882:	0f be       	out	0x3f, r0	; 63
    4884:	8d bf       	out	0x3d, r24	; 61
    4886:	22 c0       	rjmp	.+68     	; 0x48cc <ATM_Operation_mode+0x260>
		}else  // if data dose not exist
		{
			printf_P(PSTR("************************************************\n"	));
    4888:	88 ed       	ldi	r24, 0xD8	; 216
    488a:	9d e0       	ldi	r25, 0x0D	; 13
    488c:	9f 93       	push	r25
    488e:	8f 93       	push	r24
    4890:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("************* Not exist Card Data  *************\n" ));
    4894:	86 ea       	ldi	r24, 0xA6	; 166
    4896:	9d e0       	ldi	r25, 0x0D	; 13
    4898:	9f 93       	push	r25
    489a:	8f 93       	push	r24
    489c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR("************************************************\n"	));
    48a0:	84 e7       	ldi	r24, 0x74	; 116
    48a2:	9d e0       	ldi	r25, 0x0D	; 13
    48a4:	9f 93       	push	r25
    48a6:	8f 93       	push	r24
    48a8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			printf_P(PSTR(" \n" ));
    48ac:	81 e7       	ldi	r24, 0x71	; 113
    48ae:	9d e0       	ldi	r25, 0x0D	; 13
    48b0:	9f 93       	push	r25
    48b2:	8f 93       	push	r24
    48b4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
			CardDataExist = 0 ; 
    48b8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <CardDataExist>
    48bc:	ad b7       	in	r26, 0x3d	; 61
    48be:	be b7       	in	r27, 0x3e	; 62
    48c0:	18 96       	adiw	r26, 0x08	; 8
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	be bf       	out	0x3e, r27	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	ad bf       	out	0x3d, r26	; 61
		}			
		
			
		
			if (CardDataExist == 1)
    48cc:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <CardDataExist>
    48d0:	81 30       	cpi	r24, 0x01	; 1
    48d2:	09 f0       	breq	.+2      	; 0x48d6 <ATM_Operation_mode+0x26a>
    48d4:	ba c1       	rjmp	.+884    	; 0x4c4a <ATM_Operation_mode+0x5de>
			{
				LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    48d6:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
				LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_ENTER_THE]));
    48da:	8a e2       	ldi	r24, 0x2A	; 42
    48dc:	91 e3       	ldi	r25, 0x31	; 49
    48de:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    48e2:	ac 01       	movw	r20, r24
    48e4:	61 e0       	ldi	r22, 0x01	; 1
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
				LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_TRANSAC_AMOUNT]));
    48ec:	8e e3       	ldi	r24, 0x3E	; 62
    48ee:	91 e3       	ldi	r25, 0x31	; 49
    48f0:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    48f4:	ac 01       	movw	r20, r24
    48f6:	61 e0       	ldi	r22, 0x01	; 1
    48f8:	82 e0       	ldi	r24, 0x02	; 2
    48fa:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
				printf_P(PSTR("****************************************************\n"	));
    48fe:	8b e3       	ldi	r24, 0x3B	; 59
    4900:	9d e0       	ldi	r25, 0x0D	; 13
    4902:	9f 93       	push	r25
    4904:	8f 93       	push	r24
    4906:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*****************  "));
    490a:	87 e2       	ldi	r24, 0x27	; 39
    490c:	9d e0       	ldi	r25, 0x0D	; 13
    490e:	9f 93       	push	r25
    4910:	8f 93       	push	r24
    4912:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P((char *)LCD_StrF[LCD_Print_ENTER_THE]);
    4916:	8a e2       	ldi	r24, 0x2A	; 42
    4918:	91 e3       	ldi	r25, 0x31	; 49
    491a:	9f 93       	push	r25
    491c:	8f 93       	push	r24
    491e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" ****************\n" ));
    4922:	84 e1       	ldi	r24, 0x14	; 20
    4924:	9d e0       	ldi	r25, 0x0D	; 13
    4926:	9f 93       	push	r25
    4928:	8f 93       	push	r24
    492a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*****************  "));
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	9d e0       	ldi	r25, 0x0D	; 13
    4932:	9f 93       	push	r25
    4934:	8f 93       	push	r24
    4936:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P((char *)LCD_StrF[LCD_Print_TRANSAC_AMOUNT]);
    493a:	8e e3       	ldi	r24, 0x3E	; 62
    493c:	91 e3       	ldi	r25, 0x31	; 49
    493e:	9f 93       	push	r25
    4940:	8f 93       	push	r24
    4942:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" **************** \n" ));
    4946:	8c ee       	ldi	r24, 0xEC	; 236
    4948:	9c e0       	ldi	r25, 0x0C	; 12
    494a:	9f 93       	push	r25
    494c:	8f 93       	push	r24
    494e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("****************************************************\n"	));
    4952:	86 eb       	ldi	r24, 0xB6	; 182
    4954:	9c e0       	ldi	r25, 0x0C	; 12
    4956:	9f 93       	push	r25
    4958:	8f 93       	push	r24
    495a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));
    495e:	83 eb       	ldi	r24, 0xB3	; 179
    4960:	9c e0       	ldi	r25, 0x0C	; 12
    4962:	9f 93       	push	r25
    4964:	8f 93       	push	r24
    4966:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    496a:	bf ef       	ldi	r27, 0xFF	; 255
    496c:	2d e3       	ldi	r18, 0x3D	; 61
    496e:	89 e4       	ldi	r24, 0x49	; 73
    4970:	b1 50       	subi	r27, 0x01	; 1
    4972:	20 40       	sbci	r18, 0x00	; 0
    4974:	80 40       	sbci	r24, 0x00	; 0
    4976:	e1 f7       	brne	.-8      	; 0x4970 <ATM_Operation_mode+0x304>
    4978:	00 c0       	rjmp	.+0      	; 0x497a <ATM_Operation_mode+0x30e>
    497a:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    497c:	81 e0       	ldi	r24, 0x01	; 1
    497e:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
				LCD_Send_String_WithLoc(1,1,(uint8_t *) Print_F(LCD_StrF[LCD_Print_TRANSACTION]));
    4982:	82 e5       	ldi	r24, 0x52	; 82
    4984:	91 e3       	ldi	r25, 0x31	; 49
    4986:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    498a:	ac 01       	movw	r20, r24
    498c:	61 e0       	ldi	r22, 0x01	; 1
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
				LCD_Goto_Location(2,1);
    4994:	61 e0       	ldi	r22, 0x01	; 1
    4996:	82 e0       	ldi	r24, 0x02	; 2
    4998:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <LCD_Goto_Location>
				printf_P(PSTR("****************************************************\n"	));
    499c:	8d e7       	ldi	r24, 0x7D	; 125
    499e:	9c e0       	ldi	r25, 0x0C	; 12
    49a0:	9f 93       	push	r25
    49a2:	8f 93       	push	r24
    49a4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("*****************  "));
    49a8:	89 e6       	ldi	r24, 0x69	; 105
    49aa:	9c e0       	ldi	r25, 0x0C	; 12
    49ac:	9f 93       	push	r25
    49ae:	8f 93       	push	r24
    49b0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P((char *)LCD_StrF[LCD_Print_TRANSACTION]);
    49b4:	82 e5       	ldi	r24, 0x52	; 82
    49b6:	91 e3       	ldi	r25, 0x31	; 49
    49b8:	9f 93       	push	r25
    49ba:	8f 93       	push	r24
    49bc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" ****************\n" ));
    49c0:	86 e5       	ldi	r24, 0x56	; 86
    49c2:	9c e0       	ldi	r25, 0x0C	; 12
    49c4:	9f 93       	push	r25
    49c6:	8f 93       	push	r24
    49c8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR("****************************************************\n"	));
    49cc:	80 e2       	ldi	r24, 0x20	; 32
    49ce:	9c e0       	ldi	r25, 0x0C	; 12
    49d0:	9f 93       	push	r25
    49d2:	8f 93       	push	r24
    49d4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
				printf_P(PSTR(" \n" ));			
    49d8:	8d e1       	ldi	r24, 0x1D	; 29
    49da:	9c e0       	ldi	r25, 0x0C	; 12
    49dc:	9f 93       	push	r25
    49de:	8f 93       	push	r24
    49e0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    49e4:	ad b7       	in	r26, 0x3d	; 61
    49e6:	be b7       	in	r27, 0x3e	; 62
    49e8:	5e 96       	adiw	r26, 0x1e	; 30
    49ea:	0f b6       	in	r0, 0x3f	; 63
    49ec:	f8 94       	cli
    49ee:	be bf       	out	0x3e, r27	; 62
    49f0:	0f be       	out	0x3f, r0	; 63
    49f2:	ad bf       	out	0x3d, r26	; 61
	_delay_ms(ATM_DLEAY_IN_S);


	while(!ExitFlag)
	{
		index = 0 , KeyPad_Key = 0;
    49f4:	c0 e0       	ldi	r28, 0x00	; 0
    49f6:	13 c0       	rjmp	.+38     	; 0x4a1e <ATM_Operation_mode+0x3b2>
    49f8:	bf ef       	ldi	r27, 0xFF	; 255
    49fa:	23 ec       	ldi	r18, 0xC3	; 195
    49fc:	89 e0       	ldi	r24, 0x09	; 9
    49fe:	b1 50       	subi	r27, 0x01	; 1
    4a00:	20 40       	sbci	r18, 0x00	; 0
    4a02:	80 40       	sbci	r24, 0x00	; 0
    4a04:	e1 f7       	brne	.-8      	; 0x49fe <ATM_Operation_mode+0x392>
    4a06:	00 c0       	rjmp	.+0      	; 0x4a08 <ATM_Operation_mode+0x39c>
    4a08:	00 00       	nop
				while(1)
				{
					while(KeyPad_Key == 0)
					{
						_delay_ms(200);
						KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
    4a0a:	8b eb       	ldi	r24, 0xBB	; 187
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	0e 94 b2 29 	call	0x5364	; 0x5364 <KeyPad_GetPressedKey>
    4a12:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <KeyPad_Key>
						if((KeyPad_Key == '*'))	KeyPad_Key= 0 ; 
    4a16:	8a 32       	cpi	r24, 0x2A	; 42
    4a18:	11 f4       	brne	.+4      	; 0x4a1e <ATM_Operation_mode+0x3b2>
    4a1a:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <KeyPad_Key>
			


				while(1)
				{
					while(KeyPad_Key == 0)
    4a1e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <KeyPad_Key>
    4a22:	88 23       	and	r24, r24
    4a24:	49 f3       	breq	.-46     	; 0x49f8 <ATM_Operation_mode+0x38c>
						_delay_ms(200);
						KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
						if((KeyPad_Key == '*'))	KeyPad_Key= 0 ; 
					
					}
					if (KeyPad_Key == '#')
    4a26:	83 32       	cpi	r24, 0x23	; 35
    4a28:	71 f0       	breq	.+28     	; 0x4a46 <ATM_Operation_mode+0x3da>
					{
						break; 
					}else
					{
					
						LCD_Send_Character_CurrLoc('*');
    4a2a:	8a e2       	ldi	r24, 0x2A	; 42
    4a2c:	0e 94 91 2a 	call	0x5522	; 0x5522 <LCD_Send_Character_CurrLoc>
						TempBlance[index++] = KeyPad_Key ;
    4a30:	ec 2f       	mov	r30, r28
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	eb 54       	subi	r30, 0x4B	; 75
    4a36:	ff 4f       	sbci	r31, 0xFF	; 255
    4a38:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <KeyPad_Key>
    4a3c:	80 83       	st	Z, r24
						KeyPad_Key = 0 ;
    4a3e:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <KeyPad_Key>
						break; 
					}else
					{
					
						LCD_Send_Character_CurrLoc('*');
						TempBlance[index++] = KeyPad_Key ;
    4a42:	cf 5f       	subi	r28, 0xFF	; 255
						KeyPad_Key = 0 ;
					}
				
				
				}
    4a44:	ec cf       	rjmp	.-40     	; 0x4a1e <ATM_Operation_mode+0x3b2>
			
			
				// Get Card PAN and Balance from  CARD 
				UserTransAmount = atoi( (char *)TempBlance ) ;
    4a46:	85 eb       	ldi	r24, 0xB5	; 181
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <atoi>
    4a4e:	09 2e       	mov	r0, r25
    4a50:	00 0c       	add	r0, r0
    4a52:	aa 0b       	sbc	r26, r26
    4a54:	bb 0b       	sbc	r27, r27
    4a56:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <UserTransAmount>
    4a5a:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <UserTransAmount+0x1>
    4a5e:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <UserTransAmount+0x2>
    4a62:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <UserTransAmount+0x3>
				LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
				LCD_Send_Integer_CurrLoc(UserTransAmount , 7);
    4a6c:	67 e0       	ldi	r22, 0x07	; 7
    4a6e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <UserTransAmount>
    4a72:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <UserTransAmount+0x1>
    4a76:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <LCD_Send_Integer_CurrLoc>
    4a7a:	9f ef       	ldi	r25, 0xFF	; 255
    4a7c:	ad e3       	ldi	r26, 0x3D	; 61
    4a7e:	b9 e4       	ldi	r27, 0x49	; 73
    4a80:	91 50       	subi	r25, 0x01	; 1
    4a82:	a0 40       	sbci	r26, 0x00	; 0
    4a84:	b0 40       	sbci	r27, 0x00	; 0
    4a86:	e1 f7       	brne	.-8      	; 0x4a80 <ATM_Operation_mode+0x414>
    4a88:	00 c0       	rjmp	.+0      	; 0x4a8a <ATM_Operation_mode+0x41e>
    4a8a:	00 00       	nop
				_delay_ms(ATM_DLEAY_IN_S);
				if((UserTransAmount > MaxDailyWithDraw) || (UserTransAmount > CardBalance))
    4a8c:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <UserTransAmount>
    4a90:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <UserTransAmount+0x1>
    4a94:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <UserTransAmount+0x2>
    4a98:	70 91 a0 01 	lds	r23, 0x01A0	; 0x8001a0 <UserTransAmount+0x3>
    4a9c:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <MaxDailyWithDraw>
    4aa0:	90 91 ae 00 	lds	r25, 0x00AE	; 0x8000ae <MaxDailyWithDraw+0x1>
    4aa4:	a0 91 af 00 	lds	r26, 0x00AF	; 0x8000af <MaxDailyWithDraw+0x2>
    4aa8:	b0 91 b0 00 	lds	r27, 0x00B0	; 0x8000b0 <MaxDailyWithDraw+0x3>
    4aac:	84 17       	cp	r24, r20
    4aae:	95 07       	cpc	r25, r21
    4ab0:	a6 07       	cpc	r26, r22
    4ab2:	b7 07       	cpc	r27, r23
    4ab4:	70 f0       	brcs	.+28     	; 0x4ad2 <ATM_Operation_mode+0x466>
    4ab6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CardBalance>
    4aba:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <CardBalance+0x1>
    4abe:	a0 91 b3 00 	lds	r26, 0x00B3	; 0x8000b3 <CardBalance+0x2>
    4ac2:	b0 91 b4 00 	lds	r27, 0x00B4	; 0x8000b4 <CardBalance+0x3>
    4ac6:	84 17       	cp	r24, r20
    4ac8:	95 07       	cpc	r25, r21
    4aca:	a6 07       	cpc	r26, r22
    4acc:	b7 07       	cpc	r27, r23
    4ace:	08 f0       	brcs	.+2      	; 0x4ad2 <ATM_Operation_mode+0x466>
    4ad0:	5d c0       	rjmp	.+186    	; 0x4b8c <ATM_Operation_mode+0x520>
				{
					LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
					printf_P(PSTR("****************************************************\n"	));
    4ad8:	87 ee       	ldi	r24, 0xE7	; 231
    4ada:	9b e0       	ldi	r25, 0x0B	; 11
    4adc:	9f 93       	push	r25
    4ade:	8f 93       	push	r24
    4ae0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*****************  "));
    4ae4:	83 ed       	ldi	r24, 0xD3	; 211
    4ae6:	9b e0       	ldi	r25, 0x0B	; 11
    4ae8:	9f 93       	push	r25
    4aea:	8f 93       	push	r24
    4aec:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P((char *)LCD_StrF[LCD_Print_Wrong]);
    4af0:	86 e6       	ldi	r24, 0x66	; 102
    4af2:	91 e3       	ldi	r25, 0x31	; 49
    4af4:	9f 93       	push	r25
    4af6:	8f 93       	push	r24
    4af8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" ***************\n" ));
    4afc:	81 ec       	ldi	r24, 0xC1	; 193
    4afe:	9b e0       	ldi	r25, 0x0B	; 11
    4b00:	9f 93       	push	r25
    4b02:	8f 93       	push	r24
    4b04:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*****************  "));
    4b08:	8d ea       	ldi	r24, 0xAD	; 173
    4b0a:	9b e0       	ldi	r25, 0x0B	; 11
    4b0c:	9f 93       	push	r25
    4b0e:	8f 93       	push	r24
    4b10:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P((char *)LCD_StrF[LCD_Print_Transaction]);
    4b14:	8a e7       	ldi	r24, 0x7A	; 122
    4b16:	91 e3       	ldi	r25, 0x31	; 49
    4b18:	9f 93       	push	r25
    4b1a:	8f 93       	push	r24
    4b1c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" *************** \n" ));
    4b20:	8a e9       	ldi	r24, 0x9A	; 154
    4b22:	9b e0       	ldi	r25, 0x0B	; 11
    4b24:	9f 93       	push	r25
    4b26:	8f 93       	push	r24
    4b28:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("****************************************************\n"	));
    4b2c:	84 e6       	ldi	r24, 0x64	; 100
    4b2e:	9b e0       	ldi	r25, 0x0B	; 11
    4b30:	9f 93       	push	r25
    4b32:	8f 93       	push	r24
    4b34:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR(" \n" ));
    4b38:	81 e6       	ldi	r24, 0x61	; 97
    4b3a:	9b e0       	ldi	r25, 0x0B	; 11
    4b3c:	9f 93       	push	r25
    4b3e:	8f 93       	push	r24
    4b40:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_Wrong]));
    4b44:	86 e6       	ldi	r24, 0x66	; 102
    4b46:	91 e3       	ldi	r25, 0x31	; 49
    4b48:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4b4c:	ac 01       	movw	r20, r24
    4b4e:	61 e0       	ldi	r22, 0x01	; 1
    4b50:	81 e0       	ldi	r24, 0x01	; 1
    4b52:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
					LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_Transaction]));
    4b56:	8a e7       	ldi	r24, 0x7A	; 122
    4b58:	91 e3       	ldi	r25, 0x31	; 49
    4b5a:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4b5e:	ac 01       	movw	r20, r24
    4b60:	61 e0       	ldi	r22, 0x01	; 1
    4b62:	82 e0       	ldi	r24, 0x02	; 2
    4b64:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
    4b68:	2f ef       	ldi	r18, 0xFF	; 255
    4b6a:	8d e3       	ldi	r24, 0x3D	; 61
    4b6c:	99 e4       	ldi	r25, 0x49	; 73
    4b6e:	21 50       	subi	r18, 0x01	; 1
    4b70:	80 40       	sbci	r24, 0x00	; 0
    4b72:	90 40       	sbci	r25, 0x00	; 0
    4b74:	e1 f7       	brne	.-8      	; 0x4b6e <ATM_Operation_mode+0x502>
    4b76:	00 c0       	rjmp	.+0      	; 0x4b78 <ATM_Operation_mode+0x50c>
    4b78:	00 00       	nop
    4b7a:	ad b7       	in	r26, 0x3d	; 61
    4b7c:	be b7       	in	r27, 0x3e	; 62
    4b7e:	52 96       	adiw	r26, 0x12	; 18
    4b80:	0f b6       	in	r0, 0x3f	; 63
    4b82:	f8 94       	cli
    4b84:	be bf       	out	0x3e, r27	; 62
    4b86:	0f be       	out	0x3f, r0	; 63
    4b88:	ad bf       	out	0x3d, r26	; 61
    4b8a:	5f c0       	rjmp	.+190    	; 0x4c4a <ATM_Operation_mode+0x5de>
					_delay_ms(ATM_DLEAY_IN_S); 
				}else{
					// right transaction
					CardBalance -= UserTransAmount ; 
    4b8c:	84 1b       	sub	r24, r20
    4b8e:	95 0b       	sbc	r25, r21
    4b90:	a6 0b       	sbc	r26, r22
    4b92:	b7 0b       	sbc	r27, r23
    4b94:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <CardBalance>
    4b98:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <CardBalance+0x1>
    4b9c:	a0 93 b3 00 	sts	0x00B3, r26	; 0x8000b3 <CardBalance+0x2>
    4ba0:	b0 93 b4 00 	sts	0x00B4, r27	; 0x8000b4 <CardBalance+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    4ba4:	4a e0       	ldi	r20, 0x0A	; 10
    4ba6:	63 ec       	ldi	r22, 0xC3	; 195
    4ba8:	71 e0       	ldi	r23, 0x01	; 1
    4baa:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <__itoa_ncheck>
					itoa(CardBalance , (char *)TempCardData.CardBalance , 10 ) ;
					LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    4bae:	81 e0       	ldi	r24, 0x01	; 1
    4bb0:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
					LCD_Send_Integer_CurrLoc(CardBalance , 7);
    4bb4:	67 e0       	ldi	r22, 0x07	; 7
    4bb6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CardBalance>
    4bba:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <CardBalance+0x1>
    4bbe:	0e 94 5e 2b 	call	0x56bc	; 0x56bc <LCD_Send_Integer_CurrLoc>
					printf("Current  balance is : %i \n" , CardBalance);
    4bc2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <CardBalance+0x3>
    4bc6:	8f 93       	push	r24
    4bc8:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <CardBalance+0x2>
    4bcc:	8f 93       	push	r24
    4bce:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <CardBalance+0x1>
    4bd2:	8f 93       	push	r24
    4bd4:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <CardBalance>
    4bd8:	8f 93       	push	r24
    4bda:	82 e3       	ldi	r24, 0x32	; 50
    4bdc:	91 e0       	ldi	r25, 0x01	; 1
    4bde:	9f 93       	push	r25
    4be0:	8f 93       	push	r24
    4be2:	0e 94 88 37 	call	0x6f10	; 0x6f10 <printf>
					EEPROM_WriteByteS(CardAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE);
    4be6:	44 e2       	ldi	r20, 0x24	; 36
    4be8:	67 ea       	ldi	r22, 0xA7	; 167
    4bea:	71 e0       	ldi	r23, 0x01	; 1
    4bec:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <CardAdd>
    4bf0:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <CardAdd+0x1>
    4bf4:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
					LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_Success]));
    4bf8:	8a e6       	ldi	r24, 0x6A	; 106
    4bfa:	92 e3       	ldi	r25, 0x32	; 50
    4bfc:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4c00:	ac 01       	movw	r20, r24
    4c02:	61 e0       	ldi	r22, 0x01	; 1
    4c04:	81 e0       	ldi	r24, 0x01	; 1
    4c06:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
					LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_Transaction]));
    4c0a:	8a e7       	ldi	r24, 0x7A	; 122
    4c0c:	91 e3       	ldi	r25, 0x31	; 49
    4c0e:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4c12:	ac 01       	movw	r20, r24
    4c14:	61 e0       	ldi	r22, 0x01	; 1
    4c16:	82 e0       	ldi	r24, 0x02	; 2
    4c18:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
					Motor_Dir( DIR_LEFT , 70);
    4c1c:	66 e4       	ldi	r22, 0x46	; 70
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	0e 94 3f 2c 	call	0x587e	; 0x587e <Motor_Dir>
    4c24:	bf ef       	ldi	r27, 0xFF	; 255
    4c26:	23 ed       	ldi	r18, 0xD3	; 211
    4c28:	80 e3       	ldi	r24, 0x30	; 48
    4c2a:	b1 50       	subi	r27, 0x01	; 1
    4c2c:	20 40       	sbci	r18, 0x00	; 0
    4c2e:	80 40       	sbci	r24, 0x00	; 0
    4c30:	e1 f7       	brne	.-8      	; 0x4c2a <ATM_Operation_mode+0x5be>
    4c32:	00 c0       	rjmp	.+0      	; 0x4c34 <ATM_Operation_mode+0x5c8>
    4c34:	00 00       	nop
					_delay_ms(1000);
					Motor_Dir( DIR_LEFT , 0);
    4c36:	60 e0       	ldi	r22, 0x00	; 0
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	0e 94 3f 2c 	call	0x587e	; 0x587e <Motor_Dir>
    4c3e:	0f 90       	pop	r0
    4c40:	0f 90       	pop	r0
    4c42:	0f 90       	pop	r0
    4c44:	0f 90       	pop	r0
    4c46:	0f 90       	pop	r0
    4c48:	0f 90       	pop	r0
			}
		}else
		{
			;
		}
		printf_P(PSTR("*******************************************************************************************\n"));
    4c4a:	84 e0       	ldi	r24, 0x04	; 4
    4c4c:	9b e0       	ldi	r25, 0x0B	; 11
    4c4e:	9f 93       	push	r25
    4c50:	8f 93       	push	r24
    4c52:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*********************** Please Choose one of the following Commands ***********************\n" ));
    4c56:	87 ea       	ldi	r24, 0xA7	; 167
    4c58:	9a e0       	ldi	r25, 0x0A	; 10
    4c5a:	9f 93       	push	r25
    4c5c:	8f 93       	push	r24
    4c5e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*******************************************************************************************\n" ));
    4c62:	8a e4       	ldi	r24, 0x4A	; 74
    4c64:	9a e0       	ldi	r25, 0x0A	; 10
    4c66:	9f 93       	push	r25
    4c68:	8f 93       	push	r24
    4c6a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************ 1- Try another Transaction  **************************************\n" ));
    4c6e:	8d ee       	ldi	r24, 0xED	; 237
    4c70:	99 e0       	ldi	r25, 0x09	; 9
    4c72:	9f 93       	push	r25
    4c74:	8f 93       	push	r24
    4c76:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************ 2- Exit **********************************************************\n" ));
    4c7a:	80 e9       	ldi	r24, 0x90	; 144
    4c7c:	99 e0       	ldi	r25, 0x09	; 9
    4c7e:	9f 93       	push	r25
    4c80:	8f 93       	push	r24
    4c82:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*******************************************************************************************\n" ));
    4c86:	83 e3       	ldi	r24, 0x33	; 51
    4c88:	99 e0       	ldi	r25, 0x09	; 9
    4c8a:	9f 93       	push	r25
    4c8c:	8f 93       	push	r24
    4c8e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************************ END OF SELECTION !!!**********************************\n" ));
    4c92:	86 ed       	ldi	r24, 0xD6	; 214
    4c94:	98 e0       	ldi	r25, 0x08	; 8
    4c96:	9f 93       	push	r25
    4c98:	8f 93       	push	r24
    4c9a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("*******************************************************************************************\n"));
    4c9e:	89 e7       	ldi	r24, 0x79	; 121
    4ca0:	98 e0       	ldi	r25, 0x08	; 8
    4ca2:	9f 93       	push	r25
    4ca4:	8f 93       	push	r24
    4ca6:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>

		printf_P(PSTR("\n" ));
    4caa:	87 e7       	ldi	r24, 0x77	; 119
    4cac:	98 e0       	ldi	r25, 0x08	; 8
    4cae:	9f 93       	push	r25
    4cb0:	8f 93       	push	r24
    4cb2:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,(uint8_t *)"Select Command");
    4cbc:	4d e4       	ldi	r20, 0x4D	; 77
    4cbe:	51 e0       	ldi	r21, 0x01	; 1
    4cc0:	61 e0       	ldi	r22, 0x01	; 1
    4cc2:	81 e0       	ldi	r24, 0x01	; 1
    4cc4:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,(uint8_t *)"1.Try   2.Exit");
    4cc8:	4c e5       	ldi	r20, 0x5C	; 92
    4cca:	51 e0       	ldi	r21, 0x01	; 1
    4ccc:	61 e0       	ldi	r22, 0x01	; 1
    4cce:	82 e0       	ldi	r24, 0x02	; 2
    4cd0:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
 
		CommandFlag  = 1;
		while(CommandFlag)
    4cd4:	ad b7       	in	r26, 0x3d	; 61
    4cd6:	be b7       	in	r27, 0x3e	; 62
    4cd8:	52 96       	adiw	r26, 0x12	; 18
    4cda:	0f b6       	in	r0, 0x3f	; 63
    4cdc:	f8 94       	cli
    4cde:	be bf       	out	0x3e, r27	; 62
    4ce0:	0f be       	out	0x3f, r0	; 63
    4ce2:	ad bf       	out	0x3d, r26	; 61
		printf_P(PSTR("\n" ));
		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
		LCD_Send_String_WithLoc(1,1,(uint8_t *)"Select Command");
		LCD_Send_String_WithLoc(2,1,(uint8_t *)"1.Try   2.Exit");
 
		CommandFlag  = 1;
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
		while(CommandFlag)
    4ce6:	52 c0       	rjmp	.+164    	; 0x4d8c <ATM_Operation_mode+0x720>
		{
			
			KeyPad_Key = 0 ;
    4ce8:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <KeyPad_Key>
			while(KeyPad_Key == 0)
    4cec:	13 c0       	rjmp	.+38     	; 0x4d14 <ATM_Operation_mode+0x6a8>
    4cee:	bf ef       	ldi	r27, 0xFF	; 255
    4cf0:	23 ec       	ldi	r18, 0xC3	; 195
    4cf2:	89 e0       	ldi	r24, 0x09	; 9
    4cf4:	b1 50       	subi	r27, 0x01	; 1
    4cf6:	20 40       	sbci	r18, 0x00	; 0
    4cf8:	80 40       	sbci	r24, 0x00	; 0
    4cfa:	e1 f7       	brne	.-8      	; 0x4cf4 <ATM_Operation_mode+0x688>
    4cfc:	00 c0       	rjmp	.+0      	; 0x4cfe <ATM_Operation_mode+0x692>
    4cfe:	00 00       	nop
			{
				_delay_ms(200);
				KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
    4d00:	8b eb       	ldi	r24, 0xBB	; 187
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	0e 94 b2 29 	call	0x5364	; 0x5364 <KeyPad_GetPressedKey>
    4d08:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <KeyPad_Key>
				if((KeyPad_Key == '*'))	KeyPad_Key= 0 ;
    4d0c:	8a 32       	cpi	r24, 0x2A	; 42
    4d0e:	11 f4       	brne	.+4      	; 0x4d14 <ATM_Operation_mode+0x6a8>
    4d10:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <KeyPad_Key>
		CommandFlag  = 1;
		while(CommandFlag)
		{
			
			KeyPad_Key = 0 ;
			while(KeyPad_Key == 0)
    4d14:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <KeyPad_Key>
    4d18:	88 23       	and	r24, r24
    4d1a:	49 f3       	breq	.-46     	; 0x4cee <ATM_Operation_mode+0x682>
				_delay_ms(200);
				KeyPad_Key = KeyPad_GetPressedKey(&KeyPad);
				if((KeyPad_Key == '*'))	KeyPad_Key= 0 ;
			
			}
			LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    4d1c:	81 e0       	ldi	r24, 0x01	; 1
    4d1e:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
			LCD_Send_String_WithLoc(1,1,(uint8_t *)"You Pressed");
    4d22:	4b e6       	ldi	r20, 0x6B	; 107
    4d24:	51 e0       	ldi	r21, 0x01	; 1
    4d26:	61 e0       	ldi	r22, 0x01	; 1
    4d28:	81 e0       	ldi	r24, 0x01	; 1
    4d2a:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
			LCD_Send_Character_WithLoc(2,6,KeyPad_Key);
    4d2e:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <KeyPad_Key>
    4d32:	66 e0       	ldi	r22, 0x06	; 6
    4d34:	82 e0       	ldi	r24, 0x02	; 2
    4d36:	0e 94 ef 2a 	call	0x55de	; 0x55de <LCD_Send_Character_WithLoc>
			switch(KeyPad_Key)
    4d3a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <KeyPad_Key>
    4d3e:	81 33       	cpi	r24, 0x31	; 49
    4d40:	19 f0       	breq	.+6      	; 0x4d48 <ATM_Operation_mode+0x6dc>
    4d42:	82 33       	cpi	r24, 0x32	; 50
    4d44:	29 f0       	breq	.+10     	; 0x4d50 <ATM_Operation_mode+0x6e4>
    4d46:	09 c0       	rjmp	.+18     	; 0x4d5a <ATM_Operation_mode+0x6ee>
			{
				case '1' :
							ExitFlag = 0 ; 
    4d48:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <ExitFlag>
							CommandFlag = 0 ;
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
					break; 
    4d4e:	1e c0       	rjmp	.+60     	; 0x4d8c <ATM_Operation_mode+0x720>
					
				case '2' : 
							ExitFlag = 1 ;	
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <ExitFlag>
							CommandFlag = 0 ;	
    4d56:	80 e0       	ldi	r24, 0x00	; 0
					break;
    4d58:	19 c0       	rjmp	.+50     	; 0x4d8c <ATM_Operation_mode+0x720>
			
				default: 
					printf_P(PSTR("*******************************************************************************************\n" ));
    4d5a:	8a e1       	ldi	r24, 0x1A	; 26
    4d5c:	98 e0       	ldi	r25, 0x08	; 8
    4d5e:	9f 93       	push	r25
    4d60:	8f 93       	push	r24
    4d62:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("************************************ Wrong Command    !!!**********************************\n" ));
    4d66:	8d eb       	ldi	r24, 0xBD	; 189
    4d68:	97 e0       	ldi	r25, 0x07	; 7
    4d6a:	9f 93       	push	r25
    4d6c:	8f 93       	push	r24
    4d6e:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					printf_P(PSTR("*******************************************************************************************\n"));	
    4d72:	80 e6       	ldi	r24, 0x60	; 96
    4d74:	97 e0       	ldi	r25, 0x07	; 7
    4d76:	9f 93       	push	r25
    4d78:	8f 93       	push	r24
    4d7a:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
					CommandFlag = 1 ;	
				break;
    4d7e:	0f 90       	pop	r0
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	0f 90       	pop	r0
    4d86:	0f 90       	pop	r0
    4d88:	0f 90       	pop	r0
			
				default: 
					printf_P(PSTR("*******************************************************************************************\n" ));
					printf_P(PSTR("************************************ Wrong Command    !!!**********************************\n" ));
					printf_P(PSTR("*******************************************************************************************\n"));	
					CommandFlag = 1 ;	
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
		LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
		LCD_Send_String_WithLoc(1,1,(uint8_t *)"Select Command");
		LCD_Send_String_WithLoc(2,1,(uint8_t *)"1.Try   2.Exit");
 
		CommandFlag  = 1;
		while(CommandFlag)
    4d8c:	81 11       	cpse	r24, r1
    4d8e:	ac cf       	rjmp	.-168    	; 0x4ce8 <ATM_Operation_mode+0x67c>
	printf_P(PSTR("****************************************************\n"	));
	printf_P(PSTR(" \n" ));
	_delay_ms(ATM_DLEAY_IN_S);


	while(!ExitFlag)
    4d90:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <ExitFlag>
    4d94:	88 23       	and	r24, r24
    4d96:	09 f4       	brne	.+2      	; 0x4d9a <ATM_Operation_mode+0x72e>
    4d98:	c3 cc       	rjmp	.-1658   	; 0x4720 <ATM_Operation_mode+0xb4>
    4d9a:	9f ef       	ldi	r25, 0xFF	; 255
    4d9c:	a7 ea       	ldi	r26, 0xA7	; 167
    4d9e:	b1 e6       	ldi	r27, 0x61	; 97
    4da0:	91 50       	subi	r25, 0x01	; 1
    4da2:	a0 40       	sbci	r26, 0x00	; 0
    4da4:	b0 40       	sbci	r27, 0x00	; 0
    4da6:	e1 f7       	brne	.-8      	; 0x4da0 <ATM_Operation_mode+0x734>
    4da8:	00 c0       	rjmp	.+0      	; 0x4daa <ATM_Operation_mode+0x73e>
    4daa:	00 00       	nop
				}
		}
	
	}
		_delay_ms(2000);
		printf_P(PSTR("****************************************************\n"	));
    4dac:	8a e2       	ldi	r24, 0x2A	; 42
    4dae:	97 e0       	ldi	r25, 0x07	; 7
    4db0:	9f 93       	push	r25
    4db2:	8f 93       	push	r24
    4db4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("************************ Thank You *****************\n" ));
    4db8:	84 ef       	ldi	r24, 0xF4	; 244
    4dba:	96 e0       	ldi	r25, 0x06	; 6
    4dbc:	9f 93       	push	r25
    4dbe:	8f 93       	push	r24
    4dc0:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR("****************************************************\n"	));
    4dc4:	8e eb       	ldi	r24, 0xBE	; 190
    4dc6:	96 e0       	ldi	r25, 0x06	; 6
    4dc8:	9f 93       	push	r25
    4dca:	8f 93       	push	r24
    4dcc:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		printf_P(PSTR(" \n" ));
    4dd0:	8b eb       	ldi	r24, 0xBB	; 187
    4dd2:	96 e0       	ldi	r25, 0x06	; 6
    4dd4:	9f 93       	push	r25
    4dd6:	8f 93       	push	r24
    4dd8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
		LCD_Send_Command( LCD_COMMANED_CLEAR_LCD );
    4ddc:	81 e0       	ldi	r24, 0x01	; 1
    4dde:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
		LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_ENTER_THANK]));
    4de2:	82 e4       	ldi	r24, 0x42	; 66
    4de4:	92 e3       	ldi	r25, 0x32	; 50
    4de6:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4dea:	ac 01       	movw	r20, r24
    4dec:	61 e0       	ldi	r22, 0x01	; 1
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
		LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_YOU]));
    4df4:	86 e5       	ldi	r24, 0x56	; 86
    4df6:	92 e3       	ldi	r25, 0x32	; 50
    4df8:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4dfc:	ac 01       	movw	r20, r24
    4dfe:	61 e0       	ldi	r22, 0x01	; 1
    4e00:	82 e0       	ldi	r24, 0x02	; 2
    4e02:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
    4e06:	8d b7       	in	r24, 0x3d	; 61
    4e08:	9e b7       	in	r25, 0x3e	; 62
    4e0a:	08 96       	adiw	r24, 0x08	; 8
    4e0c:	0f b6       	in	r0, 0x3f	; 63
    4e0e:	f8 94       	cli
    4e10:	9e bf       	out	0x3e, r25	; 62
    4e12:	0f be       	out	0x3f, r0	; 63
    4e14:	8d bf       	out	0x3d, r24	; 61
    4e16:	ff cf       	rjmp	.-2      	; 0x4e16 <ATM_Operation_mode+0x7aa>

00004e18 <ATM_Lock_Fun>:


void ATM_Lock_Fun(void)
{
	  
	LCD_Send_String_WithLoc(1,1,Print_F(LCD_StrF[LCD_Print_ERROR_Temp]));
    4e18:	8e e8       	ldi	r24, 0x8E	; 142
    4e1a:	91 e3       	ldi	r25, 0x31	; 49
    4e1c:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4e20:	ac 01       	movw	r20, r24
    4e22:	61 e0       	ldi	r22, 0x01	; 1
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
	LCD_Send_String_WithLoc(2,1,Print_F(LCD_StrF[LCD_Print_CALL_XXXXXX]));
    4e2a:	82 ea       	ldi	r24, 0xA2	; 162
    4e2c:	91 e3       	ldi	r25, 0x31	; 49
    4e2e:	0e 94 7f 1c 	call	0x38fe	; 0x38fe <Print_F>
    4e32:	ac 01       	movw	r20, r24
    4e34:	61 e0       	ldi	r22, 0x01	; 1
    4e36:	82 e0       	ldi	r24, 0x02	; 2
    4e38:	0e 94 4f 2b 	call	0x569e	; 0x569e <LCD_Send_String_WithLoc>
	printf_P(PSTR("****************************************************\n"	));
    4e3c:	81 e0       	ldi	r24, 0x01	; 1
    4e3e:	95 e0       	ldi	r25, 0x05	; 5
    4e40:	9f 93       	push	r25
    4e42:	8f 93       	push	r24
    4e44:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("***************     LOCKED       *******************\n" ));
    4e48:	8b ec       	ldi	r24, 0xCB	; 203
    4e4a:	94 e0       	ldi	r25, 0x04	; 4
    4e4c:	9f 93       	push	r25
    4e4e:	8f 93       	push	r24
    4e50:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("*************** Please Call XXXX *******************\n" ));
    4e54:	85 e9       	ldi	r24, 0x95	; 149
    4e56:	94 e0       	ldi	r25, 0x04	; 4
    4e58:	9f 93       	push	r25
    4e5a:	8f 93       	push	r24
    4e5c:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR("****************************************************\n"	));
    4e60:	8f e5       	ldi	r24, 0x5F	; 95
    4e62:	94 e0       	ldi	r25, 0x04	; 4
    4e64:	9f 93       	push	r25
    4e66:	8f 93       	push	r24
    4e68:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
	printf_P(PSTR(" \n" ));
    4e6c:	8c e5       	ldi	r24, 0x5C	; 92
    4e6e:	94 e0       	ldi	r25, 0x04	; 4
    4e70:	9f 93       	push	r25
    4e72:	8f 93       	push	r24
    4e74:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    4e78:	8d b7       	in	r24, 0x3d	; 61
    4e7a:	9e b7       	in	r25, 0x3e	; 62
    4e7c:	0a 96       	adiw	r24, 0x0a	; 10
    4e7e:	0f b6       	in	r0, 0x3f	; 63
    4e80:	f8 94       	cli
    4e82:	9e bf       	out	0x3e, r25	; 62
    4e84:	0f be       	out	0x3f, r0	; 63
    4e86:	8d bf       	out	0x3d, r24	; 61
    4e88:	ff cf       	rjmp	.-2      	; 0x4e88 <ATM_Lock_Fun+0x70>

00004e8a <SERVER_OPER_DataBase_Reset>:

#include "Server.h"


SERVER_OPER_Status_t SERVER_OPER_DataBase_Reset(void)
{
    4e8a:	cf 93       	push	r28
    4e8c:	df 93       	push	r29
    4e8e:	00 d0       	rcall	.+0      	; 0x4e90 <SERVER_OPER_DataBase_Reset+0x6>
    4e90:	00 d0       	rcall	.+0      	; 0x4e92 <SERVER_OPER_DataBase_Reset+0x8>
    4e92:	cd b7       	in	r28, 0x3d	; 61
    4e94:	de b7       	in	r29, 0x3e	; 62

	// add dummy card 
	uint16_t TXBuffer[2]  ={0,ATM_SERVER_CARD_START_ADD};
    4e96:	1a 82       	std	Y+2, r1	; 0x02
    4e98:	19 82       	std	Y+1, r1	; 0x01
    4e9a:	8a ec       	ldi	r24, 0xCA	; 202
    4e9c:	9b e6       	ldi	r25, 0x6B	; 107
    4e9e:	9c 83       	std	Y+4, r25	; 0x04
    4ea0:	8b 83       	std	Y+3, r24	; 0x03
	EEPROM_WriteByteS(0, (uint8_t *)&TXBuffer ,4);			// write number of card 
    4ea2:	44 e0       	ldi	r20, 0x04	; 4
    4ea4:	be 01       	movw	r22, r28
    4ea6:	6f 5f       	subi	r22, 0xFF	; 255
    4ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
	
	return SERVER_OPER_OK ;
}
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	0f 90       	pop	r0
    4eb6:	0f 90       	pop	r0
    4eb8:	0f 90       	pop	r0
    4eba:	0f 90       	pop	r0
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	08 95       	ret

00004ec2 <SERVER_OPER_Search_CARD>:
	return SERVER_OPER_OK ;
}

	CardData_t TempCardData = {0};	uint16_t TempAdd = 0 , TempNumCards =0 ;
uint16_t SERVER_OPER_Search_CARD(CardData_t * CardData , uint8_t SearchBase )
{
    4ec2:	ff 92       	push	r15
    4ec4:	0f 93       	push	r16
    4ec6:	1f 93       	push	r17
    4ec8:	cf 93       	push	r28
    4eca:	df 93       	push	r29
    4ecc:	8c 01       	movw	r16, r24
    4ece:	f6 2e       	mov	r15, r22

	EEPROM_ReadByteS(0,(uint8_t*)&TempNumCards , 2);
    4ed0:	42 e0       	ldi	r20, 0x02	; 2
    4ed2:	63 ea       	ldi	r22, 0xA3	; 163
    4ed4:	71 e0       	ldi	r23, 0x01	; 1
    4ed6:	80 e0       	ldi	r24, 0x00	; 0
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
	if(TempNumCards == 0)	{printf_P(PSTR("Hint!!!! Empty DataBase \n")) ; return -1  ;}
    4ede:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <TempNumCards>
    4ee2:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TempNumCards+0x1>
    4ee6:	89 2b       	or	r24, r25
    4ee8:	09 f0       	breq	.+2      	; 0x4eec <SERVER_OPER_Search_CARD+0x2a>
    4eea:	4c c0       	rjmp	.+152    	; 0x4f84 <SERVER_OPER_Search_CARD+0xc2>
    4eec:	8e e7       	ldi	r24, 0x7E	; 126
    4eee:	92 e3       	ldi	r25, 0x32	; 50
    4ef0:	9f 93       	push	r25
    4ef2:	8f 93       	push	r24
    4ef4:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <printf_P>
    4ef8:	0f 90       	pop	r0
    4efa:	0f 90       	pop	r0
    4efc:	8f ef       	ldi	r24, 0xFF	; 255
    4efe:	9f ef       	ldi	r25, 0xFF	; 255
    4f00:	4d c0       	rjmp	.+154    	; 0x4f9c <SERVER_OPER_Search_CARD+0xda>
	for (uint16_t iter = 2 ; iter < ATM_SERVER_TOTAL_CAPCITY *  ATM_CARD_ADDRESS_SIZE ; iter += ATM_CARD_ADDRESS_SIZE)
	{
		EEPROM_ReadByteS(iter ,(uint8_t *)&TempAdd  , ATM_CARD_ADDRESS_SIZE);
    4f02:	42 e0       	ldi	r20, 0x02	; 2
    4f04:	65 ea       	ldi	r22, 0xA5	; 165
    4f06:	71 e0       	ldi	r23, 0x01	; 1
    4f08:	ce 01       	movw	r24, r28
    4f0a:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
		if (TempAdd != 0xffffu)
    4f0e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <TempAdd>
    4f12:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <TempAdd+0x1>
    4f16:	8f 3f       	cpi	r24, 0xFF	; 255
    4f18:	2f ef       	ldi	r18, 0xFF	; 255
    4f1a:	92 07       	cpc	r25, r18
    4f1c:	89 f1       	breq	.+98     	; 0x4f80 <SERVER_OPER_Search_CARD+0xbe>
		{
			TempNumCards--;
    4f1e:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <TempNumCards>
    4f22:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <TempNumCards+0x1>
    4f26:	21 50       	subi	r18, 0x01	; 1
    4f28:	31 09       	sbc	r19, r1
    4f2a:	30 93 a4 01 	sts	0x01A4, r19	; 0x8001a4 <TempNumCards+0x1>
    4f2e:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <TempNumCards>
			EEPROM_ReadByteS(TempAdd , (uint8_t *)&TempCardData , ATM_CARD_BLOCK_SIZE );
    4f32:	44 e2       	ldi	r20, 0x24	; 36
    4f34:	67 ea       	ldi	r22, 0xA7	; 167
    4f36:	71 e0       	ldi	r23, 0x01	; 1
    4f38:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
			if ( ATM_SEARCH_BY_PAN == SearchBase)
    4f3c:	f1 10       	cpse	r15, r1
    4f3e:	0e c0       	rjmp	.+28     	; 0x4f5c <SERVER_OPER_Search_CARD+0x9a>
			{
				if (strcmp((char *)TempCardData.CardPAN,(char *)CardData->CardPAN)== 0 )
    4f40:	b8 01       	movw	r22, r16
    4f42:	65 5f       	subi	r22, 0xF5	; 245
    4f44:	7f 4f       	sbci	r23, 0xFF	; 255
    4f46:	82 eb       	ldi	r24, 0xB2	; 178
    4f48:	91 e0       	ldi	r25, 0x01	; 1
    4f4a:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <strcmp>
    4f4e:	89 2b       	or	r24, r25
    4f50:	89 f4       	brne	.+34     	; 0x4f74 <SERVER_OPER_Search_CARD+0xb2>
				{
					return TempAdd ;
    4f52:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <TempAdd>
    4f56:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <TempAdd+0x1>
    4f5a:	20 c0       	rjmp	.+64     	; 0x4f9c <SERVER_OPER_Search_CARD+0xda>
				}
			}else{
				
				if (strcmp((char *)TempCardData.CardName,(char *)CardData->CardName)== 0 )
    4f5c:	b8 01       	movw	r22, r16
    4f5e:	87 ea       	ldi	r24, 0xA7	; 167
    4f60:	91 e0       	ldi	r25, 0x01	; 1
    4f62:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <strcmp>
    4f66:	89 2b       	or	r24, r25
    4f68:	29 f4       	brne	.+10     	; 0x4f74 <SERVER_OPER_Search_CARD+0xb2>
				{
					return TempAdd ;
    4f6a:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <TempAdd>
    4f6e:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <TempAdd+0x1>
    4f72:	14 c0       	rjmp	.+40     	; 0x4f9c <SERVER_OPER_Search_CARD+0xda>

								
			}
			
							
			if (TempNumCards == 0)
    4f74:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <TempNumCards>
    4f78:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <TempNumCards+0x1>
    4f7c:	89 2b       	or	r24, r25
    4f7e:	61 f0       	breq	.+24     	; 0x4f98 <SERVER_OPER_Search_CARD+0xd6>
uint16_t SERVER_OPER_Search_CARD(CardData_t * CardData , uint8_t SearchBase )
{

	EEPROM_ReadByteS(0,(uint8_t*)&TempNumCards , 2);
	if(TempNumCards == 0)	{printf_P(PSTR("Hint!!!! Empty DataBase \n")) ; return -1  ;}
	for (uint16_t iter = 2 ; iter < ATM_SERVER_TOTAL_CAPCITY *  ATM_CARD_ADDRESS_SIZE ; iter += ATM_CARD_ADDRESS_SIZE)
    4f80:	22 96       	adiw	r28, 0x02	; 2
    4f82:	02 c0       	rjmp	.+4      	; 0x4f88 <SERVER_OPER_Search_CARD+0xc6>
    4f84:	c2 e0       	ldi	r28, 0x02	; 2
    4f86:	d0 e0       	ldi	r29, 0x00	; 0
    4f88:	ca 3c       	cpi	r28, 0xCA	; 202
    4f8a:	8b e6       	ldi	r24, 0x6B	; 107
    4f8c:	d8 07       	cpc	r29, r24
    4f8e:	08 f4       	brcc	.+2      	; 0x4f92 <SERVER_OPER_Search_CARD+0xd0>
    4f90:	b8 cf       	rjmp	.-144    	; 0x4f02 <SERVER_OPER_Search_CARD+0x40>
		{
			;
		}
	}
	
	return -1 ; 
    4f92:	8f ef       	ldi	r24, 0xFF	; 255
    4f94:	9f ef       	ldi	r25, 0xFF	; 255
    4f96:	02 c0       	rjmp	.+4      	; 0x4f9c <SERVER_OPER_Search_CARD+0xda>
			}
			
							
			if (TempNumCards == 0)
			{
				return -1 ;
    4f98:	8f ef       	ldi	r24, 0xFF	; 255
    4f9a:	9f ef       	ldi	r25, 0xFF	; 255
			;
		}
	}
	
	return -1 ; 
}
    4f9c:	df 91       	pop	r29
    4f9e:	cf 91       	pop	r28
    4fa0:	1f 91       	pop	r17
    4fa2:	0f 91       	pop	r16
    4fa4:	ff 90       	pop	r15
    4fa6:	08 95       	ret

00004fa8 <SERVER_OPER_Add_CARD>:




SERVER_OPER_Status_t SERVER_OPER_Add_CARD(CardData_t * CardData)
{
    4fa8:	0f 93       	push	r16
    4faa:	1f 93       	push	r17
    4fac:	cf 93       	push	r28
    4fae:	df 93       	push	r29
    4fb0:	00 d0       	rcall	.+0      	; 0x4fb2 <SERVER_OPER_Add_CARD+0xa>
    4fb2:	00 d0       	rcall	.+0      	; 0x4fb4 <SERVER_OPER_Add_CARD+0xc>
    4fb4:	cd b7       	in	r28, 0x3d	; 61
    4fb6:	de b7       	in	r29, 0x3e	; 62
    4fb8:	8c 01       	movw	r16, r24

	uint16_t NewAdd = 0 , NumOfCards  =0	;
    4fba:	1a 82       	std	Y+2, r1	; 0x02
    4fbc:	19 82       	std	Y+1, r1	; 0x01
    4fbe:	1c 82       	std	Y+4, r1	; 0x04
    4fc0:	1b 82       	std	Y+3, r1	; 0x03
	EEPROM_ReadByteS(0, (uint8_t *)&NumOfCards ,2);
    4fc2:	42 e0       	ldi	r20, 0x02	; 2
    4fc4:	be 01       	movw	r22, r28
    4fc6:	6d 5f       	subi	r22, 0xFD	; 253
    4fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	90 e0       	ldi	r25, 0x00	; 0
    4fce:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
	if(NumOfCards >= ATM_SERVER_TOTAL_CAPCITY)
    4fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    4fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    4fd6:	85 3e       	cpi	r24, 0xE5	; 229
    4fd8:	95 43       	sbci	r25, 0x35	; 53
    4fda:	70 f5       	brcc	.+92     	; 0x5038 <SERVER_OPER_Add_CARD+0x90>
	{
		return SERVER_OPER_FullSpace ; 
	}else if (SERVER_OPER_Search_CARD(CardData , ATM_SEARCH_BY_PAN) == -1 )
    4fdc:	60 e0       	ldi	r22, 0x00	; 0
    4fde:	c8 01       	movw	r24, r16
    4fe0:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <SERVER_OPER_Search_CARD>
    4fe4:	01 96       	adiw	r24, 0x01	; 1
    4fe6:	51 f5       	brne	.+84     	; 0x503c <SERVER_OPER_Add_CARD+0x94>
	{
		NewAdd = ATM_SERVER_CARD_START_ADD + ( NumOfCards++ * ATM_CARD_BLOCK_SIZE) ;
    4fe8:	2b 81       	ldd	r18, Y+3	; 0x03
    4fea:	3c 81       	ldd	r19, Y+4	; 0x04
    4fec:	c9 01       	movw	r24, r18
    4fee:	01 96       	adiw	r24, 0x01	; 1
    4ff0:	9c 83       	std	Y+4, r25	; 0x04
    4ff2:	8b 83       	std	Y+3, r24	; 0x03
    4ff4:	44 e2       	ldi	r20, 0x24	; 36
    4ff6:	42 9f       	mul	r20, r18
    4ff8:	c0 01       	movw	r24, r0
    4ffa:	43 9f       	mul	r20, r19
    4ffc:	90 0d       	add	r25, r0
    4ffe:	11 24       	eor	r1, r1
    5000:	86 53       	subi	r24, 0x36	; 54
    5002:	94 49       	sbci	r25, 0x94	; 148
    5004:	9a 83       	std	Y+2, r25	; 0x02
    5006:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_WriteByteS(NewAdd , (uint8_t *)CardData , ATM_CARD_BLOCK_SIZE );											// store card data
    5008:	b8 01       	movw	r22, r16
    500a:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
		EEPROM_WriteByteS(NumOfCards*ATM_CARD_ADDRESS_SIZE+2 ,  (uint8_t *)&NewAdd , ATM_CARD_ADDRESS_SIZE );			// store card address
    500e:	8b 81       	ldd	r24, Y+3	; 0x03
    5010:	9c 81       	ldd	r25, Y+4	; 0x04
    5012:	01 96       	adiw	r24, 0x01	; 1
    5014:	42 e0       	ldi	r20, 0x02	; 2
    5016:	be 01       	movw	r22, r28
    5018:	6f 5f       	subi	r22, 0xFF	; 255
    501a:	7f 4f       	sbci	r23, 0xFF	; 255
    501c:	88 0f       	add	r24, r24
    501e:	99 1f       	adc	r25, r25
    5020:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
		EEPROM_WriteByteS(ATM_SERVER_FIRST_ADDRESS , (uint8_t *)&NumOfCards , ATM_CARD_ADDRESS_SIZE );
    5024:	42 e0       	ldi	r20, 0x02	; 2
    5026:	be 01       	movw	r22, r28
    5028:	6d 5f       	subi	r22, 0xFD	; 253
    502a:	7f 4f       	sbci	r23, 0xFF	; 255
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
		return SERVER_OPER_Exist ;
	}

	
	
	return SERVER_OPER_OK ;
    5034:	80 e0       	ldi	r24, 0x00	; 0
    5036:	03 c0       	rjmp	.+6      	; 0x503e <SERVER_OPER_Add_CARD+0x96>

	uint16_t NewAdd = 0 , NumOfCards  =0	;
	EEPROM_ReadByteS(0, (uint8_t *)&NumOfCards ,2);
	if(NumOfCards >= ATM_SERVER_TOTAL_CAPCITY)
	{
		return SERVER_OPER_FullSpace ; 
    5038:	83 e0       	ldi	r24, 0x03	; 3
    503a:	01 c0       	rjmp	.+2      	; 0x503e <SERVER_OPER_Add_CARD+0x96>
		EEPROM_WriteByteS(NewAdd , (uint8_t *)CardData , ATM_CARD_BLOCK_SIZE );											// store card data
		EEPROM_WriteByteS(NumOfCards*ATM_CARD_ADDRESS_SIZE+2 ,  (uint8_t *)&NewAdd , ATM_CARD_ADDRESS_SIZE );			// store card address
		EEPROM_WriteByteS(ATM_SERVER_FIRST_ADDRESS , (uint8_t *)&NumOfCards , ATM_CARD_ADDRESS_SIZE );
	}else
	{
		return SERVER_OPER_Exist ;
    503c:	81 e0       	ldi	r24, 0x01	; 1
	}

	
	
	return SERVER_OPER_OK ;
}
    503e:	0f 90       	pop	r0
    5040:	0f 90       	pop	r0
    5042:	0f 90       	pop	r0
    5044:	0f 90       	pop	r0
    5046:	df 91       	pop	r29
    5048:	cf 91       	pop	r28
    504a:	1f 91       	pop	r17
    504c:	0f 91       	pop	r16
    504e:	08 95       	ret

00005050 <SERVER_OPER_Remove_CARD>:
}



SERVER_OPER_Status_t SERVER_OPER_Remove_CARD(CardData_t * CardData)
{
    5050:	cf 93       	push	r28
    5052:	df 93       	push	r29
    5054:	00 d0       	rcall	.+0      	; 0x5056 <SERVER_OPER_Remove_CARD+0x6>
    5056:	00 d0       	rcall	.+0      	; 0x5058 <SERVER_OPER_Remove_CARD+0x8>
    5058:	cd b7       	in	r28, 0x3d	; 61
    505a:	de b7       	in	r29, 0x3e	; 62
	uint16_t TempIndex = SERVER_OPER_Search_CARD(CardData , ATM_SEARCH_BY_PAN) ;
    505c:	60 e0       	ldi	r22, 0x00	; 0
    505e:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <SERVER_OPER_Search_CARD>
	uint16_t ResetIndex = 0xffffu ;
    5062:	2f ef       	ldi	r18, 0xFF	; 255
    5064:	3f ef       	ldi	r19, 0xFF	; 255
    5066:	3a 83       	std	Y+2, r19	; 0x02
    5068:	29 83       	std	Y+1, r18	; 0x01
	uint16_t NumOfCards =0 ; 
    506a:	1c 82       	std	Y+4, r1	; 0x04
    506c:	1b 82       	std	Y+3, r1	; 0x03
	if(TempIndex != -1)
    506e:	8f 3f       	cpi	r24, 0xFF	; 255
    5070:	2f ef       	ldi	r18, 0xFF	; 255
    5072:	92 07       	cpc	r25, r18
    5074:	e9 f0       	breq	.+58     	; 0x50b0 <SERVER_OPER_Remove_CARD+0x60>
	{
		EEPROM_WriteByteS(TempIndex ,(uint8_t *)&ResetIndex , 2 );
    5076:	42 e0       	ldi	r20, 0x02	; 2
    5078:	be 01       	movw	r22, r28
    507a:	6f 5f       	subi	r22, 0xFF	; 255
    507c:	7f 4f       	sbci	r23, 0xFF	; 255
    507e:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
		EEPROM_ReadByteS(0 ,(uint8_t * )&NumOfCards ,2 );
    5082:	42 e0       	ldi	r20, 0x02	; 2
    5084:	be 01       	movw	r22, r28
    5086:	6d 5f       	subi	r22, 0xFD	; 253
    5088:	7f 4f       	sbci	r23, 0xFF	; 255
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
		--NumOfCards ;
    5092:	8b 81       	ldd	r24, Y+3	; 0x03
    5094:	9c 81       	ldd	r25, Y+4	; 0x04
    5096:	01 97       	sbiw	r24, 0x01	; 1
    5098:	9c 83       	std	Y+4, r25	; 0x04
    509a:	8b 83       	std	Y+3, r24	; 0x03
		EEPROM_WriteByteS(0 , (uint8_t * )&NumOfCards , 2);
    509c:	42 e0       	ldi	r20, 0x02	; 2
    509e:	be 01       	movw	r22, r28
    50a0:	6d 5f       	subi	r22, 0xFD	; 253
    50a2:	7f 4f       	sbci	r23, 0xFF	; 255
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	90 e0       	ldi	r25, 0x00	; 0
    50a8:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
	{
		return SERVER_OPER_Not_Exist ; 
	}
	

	return SERVER_OPER_OK ;
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	01 c0       	rjmp	.+2      	; 0x50b2 <SERVER_OPER_Remove_CARD+0x62>
		EEPROM_ReadByteS(0 ,(uint8_t * )&NumOfCards ,2 );
		--NumOfCards ;
		EEPROM_WriteByteS(0 , (uint8_t * )&NumOfCards , 2);
	}else
	{
		return SERVER_OPER_Not_Exist ; 
    50b0:	82 e0       	ldi	r24, 0x02	; 2
	}
	

	return SERVER_OPER_OK ;
}
    50b2:	0f 90       	pop	r0
    50b4:	0f 90       	pop	r0
    50b6:	0f 90       	pop	r0
    50b8:	0f 90       	pop	r0
    50ba:	df 91       	pop	r29
    50bc:	cf 91       	pop	r28
    50be:	08 95       	ret

000050c0 <SERVER_OPER_GetTotal_CARDNum>:




uint16_t SERVER_OPER_GetTotal_CARDNum(void)
{
    50c0:	cf 93       	push	r28
    50c2:	df 93       	push	r29
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <SERVER_OPER_GetTotal_CARDNum+0x6>
    50c6:	cd b7       	in	r28, 0x3d	; 61
    50c8:	de b7       	in	r29, 0x3e	; 62
		uint16_t Totla_CardNum  = 0 ;
    50ca:	1a 82       	std	Y+2, r1	; 0x02
    50cc:	19 82       	std	Y+1, r1	; 0x01
		EEPROM_ReadByteS(ATM_SERVER_FIRST_ADDRESS ,(uint8_t *)&Totla_CardNum  , ATM_CARD_ADDRESS_SIZE);
    50ce:	42 e0       	ldi	r20, 0x02	; 2
    50d0:	be 01       	movw	r22, r28
    50d2:	6f 5f       	subi	r22, 0xFF	; 255
    50d4:	7f 4f       	sbci	r23, 0xFF	; 255
    50d6:	80 e0       	ldi	r24, 0x00	; 0
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
		return Totla_CardNum ;
}
    50de:	89 81       	ldd	r24, Y+1	; 0x01
    50e0:	9a 81       	ldd	r25, Y+2	; 0x02
    50e2:	0f 90       	pop	r0
    50e4:	0f 90       	pop	r0
    50e6:	df 91       	pop	r29
    50e8:	cf 91       	pop	r28
    50ea:	08 95       	ret

000050ec <SERVER_ADMIN_Set_Pass>:




SERVER_OPER_Status_t SERVER_ADMIN_Set_Pass(uint8_t * StrName , uint8_t * Password)
{
    50ec:	ef 92       	push	r14
    50ee:	ff 92       	push	r15
    50f0:	0f 93       	push	r16
    50f2:	1f 93       	push	r17
    50f4:	cf 93       	push	r28
    50f6:	df 93       	push	r29
    50f8:	1f 92       	push	r1
    50fa:	cd b7       	in	r28, 0x3d	; 61
    50fc:	de b7       	in	r29, 0x3e	; 62
    50fe:	7c 01       	movw	r14, r24
    5100:	8b 01       	movw	r16, r22
		uint8_t AdminFlag  = 'S';
    5102:	83 e5       	ldi	r24, 0x53	; 83
    5104:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_WriteByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag	, 1);		
    5106:	41 e0       	ldi	r20, 0x01	; 1
    5108:	be 01       	movw	r22, r28
    510a:	6f 5f       	subi	r22, 0xFF	; 255
    510c:	7f 4f       	sbci	r23, 0xFF	; 255
    510e:	88 ee       	ldi	r24, 0xE8	; 232
    5110:	9d ef       	ldi	r25, 0xFD	; 253
    5112:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
		EEPROM_WriteByteS(SERVER_ADMIN_NAME_START_ADD ,(uint8_t *)StrName		, ADMIN_USERNAME_LEN-1);
    5116:	49 e0       	ldi	r20, 0x09	; 9
    5118:	b7 01       	movw	r22, r14
    511a:	82 ef       	ldi	r24, 0xF2	; 242
    511c:	9d ef       	ldi	r25, 0xFD	; 253
    511e:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
		EEPROM_WriteByteS(SERVER_ADMIN_PASS_START_ADD ,(uint8_t *)Password		, ADMIN_PASSWARD_LEN-1);
    5122:	49 e0       	ldi	r20, 0x09	; 9
    5124:	b8 01       	movw	r22, r16
    5126:	8c ef       	ldi	r24, 0xFC	; 252
    5128:	9d ef       	ldi	r25, 0xFD	; 253
    512a:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;

}
    512e:	80 e0       	ldi	r24, 0x00	; 0
    5130:	0f 90       	pop	r0
    5132:	df 91       	pop	r29
    5134:	cf 91       	pop	r28
    5136:	1f 91       	pop	r17
    5138:	0f 91       	pop	r16
    513a:	ff 90       	pop	r15
    513c:	ef 90       	pop	r14
    513e:	08 95       	ret

00005140 <SERVER_ADMIN_Get_Pass>:




SERVER_OPER_Status_t SERVER_ADMIN_Get_Pass(uint8_t * StrName , uint8_t * Password)
{
    5140:	ef 92       	push	r14
    5142:	ff 92       	push	r15
    5144:	0f 93       	push	r16
    5146:	1f 93       	push	r17
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	1f 92       	push	r1
    514e:	cd b7       	in	r28, 0x3d	; 61
    5150:	de b7       	in	r29, 0x3e	; 62
    5152:	7c 01       	movw	r14, r24
    5154:	8b 01       	movw	r16, r22
	uint8_t AdminFlag  = 0 ;
    5156:	19 82       	std	Y+1, r1	; 0x01
	EEPROM_ReadByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag ,1);
    5158:	41 e0       	ldi	r20, 0x01	; 1
    515a:	be 01       	movw	r22, r28
    515c:	6f 5f       	subi	r22, 0xFF	; 255
    515e:	7f 4f       	sbci	r23, 0xFF	; 255
    5160:	88 ee       	ldi	r24, 0xE8	; 232
    5162:	9d ef       	ldi	r25, 0xFD	; 253
    5164:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
	if (AdminFlag == 'S')
    5168:	89 81       	ldd	r24, Y+1	; 0x01
    516a:	83 35       	cpi	r24, 0x53	; 83
    516c:	61 f4       	brne	.+24     	; 0x5186 <SERVER_ADMIN_Get_Pass+0x46>
	{
		EEPROM_ReadByteS(SERVER_ADMIN_NAME_START_ADD ,(uint8_t *)StrName , ADMIN_USERNAME_LEN  );
    516e:	4a e0       	ldi	r20, 0x0A	; 10
    5170:	b7 01       	movw	r22, r14
    5172:	82 ef       	ldi	r24, 0xF2	; 242
    5174:	9d ef       	ldi	r25, 0xFD	; 253
    5176:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
		EEPROM_ReadByteS(SERVER_ADMIN_PASS_START_ADD ,(uint8_t *)Password , ADMIN_PASSWARD_LEN );
    517a:	4a e0       	ldi	r20, 0x0A	; 10
    517c:	b8 01       	movw	r22, r16
    517e:	8c ef       	ldi	r24, 0xFC	; 252
    5180:	9d ef       	ldi	r25, 0xFD	; 253
    5182:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
	}
	

	return SERVER_OPER_OK ;

}
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	0f 90       	pop	r0
    518a:	df 91       	pop	r29
    518c:	cf 91       	pop	r28
    518e:	1f 91       	pop	r17
    5190:	0f 91       	pop	r16
    5192:	ff 90       	pop	r15
    5194:	ef 90       	pop	r14
    5196:	08 95       	ret

00005198 <SERVER_ADMIN_Set_Temp>:




SERVER_OPER_Status_t SERVER_ADMIN_Set_Temp(uint8_t * MaxTemp)
{
    5198:	0f 93       	push	r16
    519a:	1f 93       	push	r17
    519c:	cf 93       	push	r28
    519e:	df 93       	push	r29
    51a0:	00 d0       	rcall	.+0      	; 0x51a2 <SERVER_ADMIN_Set_Temp+0xa>
    51a2:	cd b7       	in	r28, 0x3d	; 61
    51a4:	de b7       	in	r29, 0x3e	; 62
    51a6:	8c 01       	movw	r16, r24
	uint16_t AdminFlag  =0 ;
    51a8:	1a 82       	std	Y+2, r1	; 0x02
    51aa:	19 82       	std	Y+1, r1	; 0x01

	EEPROM_WriteByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag ,ATM_CARD_ADDRESS_SIZE);
    51ac:	42 e0       	ldi	r20, 0x02	; 2
    51ae:	be 01       	movw	r22, r28
    51b0:	6f 5f       	subi	r22, 0xFF	; 255
    51b2:	7f 4f       	sbci	r23, 0xFF	; 255
    51b4:	88 ee       	ldi	r24, 0xE8	; 232
    51b6:	9d ef       	ldi	r25, 0xFD	; 253
    51b8:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
	EEPROM_WriteByteS(SERVER_ADMIN_TEMP_START_ADD ,(uint8_t *)MaxTemp ,ADMIN_TEMP_LEN);
    51bc:	45 e0       	ldi	r20, 0x05	; 5
    51be:	b8 01       	movw	r22, r16
    51c0:	86 e0       	ldi	r24, 0x06	; 6
    51c2:	9e ef       	ldi	r25, 0xFE	; 254
    51c4:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;
}
    51c8:	80 e0       	ldi	r24, 0x00	; 0
    51ca:	0f 90       	pop	r0
    51cc:	0f 90       	pop	r0
    51ce:	df 91       	pop	r29
    51d0:	cf 91       	pop	r28
    51d2:	1f 91       	pop	r17
    51d4:	0f 91       	pop	r16
    51d6:	08 95       	ret

000051d8 <SERVER_ADMIN_Get_Temp>:
SERVER_OPER_Status_t SERVER_ADMIN_Get_Temp(uint8_t * MaxTemp)
{
//	uint16_t AdminFlag  =0 ;
//	EEPROM_ReadByteS(SERVER_ADMIN_FLAG_START_ADD ,(uint8_t *)&AdminFlag ,ATM_CARD_ADDRESS_SIZE);
//	if(AdminFlag == 0)
	EEPROM_ReadByteS(SERVER_ADMIN_TEMP_START_ADD ,(uint8_t *)MaxTemp ,ADMIN_PASSWARD_LEN);
    51d8:	4a e0       	ldi	r20, 0x0A	; 10
    51da:	bc 01       	movw	r22, r24
    51dc:	86 e0       	ldi	r24, 0x06	; 6
    51de:	9e ef       	ldi	r25, 0xFE	; 254
    51e0:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
	
//	*MaxTemp = atoi((char *)Temp_MAxTemp);
	return SERVER_OPER_OK ;
}
    51e4:	80 e0       	ldi	r24, 0x00	; 0
    51e6:	08 95       	ret

000051e8 <SERVER_ADMIN_Error>:



SERVER_OPER_Status_t SERVER_ADMIN_Error(Admin_ErrorAction_t Action )
{
    51e8:	cf 93       	push	r28
    51ea:	df 93       	push	r29
    51ec:	cd b7       	in	r28, 0x3d	; 61
    51ee:	de b7       	in	r29, 0x3e	; 62
    51f0:	2a 97       	sbiw	r28, 0x0a	; 10
    51f2:	0f b6       	in	r0, 0x3f	; 63
    51f4:	f8 94       	cli
    51f6:	de bf       	out	0x3e, r29	; 62
    51f8:	0f be       	out	0x3f, r0	; 63
    51fa:	cd bf       	out	0x3d, r28	; 61
	uint8_t  Error[ADMIN_ERROR_LEN] = "ERROR" ; 
    51fc:	96 e0       	ldi	r25, 0x06	; 6
    51fe:	ec ef       	ldi	r30, 0xFC	; 252
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	de 01       	movw	r26, r28
    5204:	11 96       	adiw	r26, 0x01	; 1
    5206:	01 90       	ld	r0, Z+
    5208:	0d 92       	st	X+, r0
    520a:	9a 95       	dec	r25
    520c:	e1 f7       	brne	.-8      	; 0x5206 <SERVER_ADMIN_Error+0x1e>
    520e:	fe 01       	movw	r30, r28
    5210:	37 96       	adiw	r30, 0x07	; 7
    5212:	94 e0       	ldi	r25, 0x04	; 4
    5214:	df 01       	movw	r26, r30
    5216:	1d 92       	st	X+, r1
    5218:	9a 95       	dec	r25
    521a:	e9 f7       	brne	.-6      	; 0x5216 <SERVER_ADMIN_Error+0x2e>
	if (Action == ADMIN_ERROR_SET)
    521c:	81 11       	cpse	r24, r1
    521e:	09 c0       	rjmp	.+18     	; 0x5232 <SERVER_ADMIN_Error+0x4a>
	{
		EEPROM_WriteByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error ,ADMIN_ERROR_LEN);
    5220:	4a e0       	ldi	r20, 0x0A	; 10
    5222:	be 01       	movw	r22, r28
    5224:	6f 5f       	subi	r22, 0xFF	; 255
    5226:	7f 4f       	sbci	r23, 0xFF	; 255
    5228:	80 e1       	ldi	r24, 0x10	; 16
    522a:	9e ef       	ldi	r25, 0xFE	; 254
    522c:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
    5230:	0f c0       	rjmp	.+30     	; 0x5250 <SERVER_ADMIN_Error+0x68>
		
	}else if (Action == ADMIN_ERROR_CLEAR )
    5232:	81 30       	cpi	r24, 0x01	; 1
    5234:	69 f4       	brne	.+26     	; 0x5250 <SERVER_ADMIN_Error+0x68>
	{
		memset(Error , 0 , ADMIN_ERROR_LEN);
    5236:	be 01       	movw	r22, r28
    5238:	6f 5f       	subi	r22, 0xFF	; 255
    523a:	7f 4f       	sbci	r23, 0xFF	; 255
    523c:	8a e0       	ldi	r24, 0x0A	; 10
    523e:	fb 01       	movw	r30, r22
    5240:	11 92       	st	Z+, r1
    5242:	8a 95       	dec	r24
    5244:	e9 f7       	brne	.-6      	; 0x5240 <SERVER_ADMIN_Error+0x58>
		EEPROM_WriteByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error ,ADMIN_ERROR_LEN);
    5246:	4a e0       	ldi	r20, 0x0A	; 10
    5248:	80 e1       	ldi	r24, 0x10	; 16
    524a:	9e ef       	ldi	r25, 0xFE	; 254
    524c:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
	}
	return SERVER_OPER_OK ; 
}
    5250:	80 e0       	ldi	r24, 0x00	; 0
    5252:	2a 96       	adiw	r28, 0x0a	; 10
    5254:	0f b6       	in	r0, 0x3f	; 63
    5256:	f8 94       	cli
    5258:	de bf       	out	0x3e, r29	; 62
    525a:	0f be       	out	0x3f, r0	; 63
    525c:	cd bf       	out	0x3d, r28	; 61
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	08 95       	ret

00005264 <SERVER_ADMIN_Error_Get>:

uint8_t SERVER_ADMIN_Error_Get(void)
{
    5264:	0f 93       	push	r16
    5266:	1f 93       	push	r17
    5268:	cf 93       	push	r28
    526a:	df 93       	push	r29
    526c:	cd b7       	in	r28, 0x3d	; 61
    526e:	de b7       	in	r29, 0x3e	; 62
    5270:	2a 97       	sbiw	r28, 0x0a	; 10
    5272:	0f b6       	in	r0, 0x3f	; 63
    5274:	f8 94       	cli
    5276:	de bf       	out	0x3e, r29	; 62
    5278:	0f be       	out	0x3f, r0	; 63
    527a:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t  Error[ADMIN_ERROR_LEN] = {0} ;
    527c:	8e 01       	movw	r16, r28
    527e:	0f 5f       	subi	r16, 0xFF	; 255
    5280:	1f 4f       	sbci	r17, 0xFF	; 255
    5282:	8a e0       	ldi	r24, 0x0A	; 10
    5284:	f8 01       	movw	r30, r16
    5286:	11 92       	st	Z+, r1
    5288:	8a 95       	dec	r24
    528a:	e9 f7       	brne	.-6      	; 0x5286 <SERVER_ADMIN_Error_Get+0x22>
	EEPROM_ReadByteS(SERVER_ADMIN_ERROR_START_ADD ,(uint8_t *)Error , ADMIN_ERROR_LEN);
    528c:	4a e0       	ldi	r20, 0x0A	; 10
    528e:	b8 01       	movw	r22, r16
    5290:	80 e1       	ldi	r24, 0x10	; 16
    5292:	9e ef       	ldi	r25, 0xFE	; 254
    5294:	0e 94 b4 2c 	call	0x5968	; 0x5968 <EEPROM_ReadByteS>
	if (strcmp((char *)Error , "ERROR") == 0)
    5298:	6c ef       	ldi	r22, 0xFC	; 252
    529a:	70 e0       	ldi	r23, 0x00	; 0
    529c:	c8 01       	movw	r24, r16
    529e:	0e 94 47 37 	call	0x6e8e	; 0x6e8e <strcmp>
    52a2:	89 2b       	or	r24, r25
    52a4:	11 f4       	brne	.+4      	; 0x52aa <SERVER_ADMIN_Error_Get+0x46>
	{
		return 1 ;
    52a6:	81 e0       	ldi	r24, 0x01	; 1
    52a8:	01 c0       	rjmp	.+2      	; 0x52ac <SERVER_ADMIN_Error_Get+0x48>
	}else{
		return 0 ; 
    52aa:	80 e0       	ldi	r24, 0x00	; 0
	}
	return SERVER_OPER_OK ;
}
    52ac:	2a 96       	adiw	r28, 0x0a	; 10
    52ae:	0f b6       	in	r0, 0x3f	; 63
    52b0:	f8 94       	cli
    52b2:	de bf       	out	0x3e, r29	; 62
    52b4:	0f be       	out	0x3f, r0	; 63
    52b6:	cd bf       	out	0x3d, r28	; 61
    52b8:	df 91       	pop	r29
    52ba:	cf 91       	pop	r28
    52bc:	1f 91       	pop	r17
    52be:	0f 91       	pop	r16
    52c0:	08 95       	ret

000052c2 <SERVER_ADMIN_Set_MAximum_DailyAmount>:



SERVER_OPER_Status_t SERVER_ADMIN_Set_MAximum_DailyAmount(uint8_t * MaxDailyAmount)
{
	EEPROM_WriteByteS(SERVER_ADMIN_MAX_DAILY_AMOUNT , MaxDailyAmount , ADMIN_MAX_DAILY_LEN );
    52c2:	46 e0       	ldi	r20, 0x06	; 6
    52c4:	bc 01       	movw	r22, r24
    52c6:	8a e1       	ldi	r24, 0x1A	; 26
    52c8:	9e ef       	ldi	r25, 0xFE	; 254
    52ca:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <EEPROM_WriteByteS>
	return SERVER_OPER_OK ;
}
    52ce:	80 e0       	ldi	r24, 0x00	; 0
    52d0:	08 95       	ret

000052d2 <KeyPad_Initialization>:
 * brief  : this function used to initialize keypad
 * param. : KeyPadInit pointer to the handler of keypad
 * return : void 
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    52d2:	ff 92       	push	r15
    52d4:	0f 93       	push	r16
    52d6:	1f 93       	push	r17
    52d8:	cf 93       	push	r28
    52da:	df 93       	push	r29
    52dc:	8c 01       	movw	r16, r24
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
    52de:	81 e0       	ldi	r24, 0x01	; 1
    52e0:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <KeyPad_gpio+0x1>
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
    52e4:	f1 2c       	mov	r15, r1
    52e6:	19 c0       	rjmp	.+50     	; 0x531a <KeyPad_Initialization+0x48>
	{
		KeyPad_gpio.pin = KeyPad->ColumnPins[iter].Pin ;
    52e8:	cf 2d       	mov	r28, r15
    52ea:	d0 e0       	ldi	r29, 0x00	; 0
    52ec:	ce 01       	movw	r24, r28
    52ee:	88 0f       	add	r24, r24
    52f0:	99 1f       	adc	r25, r25
    52f2:	c8 0f       	add	r28, r24
    52f4:	d9 1f       	adc	r29, r25
    52f6:	c0 0f       	add	r28, r16
    52f8:	d1 1f       	adc	r29, r17
    52fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    52fc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <KeyPad_gpio>
		HAL_GPIO_Pin_Init(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
    5300:	6a ec       	ldi	r22, 0xCA	; 202
    5302:	71 e0       	ldi	r23, 0x01	; 1
    5304:	8c 85       	ldd	r24, Y+12	; 0x0c
    5306:	9d 85       	ldd	r25, Y+13	; 0x0d
    5308:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
    530c:	41 e0       	ldi	r20, 0x01	; 1
    530e:	6e 85       	ldd	r22, Y+14	; 0x0e
    5310:	8c 85       	ldd	r24, Y+12	; 0x0c
    5312:	9d 85       	ldd	r25, Y+13	; 0x0d
    5314:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
    5318:	f3 94       	inc	r15
    531a:	82 e0       	ldi	r24, 0x02	; 2
    531c:	8f 15       	cp	r24, r15
    531e:	20 f7       	brcc	.-56     	; 0x52e8 <KeyPad_Initialization+0x16>
		HAL_GPIO_Pin_Init(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
    5320:	ea ec       	ldi	r30, 0xCA	; 202
    5322:	f1 e0       	ldi	r31, 0x01	; 1
    5324:	11 82       	std	Z+1, r1	; 0x01
	KeyPad_gpio.pull = WRIGHT_SECOND ;
    5326:	81 e0       	ldi	r24, 0x01	; 1
    5328:	82 83       	std	Z+2, r24	; 0x02
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
    532a:	c0 e0       	ldi	r28, 0x00	; 0
    532c:	13 c0       	rjmp	.+38     	; 0x5354 <KeyPad_Initialization+0x82>
	{
		KeyPad_gpio.pin = KeyPad->RowPins[iter].Pin ;
    532e:	ec 2f       	mov	r30, r28
    5330:	f0 e0       	ldi	r31, 0x00	; 0
    5332:	cf 01       	movw	r24, r30
    5334:	88 0f       	add	r24, r24
    5336:	99 1f       	adc	r25, r25
    5338:	e8 0f       	add	r30, r24
    533a:	f9 1f       	adc	r31, r25
    533c:	e0 0f       	add	r30, r16
    533e:	f1 1f       	adc	r31, r17
    5340:	82 81       	ldd	r24, Z+2	; 0x02
    5342:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <KeyPad_gpio>
		HAL_GPIO_Pin_Init(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
    5346:	6a ec       	ldi	r22, 0xCA	; 202
    5348:	71 e0       	ldi	r23, 0x01	; 1
    534a:	80 81       	ld	r24, Z
    534c:	91 81       	ldd	r25, Z+1	; 0x01
    534e:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
	KeyPad_gpio.pull = WRIGHT_SECOND ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
    5352:	cf 5f       	subi	r28, 0xFF	; 255
    5354:	c4 30       	cpi	r28, 0x04	; 4
    5356:	58 f3       	brcs	.-42     	; 0x532e <KeyPad_Initialization+0x5c>
		HAL_GPIO_Pin_Init(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
	}	
	


}/* END_FUN KeyPad_Initialization()*/
    5358:	df 91       	pop	r29
    535a:	cf 91       	pop	r28
    535c:	1f 91       	pop	r17
    535e:	0f 91       	pop	r16
    5360:	ff 90       	pop	r15
    5362:	08 95       	ret

00005364 <KeyPad_GetPressedKey>:
 * brief  : this function used to return the pressed key 
 * param. : void
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
    5364:	cf 92       	push	r12
    5366:	df 92       	push	r13
    5368:	ef 92       	push	r14
    536a:	ff 92       	push	r15
    536c:	0f 93       	push	r16
    536e:	1f 93       	push	r17
    5370:	cf 93       	push	r28
    5372:	df 93       	push	r29
    5374:	ec 01       	movw	r28, r24
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
    5376:	c1 2c       	mov	r12, r1
    5378:	4d c0       	rjmp	.+154    	; 0x5414 <KeyPad_GetPressedKey+0xb0>
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
    537a:	0c 2d       	mov	r16, r12
    537c:	10 e0       	ldi	r17, 0x00	; 0
    537e:	f8 01       	movw	r30, r16
    5380:	ee 0f       	add	r30, r30
    5382:	ff 1f       	adc	r31, r31
    5384:	e0 0f       	add	r30, r16
    5386:	f1 1f       	adc	r31, r17
    5388:	ec 0f       	add	r30, r28
    538a:	fd 1f       	adc	r31, r29
    538c:	40 e0       	ldi	r20, 0x00	; 0
    538e:	66 85       	ldd	r22, Z+14	; 0x0e
    5390:	84 85       	ldd	r24, Z+12	; 0x0c
    5392:	95 85       	ldd	r25, Z+13	; 0x0d
    5394:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
    5398:	d1 2c       	mov	r13, r1
    539a:	2a c0       	rjmp	.+84     	; 0x53f0 <KeyPad_GetPressedKey+0x8c>
		{
			
			if ( HAL_GPIO_READPIN(KeyPad->RowPins[iterROW].Port ,KeyPad->RowPins[iterROW].Pin ) == WRIGHT_FIRST )
    539c:	ed 2c       	mov	r14, r13
    539e:	f1 2c       	mov	r15, r1
    53a0:	f7 01       	movw	r30, r14
    53a2:	ee 0f       	add	r30, r30
    53a4:	ff 1f       	adc	r31, r31
    53a6:	ee 0d       	add	r30, r14
    53a8:	ff 1d       	adc	r31, r15
    53aa:	ec 0f       	add	r30, r28
    53ac:	fd 1f       	adc	r31, r29
    53ae:	62 81       	ldd	r22, Z+2	; 0x02
    53b0:	80 81       	ld	r24, Z
    53b2:	91 81       	ldd	r25, Z+1	; 0x01
    53b4:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <HAL_GPIO_READPIN>
    53b8:	81 11       	cpse	r24, r1
    53ba:	19 c0       	rjmp	.+50     	; 0x53ee <KeyPad_GetPressedKey+0x8a>
			{
				
				HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
    53bc:	c8 01       	movw	r24, r16
    53be:	88 0f       	add	r24, r24
    53c0:	99 1f       	adc	r25, r25
    53c2:	80 0f       	add	r24, r16
    53c4:	91 1f       	adc	r25, r17
    53c6:	c8 0f       	add	r28, r24
    53c8:	d9 1f       	adc	r29, r25
    53ca:	41 e0       	ldi	r20, 0x01	; 1
    53cc:	6e 85       	ldd	r22, Y+14	; 0x0e
    53ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    53d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    53d2:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
				return arr_KeyPad_char[iterROW][iterCOL] ;
    53d6:	c7 01       	movw	r24, r14
    53d8:	88 0f       	add	r24, r24
    53da:	99 1f       	adc	r25, r25
    53dc:	8e 0d       	add	r24, r14
    53de:	9f 1d       	adc	r25, r15
    53e0:	80 53       	subi	r24, 0x30	; 48
    53e2:	9f 4f       	sbci	r25, 0xFF	; 255
    53e4:	fc 01       	movw	r30, r24
    53e6:	e0 0f       	add	r30, r16
    53e8:	f1 1f       	adc	r31, r17
    53ea:	80 81       	ld	r24, Z
    53ec:	18 c0       	rjmp	.+48     	; 0x541e <KeyPad_GetPressedKey+0xba>
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
    53ee:	d3 94       	inc	r13
    53f0:	83 e0       	ldi	r24, 0x03	; 3
    53f2:	8d 15       	cp	r24, r13
    53f4:	98 f6       	brcc	.-90     	; 0x539c <KeyPad_GetPressedKey+0x38>
				return arr_KeyPad_char[iterROW][iterCOL] ;
			}else{
				;
			}
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
    53f6:	f8 01       	movw	r30, r16
    53f8:	ee 0f       	add	r30, r30
    53fa:	ff 1f       	adc	r31, r31
    53fc:	0e 0f       	add	r16, r30
    53fe:	1f 1f       	adc	r17, r31
    5400:	fe 01       	movw	r30, r28
    5402:	e0 0f       	add	r30, r16
    5404:	f1 1f       	adc	r31, r17
    5406:	41 e0       	ldi	r20, 0x01	; 1
    5408:	66 85       	ldd	r22, Z+14	; 0x0e
    540a:	84 85       	ldd	r24, Z+12	; 0x0c
    540c:	95 85       	ldd	r25, Z+13	; 0x0d
    540e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
	char Key = 0;
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
    5412:	c3 94       	inc	r12
    5414:	82 e0       	ldi	r24, 0x02	; 2
    5416:	8c 15       	cp	r24, r12
    5418:	08 f0       	brcs	.+2      	; 0x541c <KeyPad_GetPressedKey+0xb8>
    541a:	af cf       	rjmp	.-162    	; 0x537a <KeyPad_GetPressedKey+0x16>
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;

	}
	
return Key ;
    541c:	80 e0       	ldi	r24, 0x00	; 0
    541e:	df 91       	pop	r29
    5420:	cf 91       	pop	r28
    5422:	1f 91       	pop	r17
    5424:	0f 91       	pop	r16
    5426:	ff 90       	pop	r15
    5428:	ef 90       	pop	r14
    542a:	df 90       	pop	r13
    542c:	cf 90       	pop	r12
    542e:	08 95       	ret

00005430 <LCD_Triger_Enable>:
 * return : void 
 */


static void LCD_Triger_Enable(void)
{
    5430:	cf 93       	push	r28
    5432:	df 93       	push	r29
	
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    5434:	cc ed       	ldi	r28, 0xDC	; 220
    5436:	d0 e0       	ldi	r29, 0x00	; 0
    5438:	41 e0       	ldi	r20, 0x01	; 1
    543a:	68 85       	ldd	r22, Y+8	; 0x08
    543c:	8e 81       	ldd	r24, Y+6	; 0x06
    543e:	9f 81       	ldd	r25, Y+7	; 0x07
    5440:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5444:	85 e0       	ldi	r24, 0x05	; 5
    5446:	8a 95       	dec	r24
    5448:	f1 f7       	brne	.-4      	; 0x5446 <LCD_Triger_Enable+0x16>
    544a:	00 00       	nop
	_delay_us(1);
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_E_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    544c:	40 e0       	ldi	r20, 0x00	; 0
    544e:	68 85       	ldd	r22, Y+8	; 0x08
    5450:	8e 81       	ldd	r24, Y+6	; 0x06
    5452:	9f 81       	ldd	r25, Y+7	; 0x07
    5454:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5458:	8f e3       	ldi	r24, 0x3F	; 63
    545a:	9f e1       	ldi	r25, 0x1F	; 31
    545c:	01 97       	sbiw	r24, 0x01	; 1
    545e:	f1 f7       	brne	.-4      	; 0x545c <LCD_Triger_Enable+0x2c>
    5460:	00 c0       	rjmp	.+0      	; 0x5462 <LCD_Triger_Enable+0x32>
    5462:	00 00       	nop
	_delay_ms(2);	
	
} /* END_FUN LCD_Triger_Enable()*/
    5464:	df 91       	pop	r29
    5466:	cf 91       	pop	r28
    5468:	08 95       	ret

0000546a <LCD_Send_4BitData>:
 * brief  : this function used to send Data to LCD in 4 bit form 
 * param. : data the specific byte that you want to send to LCD 
 * return : void 
 */
static void LCD_Send_4BitData(uint8_t data)
{
    546a:	0f 93       	push	r16
    546c:	1f 93       	push	r17
    546e:	cf 93       	push	r28
    5470:	c8 2f       	mov	r28, r24
	
		for(int i =3 ; i < 7 ;i++)																			
    5472:	83 e0       	ldi	r24, 0x03	; 3
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	23 c0       	rjmp	.+70     	; 0x54be <LCD_Send_4BitData+0x54>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
    5478:	8c 01       	movw	r16, r24
    547a:	0f 5f       	subi	r16, 0xFF	; 255
    547c:	1f 4f       	sbci	r17, 0xFF	; 255
    547e:	41 e0       	ldi	r20, 0x01	; 1
    5480:	50 e0       	ldi	r21, 0x00	; 0
    5482:	00 2e       	mov	r0, r16
    5484:	02 c0       	rjmp	.+4      	; 0x548a <LCD_Send_4BitData+0x20>
    5486:	44 0f       	add	r20, r20
    5488:	55 1f       	adc	r21, r21
    548a:	0a 94       	dec	r0
    548c:	e2 f7       	brpl	.-8      	; 0x5486 <LCD_Send_4BitData+0x1c>
    548e:	2c 2f       	mov	r18, r28
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	42 23       	and	r20, r18
    5494:	53 23       	and	r21, r19
    5496:	00 2e       	mov	r0, r16
    5498:	02 c0       	rjmp	.+4      	; 0x549e <LCD_Send_4BitData+0x34>
    549a:	55 95       	asr	r21
    549c:	47 95       	ror	r20
    549e:	0a 94       	dec	r0
    54a0:	e2 f7       	brpl	.-8      	; 0x549a <LCD_Send_4BitData+0x30>
    54a2:	fc 01       	movw	r30, r24
    54a4:	ee 0f       	add	r30, r30
    54a6:	ff 1f       	adc	r31, r31
    54a8:	8e 0f       	add	r24, r30
    54aa:	9f 1f       	adc	r25, r31
    54ac:	fc 01       	movw	r30, r24
    54ae:	e4 52       	subi	r30, 0x24	; 36
    54b0:	ff 4f       	sbci	r31, 0xFF	; 255
    54b2:	62 81       	ldd	r22, Z+2	; 0x02
    54b4:	80 81       	ld	r24, Z
    54b6:	91 81       	ldd	r25, Z+1	; 0x01
    54b8:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
 * return : void 
 */
static void LCD_Send_4BitData(uint8_t data)
{
	
		for(int i =3 ; i < 7 ;i++)																			
    54bc:	c8 01       	movw	r24, r16
    54be:	87 30       	cpi	r24, 0x07	; 7
    54c0:	91 05       	cpc	r25, r1
    54c2:	d4 f2       	brlt	.-76     	; 0x5478 <LCD_Send_4BitData+0xe>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
		LCD_Triger_Enable();
    54c4:	0e 94 18 2a 	call	0x5430	; 0x5430 <LCD_Triger_Enable>
		for(int i =3 ; i < 7 ;i++)
    54c8:	03 e0       	ldi	r16, 0x03	; 3
    54ca:	10 e0       	ldi	r17, 0x00	; 0
    54cc:	21 c0       	rjmp	.+66     	; 0x5510 <LCD_Send_4BitData+0xa6>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i-3))&(data))>>(i-3));	/* set the high nibble */
    54ce:	c8 01       	movw	r24, r16
    54d0:	03 97       	sbiw	r24, 0x03	; 3
    54d2:	41 e0       	ldi	r20, 0x01	; 1
    54d4:	50 e0       	ldi	r21, 0x00	; 0
    54d6:	08 2e       	mov	r0, r24
    54d8:	02 c0       	rjmp	.+4      	; 0x54de <LCD_Send_4BitData+0x74>
    54da:	44 0f       	add	r20, r20
    54dc:	55 1f       	adc	r21, r21
    54de:	0a 94       	dec	r0
    54e0:	e2 f7       	brpl	.-8      	; 0x54da <LCD_Send_4BitData+0x70>
    54e2:	2c 2f       	mov	r18, r28
    54e4:	30 e0       	ldi	r19, 0x00	; 0
    54e6:	42 23       	and	r20, r18
    54e8:	53 23       	and	r21, r19
    54ea:	02 c0       	rjmp	.+4      	; 0x54f0 <LCD_Send_4BitData+0x86>
    54ec:	55 95       	asr	r21
    54ee:	47 95       	ror	r20
    54f0:	8a 95       	dec	r24
    54f2:	e2 f7       	brpl	.-8      	; 0x54ec <LCD_Send_4BitData+0x82>
    54f4:	f8 01       	movw	r30, r16
    54f6:	ee 0f       	add	r30, r30
    54f8:	ff 1f       	adc	r31, r31
    54fa:	e0 0f       	add	r30, r16
    54fc:	f1 1f       	adc	r31, r17
    54fe:	e4 52       	subi	r30, 0x24	; 36
    5500:	ff 4f       	sbci	r31, 0xFF	; 255
    5502:	62 81       	ldd	r22, Z+2	; 0x02
    5504:	80 81       	ld	r24, Z
    5506:	91 81       	ldd	r25, Z+1	; 0x01
    5508:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
{
	
		for(int i =3 ; i < 7 ;i++)																			
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i+1))&(data))>>(i+1));	/* set the high nibble */
		LCD_Triger_Enable();
		for(int i =3 ; i < 7 ;i++)
    550c:	0f 5f       	subi	r16, 0xFF	; 255
    550e:	1f 4f       	sbci	r17, 0xFF	; 255
    5510:	07 30       	cpi	r16, 0x07	; 7
    5512:	11 05       	cpc	r17, r1
    5514:	e4 f2       	brlt	.-72     	; 0x54ce <LCD_Send_4BitData+0x64>
		HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[i].Port,LcdBitSelect.LcdBits[i].Pin,((1<<(i-3))&(data))>>(i-3));	/* set the high nibble */
		LCD_Triger_Enable();
    5516:	0e 94 18 2a 	call	0x5430	; 0x5430 <LCD_Triger_Enable>


} /* END_FUN LCD_Send_4BitData()*/
    551a:	cf 91       	pop	r28
    551c:	1f 91       	pop	r17
    551e:	0f 91       	pop	r16
    5520:	08 95       	ret

00005522 <LCD_Send_Character_CurrLoc>:
 * brief  : this function used to send an character to LCD with the current location 
 * param. : Character the specific character to send to LCD 
 * return : void 
 */ 
LCD_Status_t LCD_Send_Character_CurrLoc(uint8_t character)
{
    5522:	1f 93       	push	r17
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	18 2f       	mov	r17, r24
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    552a:	cc ed       	ldi	r28, 0xDC	; 220
    552c:	d0 e0       	ldi	r29, 0x00	; 0
    552e:	41 e0       	ldi	r20, 0x01	; 1
    5530:	6a 81       	ldd	r22, Y+2	; 0x02
    5532:	88 81       	ld	r24, Y
    5534:	99 81       	ldd	r25, Y+1	; 0x01
    5536:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    553a:	40 e0       	ldi	r20, 0x00	; 0
    553c:	6d 81       	ldd	r22, Y+5	; 0x05
    553e:	8b 81       	ldd	r24, Y+3	; 0x03
    5540:	9c 81       	ldd	r25, Y+4	; 0x04
    5542:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>

	LCD_Send_4BitData(character);
    5546:	81 2f       	mov	r24, r17
    5548:	0e 94 35 2a 	call	0x546a	; 0x546a <LCD_Send_4BitData>
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Character_CurrLoc()*/
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	df 91       	pop	r29
    5550:	cf 91       	pop	r28
    5552:	1f 91       	pop	r17
    5554:	08 95       	ret

00005556 <LCD_Send_Command>:
 * brief  : this function used to send command to LCD  
 * param. : command the specific command to send to LCD chose one of @ LCD_COMMANED_ 
 * return : void 
 */
LCD_Status_t LCD_Send_Command(uint8_t command)
{
    5556:	1f 93       	push	r17
    5558:	cf 93       	push	r28
    555a:	df 93       	push	r29
    555c:	18 2f       	mov	r17, r24
	
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_RESET);  // set enable pin		
    555e:	cc ed       	ldi	r28, 0xDC	; 220
    5560:	d0 e0       	ldi	r29, 0x00	; 0
    5562:	40 e0       	ldi	r20, 0x00	; 0
    5564:	6a 81       	ldd	r22, Y+2	; 0x02
    5566:	88 81       	ld	r24, Y
    5568:	99 81       	ldd	r25, Y+1	; 0x01
    556a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    556e:	40 e0       	ldi	r20, 0x00	; 0
    5570:	6d 81       	ldd	r22, Y+5	; 0x05
    5572:	8b 81       	ldd	r24, Y+3	; 0x03
    5574:	9c 81       	ldd	r25, Y+4	; 0x04
    5576:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	LCD_Send_4BitData(command);
    557a:	81 2f       	mov	r24, r17
    557c:	0e 94 35 2a 	call	0x546a	; 0x546a <LCD_Send_4BitData>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Command()*/
    5580:	80 e0       	ldi	r24, 0x00	; 0
    5582:	df 91       	pop	r29
    5584:	cf 91       	pop	r28
    5586:	1f 91       	pop	r17
    5588:	08 95       	ret

0000558a <LCD_Send_String_CurrLoc>:
 * brief  : this function used to send an string to LCD with the current location 
 * param. : Character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_String_CurrLoc(uint8_t *string)
{
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	ec 01       	movw	r28, r24
	while (*string != 0)
    5590:	03 c0       	rjmp	.+6      	; 0x5598 <LCD_Send_String_CurrLoc+0xe>
	{
		LCD_Send_Character_CurrLoc(*string++);
    5592:	21 96       	adiw	r28, 0x01	; 1
    5594:	0e 94 91 2a 	call	0x5522	; 0x5522 <LCD_Send_Character_CurrLoc>
 * param. : Character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_String_CurrLoc(uint8_t *string)
{
	while (*string != 0)
    5598:	88 81       	ld	r24, Y
    559a:	81 11       	cpse	r24, r1
    559c:	fa cf       	rjmp	.-12     	; 0x5592 <LCD_Send_String_CurrLoc+0x8>

	}
	
	
	return LCD_OK ;
} /* END_FUN LCD_Send_String_CurrLoc()*/
    559e:	df 91       	pop	r29
    55a0:	cf 91       	pop	r28
    55a2:	08 95       	ret

000055a4 <LCD_Goto_Location>:
 * param. :  y  is specify the new Y axises
 * param. :  x  is specify the new X axises
 * return : void 
 */
LCD_Status_t LCD_Goto_Location(uint8_t y , uint8_t x)
{
    55a4:	cf 93       	push	r28
    55a6:	df 93       	push	r29
    55a8:	00 d0       	rcall	.+0      	; 0x55aa <LCD_Goto_Location+0x6>
    55aa:	cd b7       	in	r28, 0x3d	; 61
    55ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t column_position [2] = {0x80,0xc0};
    55ae:	90 e8       	ldi	r25, 0x80	; 128
    55b0:	99 83       	std	Y+1, r25	; 0x01
    55b2:	90 ec       	ldi	r25, 0xC0	; 192
    55b4:	9a 83       	std	Y+2, r25	; 0x02
	LCD_Send_Command(column_position[y-1]+(x-1));
    55b6:	e8 2f       	mov	r30, r24
    55b8:	f0 e0       	ldi	r31, 0x00	; 0
    55ba:	31 97       	sbiw	r30, 0x01	; 1
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	8c 0f       	add	r24, r28
    55c2:	9d 1f       	adc	r25, r29
    55c4:	e8 0f       	add	r30, r24
    55c6:	f9 1f       	adc	r31, r25
    55c8:	80 81       	ld	r24, Z
    55ca:	86 0f       	add	r24, r22
    55cc:	81 50       	subi	r24, 0x01	; 1
    55ce:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>


	return LCD_OK ;	
} /* END_FUN LCD_Goto_Location()*/
    55d2:	80 e0       	ldi	r24, 0x00	; 0
    55d4:	0f 90       	pop	r0
    55d6:	0f 90       	pop	r0
    55d8:	df 91       	pop	r29
    55da:	cf 91       	pop	r28
    55dc:	08 95       	ret

000055de <LCD_Send_Character_WithLoc>:
 * param. :  x  is specify the new X axises
 * param. : character the specific character to send to LCD 
 * return : void 
 */
LCD_Status_t LCD_Send_Character_WithLoc(uint8_t y,uint8_t x,uint8_t character)
{
    55de:	1f 93       	push	r17
    55e0:	cf 93       	push	r28
    55e2:	df 93       	push	r29
    55e4:	14 2f       	mov	r17, r20
	
	LCD_Goto_Location(y,x);
    55e6:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <LCD_Goto_Location>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RS_PIN].Pin,GPIO_PIN_SET);  // set enable pin
    55ea:	cc ed       	ldi	r28, 0xDC	; 220
    55ec:	d0 e0       	ldi	r29, 0x00	; 0
    55ee:	41 e0       	ldi	r20, 0x01	; 1
    55f0:	6a 81       	ldd	r22, Y+2	; 0x02
    55f2:	88 81       	ld	r24, Y
    55f4:	99 81       	ldd	r25, Y+1	; 0x01
    55f6:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Port,LcdBitSelect.LcdBits[LCD_BIT_RW_PIN].Pin,GPIO_PIN_RESET);  // set enable pin
    55fa:	40 e0       	ldi	r20, 0x00	; 0
    55fc:	6d 81       	ldd	r22, Y+5	; 0x05
    55fe:	8b 81       	ldd	r24, Y+3	; 0x03
    5600:	9c 81       	ldd	r25, Y+4	; 0x04
    5602:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	LCD_Send_4BitData(character);
    5606:	81 2f       	mov	r24, r17
    5608:	0e 94 35 2a 	call	0x546a	; 0x546a <LCD_Send_4BitData>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Character_WithLoc()*/
    560c:	80 e0       	ldi	r24, 0x00	; 0
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	1f 91       	pop	r17
    5614:	08 95       	ret

00005616 <LCD_Initializaion>:
/*
 * brief  : this function used to initialize (GPIO &LCD) 
 * return : void 
 */ 
LCD_Status_t LCD_Initializaion(void)
{
    5616:	0f 93       	push	r16
    5618:	1f 93       	push	r17
    561a:	cf 93       	push	r28
    561c:	df 93       	push	r29
    561e:	00 d0       	rcall	.+0      	; 0x5620 <LCD_Initializaion+0xa>
    5620:	1f 92       	push	r1
    5622:	cd b7       	in	r28, 0x3d	; 61
    5624:	de b7       	in	r29, 0x3e	; 62
    5626:	2f ef       	ldi	r18, 0xFF	; 255
    5628:	89 ef       	ldi	r24, 0xF9	; 249
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	21 50       	subi	r18, 0x01	; 1
    562e:	80 40       	sbci	r24, 0x00	; 0
    5630:	90 40       	sbci	r25, 0x00	; 0
    5632:	e1 f7       	brne	.-8      	; 0x562c <LCD_Initializaion+0x16>
    5634:	00 c0       	rjmp	.+0      	; 0x5636 <LCD_Initializaion+0x20>
    5636:	00 00       	nop
	GPIO_InitTypeDef LCD_GPIO_Handler ;
	
	
	_delay_ms(20);
	/* Set portB pin 1,2,3 as output */
	LCD_GPIO_Handler.mode = GPIO_MODE_OUTPUT ;
    5638:	81 e0       	ldi	r24, 0x01	; 1
    563a:	8a 83       	std	Y+2, r24	; 0x02
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
    563c:	1b 82       	std	Y+3, r1	; 0x03
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
    563e:	00 e0       	ldi	r16, 0x00	; 0
    5640:	10 e0       	ldi	r17, 0x00	; 0
    5642:	12 c0       	rjmp	.+36     	; 0x5668 <LCD_Initializaion+0x52>
	{
		LCD_GPIO_Handler.pin = LcdBitSelect.LcdBits[i].Pin ;
    5644:	f8 01       	movw	r30, r16
    5646:	ee 0f       	add	r30, r30
    5648:	ff 1f       	adc	r31, r31
    564a:	e0 0f       	add	r30, r16
    564c:	f1 1f       	adc	r31, r17
    564e:	e4 52       	subi	r30, 0x24	; 36
    5650:	ff 4f       	sbci	r31, 0xFF	; 255
    5652:	82 81       	ldd	r24, Z+2	; 0x02
    5654:	89 83       	std	Y+1, r24	; 0x01
		  
		HAL_GPIO_Pin_Init(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
    5656:	be 01       	movw	r22, r28
    5658:	6f 5f       	subi	r22, 0xFF	; 255
    565a:	7f 4f       	sbci	r23, 0xFF	; 255
    565c:	80 81       	ld	r24, Z
    565e:	91 81       	ldd	r25, Z+1	; 0x01
    5660:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
    5664:	0f 5f       	subi	r16, 0xFF	; 255
    5666:	1f 4f       	sbci	r17, 0xFF	; 255
    5668:	07 30       	cpi	r16, 0x07	; 7
    566a:	11 05       	cpc	r17, r1
    566c:	5c f3       	brlt	.-42     	; 0x5644 <LCD_Initializaion+0x2e>
		  
		HAL_GPIO_Pin_Init(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
	}

	/* LCD Initialization command*/
	LCD_Send_Command(0x33U);  
    566e:	83 e3       	ldi	r24, 0x33	; 51
    5670:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
	LCD_Send_Command(0x32U);
    5674:	82 e3       	ldi	r24, 0x32	; 50
    5676:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED2LINE_4_BIT_MODE);
    567a:	88 e2       	ldi	r24, 0x28	; 40
    567c:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED_CLEAR_CURSOR_OFF);
    5680:	8c e0       	ldi	r24, 0x0C	; 12
    5682:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
	LCD_Send_Command(LCD_COMMANED_CLEAR_LCD);
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	0e 94 ab 2a 	call	0x5556	; 0x5556 <LCD_Send_Command>
	

	return LCD_OK ;
	
} /* END_FUN LCD_Initializaion()*/
    568c:	80 e0       	ldi	r24, 0x00	; 0
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	0f 90       	pop	r0
    5694:	df 91       	pop	r29
    5696:	cf 91       	pop	r28
    5698:	1f 91       	pop	r17
    569a:	0f 91       	pop	r16
    569c:	08 95       	ret

0000569e <LCD_Send_String_WithLoc>:
 * param. :  x  is specify y axises location start from 1
 * param. : StringOfCharacters pointer to string that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_String_WithLoc(uint8_t y, uint8_t x, uint8_t * StringOfCharacters)
{
    569e:	cf 93       	push	r28
    56a0:	df 93       	push	r29
    56a2:	ea 01       	movw	r28, r20
	LCD_Goto_Location(y,x);
    56a4:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <LCD_Goto_Location>
	while (*StringOfCharacters != 0)
    56a8:	03 c0       	rjmp	.+6      	; 0x56b0 <LCD_Send_String_WithLoc+0x12>
	{
		LCD_Send_Character_CurrLoc(*StringOfCharacters++);  
    56aa:	21 96       	adiw	r28, 0x01	; 1
    56ac:	0e 94 91 2a 	call	0x5522	; 0x5522 <LCD_Send_Character_CurrLoc>
 * return : void 
 */
LCD_Status_t LCD_Send_String_WithLoc(uint8_t y, uint8_t x, uint8_t * StringOfCharacters)
{
	LCD_Goto_Location(y,x);
	while (*StringOfCharacters != 0)
    56b0:	88 81       	ld	r24, Y
    56b2:	81 11       	cpse	r24, r1
    56b4:	fa cf       	rjmp	.-12     	; 0x56aa <LCD_Send_String_WithLoc+0xc>
		LCD_Send_Character_CurrLoc(*StringOfCharacters++);  
	}
	
	
	return LCD_OK ;
} /* END_FUN Send_A_String_WithLoc()*/
    56b6:	df 91       	pop	r29
    56b8:	cf 91       	pop	r28
    56ba:	08 95       	ret

000056bc <LCD_Send_Integer_CurrLoc>:
 * param. : IntegerToDisplay this is the integer value that you want to display
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
    56bc:	ef 92       	push	r14
    56be:	ff 92       	push	r15
    56c0:	0f 93       	push	r16
    56c2:	1f 93       	push	r17
    56c4:	cf 93       	push	r28
    56c6:	df 93       	push	r29
    56c8:	cd b7       	in	r28, 0x3d	; 61
    56ca:	de b7       	in	r29, 0x3e	; 62
		itoa(IntegerToDisplay,StringToDisplay,10); /* convert from int num. to char num. */
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
    56cc:	ed b6       	in	r14, 0x3d	; 61
    56ce:	fe b6       	in	r15, 0x3e	; 62
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
		uint8_t StringToDisplay[NumberOfDigits];   /* create array with required size */ 
    56d0:	2d b7       	in	r18, 0x3d	; 61
    56d2:	3e b7       	in	r19, 0x3e	; 62
    56d4:	26 1b       	sub	r18, r22
    56d6:	31 09       	sbc	r19, r1
    56d8:	0f b6       	in	r0, 0x3f	; 63
    56da:	f8 94       	cli
    56dc:	3e bf       	out	0x3e, r19	; 62
    56de:	0f be       	out	0x3f, r0	; 63
    56e0:	2d bf       	out	0x3d, r18	; 61
    56e2:	0d b7       	in	r16, 0x3d	; 61
    56e4:	1e b7       	in	r17, 0x3e	; 62
    56e6:	0f 5f       	subi	r16, 0xFF	; 255
    56e8:	1f 4f       	sbci	r17, 0xFF	; 255
		itoa(IntegerToDisplay,StringToDisplay,10); /* convert from int num. to char num. */
    56ea:	4a e0       	ldi	r20, 0x0A	; 10
    56ec:	50 e0       	ldi	r21, 0x00	; 0
    56ee:	b8 01       	movw	r22, r16
    56f0:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <itoa>
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
    56f4:	c8 01       	movw	r24, r16
    56f6:	0e 94 c5 2a 	call	0x558a	; 0x558a <LCD_Send_String_CurrLoc>
	
	
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	0f b6       	in	r0, 0x3f	; 63
    56fe:	f8 94       	cli
    5700:	fe be       	out	0x3e, r15	; 62
    5702:	0f be       	out	0x3f, r0	; 63
    5704:	ed be       	out	0x3d, r14	; 61
    5706:	df 91       	pop	r29
    5708:	cf 91       	pop	r28
    570a:	1f 91       	pop	r17
    570c:	0f 91       	pop	r16
    570e:	ff 90       	pop	r15
    5710:	ef 90       	pop	r14
    5712:	08 95       	ret

00005714 <Motor_Stop>:
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_SET);	
}


static void Motor_Stop(uint8_t Motor_num)
{
    5714:	ef 92       	push	r14
    5716:	ff 92       	push	r15
    5718:	0f 93       	push	r16
    571a:	1f 93       	push	r17
    571c:	cf 93       	push	r28
    571e:	df 93       	push	r29
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_RESET);
    5720:	c8 2f       	mov	r28, r24
    5722:	d0 e0       	ldi	r29, 0x00	; 0
    5724:	7e 01       	movw	r14, r28
    5726:	ee 0c       	add	r14, r14
    5728:	ff 1c       	adc	r15, r15
    572a:	87 01       	movw	r16, r14
    572c:	0c 0f       	add	r16, r28
    572e:	1d 1f       	adc	r17, r29
    5730:	00 0f       	add	r16, r16
    5732:	11 1f       	adc	r17, r17
    5734:	09 58       	subi	r16, 0x89	; 137
    5736:	1e 4f       	sbci	r17, 0xFE	; 254
    5738:	40 e0       	ldi	r20, 0x00	; 0
    573a:	f8 01       	movw	r30, r16
    573c:	64 81       	ldd	r22, Z+4	; 0x04
    573e:	80 81       	ld	r24, Z
    5740:	91 81       	ldd	r25, Z+1	; 0x01
    5742:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_RESET);
    5746:	e8 01       	movw	r28, r16
    5748:	40 e0       	ldi	r20, 0x00	; 0
    574a:	6d 81       	ldd	r22, Y+5	; 0x05
    574c:	8a 81       	ldd	r24, Y+2	; 0x02
    574e:	9b 81       	ldd	r25, Y+3	; 0x03
    5750:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
}
    5754:	df 91       	pop	r29
    5756:	cf 91       	pop	r28
    5758:	1f 91       	pop	r17
    575a:	0f 91       	pop	r16
    575c:	ff 90       	pop	r15
    575e:	ef 90       	pop	r14
    5760:	08 95       	ret

00005762 <Motor_ACW>:
	return MOTOR_OK ;
	
}

static void Motor_ACW(uint8_t Motor_num)
{
    5762:	ef 92       	push	r14
    5764:	ff 92       	push	r15
    5766:	0f 93       	push	r16
    5768:	1f 93       	push	r17
    576a:	cf 93       	push	r28
    576c:	df 93       	push	r29
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_SET);
    576e:	c8 2f       	mov	r28, r24
    5770:	d0 e0       	ldi	r29, 0x00	; 0
    5772:	7e 01       	movw	r14, r28
    5774:	ee 0c       	add	r14, r14
    5776:	ff 1c       	adc	r15, r15
    5778:	87 01       	movw	r16, r14
    577a:	0c 0f       	add	r16, r28
    577c:	1d 1f       	adc	r17, r29
    577e:	00 0f       	add	r16, r16
    5780:	11 1f       	adc	r17, r17
    5782:	09 58       	subi	r16, 0x89	; 137
    5784:	1e 4f       	sbci	r17, 0xFE	; 254
    5786:	41 e0       	ldi	r20, 0x01	; 1
    5788:	f8 01       	movw	r30, r16
    578a:	64 81       	ldd	r22, Z+4	; 0x04
    578c:	80 81       	ld	r24, Z
    578e:	91 81       	ldd	r25, Z+1	; 0x01
    5790:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_RESET);
    5794:	e8 01       	movw	r28, r16
    5796:	40 e0       	ldi	r20, 0x00	; 0
    5798:	6d 81       	ldd	r22, Y+5	; 0x05
    579a:	8a 81       	ldd	r24, Y+2	; 0x02
    579c:	9b 81       	ldd	r25, Y+3	; 0x03
    579e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
}
    57a2:	df 91       	pop	r29
    57a4:	cf 91       	pop	r28
    57a6:	1f 91       	pop	r17
    57a8:	0f 91       	pop	r16
    57aa:	ff 90       	pop	r15
    57ac:	ef 90       	pop	r14
    57ae:	08 95       	ret

000057b0 <Motor_CW>:


static void Motor_CW(uint8_t Motor_num)
{
    57b0:	ef 92       	push	r14
    57b2:	ff 92       	push	r15
    57b4:	0f 93       	push	r16
    57b6:	1f 93       	push	r17
    57b8:	cf 93       	push	r28
    57ba:	df 93       	push	r29
	
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__H] , MOTORS.Motor[Motor_num].Pin[MOTOR__H] , GPIO_PIN_RESET);
    57bc:	c8 2f       	mov	r28, r24
    57be:	d0 e0       	ldi	r29, 0x00	; 0
    57c0:	7e 01       	movw	r14, r28
    57c2:	ee 0c       	add	r14, r14
    57c4:	ff 1c       	adc	r15, r15
    57c6:	87 01       	movw	r16, r14
    57c8:	0c 0f       	add	r16, r28
    57ca:	1d 1f       	adc	r17, r29
    57cc:	00 0f       	add	r16, r16
    57ce:	11 1f       	adc	r17, r17
    57d0:	09 58       	subi	r16, 0x89	; 137
    57d2:	1e 4f       	sbci	r17, 0xFE	; 254
    57d4:	40 e0       	ldi	r20, 0x00	; 0
    57d6:	f8 01       	movw	r30, r16
    57d8:	64 81       	ldd	r22, Z+4	; 0x04
    57da:	80 81       	ld	r24, Z
    57dc:	91 81       	ldd	r25, Z+1	; 0x01
    57de:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(MOTORS.Motor[Motor_num].Port[MOTOR__L] , MOTORS.Motor[Motor_num].Pin[MOTOR__L] , GPIO_PIN_SET);	
    57e2:	e8 01       	movw	r28, r16
    57e4:	41 e0       	ldi	r20, 0x01	; 1
    57e6:	6d 81       	ldd	r22, Y+5	; 0x05
    57e8:	8a 81       	ldd	r24, Y+2	; 0x02
    57ea:	9b 81       	ldd	r25, Y+3	; 0x03
    57ec:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
}
    57f0:	df 91       	pop	r29
    57f2:	cf 91       	pop	r28
    57f4:	1f 91       	pop	r17
    57f6:	0f 91       	pop	r16
    57f8:	ff 90       	pop	r15
    57fa:	ef 90       	pop	r14
    57fc:	08 95       	ret

000057fe <Motor_Init>:
static TIMInit_t  Tim_PWM_Handler ={ .Instance = TIM0 ,.COMPConfig.TIM8Bit.CompAction = TIM_COMP_PIN_OUT_Normal   , .TIM_Interrupt = TIM_0_IT_COMP ,.TimPreScaler = TIM_0_Prescaler_256  , .COMPConfig.TIM8Bit.CompValue = 0  };
#endif


MOTOR_STATUS_t Motor_Init(void)
{
    57fe:	0f 93       	push	r16
    5800:	1f 93       	push	r17
    5802:	cf 93       	push	r28
    5804:	df 93       	push	r29
    5806:	00 d0       	rcall	.+0      	; 0x5808 <Motor_Init+0xa>
    5808:	1f 92       	push	r1
    580a:	cd b7       	in	r28, 0x3d	; 61
    580c:	de b7       	in	r29, 0x3e	; 62
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL }; 
    580e:	19 82       	std	Y+1, r1	; 0x01
    5810:	1a 82       	std	Y+2, r1	; 0x02
    5812:	1b 82       	std	Y+3, r1	; 0x03
    5814:	81 e0       	ldi	r24, 0x01	; 1
    5816:	8a 83       	std	Y+2, r24	; 0x02
		if(Software_PWM_Init( GPIOD , GPIO_PIN_7 ,  &Tim_PWM_Handler ) != UTIL_OK)
    5818:	42 ef       	ldi	r20, 0xF2	; 242
    581a:	50 e0       	ldi	r21, 0x00	; 0
    581c:	60 e8       	ldi	r22, 0x80	; 128
    581e:	80 e3       	ldi	r24, 0x30	; 48
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	0e 94 de 33 	call	0x67bc	; 0x67bc <Software_PWM_Init>
    5826:	81 11       	cpse	r24, r1
    5828:	18 c0       	rjmp	.+48     	; 0x585a <Motor_Init+0x5c>
    582a:	10 e0       	ldi	r17, 0x00	; 0
    582c:	12 c0       	rjmp	.+36     	; 0x5852 <Motor_Init+0x54>
		}

		
		for (uint8_t iter = 0 ; iter < Total_MOTORS ; iter++)
		{
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
    582e:	04 e0       	ldi	r16, 0x04	; 4
    5830:	09 83       	std	Y+1, r16	; 0x01
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
    5832:	be 01       	movw	r22, r28
    5834:	6f 5f       	subi	r22, 0xFF	; 255
    5836:	7f 4f       	sbci	r23, 0xFF	; 255
    5838:	86 e3       	ldi	r24, 0x36	; 54
    583a:	90 e0       	ldi	r25, 0x00	; 0
    583c:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
    5840:	09 83       	std	Y+1, r16	; 0x01
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
    5842:	be 01       	movw	r22, r28
    5844:	6f 5f       	subi	r22, 0xFF	; 255
    5846:	7f 4f       	sbci	r23, 0xFF	; 255
    5848:	86 e3       	ldi	r24, 0x36	; 54
    584a:	90 e0       	ldi	r25, 0x00	; 0
    584c:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
		{
			return MOTOR_PWM_ERROR ; 
		}

		
		for (uint8_t iter = 0 ; iter < Total_MOTORS ; iter++)
    5850:	1f 5f       	subi	r17, 0xFF	; 255
    5852:	12 30       	cpi	r17, 0x02	; 2
    5854:	60 f3       	brcs	.-40     	; 0x582e <Motor_Init+0x30>
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
		}
	
	return MOTOR_OK ; 
    5856:	80 e0       	ldi	r24, 0x00	; 0
    5858:	01 c0       	rjmp	.+2      	; 0x585c <Motor_Init+0x5e>
MOTOR_STATUS_t Motor_Init(void)
{
		GPIO_InitTypeDef   PIN_CONFIG = {.mode = GPIO_MODE_OUTPUT , .pull = GPIO_NOPULL }; 
		if(Software_PWM_Init( GPIOD , GPIO_PIN_7 ,  &Tim_PWM_Handler ) != UTIL_OK)
		{
			return MOTOR_PWM_ERROR ; 
    585a:	83 e0       	ldi	r24, 0x03	; 3
			PIN_CONFIG.pin = MOTORS.Motor[MOTOR_1].Pin[MOTOR__H];
			HAL_GPIO_Pin_Init(MOTORS.Motor[MOTOR_1].Port[MOTOR__L] , &PIN_CONFIG);
		}
	
	return MOTOR_OK ; 
}
    585c:	0f 90       	pop	r0
    585e:	0f 90       	pop	r0
    5860:	0f 90       	pop	r0
    5862:	df 91       	pop	r29
    5864:	cf 91       	pop	r28
    5866:	1f 91       	pop	r17
    5868:	0f 91       	pop	r16
    586a:	08 95       	ret

0000586c <Motor_Start>:


MOTOR_STATUS_t Motor_Start(void)
{
	
		if (Software_PWM_Start (&Tim_PWM_Handler) != UTIL_OK)
    586c:	82 ef       	ldi	r24, 0xF2	; 242
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	0e 94 4e 34 	call	0x689c	; 0x689c <Software_PWM_Start>
    5874:	88 23       	and	r24, r24
    5876:	11 f0       	breq	.+4      	; 0x587c <Motor_Start+0x10>
		{
			return MOTOR_PWM_ERROR ;
    5878:	83 e0       	ldi	r24, 0x03	; 3
    587a:	08 95       	ret
		}
	
	
}
    587c:	08 95       	ret

0000587e <Motor_Dir>:

MOTOR_STATUS_t Motor_Dir(Motor_DIR_t DIR , uint8_t Speed )
{
    587e:	cf 93       	push	r28
	static	uint8_t Motor_Speed = 0 ;
	static	Motor_DIR_t Motor_Dir = DID_STOP ;
	
	if ((Motor_Speed == Speed)&&(Motor_Dir == DIR))
    5880:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <Motor_Speed.1825>
    5884:	96 13       	cpse	r25, r22
    5886:	05 c0       	rjmp	.+10     	; 0x5892 <Motor_Dir+0x14>
    5888:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <Motor_Dir.1826>
    588c:	98 17       	cp	r25, r24
    588e:	09 f4       	brne	.+2      	; 0x5892 <Motor_Dir+0x14>
    5890:	62 c0       	rjmp	.+196    	; 0x5956 <Motor_Dir+0xd8>
    5892:	c6 2f       	mov	r28, r22
	{
		return MOTOR_OK ; 
	}
	
	switch(DIR)
    5894:	82 30       	cpi	r24, 0x02	; 2
    5896:	71 f1       	breq	.+92     	; 0x58f4 <Motor_Dir+0x76>
    5898:	30 f4       	brcc	.+12     	; 0x58a6 <Motor_Dir+0x28>
    589a:	88 23       	and	r24, r24
    589c:	e1 f1       	breq	.+120    	; 0x5916 <Motor_Dir+0x98>
    589e:	81 30       	cpi	r24, 0x01	; 1
    58a0:	09 f4       	brne	.+2      	; 0x58a4 <Motor_Dir+0x26>
    58a2:	49 c0       	rjmp	.+146    	; 0x5936 <Motor_Dir+0xb8>
    58a4:	58 c0       	rjmp	.+176    	; 0x5956 <Motor_Dir+0xd8>
    58a6:	83 30       	cpi	r24, 0x03	; 3
    58a8:	a1 f0       	breq	.+40     	; 0x58d2 <Motor_Dir+0x54>
    58aa:	84 30       	cpi	r24, 0x04	; 4
    58ac:	09 f0       	breq	.+2      	; 0x58b0 <Motor_Dir+0x32>
    58ae:	53 c0       	rjmp	.+166    	; 0x5956 <Motor_Dir+0xd8>
	{
		case DID_STOP :
			Motor_Stop(MOTOR_1);
    58b0:	80 e0       	ldi	r24, 0x00	; 0
    58b2:	0e 94 8a 2b 	call	0x5714	; 0x5714 <Motor_Stop>
			Motor_Stop(MOTOR_2);
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	0e 94 8a 2b 	call	0x5714	; 0x5714 <Motor_Stop>
			Motor_Dir = DID_STOP ; 
    58bc:	84 e0       	ldi	r24, 0x04	; 4
    58be:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1826>
			Motor_Speed = 0 ;
    58c2:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <Motor_Speed.1825>

			Software_PWM_UpdateDuty( 0 ,&Tim_PWM_Handler );
    58c6:	62 ef       	ldi	r22, 0xF2	; 242
    58c8:	70 e0       	ldi	r23, 0x00	; 0
    58ca:	80 e0       	ldi	r24, 0x00	; 0
    58cc:	0e 94 56 34 	call	0x68ac	; 0x68ac <Software_PWM_UpdateDuty>
		break; 
    58d0:	42 c0       	rjmp	.+132    	; 0x5956 <Motor_Dir+0xd8>
		case  DIR_BACKWARD :
			Motor_ACW(MOTOR_1);
    58d2:	80 e0       	ldi	r24, 0x00	; 0
    58d4:	0e 94 b1 2b 	call	0x5762	; 0x5762 <Motor_ACW>
			Motor_ACW(MOTOR_2);
    58d8:	81 e0       	ldi	r24, 0x01	; 1
    58da:	0e 94 b1 2b 	call	0x5762	; 0x5762 <Motor_ACW>
			Motor_Dir = DIR_BACKWARD ;
    58de:	83 e0       	ldi	r24, 0x03	; 3
    58e0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1826>
			Motor_Speed = Speed ;
    58e4:	c0 93 cd 01 	sts	0x01CD, r28	; 0x8001cd <Motor_Speed.1825>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    58e8:	62 ef       	ldi	r22, 0xF2	; 242
    58ea:	70 e0       	ldi	r23, 0x00	; 0
    58ec:	8c 2f       	mov	r24, r28
    58ee:	0e 94 56 34 	call	0x68ac	; 0x68ac <Software_PWM_UpdateDuty>
		break; 
    58f2:	31 c0       	rjmp	.+98     	; 0x5956 <Motor_Dir+0xd8>
		case  DIR_FORWARD :
			Motor_CW(MOTOR_1);
    58f4:	80 e0       	ldi	r24, 0x00	; 0
    58f6:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <Motor_CW>
			Motor_CW(MOTOR_2);
    58fa:	81 e0       	ldi	r24, 0x01	; 1
    58fc:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <Motor_CW>
			Motor_Dir = DIR_FORWARD ;
    5900:	82 e0       	ldi	r24, 0x02	; 2
    5902:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1826>
			Motor_Speed = Speed ;
    5906:	c0 93 cd 01 	sts	0x01CD, r28	; 0x8001cd <Motor_Speed.1825>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    590a:	62 ef       	ldi	r22, 0xF2	; 242
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	8c 2f       	mov	r24, r28
    5910:	0e 94 56 34 	call	0x68ac	; 0x68ac <Software_PWM_UpdateDuty>
		break; 
    5914:	20 c0       	rjmp	.+64     	; 0x5956 <Motor_Dir+0xd8>
		case  DIR_LEFT :
			Motor_CW(MOTOR_1);
    5916:	80 e0       	ldi	r24, 0x00	; 0
    5918:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <Motor_CW>
			Motor_ACW(MOTOR_2);
    591c:	81 e0       	ldi	r24, 0x01	; 1
    591e:	0e 94 b1 2b 	call	0x5762	; 0x5762 <Motor_ACW>
			Motor_Dir = DIR_LEFT ;
    5922:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <Motor_Dir.1826>
			Motor_Speed = Speed ;
    5926:	c0 93 cd 01 	sts	0x01CD, r28	; 0x8001cd <Motor_Speed.1825>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    592a:	62 ef       	ldi	r22, 0xF2	; 242
    592c:	70 e0       	ldi	r23, 0x00	; 0
    592e:	8c 2f       	mov	r24, r28
    5930:	0e 94 56 34 	call	0x68ac	; 0x68ac <Software_PWM_UpdateDuty>
		break; 
    5934:	10 c0       	rjmp	.+32     	; 0x5956 <Motor_Dir+0xd8>
		case DIR_RIGHT :
			Motor_ACW(MOTOR_1);
    5936:	80 e0       	ldi	r24, 0x00	; 0
    5938:	0e 94 b1 2b 	call	0x5762	; 0x5762 <Motor_ACW>
			Motor_CW(MOTOR_2);
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	0e 94 d8 2b 	call	0x57b0	; 0x57b0 <Motor_CW>
			Motor_Dir = DIR_RIGHT ;
    5942:	81 e0       	ldi	r24, 0x01	; 1
    5944:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <Motor_Dir.1826>
			Motor_Speed = Speed ;
    5948:	c0 93 cd 01 	sts	0x01CD, r28	; 0x8001cd <Motor_Speed.1825>
			Software_PWM_UpdateDuty( Speed ,&Tim_PWM_Handler );
    594c:	62 ef       	ldi	r22, 0xF2	; 242
    594e:	70 e0       	ldi	r23, 0x00	; 0
    5950:	8c 2f       	mov	r24, r28
    5952:	0e 94 56 34 	call	0x68ac	; 0x68ac <Software_PWM_UpdateDuty>
		
	}
	
	return MOTOR_OK ;
	
}
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	cf 91       	pop	r28
    595a:	08 95       	ret

0000595c <EEPROM_Init>:
	
	
	HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS ,(PageNum )*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE), ATM_CARD_ADDRESS_SIZE , TXBuffer , EEPROM_NUMBER_OF_BYTES_FOR_PAGE);
	return EEPROM_OK ;
	
}
    595c:	86 e9       	ldi	r24, 0x96	; 150
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <I2C_Init>
    5964:	80 e0       	ldi	r24, 0x00	; 0
    5966:	08 95       	ret

00005968 <EEPROM_ReadByteS>:


EEPROM_Status_t EEPROM_ReadByteS(uint16_t StartByteNum , uint8_t * RXByte , uint8_t DataSize)
{
    5968:	8f 92       	push	r8
    596a:	9f 92       	push	r9
    596c:	af 92       	push	r10
    596e:	bf 92       	push	r11
    5970:	cf 92       	push	r12
    5972:	df 92       	push	r13
    5974:	ef 92       	push	r14
    5976:	0f 93       	push	r16
    5978:	1f 93       	push	r17
    597a:	cf 93       	push	r28
	
	if ((RXByte == NULL) || ( DataSize <= 0))
    597c:	61 15       	cp	r22, r1
    597e:	71 05       	cpc	r23, r1
    5980:	09 f4       	brne	.+2      	; 0x5984 <EEPROM_ReadByteS+0x1c>
    5982:	46 c0       	rjmp	.+140    	; 0x5a10 <EEPROM_ReadByteS+0xa8>
    5984:	44 23       	and	r20, r20
    5986:	09 f4       	brne	.+2      	; 0x598a <EEPROM_ReadByteS+0x22>
    5988:	45 c0       	rjmp	.+138    	; 0x5a14 <EEPROM_ReadByteS+0xac>
    598a:	c4 2f       	mov	r28, r20
    598c:	6b 01       	movw	r12, r22
    598e:	ac 01       	movw	r20, r24
	
		

		
		uint16_t PageNum =0 , ByteAddress =0 ;
		PageNum = StartByteNum/EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    5990:	5c 01       	movw	r10, r24
    5992:	aa 0c       	add	r10, r10
    5994:	ab 2c       	mov	r10, r11
    5996:	aa 1c       	adc	r10, r10
    5998:	bb 08       	sbc	r11, r11
    599a:	b1 94       	neg	r11
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    599c:	4c 01       	movw	r8, r24
    599e:	e8 94       	clt
    59a0:	87 f8       	bld	r8, 7
    59a2:	99 24       	eor	r9, r9
		if((ByteAddress + DataSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
    59a4:	c4 01       	movw	r24, r8
    59a6:	8c 0f       	add	r24, r28
    59a8:	91 1d       	adc	r25, r1
    59aa:	81 38       	cpi	r24, 0x81	; 129
    59ac:	91 05       	cpc	r25, r1
    59ae:	30 f1       	brcs	.+76     	; 0x59fc <EEPROM_ReadByteS+0x94>
		{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte ,
    59b0:	80 e8       	ldi	r24, 0x80	; 128
    59b2:	e8 2e       	mov	r14, r24
    59b4:	e8 18       	sub	r14, r8
    59b6:	8b 01       	movw	r16, r22
    59b8:	22 e0       	ldi	r18, 0x02	; 2
    59ba:	60 ea       	ldi	r22, 0xA0	; 160
    59bc:	86 e9       	ldi	r24, 0x96	; 150
    59be:	90 e0       	ldi	r25, 0x00	; 0
    59c0:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <HAL_I2C_Mem_Read>
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
						ATM_CARD_ADDRESS_SIZE , RXByte + EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress , DataSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);
    59c4:	00 e8       	ldi	r16, 0x80	; 128
    59c6:	10 e0       	ldi	r17, 0x00	; 0
    59c8:	08 19       	sub	r16, r8
    59ca:	19 09       	sbc	r17, r9
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
		if((ByteAddress + DataSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
		{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte ,
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
    59cc:	8c 2f       	mov	r24, r28
    59ce:	88 0d       	add	r24, r8
    59d0:	68 94       	set
    59d2:	ee 24       	eor	r14, r14
    59d4:	e7 f8       	bld	r14, 7
    59d6:	e8 0e       	add	r14, r24
    59d8:	0c 0d       	add	r16, r12
    59da:	1d 1d       	adc	r17, r13
    59dc:	a5 01       	movw	r20, r10
    59de:	4f 5f       	subi	r20, 0xFF	; 255
    59e0:	5f 4f       	sbci	r21, 0xFF	; 255
    59e2:	56 95       	lsr	r21
    59e4:	54 2f       	mov	r21, r20
    59e6:	44 27       	eor	r20, r20
    59e8:	57 95       	ror	r21
    59ea:	47 95       	ror	r20
    59ec:	22 e0       	ldi	r18, 0x02	; 2
    59ee:	60 ea       	ldi	r22, 0xA0	; 160
    59f0:	86 e9       	ldi	r24, 0x96	; 150
    59f2:	90 e0       	ldi	r25, 0x00	; 0
    59f4:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <HAL_I2C_Mem_Read>
		}
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
		}
	
	return EEPROM_OK ;	
    59f8:	80 e0       	ldi	r24, 0x00	; 0
    59fa:	0d c0       	rjmp	.+26     	; 0x5a16 <EEPROM_ReadByteS+0xae>
							  EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress);
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE)   ,
						ATM_CARD_ADDRESS_SIZE , RXByte + EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress , DataSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);
		}
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
    59fc:	ec 2e       	mov	r14, r28
    59fe:	8b 01       	movw	r16, r22
    5a00:	22 e0       	ldi	r18, 0x02	; 2
    5a02:	60 ea       	ldi	r22, 0xA0	; 160
    5a04:	86 e9       	ldi	r24, 0x96	; 150
    5a06:	90 e0       	ldi	r25, 0x00	; 0
    5a08:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <HAL_I2C_Mem_Read>
		}
	
	return EEPROM_OK ;	
    5a0c:	80 e0       	ldi	r24, 0x00	; 0
    5a0e:	03 c0       	rjmp	.+6      	; 0x5a16 <EEPROM_ReadByteS+0xae>
EEPROM_Status_t EEPROM_ReadByteS(uint16_t StartByteNum , uint8_t * RXByte , uint8_t DataSize)
{
	
	if ((RXByte == NULL) || ( DataSize <= 0))
	{
		return EEPROM_PARAM_ERROR ;
    5a10:	81 e0       	ldi	r24, 0x01	; 1
    5a12:	01 c0       	rjmp	.+2      	; 0x5a16 <EEPROM_ReadByteS+0xae>
    5a14:	81 e0       	ldi	r24, 0x01	; 1
		else{
			HAL_I2C_Mem_Read(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , RXByte , DataSize );
		}
	
	return EEPROM_OK ;	
}
    5a16:	cf 91       	pop	r28
    5a18:	1f 91       	pop	r17
    5a1a:	0f 91       	pop	r16
    5a1c:	ef 90       	pop	r14
    5a1e:	df 90       	pop	r13
    5a20:	cf 90       	pop	r12
    5a22:	bf 90       	pop	r11
    5a24:	af 90       	pop	r10
    5a26:	9f 90       	pop	r9
    5a28:	8f 90       	pop	r8
    5a2a:	08 95       	ret

00005a2c <EEPROM_WriteByteS>:

EEPROM_Status_t EEPROM_WriteByteS(uint16_t StartByteNum , uint8_t  * TXByte , uint8_t BufferSize)
{
    5a2c:	8f 92       	push	r8
    5a2e:	9f 92       	push	r9
    5a30:	af 92       	push	r10
    5a32:	bf 92       	push	r11
    5a34:	cf 92       	push	r12
    5a36:	df 92       	push	r13
    5a38:	ef 92       	push	r14
    5a3a:	0f 93       	push	r16
    5a3c:	1f 93       	push	r17
    5a3e:	cf 93       	push	r28
	uint16_t PageNum =0 , ByteAddress =0  ;
	if ((TXByte == NULL) || (BufferSize <= 0))
    5a40:	61 15       	cp	r22, r1
    5a42:	71 05       	cpc	r23, r1
    5a44:	09 f4       	brne	.+2      	; 0x5a48 <EEPROM_WriteByteS+0x1c>
    5a46:	46 c0       	rjmp	.+140    	; 0x5ad4 <EEPROM_WriteByteS+0xa8>
    5a48:	44 23       	and	r20, r20
    5a4a:	09 f4       	brne	.+2      	; 0x5a4e <EEPROM_WriteByteS+0x22>
    5a4c:	45 c0       	rjmp	.+138    	; 0x5ad8 <EEPROM_WriteByteS+0xac>
    5a4e:	c4 2f       	mov	r28, r20
    5a50:	6b 01       	movw	r12, r22
    5a52:	ac 01       	movw	r20, r24
	{
		;
	}
	

		PageNum = StartByteNum/EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    5a54:	5c 01       	movw	r10, r24
    5a56:	aa 0c       	add	r10, r10
    5a58:	ab 2c       	mov	r10, r11
    5a5a:	aa 1c       	adc	r10, r10
    5a5c:	bb 08       	sbc	r11, r11
    5a5e:	b1 94       	neg	r11
		ByteAddress = StartByteNum%EEPROM_NUMBER_OF_BYTES_FOR_PAGE ;
    5a60:	4c 01       	movw	r8, r24
    5a62:	e8 94       	clt
    5a64:	87 f8       	bld	r8, 7
    5a66:	99 24       	eor	r9, r9

	if((ByteAddress + BufferSize ) > EEPROM_NUMBER_OF_BYTES_FOR_PAGE )
    5a68:	c4 01       	movw	r24, r8
    5a6a:	8c 0f       	add	r24, r28
    5a6c:	91 1d       	adc	r25, r1
    5a6e:	81 38       	cpi	r24, 0x81	; 129
    5a70:	91 05       	cpc	r25, r1
    5a72:	30 f1       	brcs	.+76     	; 0x5ac0 <EEPROM_WriteByteS+0x94>
	{
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte ,  
    5a74:	80 e8       	ldi	r24, 0x80	; 128
    5a76:	e8 2e       	mov	r14, r24
    5a78:	e8 18       	sub	r14, r8
    5a7a:	8b 01       	movw	r16, r22
    5a7c:	22 e0       	ldi	r18, 0x02	; 2
    5a7e:	60 ea       	ldi	r22, 0xA0	; 160
    5a80:	86 e9       	ldi	r24, 0x96	; 150
    5a82:	90 e0       	ldi	r25, 0x00	; 0
    5a84:	0e 94 57 2f 	call	0x5eae	; 0x5eae <HAL_I2C_Mem_Write>
							EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress );
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE) , ATM_CARD_ADDRESS_SIZE , TXByte + (EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress), 
    5a88:	00 e8       	ldi	r16, 0x80	; 128
    5a8a:	10 e0       	ldi	r17, 0x00	; 0
    5a8c:	08 19       	sub	r16, r8
    5a8e:	19 09       	sbc	r17, r9
    5a90:	8c 2f       	mov	r24, r28
    5a92:	88 0d       	add	r24, r8
    5a94:	68 94       	set
    5a96:	ee 24       	eor	r14, r14
    5a98:	e7 f8       	bld	r14, 7
    5a9a:	e8 0e       	add	r14, r24
    5a9c:	0c 0d       	add	r16, r12
    5a9e:	1d 1d       	adc	r17, r13
    5aa0:	a5 01       	movw	r20, r10
    5aa2:	4f 5f       	subi	r20, 0xFF	; 255
    5aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa6:	56 95       	lsr	r21
    5aa8:	54 2f       	mov	r21, r20
    5aaa:	44 27       	eor	r20, r20
    5aac:	57 95       	ror	r21
    5aae:	47 95       	ror	r20
    5ab0:	22 e0       	ldi	r18, 0x02	; 2
    5ab2:	60 ea       	ldi	r22, 0xA0	; 160
    5ab4:	86 e9       	ldi	r24, 0x96	; 150
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	0e 94 57 2f 	call	0x5eae	; 0x5eae <HAL_I2C_Mem_Write>
		}else
		{
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	
    5abc:	80 e0       	ldi	r24, 0x00	; 0
    5abe:	0d c0       	rjmp	.+26     	; 0x5ada <EEPROM_WriteByteS+0xae>
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte ,  
							EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress );
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , (PageNum +1)*(EEPROM_NUMBER_OF_BYTES_FOR_PAGE) , ATM_CARD_ADDRESS_SIZE , TXByte + (EEPROM_NUMBER_OF_BYTES_FOR_PAGE - ByteAddress), 
							 BufferSize - EEPROM_NUMBER_OF_BYTES_FOR_PAGE + ByteAddress);	
	}else{
		HAL_I2C_Mem_Write(&I2C_Handler , EEPROM_DIV_ADDRESS , StartByteNum , ATM_CARD_ADDRESS_SIZE , TXByte , BufferSize);
    5ac0:	ec 2e       	mov	r14, r28
    5ac2:	8b 01       	movw	r16, r22
    5ac4:	22 e0       	ldi	r18, 0x02	; 2
    5ac6:	60 ea       	ldi	r22, 0xA0	; 160
    5ac8:	86 e9       	ldi	r24, 0x96	; 150
    5aca:	90 e0       	ldi	r25, 0x00	; 0
    5acc:	0e 94 57 2f 	call	0x5eae	; 0x5eae <HAL_I2C_Mem_Write>
		}else
		{
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	
    5ad0:	80 e0       	ldi	r24, 0x00	; 0
    5ad2:	03 c0       	rjmp	.+6      	; 0x5ada <EEPROM_WriteByteS+0xae>
EEPROM_Status_t EEPROM_WriteByteS(uint16_t StartByteNum , uint8_t  * TXByte , uint8_t BufferSize)
{
	uint16_t PageNum =0 , ByteAddress =0  ;
	if ((TXByte == NULL) || (BufferSize <= 0))
	{
		return EEPROM_PARAM_ERROR ;
    5ad4:	81 e0       	ldi	r24, 0x01	; 1
    5ad6:	01 c0       	rjmp	.+2      	; 0x5ada <EEPROM_WriteByteS+0xae>
    5ad8:	81 e0       	ldi	r24, 0x01	; 1
			this means this can be done in one transaction 
		}
	*/
return EEPROM_OK ; 	

}
    5ada:	cf 91       	pop	r28
    5adc:	1f 91       	pop	r17
    5ade:	0f 91       	pop	r16
    5ae0:	ef 90       	pop	r14
    5ae2:	df 90       	pop	r13
    5ae4:	cf 90       	pop	r12
    5ae6:	bf 90       	pop	r11
    5ae8:	af 90       	pop	r10
    5aea:	9f 90       	pop	r9
    5aec:	8f 90       	pop	r8
    5aee:	08 95       	ret

00005af0 <Button_Init>:
 * brief : this function used to initialize all Buttons  
 * parameter(input) : Buttons pointer to array of Buttons configurations 
 * return : status  
 */
ButtonStatus_t Button_Init(ButtonConfig_t * Buttons )
{
    5af0:	ef 92       	push	r14
    5af2:	ff 92       	push	r15
    5af4:	1f 93       	push	r17
    5af6:	cf 93       	push	r28
    5af8:	df 93       	push	r29
    5afa:	00 d0       	rcall	.+0      	; 0x5afc <Button_Init+0xc>
    5afc:	1f 92       	push	r1
    5afe:	cd b7       	in	r28, 0x3d	; 61
    5b00:	de b7       	in	r29, 0x3e	; 62
	
	if(Buttons == NULL )
    5b02:	00 97       	sbiw	r24, 0x00	; 0
    5b04:	d9 f0       	breq	.+54     	; 0x5b3c <Button_Init+0x4c>
    5b06:	7c 01       	movw	r14, r24
	}
	else
	{
		
		GPIO_InitTypeDef ButtoninInit ; 
		ButtoninInit.mode = GPIO_MODE_INPUT ; 
    5b08:	1a 82       	std	Y+2, r1	; 0x02
	
	
		for (uint8_t itera = 0 ; itera < NumberOFButtons ; itera++ )
    5b0a:	10 e0       	ldi	r17, 0x00	; 0
    5b0c:	13 c0       	rjmp	.+38     	; 0x5b34 <Button_Init+0x44>
		{
			ButtoninInit.pin = 	Buttons[itera].PINNum ;
    5b0e:	e1 2f       	mov	r30, r17
    5b10:	f0 e0       	ldi	r31, 0x00	; 0
    5b12:	cf 01       	movw	r24, r30
    5b14:	88 0f       	add	r24, r24
    5b16:	99 1f       	adc	r25, r25
    5b18:	e8 0f       	add	r30, r24
    5b1a:	f9 1f       	adc	r31, r25
    5b1c:	ee 0d       	add	r30, r14
    5b1e:	ff 1d       	adc	r31, r15
    5b20:	82 81       	ldd	r24, Z+2	; 0x02
    5b22:	89 83       	std	Y+1, r24	; 0x01
			HAL_GPIO_Pin_Init(Buttons[itera].PORT , &ButtoninInit) ;
    5b24:	be 01       	movw	r22, r28
    5b26:	6f 5f       	subi	r22, 0xFF	; 255
    5b28:	7f 4f       	sbci	r23, 0xFF	; 255
    5b2a:	80 81       	ld	r24, Z
    5b2c:	91 81       	ldd	r25, Z+1	; 0x01
    5b2e:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
		
		GPIO_InitTypeDef ButtoninInit ; 
		ButtoninInit.mode = GPIO_MODE_INPUT ; 
	
	
		for (uint8_t itera = 0 ; itera < NumberOFButtons ; itera++ )
    5b32:	1f 5f       	subi	r17, 0xFF	; 255
    5b34:	12 30       	cpi	r17, 0x02	; 2
    5b36:	58 f3       	brcs	.-42     	; 0x5b0e <Button_Init+0x1e>
	
	
	
	}
	
	return  FUN_Ok ;
    5b38:	80 e0       	ldi	r24, 0x00	; 0
    5b3a:	01 c0       	rjmp	.+2      	; 0x5b3e <Button_Init+0x4e>
ButtonStatus_t Button_Init(ButtonConfig_t * Buttons )
{
	
	if(Buttons == NULL )
	{
		return FUN_Param_ERROR ;
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return  FUN_Ok ;
	
	
}
    5b3e:	0f 90       	pop	r0
    5b40:	0f 90       	pop	r0
    5b42:	0f 90       	pop	r0
    5b44:	df 91       	pop	r29
    5b46:	cf 91       	pop	r28
    5b48:	1f 91       	pop	r17
    5b4a:	ff 90       	pop	r15
    5b4c:	ef 90       	pop	r14
    5b4e:	08 95       	ret

00005b50 <Button_Read>:
 * return : states of specified pin 
 */
ButtonState_t Button_Read(ButtonConfig_t * Buttons , uint8_t ButtonIndex  )
{
	
	if ((Buttons == NULL) || (ButtonIndex > NumberOFButtons))
    5b50:	00 97       	sbiw	r24, 0x00	; 0
    5b52:	89 f0       	breq	.+34     	; 0x5b76 <Button_Read+0x26>
    5b54:	63 30       	cpi	r22, 0x03	; 3
    5b56:	88 f4       	brcc	.+34     	; 0x5b7a <Button_Read+0x2a>
	{
		return -1 ;
	}else
	{
		return HAL_GPIO_READPIN(Buttons[ButtonIndex].PORT , Buttons[ButtonIndex].PINNum) ;
    5b58:	70 e0       	ldi	r23, 0x00	; 0
    5b5a:	fb 01       	movw	r30, r22
    5b5c:	ee 0f       	add	r30, r30
    5b5e:	ff 1f       	adc	r31, r31
    5b60:	6e 0f       	add	r22, r30
    5b62:	7f 1f       	adc	r23, r31
    5b64:	fc 01       	movw	r30, r24
    5b66:	e6 0f       	add	r30, r22
    5b68:	f7 1f       	adc	r31, r23
    5b6a:	62 81       	ldd	r22, Z+2	; 0x02
    5b6c:	80 81       	ld	r24, Z
    5b6e:	91 81       	ldd	r25, Z+1	; 0x01
    5b70:	0e 94 01 2f 	call	0x5e02	; 0x5e02 <HAL_GPIO_READPIN>
    5b74:	08 95       	ret
ButtonState_t Button_Read(ButtonConfig_t * Buttons , uint8_t ButtonIndex  )
{
	
	if ((Buttons == NULL) || (ButtonIndex > NumberOFButtons))
	{
		return -1 ;
    5b76:	8f ef       	ldi	r24, 0xFF	; 255
    5b78:	08 95       	ret
    5b7a:	8f ef       	ldi	r24, 0xFF	; 255
	}else
	{
		return HAL_GPIO_READPIN(Buttons[ButtonIndex].PORT , Buttons[ButtonIndex].PINNum) ;
	}
	
}
    5b7c:	08 95       	ret

00005b7e <main>:

int main(void)
{
	
    /* Replace with your application code */
	APP_Init();
    5b7e:	0e 94 22 1b 	call	0x3644	; 0x3644 <APP_Init>
    Motor_Start();
    5b82:	0e 94 36 2c 	call	0x586c	; 0x586c <Motor_Start>
	sei();
    5b86:	78 94       	sei

	while (1) 
    {
		APP_UPdate();
    5b88:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <APP_UPdate>
    5b8c:	fd cf       	rjmp	.-6      	; 0x5b88 <main+0xa>

00005b8e <__vector_1>:
}


/* INIT0 Function */
ISR(INT0_vect)
{
    5b8e:	1f 92       	push	r1
    5b90:	0f 92       	push	r0
    5b92:	0f b6       	in	r0, 0x3f	; 63
    5b94:	0f 92       	push	r0
    5b96:	11 24       	eor	r1, r1
    5b98:	2f 93       	push	r18
    5b9a:	3f 93       	push	r19
    5b9c:	4f 93       	push	r20
    5b9e:	5f 93       	push	r21
    5ba0:	6f 93       	push	r22
    5ba2:	7f 93       	push	r23
    5ba4:	8f 93       	push	r24
    5ba6:	9f 93       	push	r25
    5ba8:	af 93       	push	r26
    5baa:	bf 93       	push	r27
    5bac:	ef 93       	push	r30
    5bae:	ff 93       	push	r31
	ptr_INT0();
    5bb0:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <ptr_INT0>
    5bb4:	f0 91 16 02 	lds	r31, 0x0216	; 0x800216 <ptr_INT0+0x1>
    5bb8:	09 95       	icall
}
    5bba:	ff 91       	pop	r31
    5bbc:	ef 91       	pop	r30
    5bbe:	bf 91       	pop	r27
    5bc0:	af 91       	pop	r26
    5bc2:	9f 91       	pop	r25
    5bc4:	8f 91       	pop	r24
    5bc6:	7f 91       	pop	r23
    5bc8:	6f 91       	pop	r22
    5bca:	5f 91       	pop	r21
    5bcc:	4f 91       	pop	r20
    5bce:	3f 91       	pop	r19
    5bd0:	2f 91       	pop	r18
    5bd2:	0f 90       	pop	r0
    5bd4:	0f be       	out	0x3f, r0	; 63
    5bd6:	0f 90       	pop	r0
    5bd8:	1f 90       	pop	r1
    5bda:	18 95       	reti

00005bdc <__vector_2>:
/* INIT0 Function */
ISR(INT1_vect)
{
    5bdc:	1f 92       	push	r1
    5bde:	0f 92       	push	r0
    5be0:	0f b6       	in	r0, 0x3f	; 63
    5be2:	0f 92       	push	r0
    5be4:	11 24       	eor	r1, r1
    5be6:	2f 93       	push	r18
    5be8:	3f 93       	push	r19
    5bea:	4f 93       	push	r20
    5bec:	5f 93       	push	r21
    5bee:	6f 93       	push	r22
    5bf0:	7f 93       	push	r23
    5bf2:	8f 93       	push	r24
    5bf4:	9f 93       	push	r25
    5bf6:	af 93       	push	r26
    5bf8:	bf 93       	push	r27
    5bfa:	ef 93       	push	r30
    5bfc:	ff 93       	push	r31
	ptr_INT1();
    5bfe:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <ptr_INT1>
    5c02:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <ptr_INT1+0x1>
    5c06:	09 95       	icall
}
    5c08:	ff 91       	pop	r31
    5c0a:	ef 91       	pop	r30
    5c0c:	bf 91       	pop	r27
    5c0e:	af 91       	pop	r26
    5c10:	9f 91       	pop	r25
    5c12:	8f 91       	pop	r24
    5c14:	7f 91       	pop	r23
    5c16:	6f 91       	pop	r22
    5c18:	5f 91       	pop	r21
    5c1a:	4f 91       	pop	r20
    5c1c:	3f 91       	pop	r19
    5c1e:	2f 91       	pop	r18
    5c20:	0f 90       	pop	r0
    5c22:	0f be       	out	0x3f, r0	; 63
    5c24:	0f 90       	pop	r0
    5c26:	1f 90       	pop	r1
    5c28:	18 95       	reti

00005c2a <__vector_3>:
/* INIT0 Function */
ISR(INT2_vect)
{
    5c2a:	1f 92       	push	r1
    5c2c:	0f 92       	push	r0
    5c2e:	0f b6       	in	r0, 0x3f	; 63
    5c30:	0f 92       	push	r0
    5c32:	11 24       	eor	r1, r1
    5c34:	2f 93       	push	r18
    5c36:	3f 93       	push	r19
    5c38:	4f 93       	push	r20
    5c3a:	5f 93       	push	r21
    5c3c:	6f 93       	push	r22
    5c3e:	7f 93       	push	r23
    5c40:	8f 93       	push	r24
    5c42:	9f 93       	push	r25
    5c44:	af 93       	push	r26
    5c46:	bf 93       	push	r27
    5c48:	ef 93       	push	r30
    5c4a:	ff 93       	push	r31
	ptr_INT2();
    5c4c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <ptr_INT2>
    5c50:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <ptr_INT2+0x1>
    5c54:	09 95       	icall
    5c56:	ff 91       	pop	r31
    5c58:	ef 91       	pop	r30
    5c5a:	bf 91       	pop	r27
    5c5c:	af 91       	pop	r26
    5c5e:	9f 91       	pop	r25
    5c60:	8f 91       	pop	r24
    5c62:	7f 91       	pop	r23
    5c64:	6f 91       	pop	r22
    5c66:	5f 91       	pop	r21
    5c68:	4f 91       	pop	r20
    5c6a:	3f 91       	pop	r19
    5c6c:	2f 91       	pop	r18
    5c6e:	0f 90       	pop	r0
    5c70:	0f be       	out	0x3f, r0	; 63
    5c72:	0f 90       	pop	r0
    5c74:	1f 90       	pop	r1
    5c76:	18 95       	reti

00005c78 <ADC_START>:
	
}


 void CallBackFun(void (*fun)(void))
 {
    5c78:	86 b1       	in	r24, 0x06	; 6
    5c7a:	80 64       	ori	r24, 0x40	; 64
    5c7c:	86 b9       	out	0x06, r24	; 6
    5c7e:	08 95       	ret

00005c80 <ADC_Init>:
    5c80:	fc 01       	movw	r30, r24
    5c82:	80 b7       	in	r24, 0x30	; 48
    5c84:	8f 71       	andi	r24, 0x1F	; 31
    5c86:	80 bf       	out	0x30, r24	; 48
    5c88:	20 b7       	in	r18, 0x30	; 48
    5c8a:	90 81       	ld	r25, Z
    5c8c:	30 e2       	ldi	r19, 0x20	; 32
    5c8e:	93 9f       	mul	r25, r19
    5c90:	c0 01       	movw	r24, r0
    5c92:	11 24       	eor	r1, r1
    5c94:	82 2b       	or	r24, r18
    5c96:	80 bf       	out	0x30, r24	; 48
    5c98:	16 b8       	out	0x06, r1	; 6
    5c9a:	93 81       	ldd	r25, Z+3	; 0x03
    5c9c:	81 81       	ldd	r24, Z+1	; 0x01
    5c9e:	89 2b       	or	r24, r25
    5ca0:	80 6a       	ori	r24, 0xA0	; 160
    5ca2:	86 b9       	out	0x06, r24	; 6
    5ca4:	17 b8       	out	0x07, r1	; 7
    5ca6:	94 81       	ldd	r25, Z+4	; 0x04
    5ca8:	82 81       	ldd	r24, Z+2	; 0x02
    5caa:	89 2b       	or	r24, r25
    5cac:	87 b9       	out	0x07, r24	; 7
    5cae:	83 81       	ldd	r24, Z+3	; 0x03
    5cb0:	88 23       	and	r24, r24
    5cb2:	09 f0       	breq	.+2      	; 0x5cb6 <ADC_Init+0x36>
    5cb4:	78 94       	sei
    5cb6:	08 95       	ret

00005cb8 <ADC_Get_Value_IT>:
 
 
 
 
 PUBLIC void ADC_Get_Value_IT(ADC_Handler_t *Handler,ADC_CH_t AdcChannel)
 {
    5cb8:	cf 93       	push	r28
    5cba:	c6 2f       	mov	r28, r22
	 // first we initialize GPIO port to be ready to receive analog signal
	 ADC_GPIO.mode = GPIO_MODE_INPUT ;
    5cbc:	ee ec       	ldi	r30, 0xCE	; 206
    5cbe:	f1 e0       	ldi	r31, 0x01	; 1
    5cc0:	11 82       	std	Z+1, r1	; 0x01
	 ADC_GPIO.pin = (1<<AdcChannel) ;
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	01 c0       	rjmp	.+2      	; 0x5cc8 <ADC_Get_Value_IT+0x10>
    5cc6:	88 0f       	add	r24, r24
    5cc8:	6a 95       	dec	r22
    5cca:	ea f7       	brpl	.-6      	; 0x5cc6 <ADC_Get_Value_IT+0xe>
    5ccc:	80 83       	st	Z, r24
	 ADC_GPIO.pull = GPIO_NOPULL ;
    5cce:	12 82       	std	Z+2, r1	; 0x02
	 HAL_GPIO_Pin_Init(GPIOA , &ADC_GPIO);  /* set selected pin as GPIO analog pin */
    5cd0:	bf 01       	movw	r22, r30
    5cd2:	89 e3       	ldi	r24, 0x39	; 57
    5cd4:	90 e0       	ldi	r25, 0x00	; 0
    5cd6:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
	 
	 ADMUX &=~(0x1f);		  /* clear first before reconfiguration */
    5cda:	87 b1       	in	r24, 0x07	; 7
    5cdc:	80 7e       	andi	r24, 0xE0	; 224
    5cde:	87 b9       	out	0x07, r24	; 7
	 ADMUX |= (AdcChannel);	 /* select channel */
    5ce0:	67 b1       	in	r22, 0x07	; 7
    5ce2:	6c 2b       	or	r22, r28
    5ce4:	67 b9       	out	0x07, r22	; 7
	 ADC_START();
    5ce6:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <ADC_START>
	 
	 
 }
    5cea:	cf 91       	pop	r28
    5cec:	08 95       	ret

00005cee <__vector_16>:


 ISR(ADC_vect)
 {	
    5cee:	1f 92       	push	r1
    5cf0:	0f 92       	push	r0
    5cf2:	0f b6       	in	r0, 0x3f	; 63
    5cf4:	0f 92       	push	r0
    5cf6:	11 24       	eor	r1, r1
    5cf8:	2f 93       	push	r18
    5cfa:	3f 93       	push	r19
    5cfc:	4f 93       	push	r20
    5cfe:	5f 93       	push	r21
    5d00:	6f 93       	push	r22
    5d02:	7f 93       	push	r23
    5d04:	8f 93       	push	r24
    5d06:	9f 93       	push	r25
    5d08:	af 93       	push	r26
    5d0a:	bf 93       	push	r27
    5d0c:	ef 93       	push	r30
    5d0e:	ff 93       	push	r31

		if(ADC_Adjust_Left & ADMUX ) /* if left adjust is selected */ 
    5d10:	3d 9b       	sbis	0x07, 5	; 7
    5d12:	15 c0       	rjmp	.+42     	; 0x5d3e <__vector_16+0x50>
		{
			value =  (ADCL>>6)|(ADCH);	/* ADCL must read first then ADCH to Re_enable access to ADCL & ADCH */
    5d14:	64 b1       	in	r22, 0x04	; 4
    5d16:	85 b1       	in	r24, 0x05	; 5
    5d18:	62 95       	swap	r22
    5d1a:	66 95       	lsr	r22
    5d1c:	66 95       	lsr	r22
    5d1e:	63 70       	andi	r22, 0x03	; 3
    5d20:	68 2b       	or	r22, r24
    5d22:	70 e0       	ldi	r23, 0x00	; 0
    5d24:	80 e0       	ldi	r24, 0x00	; 0
    5d26:	90 e0       	ldi	r25, 0x00	; 0
    5d28:	0e 94 8e 35 	call	0x6b1c	; 0x6b1c <__floatsisf>
    5d2c:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <value>
    5d30:	70 93 d2 01 	sts	0x01D2, r23	; 0x8001d2 <value+0x1>
    5d34:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <value+0x2>
    5d38:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <value+0x3>
    5d3c:	14 c0       	rjmp	.+40     	; 0x5d66 <__vector_16+0x78>
		}else{							   /* if right adjust is selected */ 
			value = (ADCL)|(ADCH<<8);
    5d3e:	84 b1       	in	r24, 0x04	; 4
    5d40:	65 b1       	in	r22, 0x05	; 5
    5d42:	70 e0       	ldi	r23, 0x00	; 0
    5d44:	76 2f       	mov	r23, r22
    5d46:	66 27       	eor	r22, r22
    5d48:	68 2b       	or	r22, r24
    5d4a:	07 2e       	mov	r0, r23
    5d4c:	00 0c       	add	r0, r0
    5d4e:	88 0b       	sbc	r24, r24
    5d50:	99 0b       	sbc	r25, r25
    5d52:	0e 94 8e 35 	call	0x6b1c	; 0x6b1c <__floatsisf>
    5d56:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <value>
    5d5a:	70 93 d2 01 	sts	0x01D2, r23	; 0x8001d2 <value+0x1>
    5d5e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <value+0x2>
    5d62:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <value+0x3>
		}
		
		value = ((( value )*0.0048828 )/0.01) ;
    5d66:	25 ee       	ldi	r18, 0xE5	; 229
    5d68:	3f ef       	ldi	r19, 0xFF	; 255
    5d6a:	4f e9       	ldi	r20, 0x9F	; 159
    5d6c:	5b e3       	ldi	r21, 0x3B	; 59
    5d6e:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <value>
    5d72:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <value+0x1>
    5d76:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <value+0x2>
    5d7a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <value+0x3>
    5d7e:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__mulsf3>
    5d82:	2a e0       	ldi	r18, 0x0A	; 10
    5d84:	37 ed       	ldi	r19, 0xD7	; 215
    5d86:	43 e2       	ldi	r20, 0x23	; 35
    5d88:	5c e3       	ldi	r21, 0x3C	; 60
    5d8a:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <__divsf3>
    5d8e:	60 93 d1 01 	sts	0x01D1, r22	; 0x8001d1 <value>
    5d92:	70 93 d2 01 	sts	0x01D2, r23	; 0x8001d2 <value+0x1>
    5d96:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <value+0x2>
    5d9a:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <value+0x3>
		if ((uint16_t)value >  Max_Temp )
    5d9e:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__fixunssfsi>
    5da2:	20 91 84 01 	lds	r18, 0x0184	; 0x800184 <__data_end>
    5da6:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <__data_end+0x1>
    5daa:	26 17       	cp	r18, r22
    5dac:	37 07       	cpc	r19, r23
    5dae:	28 f4       	brcc	.+10     	; 0x5dba <__vector_16+0xcc>
		{
			SERVER_ADMIN_Error(ADMIN_ERROR_SET);
    5db0:	80 e0       	ldi	r24, 0x00	; 0
    5db2:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <SERVER_ADMIN_Error>
			ATM_Lock_Fun();
    5db6:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <ATM_Lock_Fun>
		}

    5dba:	ff 91       	pop	r31
    5dbc:	ef 91       	pop	r30
    5dbe:	bf 91       	pop	r27
    5dc0:	af 91       	pop	r26
    5dc2:	9f 91       	pop	r25
    5dc4:	8f 91       	pop	r24
    5dc6:	7f 91       	pop	r23
    5dc8:	6f 91       	pop	r22
    5dca:	5f 91       	pop	r21
    5dcc:	4f 91       	pop	r20
    5dce:	3f 91       	pop	r19
    5dd0:	2f 91       	pop	r18
    5dd2:	0f 90       	pop	r0
    5dd4:	0f be       	out	0x3f, r0	; 63
    5dd6:	0f 90       	pop	r0
    5dd8:	1f 90       	pop	r1
    5dda:	18 95       	reti

00005ddc <HAL_GPIO_Pin_Init>:
 * param. : PORT pointer to GPIO port
 * param. : PIN_CONFIG pointer to struct hold all configuration
 * return : void 
 */
void HAL_GPIO_Pin_Init(StrGPIO_t PORT, GPIO_InitTypeDef *  PIN_CONFIG)
{
    5ddc:	fc 01       	movw	r30, r24

		if(PIN_CONFIG->mode == GPIO_MODE_OUTPUT)
    5dde:	db 01       	movw	r26, r22
    5de0:	11 96       	adiw	r26, 0x01	; 1
    5de2:	8c 91       	ld	r24, X
    5de4:	11 97       	sbiw	r26, 0x01	; 1
    5de6:	81 30       	cpi	r24, 0x01	; 1
    5de8:	29 f4       	brne	.+10     	; 0x5df4 <HAL_GPIO_Pin_Init+0x18>
		{
			PORT->DDR_REG  |= PIN_CONFIG->pin ;      //SET ALL PINS AS OUTPUT
    5dea:	8c 91       	ld	r24, X
    5dec:	91 81       	ldd	r25, Z+1	; 0x01
    5dee:	89 2b       	or	r24, r25
    5df0:	81 83       	std	Z+1, r24	; 0x01
    5df2:	08 95       	ret
		}else{  // PINS MODE CONFIGURED AS INPUT
			if(PIN_CONFIG->pull == GPIO_PULLUP)
			{
			//	PORT->PIN_REG |= PIN_CONFIG->pin ;     // SET PULL UP RES.
			}
			PORT->DDR_REG &= ~(PIN_CONFIG->pin);
    5df4:	db 01       	movw	r26, r22
    5df6:	9c 91       	ld	r25, X
    5df8:	90 95       	com	r25
    5dfa:	81 81       	ldd	r24, Z+1	; 0x01
    5dfc:	98 23       	and	r25, r24
    5dfe:	91 83       	std	Z+1, r25	; 0x01
    5e00:	08 95       	ret

00005e02 <HAL_GPIO_READPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_ 
 * return : return on of  GPIO_PIN_RESET or GPIO_PIN_SET 
 */
GPIO_PinState HAL_GPIO_READPIN(StrGPIO_t PORT,uint8_t PIN_NUM)
{
	if(PORT->PIN_REG & PIN_NUM)  /* check if specific pin is set */
    5e02:	fc 01       	movw	r30, r24
    5e04:	80 81       	ld	r24, Z
    5e06:	68 23       	and	r22, r24
    5e08:	11 f0       	breq	.+4      	; 0x5e0e <HAL_GPIO_READPIN+0xc>
	{
		return GPIO_PIN_SET ;
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	08 95       	ret
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
    5e0e:	80 e0       	ldi	r24, 0x00	; 0
	}
}/* END_FUN HAL_GPIO_READPIN()*/
    5e10:	08 95       	ret

00005e12 <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
    5e12:	44 23       	and	r20, r20
    5e14:	29 f0       	breq	.+10     	; 0x5e20 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
    5e16:	fc 01       	movw	r30, r24
    5e18:	22 81       	ldd	r18, Z+2	; 0x02
    5e1a:	62 2b       	or	r22, r18
    5e1c:	62 83       	std	Z+2, r22	; 0x02
    5e1e:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
    5e20:	60 95       	com	r22
    5e22:	fc 01       	movw	r30, r24
    5e24:	22 81       	ldd	r18, Z+2	; 0x02
    5e26:	62 23       	and	r22, r18
    5e28:	62 83       	std	Z+2, r22	; 0x02
    5e2a:	08 95       	ret

00005e2c <I2C_Init>:
		I2C_EN_NACK() ;
	
	
		return I2C_NORMAL ;
	
}/* END_FUN I2C_SLAVE_TRANSMIT() */
    5e2c:	8f 92       	push	r8
    5e2e:	9f 92       	push	r9
    5e30:	af 92       	push	r10
    5e32:	bf 92       	push	r11
    5e34:	cf 92       	push	r12
    5e36:	df 92       	push	r13
    5e38:	ef 92       	push	r14
    5e3a:	ff 92       	push	r15
    5e3c:	0f 93       	push	r16
    5e3e:	cf 93       	push	r28
    5e40:	df 93       	push	r29
    5e42:	ec 01       	movw	r28, r24
    5e44:	28 81       	ld	r18, Y
    5e46:	39 81       	ldd	r19, Y+1	; 0x01
    5e48:	4a 81       	ldd	r20, Y+2	; 0x02
    5e4a:	5b 81       	ldd	r21, Y+3	; 0x03
    5e4c:	60 e0       	ldi	r22, 0x00	; 0
    5e4e:	74 e2       	ldi	r23, 0x24	; 36
    5e50:	84 ef       	ldi	r24, 0xF4	; 244
    5e52:	90 e0       	ldi	r25, 0x00	; 0
    5e54:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <__udivmodsi4>
    5e58:	49 01       	movw	r8, r18
    5e5a:	5a 01       	movw	r10, r20
    5e5c:	39 2d       	mov	r19, r9
    5e5e:	4a 2d       	mov	r20, r10
    5e60:	5b 2d       	mov	r21, r11
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	70 e0       	ldi	r23, 0x00	; 0
    5e66:	80 e0       	ldi	r24, 0x00	; 0
    5e68:	90 e0       	ldi	r25, 0x00	; 0
    5e6a:	a0 ef       	ldi	r26, 0xF0	; 240
    5e6c:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <__adddi3_s8>
    5e70:	01 e0       	ldi	r16, 0x01	; 1
    5e72:	0e 94 d0 36 	call	0x6da0	; 0x6da0 <__lshrdi3>
    5e76:	20 b9       	out	0x00, r18	; 0
    5e78:	8c 81       	ldd	r24, Y+4	; 0x04
    5e7a:	82 b9       	out	0x02, r24	; 2
    5e7c:	16 be       	out	0x36, r1	; 54
    5e7e:	11 b8       	out	0x01, r1	; 1
    5e80:	8d 81       	ldd	r24, Y+5	; 0x05
    5e82:	81 30       	cpi	r24, 0x01	; 1
    5e84:	29 f4       	brne	.+10     	; 0x5e90 <I2C_Init+0x64>
    5e86:	78 94       	sei
    5e88:	86 b7       	in	r24, 0x36	; 54
    5e8a:	81 60       	ori	r24, 0x01	; 1
    5e8c:	86 bf       	out	0x36, r24	; 54
    5e8e:	03 c0       	rjmp	.+6      	; 0x5e96 <I2C_Init+0x6a>
    5e90:	86 b7       	in	r24, 0x36	; 54
    5e92:	8e 7f       	andi	r24, 0xFE	; 254
    5e94:	86 bf       	out	0x36, r24	; 54
    5e96:	df 91       	pop	r29
    5e98:	cf 91       	pop	r28
    5e9a:	0f 91       	pop	r16
    5e9c:	ff 90       	pop	r15
    5e9e:	ef 90       	pop	r14
    5ea0:	df 90       	pop	r13
    5ea2:	cf 90       	pop	r12
    5ea4:	bf 90       	pop	r11
    5ea6:	af 90       	pop	r10
    5ea8:	9f 90       	pop	r9
    5eaa:	8f 90       	pop	r8
    5eac:	08 95       	ret

00005eae <HAL_I2C_Mem_Write>:
 * param.  : memAdd this is the internal memory address that you need to write data to 
 * param.  : pRxData this is pointer to the buffer that hold the writing data 
 * param.  : DataSize number of bytes that you need to write 
*/ 
I2C_STATUS HAL_I2C_Mem_Write(I2C_Handler_t * Handler ,uint8_t DevAdd,uint16_t MemAdd ,uint8_t MemAddSize ,uint8_t * pTxData ,uint8_t DataSize )
{
    5eae:	ef 92       	push	r14
    5eb0:	0f 93       	push	r16
    5eb2:	1f 93       	push	r17
    5eb4:	dc 01       	movw	r26, r24
	Handler->buffer = pTxData ;
    5eb6:	17 96       	adiw	r26, 0x07	; 7
    5eb8:	1c 93       	st	X, r17
    5eba:	0e 93       	st	-X, r16
    5ebc:	16 97       	sbiw	r26, 0x06	; 6
	Handler->BufferSize   = DataSize;
    5ebe:	18 96       	adiw	r26, 0x08	; 8
    5ec0:	ec 92       	st	X, r14
    5ec2:	18 97       	sbiw	r26, 0x08	; 8
	
	I2C_EN_START();WAIT_FLAG();
    5ec4:	84 ea       	ldi	r24, 0xA4	; 164
    5ec6:	86 bf       	out	0x36, r24	; 54
    5ec8:	06 b6       	in	r0, 0x36	; 54
    5eca:	07 fe       	sbrs	r0, 7
    5ecc:	fd cf       	rjmp	.-6      	; 0x5ec8 <HAL_I2C_Mem_Write+0x1a>
	I2C->I2C_TWDR = DevAdd ;
    5ece:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    5ed0:	84 e8       	ldi	r24, 0x84	; 132
    5ed2:	86 bf       	out	0x36, r24	; 54
    5ed4:	06 b6       	in	r0, 0x36	; 54
    5ed6:	07 fe       	sbrs	r0, 7
    5ed8:	fd cf       	rjmp	.-6      	; 0x5ed4 <HAL_I2C_Mem_Write+0x26>

	if (MemAddSize == 2)
    5eda:	22 30       	cpi	r18, 0x02	; 2
    5edc:	31 f4       	brne	.+12     	; 0x5eea <HAL_I2C_Mem_Write+0x3c>
	{
		I2C->I2C_TWDR =( MemAdd>>8 & 0xff );
    5ede:	53 b9       	out	0x03, r21	; 3
		I2C_EN();WAIT_FLAG();
    5ee0:	84 e8       	ldi	r24, 0x84	; 132
    5ee2:	86 bf       	out	0x36, r24	; 54
    5ee4:	06 b6       	in	r0, 0x36	; 54
    5ee6:	07 fe       	sbrs	r0, 7
    5ee8:	fd cf       	rjmp	.-6      	; 0x5ee4 <HAL_I2C_Mem_Write+0x36>
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
    5eea:	43 b9       	out	0x03, r20	; 3
	I2C_EN();WAIT_FLAG();
    5eec:	84 e8       	ldi	r24, 0x84	; 132
    5eee:	86 bf       	out	0x36, r24	; 54
    5ef0:	06 b6       	in	r0, 0x36	; 54
    5ef2:	07 fe       	sbrs	r0, 7
    5ef4:	fd cf       	rjmp	.-6      	; 0x5ef0 <HAL_I2C_Mem_Write+0x42>
    5ef6:	13 c0       	rjmp	.+38     	; 0x5f1e <HAL_I2C_Mem_Write+0x70>

	while(DataSize-- > 0)
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
    5ef8:	16 96       	adiw	r26, 0x06	; 6
    5efa:	ed 91       	ld	r30, X+
    5efc:	fc 91       	ld	r31, X
    5efe:	17 97       	sbiw	r26, 0x07	; 7
    5f00:	9f 01       	movw	r18, r30
    5f02:	2f 5f       	subi	r18, 0xFF	; 255
    5f04:	3f 4f       	sbci	r19, 0xFF	; 255
    5f06:	17 96       	adiw	r26, 0x07	; 7
    5f08:	3c 93       	st	X, r19
    5f0a:	2e 93       	st	-X, r18
    5f0c:	16 97       	sbiw	r26, 0x06	; 6
    5f0e:	90 81       	ld	r25, Z
    5f10:	93 b9       	out	0x03, r25	; 3
		I2C_EN();WAIT_FLAG();
    5f12:	94 e8       	ldi	r25, 0x84	; 132
    5f14:	96 bf       	out	0x36, r25	; 54
    5f16:	06 b6       	in	r0, 0x36	; 54
    5f18:	07 fe       	sbrs	r0, 7
    5f1a:	fd cf       	rjmp	.-6      	; 0x5f16 <HAL_I2C_Mem_Write+0x68>
		I2C_EN();WAIT_FLAG();
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
	I2C_EN();WAIT_FLAG();

	while(DataSize-- > 0)
    5f1c:	e8 2e       	mov	r14, r24
    5f1e:	8f ef       	ldi	r24, 0xFF	; 255
    5f20:	8e 0d       	add	r24, r14
    5f22:	e1 10       	cpse	r14, r1
    5f24:	e9 cf       	rjmp	.-46     	; 0x5ef8 <HAL_I2C_Mem_Write+0x4a>
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
		I2C_EN();WAIT_FLAG();

	}
	I2C_EN_STOP();
    5f26:	84 e9       	ldi	r24, 0x94	; 148
    5f28:	86 bf       	out	0x36, r24	; 54

	return I2C_NORMAL ;
	
}/* END_FUN I2C_MEM_WRITE() */
    5f2a:	80 e0       	ldi	r24, 0x00	; 0
    5f2c:	1f 91       	pop	r17
    5f2e:	0f 91       	pop	r16
    5f30:	ef 90       	pop	r14
    5f32:	08 95       	ret

00005f34 <HAL_I2C_Mem_Read>:
 * param.  : memAdd this is the internal memory address that you need to read data from it 
 * param.  : pRxData this is pointer to the buffer that will hold the reading data 
 * param.  : DataSize number of bytes that you need to read 
*/ 
I2C_STATUS HAL_I2C_Mem_Read(I2C_Handler_t * Handler ,uint8_t DevAdd,uint16_t MemAdd ,uint8_t MemAddSize ,uint8_t * pRxData ,uint8_t DataSize )
{
    5f34:	ef 92       	push	r14
    5f36:	0f 93       	push	r16
    5f38:	1f 93       	push	r17
    5f3a:	dc 01       	movw	r26, r24
    5f3c:	9e 2d       	mov	r25, r14
	Handler->buffer = pRxData ;
    5f3e:	17 96       	adiw	r26, 0x07	; 7
    5f40:	1c 93       	st	X, r17
    5f42:	0e 93       	st	-X, r16
    5f44:	16 97       	sbiw	r26, 0x06	; 6
	Handler->BufferSize = DataSize;
    5f46:	18 96       	adiw	r26, 0x08	; 8
    5f48:	ec 92       	st	X, r14
    5f4a:	18 97       	sbiw	r26, 0x08	; 8
	
	I2C_EN_START();WAIT_FLAG();
    5f4c:	84 ea       	ldi	r24, 0xA4	; 164
    5f4e:	86 bf       	out	0x36, r24	; 54
    5f50:	06 b6       	in	r0, 0x36	; 54
    5f52:	07 fe       	sbrs	r0, 7
    5f54:	fd cf       	rjmp	.-6      	; 0x5f50 <HAL_I2C_Mem_Read+0x1c>
	I2C->I2C_TWDR = DevAdd ;
    5f56:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    5f58:	84 e8       	ldi	r24, 0x84	; 132
    5f5a:	86 bf       	out	0x36, r24	; 54
    5f5c:	06 b6       	in	r0, 0x36	; 54
    5f5e:	07 fe       	sbrs	r0, 7
    5f60:	fd cf       	rjmp	.-6      	; 0x5f5c <HAL_I2C_Mem_Read+0x28>
	if (MemAddSize == 2)
    5f62:	22 30       	cpi	r18, 0x02	; 2
    5f64:	31 f4       	brne	.+12     	; 0x5f72 <HAL_I2C_Mem_Read+0x3e>
	{
		I2C->I2C_TWDR =( MemAdd>>8 & 0xff );
    5f66:	53 b9       	out	0x03, r21	; 3
		I2C_EN();WAIT_FLAG();
    5f68:	84 e8       	ldi	r24, 0x84	; 132
    5f6a:	86 bf       	out	0x36, r24	; 54
    5f6c:	06 b6       	in	r0, 0x36	; 54
    5f6e:	07 fe       	sbrs	r0, 7
    5f70:	fd cf       	rjmp	.-6      	; 0x5f6c <HAL_I2C_Mem_Read+0x38>
	}
	I2C->I2C_TWDR =( MemAdd & 0xff );
    5f72:	43 b9       	out	0x03, r20	; 3
	I2C_EN();WAIT_FLAG();
    5f74:	84 e8       	ldi	r24, 0x84	; 132
    5f76:	86 bf       	out	0x36, r24	; 54
    5f78:	06 b6       	in	r0, 0x36	; 54
    5f7a:	07 fe       	sbrs	r0, 7
    5f7c:	fd cf       	rjmp	.-6      	; 0x5f78 <HAL_I2C_Mem_Read+0x44>
	I2C_EN_START();WAIT_FLAG();
    5f7e:	84 ea       	ldi	r24, 0xA4	; 164
    5f80:	86 bf       	out	0x36, r24	; 54
    5f82:	06 b6       	in	r0, 0x36	; 54
    5f84:	07 fe       	sbrs	r0, 7
    5f86:	fd cf       	rjmp	.-6      	; 0x5f82 <HAL_I2C_Mem_Read+0x4e>
	I2C->I2C_TWDR = DevAdd | 1 ;
    5f88:	61 60       	ori	r22, 0x01	; 1
    5f8a:	63 b9       	out	0x03, r22	; 3
	I2C_EN();WAIT_FLAG();
    5f8c:	84 e8       	ldi	r24, 0x84	; 132
    5f8e:	86 bf       	out	0x36, r24	; 54
    5f90:	06 b6       	in	r0, 0x36	; 54
    5f92:	07 fe       	sbrs	r0, 7
    5f94:	fd cf       	rjmp	.-6      	; 0x5f90 <HAL_I2C_Mem_Read+0x5c>
    5f96:	13 c0       	rjmp	.+38     	; 0x5fbe <HAL_I2C_Mem_Read+0x8a>
	while(DataSize-- > 1)	
	{
		I2C_EN_ACK();WAIT_FLAG();
    5f98:	94 ec       	ldi	r25, 0xC4	; 196
    5f9a:	96 bf       	out	0x36, r25	; 54
    5f9c:	06 b6       	in	r0, 0x36	; 54
    5f9e:	07 fe       	sbrs	r0, 7
    5fa0:	fd cf       	rjmp	.-6      	; 0x5f9c <HAL_I2C_Mem_Read+0x68>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
    5fa2:	16 96       	adiw	r26, 0x06	; 6
    5fa4:	ed 91       	ld	r30, X+
    5fa6:	fc 91       	ld	r31, X
    5fa8:	17 97       	sbiw	r26, 0x07	; 7
    5faa:	9f 01       	movw	r18, r30
    5fac:	2f 5f       	subi	r18, 0xFF	; 255
    5fae:	3f 4f       	sbci	r19, 0xFF	; 255
    5fb0:	17 96       	adiw	r26, 0x07	; 7
    5fb2:	3c 93       	st	X, r19
    5fb4:	2e 93       	st	-X, r18
    5fb6:	16 97       	sbiw	r26, 0x06	; 6
    5fb8:	93 b1       	in	r25, 0x03	; 3
    5fba:	90 83       	st	Z, r25
	I2C->I2C_TWDR =( MemAdd & 0xff );
	I2C_EN();WAIT_FLAG();
	I2C_EN_START();WAIT_FLAG();
	I2C->I2C_TWDR = DevAdd | 1 ;
	I2C_EN();WAIT_FLAG();
	while(DataSize-- > 1)	
    5fbc:	98 2f       	mov	r25, r24
    5fbe:	8f ef       	ldi	r24, 0xFF	; 255
    5fc0:	89 0f       	add	r24, r25
    5fc2:	92 30       	cpi	r25, 0x02	; 2
    5fc4:	48 f7       	brcc	.-46     	; 0x5f98 <HAL_I2C_Mem_Read+0x64>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
	}
	
	
	/* Last Byte Will received with NACK */
	I2C_EN();WAIT_FLAG();
    5fc6:	84 e8       	ldi	r24, 0x84	; 132
    5fc8:	86 bf       	out	0x36, r24	; 54
    5fca:	06 b6       	in	r0, 0x36	; 54
    5fcc:	07 fe       	sbrs	r0, 7
    5fce:	fd cf       	rjmp	.-6      	; 0x5fca <HAL_I2C_Mem_Read+0x96>
	*(Handler->buffer++) = I2C->I2C_TWDR ;
    5fd0:	16 96       	adiw	r26, 0x06	; 6
    5fd2:	ed 91       	ld	r30, X+
    5fd4:	fc 91       	ld	r31, X
    5fd6:	17 97       	sbiw	r26, 0x07	; 7
    5fd8:	cf 01       	movw	r24, r30
    5fda:	01 96       	adiw	r24, 0x01	; 1
    5fdc:	17 96       	adiw	r26, 0x07	; 7
    5fde:	9c 93       	st	X, r25
    5fe0:	8e 93       	st	-X, r24
    5fe2:	16 97       	sbiw	r26, 0x06	; 6
    5fe4:	83 b1       	in	r24, 0x03	; 3
    5fe6:	80 83       	st	Z, r24

	
	/* Send Stop Bit allow another Master to acquire the bus */
	I2C_EN_STOP();
    5fe8:	84 e9       	ldi	r24, 0x94	; 148
    5fea:	86 bf       	out	0x36, r24	; 54
	
	
	return I2C_NORMAL ;
} /* END_FUN I2C_MEM_READ() */
    5fec:	80 e0       	ldi	r24, 0x00	; 0
    5fee:	1f 91       	pop	r17
    5ff0:	0f 91       	pop	r16
    5ff2:	ef 90       	pop	r14
    5ff4:	08 95       	ret

00005ff6 <HAL_SPI_Init>:
		++(Handler->TxBuffer);
	}
	HAL_GPIO_WRITEPIN(GPIOB,SPI_PIN_SS,GPIO_PIN_SET);
	 
	
}/* END_FUN HAL_SPI_Transmit()*/
    5ff6:	0f 93       	push	r16
    5ff8:	1f 93       	push	r17
    5ffa:	cf 93       	push	r28
    5ffc:	df 93       	push	r29
    5ffe:	00 d0       	rcall	.+0      	; 0x6000 <HAL_SPI_Init+0xa>
    6000:	1f 92       	push	r1
    6002:	cd b7       	in	r28, 0x3d	; 61
    6004:	de b7       	in	r29, 0x3e	; 62
    6006:	8c 01       	movw	r16, r24
    6008:	fc 01       	movw	r30, r24
    600a:	83 81       	ldd	r24, Z+3	; 0x03
    600c:	88 23       	and	r24, r24
    600e:	44 f4       	brge	.+16     	; 0x6020 <HAL_SPI_Init+0x2a>
    6010:	9d b1       	in	r25, 0x0d	; 13
    6012:	83 70       	andi	r24, 0x03	; 3
    6014:	89 2b       	or	r24, r25
    6016:	8d b9       	out	0x0d, r24	; 13
    6018:	8e b1       	in	r24, 0x0e	; 14
    601a:	81 60       	ori	r24, 0x01	; 1
    601c:	8e b9       	out	0x0e, r24	; 14
    601e:	04 c0       	rjmp	.+8      	; 0x6028 <HAL_SPI_Init+0x32>
    6020:	9d b1       	in	r25, 0x0d	; 13
    6022:	83 70       	andi	r24, 0x03	; 3
    6024:	89 2b       	or	r24, r25
    6026:	8d b9       	out	0x0d, r24	; 13
    6028:	f8 01       	movw	r30, r16
    602a:	80 81       	ld	r24, Z
    602c:	84 ff       	sbrs	r24, 4
    602e:	16 c0       	rjmp	.+44     	; 0x605c <HAL_SPI_Init+0x66>
    6030:	81 e0       	ldi	r24, 0x01	; 1
    6032:	8a 83       	std	Y+2, r24	; 0x02
    6034:	80 eb       	ldi	r24, 0xB0	; 176
    6036:	89 83       	std	Y+1, r24	; 0x01
    6038:	be 01       	movw	r22, r28
    603a:	6f 5f       	subi	r22, 0xFF	; 255
    603c:	7f 4f       	sbci	r23, 0xFF	; 255
    603e:	86 e3       	ldi	r24, 0x36	; 54
    6040:	90 e0       	ldi	r25, 0x00	; 0
    6042:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
    6046:	1a 82       	std	Y+2, r1	; 0x02
    6048:	80 e4       	ldi	r24, 0x40	; 64
    604a:	89 83       	std	Y+1, r24	; 0x01
    604c:	be 01       	movw	r22, r28
    604e:	6f 5f       	subi	r22, 0xFF	; 255
    6050:	7f 4f       	sbci	r23, 0xFF	; 255
    6052:	86 e3       	ldi	r24, 0x36	; 54
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
    605a:	15 c0       	rjmp	.+42     	; 0x6086 <HAL_SPI_Init+0x90>
    605c:	1a 82       	std	Y+2, r1	; 0x02
    605e:	80 eb       	ldi	r24, 0xB0	; 176
    6060:	89 83       	std	Y+1, r24	; 0x01
    6062:	be 01       	movw	r22, r28
    6064:	6f 5f       	subi	r22, 0xFF	; 255
    6066:	7f 4f       	sbci	r23, 0xFF	; 255
    6068:	86 e3       	ldi	r24, 0x36	; 54
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
    6070:	81 e0       	ldi	r24, 0x01	; 1
    6072:	8a 83       	std	Y+2, r24	; 0x02
    6074:	80 e4       	ldi	r24, 0x40	; 64
    6076:	89 83       	std	Y+1, r24	; 0x01
    6078:	be 01       	movw	r22, r28
    607a:	6f 5f       	subi	r22, 0xFF	; 255
    607c:	7f 4f       	sbci	r23, 0xFF	; 255
    607e:	86 e3       	ldi	r24, 0x36	; 54
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
    6086:	f8 01       	movw	r30, r16
    6088:	42 81       	ldd	r20, Z+2	; 0x02
    608a:	81 81       	ldd	r24, Z+1	; 0x01
    608c:	34 81       	ldd	r19, Z+4	; 0x04
    608e:	25 81       	ldd	r18, Z+5	; 0x05
    6090:	90 81       	ld	r25, Z
    6092:	84 2b       	or	r24, r20
    6094:	83 2b       	or	r24, r19
    6096:	82 2b       	or	r24, r18
    6098:	89 2b       	or	r24, r25
    609a:	8d b9       	out	0x0d, r24	; 13
    609c:	8d b1       	in	r24, 0x0d	; 13
    609e:	80 64       	ori	r24, 0x40	; 64
    60a0:	8d b9       	out	0x0d, r24	; 13
    60a2:	85 81       	ldd	r24, Z+5	; 0x05
    60a4:	80 38       	cpi	r24, 0x80	; 128
    60a6:	09 f4       	brne	.+2      	; 0x60aa <HAL_SPI_Init+0xb4>
    60a8:	78 94       	sei
    60aa:	0f 90       	pop	r0
    60ac:	0f 90       	pop	r0
    60ae:	0f 90       	pop	r0
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	1f 91       	pop	r17
    60b6:	0f 91       	pop	r16
    60b8:	08 95       	ret

000060ba <HAL_SPI_Recieve>:
 * param. :Handler --> this handler of SPI peripheral 
 * param. :pRxData --> pointer to the rx buffer  
 * param. :size    -->the required number of bytes to received 
*/
 void HAL_SPI_Recieve(SPI_Handler_t * Handler,uint8_t * pRxData,uint16_t size )
{
    60ba:	fc 01       	movw	r30, r24
	Handler->RxBuffer = pRxData ;
    60bc:	71 87       	std	Z+9, r23	; 0x09
    60be:	60 87       	std	Z+8, r22	; 0x08
	Handler->TxBuffer = NULL  ;
    60c0:	17 82       	std	Z+7, r1	; 0x07
    60c2:	16 82       	std	Z+6, r1	; 0x06
	Handler->RxBufferSize = size ;
    60c4:	55 87       	std	Z+13, r21	; 0x0d
    60c6:	44 87       	std	Z+12, r20	; 0x0c
	Handler->TxBufferSize = 0;
    60c8:	13 86       	std	Z+11, r1	; 0x0b
    60ca:	12 86       	std	Z+10, r1	; 0x0a

	while(Handler->RxBufferSize >0)  /* block until end */
    60cc:	10 c0       	rjmp	.+32     	; 0x60ee <HAL_SPI_Recieve+0x34>
	{ 
		while(!(SPI_PREPH->SPI_SPSR & SPI_SPSR_SPIF));  /* wait till the SPI send byte and set SPIIF bit */
    60ce:	77 9b       	sbis	0x0e, 7	; 14
    60d0:	fe cf       	rjmp	.-4      	; 0x60ce <HAL_SPI_Recieve+0x14>
		 *(Handler->RxBuffer) = SPI_PREPH->SPI_SPDR ;
    60d2:	a0 85       	ldd	r26, Z+8	; 0x08
    60d4:	b1 85       	ldd	r27, Z+9	; 0x09
    60d6:	8f b1       	in	r24, 0x0f	; 15
    60d8:	8c 93       	st	X, r24
		++(Handler->RxBuffer);
    60da:	80 85       	ldd	r24, Z+8	; 0x08
    60dc:	91 85       	ldd	r25, Z+9	; 0x09
    60de:	01 96       	adiw	r24, 0x01	; 1
    60e0:	91 87       	std	Z+9, r25	; 0x09
    60e2:	80 87       	std	Z+8, r24	; 0x08
		--(Handler->RxBufferSize);
    60e4:	84 85       	ldd	r24, Z+12	; 0x0c
    60e6:	95 85       	ldd	r25, Z+13	; 0x0d
    60e8:	01 97       	sbiw	r24, 0x01	; 1
    60ea:	95 87       	std	Z+13, r25	; 0x0d
    60ec:	84 87       	std	Z+12, r24	; 0x0c
	Handler->RxBuffer = pRxData ;
	Handler->TxBuffer = NULL  ;
	Handler->RxBufferSize = size ;
	Handler->TxBufferSize = 0;

	while(Handler->RxBufferSize >0)  /* block until end */
    60ee:	84 85       	ldd	r24, Z+12	; 0x0c
    60f0:	95 85       	ldd	r25, Z+13	; 0x0d
    60f2:	89 2b       	or	r24, r25
    60f4:	61 f7       	brne	.-40     	; 0x60ce <HAL_SPI_Recieve+0x14>
		--(Handler->RxBufferSize);
	}
	 

	
}/* END_FUN HAL_SPI_Recieve()*/
    60f6:	08 95       	ret

000060f8 <TIM_NormalModeInit>:
	
	SET_REGISTER_VAL(TCCR1B , TIM16Bit_InputCapture_CAPTURE_EDGE_MASK , Edge ) ;
	
	return TIM_OK ;
	
}
    60f8:	00 97       	sbiw	r24, 0x00	; 0
    60fa:	89 f0       	breq	.+34     	; 0x611e <TIM_NormalModeInit+0x26>
    60fc:	fc 01       	movw	r30, r24
    60fe:	80 85       	ldd	r24, Z+8	; 0x08
    6100:	81 11       	cpse	r24, r1
    6102:	02 c0       	rjmp	.+4      	; 0x6108 <TIM_NormalModeInit+0x10>
    6104:	13 be       	out	0x33, r1	; 51
    6106:	08 95       	ret
    6108:	82 30       	cpi	r24, 0x02	; 2
    610a:	19 f4       	brne	.+6      	; 0x6112 <TIM_NormalModeInit+0x1a>
    610c:	15 bc       	out	0x25, r1	; 37
    610e:	80 e0       	ldi	r24, 0x00	; 0
    6110:	08 95       	ret
    6112:	81 30       	cpi	r24, 0x01	; 1
    6114:	31 f4       	brne	.+12     	; 0x6122 <TIM_NormalModeInit+0x2a>
    6116:	1f bc       	out	0x2f, r1	; 47
    6118:	1e bc       	out	0x2e, r1	; 46
    611a:	80 e0       	ldi	r24, 0x00	; 0
    611c:	08 95       	ret
    611e:	81 e0       	ldi	r24, 0x01	; 1
    6120:	08 95       	ret
    6122:	82 e0       	ldi	r24, 0x02	; 2
    6124:	08 95       	ret

00006126 <TIM_PWMMode_SetDuty>:
    6126:	cf 92       	push	r12
    6128:	df 92       	push	r13
    612a:	ef 92       	push	r14
    612c:	ff 92       	push	r15
    612e:	0f 93       	push	r16
    6130:	1f 93       	push	r17
    6132:	cf 93       	push	r28
    6134:	df 93       	push	r29
    6136:	8c 01       	movw	r16, r24
    6138:	c6 2f       	mov	r28, r22
    613a:	00 97       	sbiw	r24, 0x00	; 0
    613c:	09 f4       	brne	.+2      	; 0x6140 <TIM_PWMMode_SetDuty+0x1a>
    613e:	8b c0       	rjmp	.+278    	; 0x6256 <TIM_PWMMode_SetDuty+0x130>
    6140:	fc 01       	movw	r30, r24
    6142:	80 85       	ldd	r24, Z+8	; 0x08
    6144:	81 11       	cpse	r24, r1
    6146:	08 c0       	rjmp	.+16     	; 0x6158 <TIM_PWMMode_SetDuty+0x32>
    6148:	96 2f       	mov	r25, r22
    614a:	64 e6       	ldi	r22, 0x64	; 100
    614c:	70 e0       	ldi	r23, 0x00	; 0
    614e:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <__divmodhi4>
    6152:	6c bf       	out	0x3c, r22	; 60
    6154:	80 e0       	ldi	r24, 0x00	; 0
    6156:	82 c0       	rjmp	.+260    	; 0x625c <TIM_PWMMode_SetDuty+0x136>
    6158:	82 30       	cpi	r24, 0x02	; 2
    615a:	49 f4       	brne	.+18     	; 0x616e <TIM_PWMMode_SetDuty+0x48>
    615c:	96 2f       	mov	r25, r22
    615e:	80 e0       	ldi	r24, 0x00	; 0
    6160:	64 e6       	ldi	r22, 0x64	; 100
    6162:	70 e0       	ldi	r23, 0x00	; 0
    6164:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <__divmodhi4>
    6168:	63 bd       	out	0x23, r22	; 35
    616a:	80 e0       	ldi	r24, 0x00	; 0
    616c:	77 c0       	rjmp	.+238    	; 0x625c <TIM_PWMMode_SetDuty+0x136>
    616e:	81 30       	cpi	r24, 0x01	; 1
    6170:	09 f0       	breq	.+2      	; 0x6174 <TIM_PWMMode_SetDuty+0x4e>
    6172:	73 c0       	rjmp	.+230    	; 0x625a <TIM_PWMMode_SetDuty+0x134>
    6174:	8f ef       	ldi	r24, 0xFF	; 255
    6176:	9f e0       	ldi	r25, 0x0F	; 15
    6178:	97 bd       	out	0x27, r25	; 39
    617a:	86 bd       	out	0x26, r24	; 38
    617c:	f8 01       	movw	r30, r16
    617e:	86 81       	ldd	r24, Z+6	; 0x06
    6180:	8f 3f       	cpi	r24, 0xFF	; 255
    6182:	b9 f5       	brne	.+110    	; 0x61f2 <TIM_PWMMode_SetDuty+0xcc>
    6184:	80 81       	ld	r24, Z
    6186:	91 81       	ldd	r25, Z+1	; 0x01
    6188:	a2 81       	ldd	r26, Z+2	; 0x02
    618a:	b3 81       	ldd	r27, Z+3	; 0x03
    618c:	bc 01       	movw	r22, r24
    618e:	cd 01       	movw	r24, r26
    6190:	7f 70       	andi	r23, 0x0F	; 15
    6192:	88 27       	eor	r24, r24
    6194:	99 27       	eor	r25, r25
    6196:	0f 2e       	mov	r0, r31
    6198:	f4 e6       	ldi	r31, 0x64	; 100
    619a:	cf 2e       	mov	r12, r31
    619c:	d1 2c       	mov	r13, r1
    619e:	e1 2c       	mov	r14, r1
    61a0:	f1 2c       	mov	r15, r1
    61a2:	f0 2d       	mov	r31, r0
    61a4:	a7 01       	movw	r20, r14
    61a6:	96 01       	movw	r18, r12
    61a8:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <__udivmodsi4>
    61ac:	d0 e0       	ldi	r29, 0x00	; 0
    61ae:	c2 9f       	mul	r28, r18
    61b0:	c0 01       	movw	r24, r0
    61b2:	c3 9f       	mul	r28, r19
    61b4:	90 0d       	add	r25, r0
    61b6:	d2 9f       	mul	r29, r18
    61b8:	90 0d       	add	r25, r0
    61ba:	11 24       	eor	r1, r1
    61bc:	9b bd       	out	0x2b, r25	; 43
    61be:	8a bd       	out	0x2a, r24	; 42
    61c0:	f8 01       	movw	r30, r16
    61c2:	80 81       	ld	r24, Z
    61c4:	91 81       	ldd	r25, Z+1	; 0x01
    61c6:	a2 81       	ldd	r26, Z+2	; 0x02
    61c8:	b3 81       	ldd	r27, Z+3	; 0x03
    61ca:	bc 01       	movw	r22, r24
    61cc:	cd 01       	movw	r24, r26
    61ce:	7f 70       	andi	r23, 0x0F	; 15
    61d0:	88 27       	eor	r24, r24
    61d2:	99 27       	eor	r25, r25
    61d4:	a7 01       	movw	r20, r14
    61d6:	96 01       	movw	r18, r12
    61d8:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <__udivmodsi4>
    61dc:	c2 9f       	mul	r28, r18
    61de:	c0 01       	movw	r24, r0
    61e0:	c3 9f       	mul	r28, r19
    61e2:	90 0d       	add	r25, r0
    61e4:	d2 9f       	mul	r29, r18
    61e6:	90 0d       	add	r25, r0
    61e8:	11 24       	eor	r1, r1
    61ea:	99 bd       	out	0x29, r25	; 41
    61ec:	88 bd       	out	0x28, r24	; 40
    61ee:	80 e0       	ldi	r24, 0x00	; 0
    61f0:	35 c0       	rjmp	.+106    	; 0x625c <TIM_PWMMode_SetDuty+0x136>
    61f2:	84 30       	cpi	r24, 0x04	; 4
    61f4:	c1 f4       	brne	.+48     	; 0x6226 <TIM_PWMMode_SetDuty+0x100>
    61f6:	f8 01       	movw	r30, r16
    61f8:	80 81       	ld	r24, Z
    61fa:	91 81       	ldd	r25, Z+1	; 0x01
    61fc:	a2 81       	ldd	r26, Z+2	; 0x02
    61fe:	b3 81       	ldd	r27, Z+3	; 0x03
    6200:	9c 01       	movw	r18, r24
    6202:	ad 01       	movw	r20, r26
    6204:	3f 70       	andi	r19, 0x0F	; 15
    6206:	44 27       	eor	r20, r20
    6208:	55 27       	eor	r21, r21
    620a:	a6 2f       	mov	r26, r22
    620c:	b0 e0       	ldi	r27, 0x00	; 0
    620e:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <__muluhisi3>
    6212:	24 e6       	ldi	r18, 0x64	; 100
    6214:	30 e0       	ldi	r19, 0x00	; 0
    6216:	40 e0       	ldi	r20, 0x00	; 0
    6218:	50 e0       	ldi	r21, 0x00	; 0
    621a:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <__udivmodsi4>
    621e:	39 bd       	out	0x29, r19	; 41
    6220:	28 bd       	out	0x28, r18	; 40
    6222:	80 e0       	ldi	r24, 0x00	; 0
    6224:	1b c0       	rjmp	.+54     	; 0x625c <TIM_PWMMode_SetDuty+0x136>
    6226:	f8 01       	movw	r30, r16
    6228:	80 81       	ld	r24, Z
    622a:	91 81       	ldd	r25, Z+1	; 0x01
    622c:	a2 81       	ldd	r26, Z+2	; 0x02
    622e:	b3 81       	ldd	r27, Z+3	; 0x03
    6230:	9c 01       	movw	r18, r24
    6232:	ad 01       	movw	r20, r26
    6234:	3f 70       	andi	r19, 0x0F	; 15
    6236:	44 27       	eor	r20, r20
    6238:	55 27       	eor	r21, r21
    623a:	a6 2f       	mov	r26, r22
    623c:	b0 e0       	ldi	r27, 0x00	; 0
    623e:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <__muluhisi3>
    6242:	24 e6       	ldi	r18, 0x64	; 100
    6244:	30 e0       	ldi	r19, 0x00	; 0
    6246:	40 e0       	ldi	r20, 0x00	; 0
    6248:	50 e0       	ldi	r21, 0x00	; 0
    624a:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <__udivmodsi4>
    624e:	3b bd       	out	0x2b, r19	; 43
    6250:	2a bd       	out	0x2a, r18	; 42
    6252:	80 e0       	ldi	r24, 0x00	; 0
    6254:	03 c0       	rjmp	.+6      	; 0x625c <TIM_PWMMode_SetDuty+0x136>
    6256:	81 e0       	ldi	r24, 0x01	; 1
    6258:	01 c0       	rjmp	.+2      	; 0x625c <TIM_PWMMode_SetDuty+0x136>
    625a:	80 e0       	ldi	r24, 0x00	; 0
    625c:	df 91       	pop	r29
    625e:	cf 91       	pop	r28
    6260:	1f 91       	pop	r17
    6262:	0f 91       	pop	r16
    6264:	ff 90       	pop	r15
    6266:	ef 90       	pop	r14
    6268:	df 90       	pop	r13
    626a:	cf 90       	pop	r12
    626c:	08 95       	ret

0000626e <TIM_Start>:
    626e:	00 97       	sbiw	r24, 0x00	; 0
    6270:	29 f1       	breq	.+74     	; 0x62bc <TIM_Start+0x4e>
    6272:	fc 01       	movw	r30, r24
    6274:	20 85       	ldd	r18, Z+8	; 0x08
    6276:	21 11       	cpse	r18, r1
    6278:	09 c0       	rjmp	.+18     	; 0x628c <TIM_Start+0x1e>
    627a:	23 b7       	in	r18, 0x33	; 51
    627c:	28 7f       	andi	r18, 0xF8	; 248
    627e:	23 bf       	out	0x33, r18	; 51
    6280:	23 b7       	in	r18, 0x33	; 51
    6282:	87 81       	ldd	r24, Z+7	; 0x07
    6284:	82 2b       	or	r24, r18
    6286:	83 bf       	out	0x33, r24	; 51
    6288:	80 e0       	ldi	r24, 0x00	; 0
    628a:	08 95       	ret
    628c:	22 30       	cpi	r18, 0x02	; 2
    628e:	51 f4       	brne	.+20     	; 0x62a4 <TIM_Start+0x36>
    6290:	25 b5       	in	r18, 0x25	; 37
    6292:	28 7f       	andi	r18, 0xF8	; 248
    6294:	25 bd       	out	0x25, r18	; 37
    6296:	25 b5       	in	r18, 0x25	; 37
    6298:	fc 01       	movw	r30, r24
    629a:	87 81       	ldd	r24, Z+7	; 0x07
    629c:	82 2b       	or	r24, r18
    629e:	85 bd       	out	0x25, r24	; 37
    62a0:	80 e0       	ldi	r24, 0x00	; 0
    62a2:	08 95       	ret
    62a4:	21 30       	cpi	r18, 0x01	; 1
    62a6:	61 f4       	brne	.+24     	; 0x62c0 <TIM_Start+0x52>
    62a8:	2e b5       	in	r18, 0x2e	; 46
    62aa:	28 7f       	andi	r18, 0xF8	; 248
    62ac:	2e bd       	out	0x2e, r18	; 46
    62ae:	2e b5       	in	r18, 0x2e	; 46
    62b0:	fc 01       	movw	r30, r24
    62b2:	87 81       	ldd	r24, Z+7	; 0x07
    62b4:	82 2b       	or	r24, r18
    62b6:	8e bd       	out	0x2e, r24	; 46
    62b8:	80 e0       	ldi	r24, 0x00	; 0
    62ba:	08 95       	ret
    62bc:	81 e0       	ldi	r24, 0x01	; 1
    62be:	08 95       	ret
    62c0:	82 e0       	ldi	r24, 0x02	; 2
    62c2:	08 95       	ret

000062c4 <TIM_Stop>:
    62c4:	81 11       	cpse	r24, r1
    62c6:	07 c0       	rjmp	.+14     	; 0x62d6 <TIM_Stop+0x12>
    62c8:	83 b7       	in	r24, 0x33	; 51
    62ca:	88 7f       	andi	r24, 0xF8	; 248
    62cc:	83 bf       	out	0x33, r24	; 51
    62ce:	83 b7       	in	r24, 0x33	; 51
    62d0:	83 bf       	out	0x33, r24	; 51
    62d2:	80 e0       	ldi	r24, 0x00	; 0
    62d4:	08 95       	ret
    62d6:	82 30       	cpi	r24, 0x02	; 2
    62d8:	39 f4       	brne	.+14     	; 0x62e8 <TIM_Stop+0x24>
    62da:	85 b5       	in	r24, 0x25	; 37
    62dc:	88 7f       	andi	r24, 0xF8	; 248
    62de:	85 bd       	out	0x25, r24	; 37
    62e0:	85 b5       	in	r24, 0x25	; 37
    62e2:	85 bd       	out	0x25, r24	; 37
    62e4:	80 e0       	ldi	r24, 0x00	; 0
    62e6:	08 95       	ret
    62e8:	81 30       	cpi	r24, 0x01	; 1
    62ea:	39 f4       	brne	.+14     	; 0x62fa <TIM_Stop+0x36>
    62ec:	8e b5       	in	r24, 0x2e	; 46
    62ee:	88 7f       	andi	r24, 0xF8	; 248
    62f0:	8e bd       	out	0x2e, r24	; 46
    62f2:	8e b5       	in	r24, 0x2e	; 46
    62f4:	8e bd       	out	0x2e, r24	; 46
    62f6:	80 e0       	ldi	r24, 0x00	; 0
    62f8:	08 95       	ret
    62fa:	82 e0       	ldi	r24, 0x02	; 2
    62fc:	08 95       	ret

000062fe <TIM_PWMModeInit>:
    62fe:	fc 01       	movw	r30, r24
    6300:	89 2b       	or	r24, r25
    6302:	09 f4       	brne	.+2      	; 0x6306 <TIM_PWMModeInit+0x8>
    6304:	98 c0       	rjmp	.+304    	; 0x6436 <TIM_PWMModeInit+0x138>
    6306:	80 85       	ldd	r24, Z+8	; 0x08
    6308:	81 30       	cpi	r24, 0x01	; 1
    630a:	09 f0       	breq	.+2      	; 0x630e <TIM_PWMModeInit+0x10>
    630c:	6d c0       	rjmp	.+218    	; 0x63e8 <TIM_PWMModeInit+0xea>
    630e:	80 81       	ld	r24, Z
    6310:	91 81       	ldd	r25, Z+1	; 0x01
    6312:	a2 81       	ldd	r26, Z+2	; 0x02
    6314:	b3 81       	ldd	r27, Z+3	; 0x03
    6316:	94 ff       	sbrs	r25, 4
    6318:	33 c0       	rjmp	.+102    	; 0x6380 <TIM_PWMModeInit+0x82>
    631a:	aa 27       	eor	r26, r26
    631c:	bb 27       	eor	r27, r27
    631e:	8f 3f       	cpi	r24, 0xFF	; 255
    6320:	20 e1       	ldi	r18, 0x10	; 16
    6322:	92 07       	cpc	r25, r18
    6324:	a1 05       	cpc	r26, r1
    6326:	b1 05       	cpc	r27, r1
    6328:	29 f4       	brne	.+10     	; 0x6334 <TIM_PWMModeInit+0x36>
    632a:	81 e0       	ldi	r24, 0x01	; 1
    632c:	8f bd       	out	0x2f, r24	; 47
    632e:	88 e0       	ldi	r24, 0x08	; 8
    6330:	8e bd       	out	0x2e, r24	; 46
    6332:	1f c0       	rjmp	.+62     	; 0x6372 <TIM_PWMModeInit+0x74>
    6334:	8f 3f       	cpi	r24, 0xFF	; 255
    6336:	21 e1       	ldi	r18, 0x11	; 17
    6338:	92 07       	cpc	r25, r18
    633a:	a1 05       	cpc	r26, r1
    633c:	b1 05       	cpc	r27, r1
    633e:	29 f4       	brne	.+10     	; 0x634a <TIM_PWMModeInit+0x4c>
    6340:	82 e0       	ldi	r24, 0x02	; 2
    6342:	8f bd       	out	0x2f, r24	; 47
    6344:	88 e0       	ldi	r24, 0x08	; 8
    6346:	8e bd       	out	0x2e, r24	; 46
    6348:	14 c0       	rjmp	.+40     	; 0x6372 <TIM_PWMModeInit+0x74>
    634a:	8f 3f       	cpi	r24, 0xFF	; 255
    634c:	23 e1       	ldi	r18, 0x13	; 19
    634e:	92 07       	cpc	r25, r18
    6350:	a1 05       	cpc	r26, r1
    6352:	b1 05       	cpc	r27, r1
    6354:	29 f4       	brne	.+10     	; 0x6360 <TIM_PWMModeInit+0x62>
    6356:	83 e0       	ldi	r24, 0x03	; 3
    6358:	8f bd       	out	0x2f, r24	; 47
    635a:	88 e0       	ldi	r24, 0x08	; 8
    635c:	8e bd       	out	0x2e, r24	; 46
    635e:	09 c0       	rjmp	.+18     	; 0x6372 <TIM_PWMModeInit+0x74>
    6360:	8f 3f       	cpi	r24, 0xFF	; 255
    6362:	9f 41       	sbci	r25, 0x1F	; 31
    6364:	a1 05       	cpc	r26, r1
    6366:	b1 05       	cpc	r27, r1
    6368:	21 f4       	brne	.+8      	; 0x6372 <TIM_PWMModeInit+0x74>
    636a:	82 e0       	ldi	r24, 0x02	; 2
    636c:	8f bd       	out	0x2f, r24	; 47
    636e:	88 e1       	ldi	r24, 0x18	; 24
    6370:	8e bd       	out	0x2e, r24	; 46
    6372:	81 85       	ldd	r24, Z+9	; 0x09
    6374:	88 23       	and	r24, r24
    6376:	89 f0       	breq	.+34     	; 0x639a <TIM_PWMModeInit+0x9c>
    6378:	99 b7       	in	r25, 0x39	; 57
    637a:	89 2b       	or	r24, r25
    637c:	89 bf       	out	0x39, r24	; 57
    637e:	0d c0       	rjmp	.+26     	; 0x639a <TIM_PWMModeInit+0x9c>
    6380:	95 ff       	sbrs	r25, 5
    6382:	05 c0       	rjmp	.+10     	; 0x638e <TIM_PWMModeInit+0x90>
    6384:	82 e0       	ldi	r24, 0x02	; 2
    6386:	8f bd       	out	0x2f, r24	; 47
    6388:	80 e1       	ldi	r24, 0x10	; 16
    638a:	8e bd       	out	0x2e, r24	; 46
    638c:	06 c0       	rjmp	.+12     	; 0x639a <TIM_PWMModeInit+0x9c>
    638e:	96 ff       	sbrs	r25, 6
    6390:	04 c0       	rjmp	.+8      	; 0x639a <TIM_PWMModeInit+0x9c>
    6392:	81 e0       	ldi	r24, 0x01	; 1
    6394:	8f bd       	out	0x2f, r24	; 47
    6396:	80 e1       	ldi	r24, 0x10	; 16
    6398:	8e bd       	out	0x2e, r24	; 46
    639a:	26 81       	ldd	r18, Z+6	; 0x06
    639c:	2f 3f       	cpi	r18, 0xFF	; 255
    639e:	c1 f4       	brne	.+48     	; 0x63d0 <TIM_PWMModeInit+0xd2>
    63a0:	2f b5       	in	r18, 0x2f	; 47
    63a2:	94 81       	ldd	r25, Z+4	; 0x04
    63a4:	89 2f       	mov	r24, r25
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	ac 01       	movw	r20, r24
    63aa:	00 24       	eor	r0, r0
    63ac:	56 95       	lsr	r21
    63ae:	47 95       	ror	r20
    63b0:	07 94       	ror	r0
    63b2:	56 95       	lsr	r21
    63b4:	47 95       	ror	r20
    63b6:	07 94       	ror	r0
    63b8:	54 2f       	mov	r21, r20
    63ba:	40 2d       	mov	r20, r0
    63bc:	82 95       	swap	r24
    63be:	92 95       	swap	r25
    63c0:	90 7f       	andi	r25, 0xF0	; 240
    63c2:	98 27       	eor	r25, r24
    63c4:	80 7f       	andi	r24, 0xF0	; 240
    63c6:	98 27       	eor	r25, r24
    63c8:	84 2b       	or	r24, r20
    63ca:	82 2b       	or	r24, r18
    63cc:	8f bd       	out	0x2f, r24	; 47
    63ce:	2b c0       	rjmp	.+86     	; 0x6426 <TIM_PWMModeInit+0x128>
    63d0:	3f b5       	in	r19, 0x2f	; 47
    63d2:	94 81       	ldd	r25, Z+4	; 0x04
    63d4:	89 2f       	mov	r24, r25
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	02 c0       	rjmp	.+4      	; 0x63de <TIM_PWMModeInit+0xe0>
    63da:	88 0f       	add	r24, r24
    63dc:	99 1f       	adc	r25, r25
    63de:	2a 95       	dec	r18
    63e0:	e2 f7       	brpl	.-8      	; 0x63da <TIM_PWMModeInit+0xdc>
    63e2:	83 2b       	or	r24, r19
    63e4:	8f bd       	out	0x2f, r24	; 47
    63e6:	1f c0       	rjmp	.+62     	; 0x6426 <TIM_PWMModeInit+0x128>
    63e8:	88 23       	and	r24, r24
    63ea:	11 f0       	breq	.+4      	; 0x63f0 <TIM_PWMModeInit+0xf2>
    63ec:	82 30       	cpi	r24, 0x02	; 2
    63ee:	29 f5       	brne	.+74     	; 0x643a <TIM_PWMModeInit+0x13c>
    63f0:	81 11       	cpse	r24, r1
    63f2:	0c c0       	rjmp	.+24     	; 0x640c <TIM_PWMModeInit+0x10e>
    63f4:	83 b7       	in	r24, 0x33	; 51
    63f6:	87 78       	andi	r24, 0x87	; 135
    63f8:	83 bf       	out	0x33, r24	; 51
    63fa:	93 b7       	in	r25, 0x33	; 51
    63fc:	24 81       	ldd	r18, Z+4	; 0x04
    63fe:	82 81       	ldd	r24, Z+2	; 0x02
    6400:	82 2b       	or	r24, r18
    6402:	89 2b       	or	r24, r25
    6404:	83 bf       	out	0x33, r24	; 51
    6406:	85 81       	ldd	r24, Z+5	; 0x05
    6408:	8c bf       	out	0x3c, r24	; 60
    640a:	0d c0       	rjmp	.+26     	; 0x6426 <TIM_PWMModeInit+0x128>
    640c:	82 30       	cpi	r24, 0x02	; 2
    640e:	59 f4       	brne	.+22     	; 0x6426 <TIM_PWMModeInit+0x128>
    6410:	85 b5       	in	r24, 0x25	; 37
    6412:	87 78       	andi	r24, 0x87	; 135
    6414:	85 bd       	out	0x25, r24	; 37
    6416:	95 b5       	in	r25, 0x25	; 37
    6418:	24 81       	ldd	r18, Z+4	; 0x04
    641a:	82 81       	ldd	r24, Z+2	; 0x02
    641c:	82 2b       	or	r24, r18
    641e:	89 2b       	or	r24, r25
    6420:	85 bd       	out	0x25, r24	; 37
    6422:	85 81       	ldd	r24, Z+5	; 0x05
    6424:	83 bd       	out	0x23, r24	; 35
    6426:	81 85       	ldd	r24, Z+9	; 0x09
    6428:	88 23       	and	r24, r24
    642a:	49 f0       	breq	.+18     	; 0x643e <TIM_PWMModeInit+0x140>
    642c:	99 b7       	in	r25, 0x39	; 57
    642e:	89 2b       	or	r24, r25
    6430:	89 bf       	out	0x39, r24	; 57
    6432:	80 e0       	ldi	r24, 0x00	; 0
    6434:	08 95       	ret
    6436:	81 e0       	ldi	r24, 0x01	; 1
    6438:	08 95       	ret
    643a:	82 e0       	ldi	r24, 0x02	; 2
    643c:	08 95       	ret
    643e:	80 e0       	ldi	r24, 0x00	; 0
    6440:	08 95       	ret

00006442 <TIM_CallBack_FuctionSet>:


  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
    6442:	61 15       	cp	r22, r1
    6444:	71 05       	cpc	r23, r1
    6446:	e1 f0       	breq	.+56     	; 0x6480 <TIM_CallBack_FuctionSet+0x3e>
	{
		return TIM_PARAM_ERROR ;
	}
	
	switch(Interrupt_Num)
    6448:	88 30       	cpi	r24, 0x08	; 8
    644a:	e1 f0       	breq	.+56     	; 0x6484 <TIM_CallBack_FuctionSet+0x42>
    644c:	38 f4       	brcc	.+14     	; 0x645c <TIM_CallBack_FuctionSet+0x1a>
    644e:	82 30       	cpi	r24, 0x02	; 2
    6450:	89 f0       	breq	.+34     	; 0x6474 <TIM_CallBack_FuctionSet+0x32>
    6452:	84 30       	cpi	r24, 0x04	; 4
    6454:	b9 f0       	breq	.+46     	; 0x6484 <TIM_CallBack_FuctionSet+0x42>
    6456:	81 30       	cpi	r24, 0x01	; 1
    6458:	59 f4       	brne	.+22     	; 0x6470 <TIM_CallBack_FuctionSet+0x2e>
    645a:	14 c0       	rjmp	.+40     	; 0x6484 <TIM_CallBack_FuctionSet+0x42>
    645c:	80 32       	cpi	r24, 0x20	; 32
    645e:	91 f0       	breq	.+36     	; 0x6484 <TIM_CallBack_FuctionSet+0x42>
    6460:	18 f4       	brcc	.+6      	; 0x6468 <TIM_CallBack_FuctionSet+0x26>
    6462:	80 31       	cpi	r24, 0x10	; 16
    6464:	79 f0       	breq	.+30     	; 0x6484 <TIM_CallBack_FuctionSet+0x42>
    6466:	04 c0       	rjmp	.+8      	; 0x6470 <TIM_CallBack_FuctionSet+0x2e>
    6468:	80 34       	cpi	r24, 0x40	; 64
    646a:	61 f0       	breq	.+24     	; 0x6484 <TIM_CallBack_FuctionSet+0x42>
    646c:	80 38       	cpi	r24, 0x80	; 128
    646e:	51 f0       	breq	.+20     	; 0x6484 <TIM_CallBack_FuctionSet+0x42>
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
		default:
		
			return TIM_CONFIG_ERROR ;
    6470:	82 e0       	ldi	r24, 0x02	; 2
    6472:	08 95       	ret
	}
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
    6474:	70 93 d6 01 	sts	0x01D6, r23	; 0x8001d6 <COMPMatch0_Fun+0x1>
    6478:	60 93 d5 01 	sts	0x01D5, r22	; 0x8001d5 <COMPMatch0_Fun>
	}
	
	


	return TIM_OK ; 
    647c:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(Interrupt_Num)
	{
		case TIM_0_IT_COMP :
				COMPMatch0_Fun = callbackfunction ;
		break ;
    647e:	08 95       	ret
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
	{
		return TIM_PARAM_ERROR ;
    6480:	81 e0       	ldi	r24, 0x01	; 1
    6482:	08 95       	ret
	}
	
	


	return TIM_OK ; 
    6484:	80 e0       	ldi	r24, 0x00	; 0
	
}
    6486:	08 95       	ret

00006488 <__vector_10>:




ISR(TIMER0_COMP_vect)
{
    6488:	1f 92       	push	r1
    648a:	0f 92       	push	r0
    648c:	0f b6       	in	r0, 0x3f	; 63
    648e:	0f 92       	push	r0
    6490:	11 24       	eor	r1, r1
    6492:	2f 93       	push	r18
    6494:	3f 93       	push	r19
    6496:	4f 93       	push	r20
    6498:	5f 93       	push	r21
    649a:	6f 93       	push	r22
    649c:	7f 93       	push	r23
    649e:	8f 93       	push	r24
    64a0:	9f 93       	push	r25
    64a2:	af 93       	push	r26
    64a4:	bf 93       	push	r27
    64a6:	ef 93       	push	r30
    64a8:	ff 93       	push	r31
	
	COMPMatch0_Fun();
    64aa:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <COMPMatch0_Fun>
    64ae:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <COMPMatch0_Fun+0x1>
    64b2:	09 95       	icall
	
	
    64b4:	ff 91       	pop	r31
    64b6:	ef 91       	pop	r30
    64b8:	bf 91       	pop	r27
    64ba:	af 91       	pop	r26
    64bc:	9f 91       	pop	r25
    64be:	8f 91       	pop	r24
    64c0:	7f 91       	pop	r23
    64c2:	6f 91       	pop	r22
    64c4:	5f 91       	pop	r21
    64c6:	4f 91       	pop	r20
    64c8:	3f 91       	pop	r19
    64ca:	2f 91       	pop	r18
    64cc:	0f 90       	pop	r0
    64ce:	0f be       	out	0x3f, r0	; 63
    64d0:	0f 90       	pop	r0
    64d2:	1f 90       	pop	r1
    64d4:	18 95       	reti

000064d6 <HAL_UART_Init>:
 * brief : this function used to initialization  UART peripheral 
 * param : Handler pointer to the struct hold UART configuration 
 * return : void 
 */
void HAL_UART_Init(UART_Handler_t * Handler )
{
    64d6:	fc 01       	movw	r30, r24
	uint16_t BaudRateCal =0 ;
	
	UCSRB = 0x00 ;
    64d8:	1a b8       	out	0x0a, r1	; 10
	UCSRC = (1 << URSEL) | 0x00 ;    /* clear UCSRC register to set a new configurations */
    64da:	80 e8       	ldi	r24, 0x80	; 128
    64dc:	80 bd       	out	0x20, r24	; 32
	UCSRB |= Handler->Init.Mode ;   /* enable uart in tx or rx or both */
    64de:	9a b1       	in	r25, 0x0a	; 10
    64e0:	87 81       	ldd	r24, Z+7	; 0x07
    64e2:	89 2b       	or	r24, r25
    64e4:	8a b9       	out	0x0a, r24	; 10

	/* set the word size and parity and stop bits */
	UCSRC  |= (1 << URSEL) |((Handler->Init.wordLen) & (0x06)) | (Handler->Init.StopBits);
    64e6:	20 b5       	in	r18, 0x20	; 32
    64e8:	94 81       	ldd	r25, Z+4	; 0x04
    64ea:	85 81       	ldd	r24, Z+5	; 0x05
    64ec:	96 70       	andi	r25, 0x06	; 6
    64ee:	98 2b       	or	r25, r24
    64f0:	92 2b       	or	r25, r18
    64f2:	90 68       	ori	r25, 0x80	; 128
    64f4:	90 bd       	out	0x20, r25	; 32

	

	/* now set the baud rate */
	BaudRateCal = (F_CPU/(16ul *Handler->Init.BaudRate))-1;
    64f6:	80 81       	ld	r24, Z
    64f8:	91 81       	ldd	r25, Z+1	; 0x01
    64fa:	a2 81       	ldd	r26, Z+2	; 0x02
    64fc:	b3 81       	ldd	r27, Z+3	; 0x03
    64fe:	88 0f       	add	r24, r24
    6500:	99 1f       	adc	r25, r25
    6502:	aa 1f       	adc	r26, r26
    6504:	bb 1f       	adc	r27, r27
    6506:	88 0f       	add	r24, r24
    6508:	99 1f       	adc	r25, r25
    650a:	aa 1f       	adc	r26, r26
    650c:	bb 1f       	adc	r27, r27
    650e:	9c 01       	movw	r18, r24
    6510:	ad 01       	movw	r20, r26
    6512:	22 0f       	add	r18, r18
    6514:	33 1f       	adc	r19, r19
    6516:	44 1f       	adc	r20, r20
    6518:	55 1f       	adc	r21, r21
    651a:	22 0f       	add	r18, r18
    651c:	33 1f       	adc	r19, r19
    651e:	44 1f       	adc	r20, r20
    6520:	55 1f       	adc	r21, r21
    6522:	60 e0       	ldi	r22, 0x00	; 0
    6524:	74 e2       	ldi	r23, 0x24	; 36
    6526:	84 ef       	ldi	r24, 0xF4	; 244
    6528:	90 e0       	ldi	r25, 0x00	; 0
    652a:	0e 94 9b 36 	call	0x6d36	; 0x6d36 <__udivmodsi4>
    652e:	21 50       	subi	r18, 0x01	; 1
    6530:	31 09       	sbc	r19, r1
	UBRRL = BaudRateCal ;
    6532:	29 b9       	out	0x09, r18	; 9
	UBRRH =(BaudRateCal>>8)&(0x0f);
    6534:	83 2f       	mov	r24, r19
    6536:	8f 70       	andi	r24, 0x0F	; 15
    6538:	80 bd       	out	0x20, r24	; 32

	
	DDRD  |= 0x02 ;
    653a:	81 b3       	in	r24, 0x11	; 17
    653c:	82 60       	ori	r24, 0x02	; 2
    653e:	81 bb       	out	0x11, r24	; 17
	DDRD  &= ~(1<<0);
    6540:	81 b3       	in	r24, 0x11	; 17
    6542:	8e 7f       	andi	r24, 0xFE	; 254
    6544:	81 bb       	out	0x11, r24	; 17
    6546:	08 95       	ret

00006548 <HAL_UART_TRANSMIT>:
 * param : TxBuffer pointer to the transmitted buffer 
 * param : Size hold the size of transmitted data 
 * return : void 
 */
void HAL_UART_TRANSMIT(UART_Handler_t * Handler ,uint8_t * TxBuffer ,uint16_t Size )
{
    6548:	fc 01       	movw	r30, r24
	Handler->TxBuffer = TxBuffer ;
    654a:	71 87       	std	Z+9, r23	; 0x09
    654c:	60 87       	std	Z+8, r22	; 0x08
	Handler->TxSize = Size ;
    654e:	55 87       	std	Z+13, r21	; 0x0d
    6550:	44 87       	std	Z+12, r20	; 0x0c
	
	for (uint16_t iterator =0 ;iterator<Handler->TxSize;iterator++)
    6552:	20 e0       	ldi	r18, 0x00	; 0
    6554:	30 e0       	ldi	r19, 0x00	; 0
    6556:	0f c0       	rjmp	.+30     	; 0x6576 <HAL_UART_TRANSMIT+0x2e>
	{
	   while(!(UCSRA &(1<<UDRE)));
    6558:	5d 9b       	sbis	0x0b, 5	; 11
    655a:	fe cf       	rjmp	.-4      	; 0x6558 <HAL_UART_TRANSMIT+0x10>
	   	if(Handler->Init.wordLen == UART_WordLen_9)
    655c:	84 81       	ldd	r24, Z+4	; 0x04
    655e:	86 31       	cpi	r24, 0x16	; 22
    6560:	19 f4       	brne	.+6      	; 0x6568 <HAL_UART_TRANSMIT+0x20>
		   {
			  UCSRB |=((0x100)&(Handler->TxBuffer[iterator]))>>8|0x01; 
    6562:	8a b1       	in	r24, 0x0a	; 10
    6564:	81 60       	ori	r24, 0x01	; 1
    6566:	8a b9       	out	0x0a, r24	; 10
		   }
			UDR =(TxBuffer[iterator]);
    6568:	db 01       	movw	r26, r22
    656a:	a2 0f       	add	r26, r18
    656c:	b3 1f       	adc	r27, r19
    656e:	8c 91       	ld	r24, X
    6570:	8c b9       	out	0x0c, r24	; 12
void HAL_UART_TRANSMIT(UART_Handler_t * Handler ,uint8_t * TxBuffer ,uint16_t Size )
{
	Handler->TxBuffer = TxBuffer ;
	Handler->TxSize = Size ;
	
	for (uint16_t iterator =0 ;iterator<Handler->TxSize;iterator++)
    6572:	2f 5f       	subi	r18, 0xFF	; 255
    6574:	3f 4f       	sbci	r19, 0xFF	; 255
    6576:	84 85       	ldd	r24, Z+12	; 0x0c
    6578:	95 85       	ldd	r25, Z+13	; 0x0d
    657a:	28 17       	cp	r18, r24
    657c:	39 07       	cpc	r19, r25
    657e:	60 f3       	brcs	.-40     	; 0x6558 <HAL_UART_TRANSMIT+0x10>

	}
	
	
	
}/* END_FUN HAL_UART_TRANSMIT() */
    6580:	08 95       	ret

00006582 <HAL_UART_RECEIVE>:
 * param : Size hold the size of transmitted data 
 * return : void 
 */

void HAL_UART_RECEIVE(UART_Handler_t * Handler ,uint8_t * RxBuffer ,uint16_t Size )
{
    6582:	cf 93       	push	r28
    6584:	df 93       	push	r29
    6586:	fc 01       	movw	r30, r24
	
	Handler->TxBuffer = NULL;
    6588:	11 86       	std	Z+9, r1	; 0x09
    658a:	10 86       	std	Z+8, r1	; 0x08
	Handler->TxSize =0 ;
    658c:	15 86       	std	Z+13, r1	; 0x0d
    658e:	14 86       	std	Z+12, r1	; 0x0c
	Handler->RxBuffer = RxBuffer ;
    6590:	73 87       	std	Z+11, r23	; 0x0b
    6592:	62 87       	std	Z+10, r22	; 0x0a
	Handler->RxSize = Size ;
    6594:	57 87       	std	Z+15, r21	; 0x0f
    6596:	46 87       	std	Z+14, r20	; 0x0e
	uint8_t TempData = 0 ;
	
	for (uint16_t iterator =0 ; ;iterator++)
    6598:	20 e0       	ldi	r18, 0x00	; 0
    659a:	30 e0       	ldi	r19, 0x00	; 0
	{
		while(!(UCSRA & (1<<RXC)));
    659c:	5f 9b       	sbis	0x0b, 7	; 11
    659e:	fe cf       	rjmp	.-4      	; 0x659c <HAL_UART_RECEIVE+0x1a>
		TempData = UDR ;
    65a0:	9c b1       	in	r25, 0x0c	; 12

			if (iterator <= Handler->RxSize)
    65a2:	66 85       	ldd	r22, Z+14	; 0x0e
    65a4:	77 85       	ldd	r23, Z+15	; 0x0f
    65a6:	62 17       	cp	r22, r18
    65a8:	73 07       	cpc	r23, r19
    65aa:	08 f4       	brcc	.+2      	; 0x65ae <HAL_UART_RECEIVE+0x2c>
    65ac:	55 c0       	rjmp	.+170    	; 0x6658 <HAL_UART_RECEIVE+0xd6>
			{
				if(Handler->Init.wordLen == UART_WordLen_9)
    65ae:	84 81       	ldd	r24, Z+4	; 0x04
    65b0:	86 31       	cpi	r24, 0x16	; 22
    65b2:	b1 f5       	brne	.+108    	; 0x6620 <HAL_UART_RECEIVE+0x9e>
				{
					*(((uint16_t *)Handler->RxBuffer)+iterator)  = (((uint16_t)UCSRB & 0x02)<<7) ;     // the ninth bit must be read first 
    65b4:	a2 85       	ldd	r26, Z+10	; 0x0a
    65b6:	b3 85       	ldd	r27, Z+11	; 0x0b
    65b8:	e9 01       	movw	r28, r18
    65ba:	cc 0f       	add	r28, r28
    65bc:	dd 1f       	adc	r29, r29
    65be:	ac 0f       	add	r26, r28
    65c0:	bd 1f       	adc	r27, r29
    65c2:	6a b1       	in	r22, 0x0a	; 10
    65c4:	62 70       	andi	r22, 0x02	; 2
    65c6:	70 e0       	ldi	r23, 0x00	; 0
    65c8:	76 95       	lsr	r23
    65ca:	76 2f       	mov	r23, r22
    65cc:	66 27       	eor	r22, r22
    65ce:	77 95       	ror	r23
    65d0:	67 95       	ror	r22
    65d2:	6d 93       	st	X+, r22
    65d4:	7c 93       	st	X, r23
					*(((uint16_t *)Handler->RxBuffer)+iterator) |= TempData ;
    65d6:	a2 85       	ldd	r26, Z+10	; 0x0a
    65d8:	b3 85       	ldd	r27, Z+11	; 0x0b
    65da:	ac 0f       	add	r26, r28
    65dc:	bd 1f       	adc	r27, r29
    65de:	6d 91       	ld	r22, X+
    65e0:	7c 91       	ld	r23, X
    65e2:	11 97       	sbiw	r26, 0x01	; 1
    65e4:	69 2b       	or	r22, r25
    65e6:	6d 93       	st	X+, r22
    65e8:	7c 93       	st	X, r23
					if((TempData == '\r')||(TempData == '\n'))
    65ea:	9d 30       	cpi	r25, 0x0D	; 13
    65ec:	19 f0       	breq	.+6      	; 0x65f4 <HAL_UART_RECEIVE+0x72>
    65ee:	9a 30       	cpi	r25, 0x0A	; 10
    65f0:	09 f0       	breq	.+2      	; 0x65f4 <HAL_UART_RECEIVE+0x72>
    65f2:	47 c0       	rjmp	.+142    	; 0x6682 <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
    65f4:	86 85       	ldd	r24, Z+14	; 0x0e
    65f6:	97 85       	ldd	r25, Z+15	; 0x0f
    65f8:	28 17       	cp	r18, r24
    65fa:	39 07       	cpc	r19, r25
    65fc:	38 f4       	brcc	.+14     	; 0x660c <HAL_UART_RECEIVE+0x8a>
						*(((uint16_t *)Handler->RxBuffer)+iterator) = '\0' ;
    65fe:	82 85       	ldd	r24, Z+10	; 0x0a
    6600:	93 85       	ldd	r25, Z+11	; 0x0b
    6602:	c8 0f       	add	r28, r24
    6604:	d9 1f       	adc	r29, r25
    6606:	19 82       	std	Y+1, r1	; 0x01
    6608:	18 82       	st	Y, r1
    660a:	3e c0       	rjmp	.+124    	; 0x6688 <HAL_UART_RECEIVE+0x106>
						else
						*(((uint16_t *)Handler->RxBuffer)+Size) = '\0' ;
    660c:	02 84       	ldd	r0, Z+10	; 0x0a
    660e:	f3 85       	ldd	r31, Z+11	; 0x0b
    6610:	e0 2d       	mov	r30, r0
    6612:	44 0f       	add	r20, r20
    6614:	55 1f       	adc	r21, r21
    6616:	e4 0f       	add	r30, r20
    6618:	f5 1f       	adc	r31, r21
    661a:	11 82       	std	Z+1, r1	; 0x01
    661c:	10 82       	st	Z, r1
    661e:	34 c0       	rjmp	.+104    	; 0x6688 <HAL_UART_RECEIVE+0x106>
						
						break ;
					}
				}else{
					Handler->RxBuffer[iterator] = TempData ;
    6620:	a2 85       	ldd	r26, Z+10	; 0x0a
    6622:	b3 85       	ldd	r27, Z+11	; 0x0b
    6624:	a2 0f       	add	r26, r18
    6626:	b3 1f       	adc	r27, r19
    6628:	9c 93       	st	X, r25
					if((TempData == '\r')||(TempData == '\n'))
    662a:	9d 30       	cpi	r25, 0x0D	; 13
    662c:	11 f0       	breq	.+4      	; 0x6632 <HAL_UART_RECEIVE+0xb0>
    662e:	9a 30       	cpi	r25, 0x0A	; 10
    6630:	41 f5       	brne	.+80     	; 0x6682 <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
    6632:	86 85       	ldd	r24, Z+14	; 0x0e
    6634:	97 85       	ldd	r25, Z+15	; 0x0f
    6636:	28 17       	cp	r18, r24
    6638:	39 07       	cpc	r19, r25
    663a:	38 f4       	brcc	.+14     	; 0x664a <HAL_UART_RECEIVE+0xc8>
						Handler->RxBuffer[iterator] = '\0' ;
    663c:	82 85       	ldd	r24, Z+10	; 0x0a
    663e:	93 85       	ldd	r25, Z+11	; 0x0b
    6640:	fc 01       	movw	r30, r24
    6642:	e2 0f       	add	r30, r18
    6644:	f3 1f       	adc	r31, r19
    6646:	10 82       	st	Z, r1
    6648:	1f c0       	rjmp	.+62     	; 0x6688 <HAL_UART_RECEIVE+0x106>
						else
						Handler->RxBuffer[Size] = '\0' ;
    664a:	82 85       	ldd	r24, Z+10	; 0x0a
    664c:	93 85       	ldd	r25, Z+11	; 0x0b
    664e:	fc 01       	movw	r30, r24
    6650:	e4 0f       	add	r30, r20
    6652:	f5 1f       	adc	r31, r21
    6654:	10 82       	st	Z, r1
    6656:	18 c0       	rjmp	.+48     	; 0x6688 <HAL_UART_RECEIVE+0x106>
						break;
					}
				}
			}else{
				
					if((TempData == '\r')||(TempData == '\n'))
    6658:	9d 30       	cpi	r25, 0x0D	; 13
    665a:	11 f0       	breq	.+4      	; 0x6660 <HAL_UART_RECEIVE+0xde>
    665c:	9a 30       	cpi	r25, 0x0A	; 10
    665e:	89 f4       	brne	.+34     	; 0x6682 <HAL_UART_RECEIVE+0x100>
					{
						if(iterator < Handler->RxSize )
    6660:	26 17       	cp	r18, r22
    6662:	37 07       	cpc	r19, r23
    6664:	38 f4       	brcc	.+14     	; 0x6674 <HAL_UART_RECEIVE+0xf2>
						Handler->RxBuffer[iterator] = '\0' ;
    6666:	82 85       	ldd	r24, Z+10	; 0x0a
    6668:	93 85       	ldd	r25, Z+11	; 0x0b
    666a:	fc 01       	movw	r30, r24
    666c:	e2 0f       	add	r30, r18
    666e:	f3 1f       	adc	r31, r19
    6670:	10 82       	st	Z, r1
    6672:	0a c0       	rjmp	.+20     	; 0x6688 <HAL_UART_RECEIVE+0x106>
						else
						Handler->RxBuffer[Size] = '\0' ;
    6674:	82 85       	ldd	r24, Z+10	; 0x0a
    6676:	93 85       	ldd	r25, Z+11	; 0x0b
    6678:	fc 01       	movw	r30, r24
    667a:	e4 0f       	add	r30, r20
    667c:	f5 1f       	adc	r31, r21
    667e:	10 82       	st	Z, r1
    6680:	03 c0       	rjmp	.+6      	; 0x6688 <HAL_UART_RECEIVE+0x106>
	Handler->TxSize =0 ;
	Handler->RxBuffer = RxBuffer ;
	Handler->RxSize = Size ;
	uint8_t TempData = 0 ;
	
	for (uint16_t iterator =0 ; ;iterator++)
    6682:	2f 5f       	subi	r18, 0xFF	; 255
    6684:	3f 4f       	sbci	r19, 0xFF	; 255
						Handler->RxBuffer[Size] = '\0' ;
										
						break;
					}
				}
		}
    6686:	8a cf       	rjmp	.-236    	; 0x659c <HAL_UART_RECEIVE+0x1a>
	
	
}/* END_FUN HAL_UART_RECEIVE() */
    6688:	df 91       	pop	r29
    668a:	cf 91       	pop	r28
    668c:	08 95       	ret

0000668e <PWM_Toggle_Timer2>:
	


return UTIL_OK ;

}
    668e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <Duty_TIM2>
    6692:	81 11       	cpse	r24, r1
    6694:	0a c0       	rjmp	.+20     	; 0x66aa <PWM_Toggle_Timer2+0x1c>
    6696:	40 e0       	ldi	r20, 0x00	; 0
    6698:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <PWMTim2_PIN>
    669c:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <PWMTim2_PORT>
    66a0:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <PWMTim2_PORT+0x1>
    66a4:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
    66a8:	08 95       	ret
    66aa:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <ON.1847>
    66ae:	81 11       	cpse	r24, r1
    66b0:	10 c0       	rjmp	.+32     	; 0x66d2 <PWM_Toggle_Timer2+0x44>
    66b2:	40 e0       	ldi	r20, 0x00	; 0
    66b4:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <PWMTim2_PIN>
    66b8:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <PWMTim2_PORT>
    66bc:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <PWMTim2_PORT+0x1>
    66c0:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
    66c4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <Duty_TIM2>
    66c8:	83 bd       	out	0x23, r24	; 35
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <ON.1847>
    66d0:	08 95       	ret
    66d2:	41 e0       	ldi	r20, 0x01	; 1
    66d4:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <PWMTim2_PIN>
    66d8:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <PWMTim2_PORT>
    66dc:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <PWMTim2_PORT+0x1>
    66e0:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
    66e4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <Duty_TIM2>
    66e8:	81 95       	neg	r24
    66ea:	83 bd       	out	0x23, r24	; 35
    66ec:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <ON.1847>
    66f0:	08 95       	ret

000066f2 <PWM_Toggle_Timer1>:
    66f2:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Duty_TIM1>
    66f6:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <Duty_TIM1+0x1>
    66fa:	89 2b       	or	r24, r25
    66fc:	61 f1       	breq	.+88     	; 0x6756 <PWM_Toggle_Timer1+0x64>
    66fe:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <ON.1851>
    6702:	81 11       	cpse	r24, r1
    6704:	13 c0       	rjmp	.+38     	; 0x672c <PWM_Toggle_Timer1+0x3a>
    6706:	40 e0       	ldi	r20, 0x00	; 0
    6708:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <PWMTim1_PIN>
    670c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <PWMTim1_PORT>
    6710:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <PWMTim1_PORT+0x1>
    6714:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
    6718:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <Duty_TIM1>
    671c:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <Duty_TIM1+0x1>
    6720:	9b bd       	out	0x2b, r25	; 43
    6722:	8a bd       	out	0x2a, r24	; 42
    6724:	81 e0       	ldi	r24, 0x01	; 1
    6726:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <ON.1851>
    672a:	08 95       	ret
    672c:	41 e0       	ldi	r20, 0x01	; 1
    672e:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <PWMTim1_PIN>
    6732:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <PWMTim1_PORT>
    6736:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <PWMTim1_PORT+0x1>
    673a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
    673e:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <Duty_TIM1>
    6742:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <Duty_TIM1+0x1>
    6746:	8f ef       	ldi	r24, 0xFF	; 255
    6748:	9f e0       	ldi	r25, 0x0F	; 15
    674a:	82 1b       	sub	r24, r18
    674c:	93 0b       	sbc	r25, r19
    674e:	9b bd       	out	0x2b, r25	; 43
    6750:	8a bd       	out	0x2a, r24	; 42
    6752:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <ON.1851>
    6756:	08 95       	ret

00006758 <PWM_Toggle_Timer0>:
    6758:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <Duty_TIM0>
    675c:	81 11       	cpse	r24, r1
    675e:	0a c0       	rjmp	.+20     	; 0x6774 <PWM_Toggle_Timer0+0x1c>
    6760:	40 e0       	ldi	r20, 0x00	; 0
    6762:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <PWMTim0_PIN>
    6766:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <PWMTim0_PORT>
    676a:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <PWMTim0_PORT+0x1>
    676e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
    6772:	08 95       	ret
    6774:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <ON.1843>
    6778:	81 11       	cpse	r24, r1
    677a:	10 c0       	rjmp	.+32     	; 0x679c <PWM_Toggle_Timer0+0x44>
    677c:	40 e0       	ldi	r20, 0x00	; 0
    677e:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <PWMTim0_PIN>
    6782:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <PWMTim0_PORT>
    6786:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <PWMTim0_PORT+0x1>
    678a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
    678e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <Duty_TIM0>
    6792:	8c bf       	out	0x3c, r24	; 60
    6794:	81 e0       	ldi	r24, 0x01	; 1
    6796:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <ON.1843>
    679a:	08 95       	ret
    679c:	41 e0       	ldi	r20, 0x01	; 1
    679e:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <PWMTim0_PIN>
    67a2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <PWMTim0_PORT>
    67a6:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <PWMTim0_PORT+0x1>
    67aa:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <HAL_GPIO_WRITEPIN>
    67ae:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <Duty_TIM0>
    67b2:	81 95       	neg	r24
    67b4:	8c bf       	out	0x3c, r24	; 60
    67b6:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <ON.1843>
    67ba:	08 95       	ret

000067bc <Software_PWM_Init>:
 * Param (input) : PIN_Num Pin number in selected port 
 * Param (input) : Tim_PWM_Handler {Pointer to timer configuration register 
 * Return : Utilies_Status_t typedef to Status 
 */
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
    67bc:	ff 92       	push	r15
    67be:	0f 93       	push	r16
    67c0:	1f 93       	push	r17
    67c2:	cf 93       	push	r28
    67c4:	df 93       	push	r29
	
	if(Tim_PWM_Handler == NULL)
    67c6:	41 15       	cp	r20, r1
    67c8:	51 05       	cpc	r21, r1
    67ca:	09 f4       	brne	.+2      	; 0x67ce <Software_PWM_Init+0x12>
    67cc:	5e c0       	rjmp	.+188    	; 0x688a <Software_PWM_Init+0xce>
    67ce:	ea 01       	movw	r28, r20
    67d0:	f6 2e       	mov	r15, r22
    67d2:	8c 01       	movw	r16, r24

	
	
	
	#if SOFTWARE_PWM_CTC_MODE
	Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
    67d4:	8f ef       	ldi	r24, 0xFF	; 255
    67d6:	9f e0       	ldi	r25, 0x0F	; 15
    67d8:	a8 e0       	ldi	r26, 0x08	; 8
    67da:	b0 e0       	ldi	r27, 0x00	; 0
    67dc:	88 83       	st	Y, r24
    67de:	99 83       	std	Y+1, r25	; 0x01
    67e0:	aa 83       	std	Y+2, r26	; 0x02
    67e2:	bb 83       	std	Y+3, r27	; 0x03
		Tim_PWM_Handler->TIMMode = TIM_MODE_CTC ;
	}else
	{
		;
	}
	TIM_PWMModeInit(Tim_PWM_Handler) ;
    67e4:	ca 01       	movw	r24, r20
    67e6:	0e 94 7f 31 	call	0x62fe	; 0x62fe <TIM_PWMModeInit>
	
	if (Tim_PWM_Handler->Instance  == TIM0)
    67ea:	98 85       	ldd	r25, Y+8	; 0x08
    67ec:	91 11       	cpse	r25, r1
    67ee:	1a c0       	rjmp	.+52     	; 0x6824 <Software_PWM_Init+0x68>
	{
		PWMTim0_PIN.mode = GPIO_MODE_OUTPUT ;
    67f0:	ea ee       	ldi	r30, 0xEA	; 234
    67f2:	f1 e0       	ldi	r31, 0x01	; 1
    67f4:	81 e0       	ldi	r24, 0x01	; 1
    67f6:	81 83       	std	Z+1, r24	; 0x01
		PWMTim0_PIN.pin = PIN_Num ;
    67f8:	f0 82       	st	Z, r15
		PWMTim0_PIN.pull = GPIO_NOPULL ;
    67fa:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim0_PIN );
    67fc:	bf 01       	movw	r22, r30
    67fe:	c8 01       	movw	r24, r16
    6800:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
		
		PWMTim0_PORT = PORT ;
    6804:	10 93 e3 01 	sts	0x01E3, r17	; 0x8001e3 <PWMTim0_PORT+0x1>
    6808:	00 93 e2 01 	sts	0x01E2, r16	; 0x8001e2 <PWMTim0_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
    680c:	6c ea       	ldi	r22, 0xAC	; 172
    680e:	73 e3       	ldi	r23, 0x33	; 51
    6810:	81 e0       	ldi	r24, 0x01	; 1
    6812:	0e 94 21 32 	call	0x6442	; 0x6442 <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);
    6816:	6c ea       	ldi	r22, 0xAC	; 172
    6818:	73 e3       	ldi	r23, 0x33	; 51
    681a:	89 85       	ldd	r24, Y+9	; 0x09
    681c:	0e 94 21 32 	call	0x6442	; 0x6442 <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    6820:	80 e0       	ldi	r24, 0x00	; 0
    6822:	36 c0       	rjmp	.+108    	; 0x6890 <Software_PWM_Init+0xd4>
		_TIM_IT_EN(TIM_0_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_0_IT_OVER , PWM_Toggle_Timer0); 
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer0);

	}else if (Tim_PWM_Handler->Instance == TIM1)
    6824:	91 30       	cpi	r25, 0x01	; 1
    6826:	a9 f4       	brne	.+42     	; 0x6852 <Software_PWM_Init+0x96>
	{	
		PWMTim1_PIN.mode = GPIO_MODE_OUTPUT ;
    6828:	e7 ee       	ldi	r30, 0xE7	; 231
    682a:	f1 e0       	ldi	r31, 0x01	; 1
    682c:	81 e0       	ldi	r24, 0x01	; 1
    682e:	81 83       	std	Z+1, r24	; 0x01
		PWMTim1_PIN.pin = PIN_Num ;
    6830:	f0 82       	st	Z, r15
		PWMTim1_PIN.pull = GPIO_NOPULL ;
    6832:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim1_PIN );
    6834:	bf 01       	movw	r22, r30
    6836:	c8 01       	movw	r24, r16
    6838:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
		PWMTim1_PORT = PORT ;
    683c:	10 93 e1 01 	sts	0x01E1, r17	; 0x8001e1 <PWMTim1_PORT+0x1>
    6840:	00 93 e0 01 	sts	0x01E0, r16	; 0x8001e0 <PWMTim1_PORT>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
    6844:	69 e7       	ldi	r22, 0x79	; 121
    6846:	73 e3       	ldi	r23, 0x33	; 51
    6848:	89 85       	ldd	r24, Y+9	; 0x09
    684a:	0e 94 21 32 	call	0x6442	; 0x6442 <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    684e:	80 e0       	ldi	r24, 0x00	; 0
    6850:	1f c0       	rjmp	.+62     	; 0x6890 <Software_PWM_Init+0xd4>
		PWMTim1_PIN.pin = PIN_Num ;
		PWMTim1_PIN.pull = GPIO_NOPULL ;
		HAL_GPIO_Pin_Init( PORT , &PWMTim1_PIN );
		PWMTim1_PORT = PORT ;
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer1);
	}else if(Tim_PWM_Handler->Instance == TIM2)
    6852:	92 30       	cpi	r25, 0x02	; 2
    6854:	e1 f4       	brne	.+56     	; 0x688e <Software_PWM_Init+0xd2>
	{	
		PWMTim2_PIN.mode = GPIO_MODE_OUTPUT ;
    6856:	e4 ee       	ldi	r30, 0xE4	; 228
    6858:	f1 e0       	ldi	r31, 0x01	; 1
    685a:	81 e0       	ldi	r24, 0x01	; 1
    685c:	81 83       	std	Z+1, r24	; 0x01
		PWMTim2_PIN.pin = PIN_Num ;
    685e:	f0 82       	st	Z, r15
		PWMTim2_PIN.pull = GPIO_NOPULL ;
    6860:	12 82       	std	Z+2, r1	; 0x02
		HAL_GPIO_Pin_Init( PORT , &PWMTim2_PIN );	
    6862:	bf 01       	movw	r22, r30
    6864:	c8 01       	movw	r24, r16
    6866:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <HAL_GPIO_Pin_Init>
		PWMTim2_PORT = PORT ;
    686a:	10 93 df 01 	sts	0x01DF, r17	; 0x8001df <PWMTim2_PORT+0x1>
    686e:	00 93 de 01 	sts	0x01DE, r16	; 0x8001de <PWMTim2_PORT>
		#if !SOFTWARE_PWM_CTC_MODE
		_TIM_IT_EN(TIM_2_IT_OVER);
		#endif
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
    6872:	67 e4       	ldi	r22, 0x47	; 71
    6874:	73 e3       	ldi	r23, 0x33	; 51
    6876:	80 e4       	ldi	r24, 0x40	; 64
    6878:	0e 94 21 32 	call	0x6442	; 0x6442 <TIM_CallBack_FuctionSet>
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
    687c:	67 e4       	ldi	r22, 0x47	; 71
    687e:	73 e3       	ldi	r23, 0x33	; 51
    6880:	89 85       	ldd	r24, Y+9	; 0x09
    6882:	0e 94 21 32 	call	0x6442	; 0x6442 <TIM_CallBack_FuctionSet>
	}
	
		
	
	
	return  UTIL_OK ; 
    6886:	80 e0       	ldi	r24, 0x00	; 0
    6888:	03 c0       	rjmp	.+6      	; 0x6890 <Software_PWM_Init+0xd4>
Utilies_Status_t Software_PWM_Init( StrGPIO_t PORT , uint8_t PIN_Num ,TIMInit_t * Tim_PWM_Handler )
{
	
	if(Tim_PWM_Handler == NULL)
	{
		return UTIL_PARAM_ERROR ;
    688a:	81 e0       	ldi	r24, 0x01	; 1
    688c:	01 c0       	rjmp	.+2      	; 0x6890 <Software_PWM_Init+0xd4>
		TIM_CallBack_FuctionSet(TIM_2_IT_OVER , PWM_Toggle_Timer2);
		TIM_CallBack_FuctionSet(Tim_PWM_Handler->TIM_Interrupt , PWM_Toggle_Timer2);
		
	}else
	{
		return UTIL_TIM_ERROR ;
    688e:	82 e0       	ldi	r24, 0x02	; 2
		
	
	
	return  UTIL_OK ; 
	
}
    6890:	df 91       	pop	r29
    6892:	cf 91       	pop	r28
    6894:	1f 91       	pop	r17
    6896:	0f 91       	pop	r16
    6898:	ff 90       	pop	r15
    689a:	08 95       	ret

0000689c <Software_PWM_Start>:


Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
    689c:	00 97       	sbiw	r24, 0x00	; 0
    689e:	21 f0       	breq	.+8      	; 0x68a8 <Software_PWM_Start+0xc>
	}else
	{
		;
	}
	
	TIM_Start(TIMConfig) ;
    68a0:	0e 94 37 31 	call	0x626e	; 0x626e <TIM_Start>
	return UTIL_OK ;
    68a4:	80 e0       	ldi	r24, 0x00	; 0
    68a6:	08 95       	ret
Utilies_Status_t Software_PWM_Start (TIMInit_t * TIMConfig )
{
	
	if(TIMConfig == NULL)
	{
		return UTIL_PARAM_ERROR ;
    68a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	TIM_Start(TIMConfig) ;
	return UTIL_OK ;

}
    68aa:	08 95       	ret

000068ac <Software_PWM_UpdateDuty>:
 * param (input): Tim_PWM_Handler pointer to selected timer configuration that contain Prescaller 
 * param (input): SetDuty desired Duty cycle From (0 t0 100 )
 * return : Utilies_Status_t status 
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
    68ac:	8f 92       	push	r8
    68ae:	9f 92       	push	r9
    68b0:	af 92       	push	r10
    68b2:	bf 92       	push	r11
    68b4:	cf 92       	push	r12
    68b6:	df 92       	push	r13
    68b8:	ef 92       	push	r14
    68ba:	ff 92       	push	r15
    68bc:	1f 93       	push	r17
    68be:	cf 93       	push	r28
    68c0:	df 93       	push	r29
		if (Tim_PWM_Handler == NULL)
    68c2:	61 15       	cp	r22, r1
    68c4:	71 05       	cpc	r23, r1
    68c6:	09 f4       	brne	.+2      	; 0x68ca <Software_PWM_UpdateDuty+0x1e>
    68c8:	71 c0       	rjmp	.+226    	; 0x69ac <Software_PWM_UpdateDuty+0x100>
    68ca:	eb 01       	movw	r28, r22
    68cc:	18 2f       	mov	r17, r24
		{
			return UTIL_PARAM_ERROR ;
			}else
			{
				 if(TIM_Stop(Tim_PWM_Handler->Instance) == TIM_OK)
    68ce:	88 85       	ldd	r24, Y+8	; 0x08
    68d0:	0e 94 62 31 	call	0x62c4	; 0x62c4 <TIM_Stop>
    68d4:	81 11       	cpse	r24, r1
    68d6:	6c c0       	rjmp	.+216    	; 0x69b0 <Software_PWM_UpdateDuty+0x104>
				 {
	
						if(TIM_PWMMode_SetDuty(Tim_PWM_Handler , SetDuty) == TIM_OK)
    68d8:	61 2f       	mov	r22, r17
    68da:	ce 01       	movw	r24, r28
    68dc:	0e 94 93 30 	call	0x6126	; 0x6126 <TIM_PWMMode_SetDuty>
    68e0:	81 11       	cpse	r24, r1
    68e2:	68 c0       	rjmp	.+208    	; 0x69b4 <Software_PWM_UpdateDuty+0x108>
						{
							if(TIM_Start(Tim_PWM_Handler) == TIM_OK)
    68e4:	ce 01       	movw	r24, r28
    68e6:	0e 94 37 31 	call	0x626e	; 0x626e <TIM_Start>
    68ea:	81 11       	cpse	r24, r1
    68ec:	65 c0       	rjmp	.+202    	; 0x69b8 <Software_PWM_UpdateDuty+0x10c>
			}
			
		
			
			
			if (Tim_PWM_Handler->Instance == TIM1)
    68ee:	88 85       	ldd	r24, Y+8	; 0x08
    68f0:	81 30       	cpi	r24, 0x01	; 1
    68f2:	41 f5       	brne	.+80     	; 0x6944 <Software_PWM_UpdateDuty+0x98>
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
    68f4:	88 81       	ld	r24, Y
    68f6:	99 81       	ldd	r25, Y+1	; 0x01
    68f8:	aa 81       	ldd	r26, Y+2	; 0x02
    68fa:	bb 81       	ldd	r27, Y+3	; 0x03
    68fc:	4c 01       	movw	r8, r24
    68fe:	5d 01       	movw	r10, r26
    6900:	2f e0       	ldi	r18, 0x0F	; 15
    6902:	92 22       	and	r9, r18
    6904:	aa 24       	eor	r10, r10
    6906:	bb 24       	eor	r11, r11
    6908:	61 2f       	mov	r22, r17
    690a:	70 e0       	ldi	r23, 0x00	; 0
    690c:	80 e0       	ldi	r24, 0x00	; 0
    690e:	90 e0       	ldi	r25, 0x00	; 0
    6910:	0e 94 8e 35 	call	0x6b1c	; 0x6b1c <__floatsisf>
    6914:	20 e0       	ldi	r18, 0x00	; 0
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	48 ec       	ldi	r20, 0xC8	; 200
    691a:	52 e4       	ldi	r21, 0x42	; 66
    691c:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__mulsf3>
    6920:	6b 01       	movw	r12, r22
    6922:	7c 01       	movw	r14, r24
    6924:	c5 01       	movw	r24, r10
    6926:	b4 01       	movw	r22, r8
    6928:	0e 94 8c 35 	call	0x6b18	; 0x6b18 <__floatunsisf>
    692c:	a7 01       	movw	r20, r14
    692e:	96 01       	movw	r18, r12
    6930:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <__divsf3>
    6934:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__fixunssfsi>
    6938:	70 93 db 01 	sts	0x01DB, r23	; 0x8001db <Duty_TIM1+0x1>
    693c:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <Duty_TIM1>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    6940:	80 e0       	ldi	r24, 0x00	; 0
    6942:	3d c0       	rjmp	.+122    	; 0x69be <Software_PWM_UpdateDuty+0x112>
			if (Tim_PWM_Handler->Instance == TIM1)
			{
					Duty_TIM1 =((Tim_PWM_Handler->TIMMode & 0xfff)/(100.0 * SetDuty ));
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
    6944:	81 11       	cpse	r24, r1
    6946:	18 c0       	rjmp	.+48     	; 0x6978 <Software_PWM_UpdateDuty+0xcc>
			{
				  Duty_TIM0 = (256*(SetDuty/100.0));
    6948:	61 2f       	mov	r22, r17
    694a:	70 e0       	ldi	r23, 0x00	; 0
    694c:	80 e0       	ldi	r24, 0x00	; 0
    694e:	90 e0       	ldi	r25, 0x00	; 0
    6950:	0e 94 8e 35 	call	0x6b1c	; 0x6b1c <__floatsisf>
    6954:	20 e0       	ldi	r18, 0x00	; 0
    6956:	30 e0       	ldi	r19, 0x00	; 0
    6958:	48 ec       	ldi	r20, 0xC8	; 200
    695a:	52 e4       	ldi	r21, 0x42	; 66
    695c:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <__divsf3>
    6960:	20 e0       	ldi	r18, 0x00	; 0
    6962:	30 e0       	ldi	r19, 0x00	; 0
    6964:	40 e8       	ldi	r20, 0x80	; 128
    6966:	53 e4       	ldi	r21, 0x43	; 67
    6968:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__mulsf3>
    696c:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__fixunssfsi>
    6970:	60 93 dd 01 	sts	0x01DD, r22	; 0x8001dd <Duty_TIM0>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    6974:	80 e0       	ldi	r24, 0x00	; 0
    6976:	23 c0       	rjmp	.+70     	; 0x69be <Software_PWM_UpdateDuty+0x112>
			}
			#if SOFTWARE_PWM_CTC_MODE
			else if (Tim_PWM_Handler->Instance == TIM0)
			{
				  Duty_TIM0 = (256*(SetDuty/100.0));
			}else if (Tim_PWM_Handler->Instance == TIM2)
    6978:	82 30       	cpi	r24, 0x02	; 2
    697a:	01 f5       	brne	.+64     	; 0x69bc <Software_PWM_UpdateDuty+0x110>
			{
				 Duty_TIM2 = (uint8_t)(256 * (SetDuty/100.0) );
    697c:	61 2f       	mov	r22, r17
    697e:	70 e0       	ldi	r23, 0x00	; 0
    6980:	80 e0       	ldi	r24, 0x00	; 0
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	0e 94 8e 35 	call	0x6b1c	; 0x6b1c <__floatsisf>
    6988:	20 e0       	ldi	r18, 0x00	; 0
    698a:	30 e0       	ldi	r19, 0x00	; 0
    698c:	48 ec       	ldi	r20, 0xC8	; 200
    698e:	52 e4       	ldi	r21, 0x42	; 66
    6990:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <__divsf3>
    6994:	20 e0       	ldi	r18, 0x00	; 0
    6996:	30 e0       	ldi	r19, 0x00	; 0
    6998:	40 e8       	ldi	r20, 0x80	; 128
    699a:	53 e4       	ldi	r21, 0x43	; 67
    699c:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__mulsf3>
    69a0:	0e 94 5d 35 	call	0x6aba	; 0x6aba <__fixunssfsi>
    69a4:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <Duty_TIM2>
				return UTIL_TIM_ERROR ;
			}
			#endif 
			
		
		return UTIL_OK ; 
    69a8:	80 e0       	ldi	r24, 0x00	; 0
    69aa:	09 c0       	rjmp	.+18     	; 0x69be <Software_PWM_UpdateDuty+0x112>
*/
Utilies_Status_t Software_PWM_UpdateDuty( uint8_t SetDuty  ,TIMInit_t * Tim_PWM_Handler )
{
		if (Tim_PWM_Handler == NULL)
		{
			return UTIL_PARAM_ERROR ;
    69ac:	81 e0       	ldi	r24, 0x01	; 1
    69ae:	07 c0       	rjmp	.+14     	; 0x69be <Software_PWM_UpdateDuty+0x112>
							return UTIL_TIM_ERROR ;
						}
					}
					else
					{
						return UTIL_TIM_ERROR ; 
    69b0:	82 e0       	ldi	r24, 0x02	; 2
    69b2:	05 c0       	rjmp	.+10     	; 0x69be <Software_PWM_UpdateDuty+0x112>
								return UTIL_TIM_ERROR ;
							}
						}
						else
						{
							return UTIL_TIM_ERROR ;
    69b4:	82 e0       	ldi	r24, 0x02	; 2
    69b6:	03 c0       	rjmp	.+6      	; 0x69be <Software_PWM_UpdateDuty+0x112>
							{
								;
							}
							else
							{
								return UTIL_TIM_ERROR ;
    69b8:	82 e0       	ldi	r24, 0x02	; 2
    69ba:	01 c0       	rjmp	.+2      	; 0x69be <Software_PWM_UpdateDuty+0x112>
			}else if (Tim_PWM_Handler->Instance == TIM2)
			{
				 Duty_TIM2 = (uint8_t)(256 * (SetDuty/100.0) );
			}else
			{
				return UTIL_TIM_ERROR ;
    69bc:	82 e0       	ldi	r24, 0x02	; 2
			}
			#endif 
			
		
		return UTIL_OK ; 
}
    69be:	df 91       	pop	r29
    69c0:	cf 91       	pop	r28
    69c2:	1f 91       	pop	r17
    69c4:	ff 90       	pop	r15
    69c6:	ef 90       	pop	r14
    69c8:	df 90       	pop	r13
    69ca:	cf 90       	pop	r12
    69cc:	bf 90       	pop	r11
    69ce:	af 90       	pop	r10
    69d0:	9f 90       	pop	r9
    69d2:	8f 90       	pop	r8
    69d4:	08 95       	ret

000069d6 <__divsf3>:
    69d6:	0e 94 ff 34 	call	0x69fe	; 0x69fe <__divsf3x>
    69da:	0c 94 e0 35 	jmp	0x6bc0	; 0x6bc0 <__fp_round>
    69de:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <__fp_pscB>
    69e2:	58 f0       	brcs	.+22     	; 0x69fa <__divsf3+0x24>
    69e4:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <__fp_pscA>
    69e8:	40 f0       	brcs	.+16     	; 0x69fa <__divsf3+0x24>
    69ea:	29 f4       	brne	.+10     	; 0x69f6 <__divsf3+0x20>
    69ec:	5f 3f       	cpi	r21, 0xFF	; 255
    69ee:	29 f0       	breq	.+10     	; 0x69fa <__divsf3+0x24>
    69f0:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__fp_inf>
    69f4:	51 11       	cpse	r21, r1
    69f6:	0c 94 14 36 	jmp	0x6c28	; 0x6c28 <__fp_szero>
    69fa:	0c 94 cf 35 	jmp	0x6b9e	; 0x6b9e <__fp_nan>

000069fe <__divsf3x>:
    69fe:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__fp_split3>
    6a02:	68 f3       	brcs	.-38     	; 0x69de <__divsf3+0x8>

00006a04 <__divsf3_pse>:
    6a04:	99 23       	and	r25, r25
    6a06:	b1 f3       	breq	.-20     	; 0x69f4 <__divsf3+0x1e>
    6a08:	55 23       	and	r21, r21
    6a0a:	91 f3       	breq	.-28     	; 0x69f0 <__divsf3+0x1a>
    6a0c:	95 1b       	sub	r25, r21
    6a0e:	55 0b       	sbc	r21, r21
    6a10:	bb 27       	eor	r27, r27
    6a12:	aa 27       	eor	r26, r26
    6a14:	62 17       	cp	r22, r18
    6a16:	73 07       	cpc	r23, r19
    6a18:	84 07       	cpc	r24, r20
    6a1a:	38 f0       	brcs	.+14     	; 0x6a2a <__divsf3_pse+0x26>
    6a1c:	9f 5f       	subi	r25, 0xFF	; 255
    6a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    6a20:	22 0f       	add	r18, r18
    6a22:	33 1f       	adc	r19, r19
    6a24:	44 1f       	adc	r20, r20
    6a26:	aa 1f       	adc	r26, r26
    6a28:	a9 f3       	breq	.-22     	; 0x6a14 <__divsf3_pse+0x10>
    6a2a:	35 d0       	rcall	.+106    	; 0x6a96 <__divsf3_pse+0x92>
    6a2c:	0e 2e       	mov	r0, r30
    6a2e:	3a f0       	brmi	.+14     	; 0x6a3e <__divsf3_pse+0x3a>
    6a30:	e0 e8       	ldi	r30, 0x80	; 128
    6a32:	32 d0       	rcall	.+100    	; 0x6a98 <__divsf3_pse+0x94>
    6a34:	91 50       	subi	r25, 0x01	; 1
    6a36:	50 40       	sbci	r21, 0x00	; 0
    6a38:	e6 95       	lsr	r30
    6a3a:	00 1c       	adc	r0, r0
    6a3c:	ca f7       	brpl	.-14     	; 0x6a30 <__divsf3_pse+0x2c>
    6a3e:	2b d0       	rcall	.+86     	; 0x6a96 <__divsf3_pse+0x92>
    6a40:	fe 2f       	mov	r31, r30
    6a42:	29 d0       	rcall	.+82     	; 0x6a96 <__divsf3_pse+0x92>
    6a44:	66 0f       	add	r22, r22
    6a46:	77 1f       	adc	r23, r23
    6a48:	88 1f       	adc	r24, r24
    6a4a:	bb 1f       	adc	r27, r27
    6a4c:	26 17       	cp	r18, r22
    6a4e:	37 07       	cpc	r19, r23
    6a50:	48 07       	cpc	r20, r24
    6a52:	ab 07       	cpc	r26, r27
    6a54:	b0 e8       	ldi	r27, 0x80	; 128
    6a56:	09 f0       	breq	.+2      	; 0x6a5a <__divsf3_pse+0x56>
    6a58:	bb 0b       	sbc	r27, r27
    6a5a:	80 2d       	mov	r24, r0
    6a5c:	bf 01       	movw	r22, r30
    6a5e:	ff 27       	eor	r31, r31
    6a60:	93 58       	subi	r25, 0x83	; 131
    6a62:	5f 4f       	sbci	r21, 0xFF	; 255
    6a64:	3a f0       	brmi	.+14     	; 0x6a74 <__divsf3_pse+0x70>
    6a66:	9e 3f       	cpi	r25, 0xFE	; 254
    6a68:	51 05       	cpc	r21, r1
    6a6a:	78 f0       	brcs	.+30     	; 0x6a8a <__divsf3_pse+0x86>
    6a6c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__fp_inf>
    6a70:	0c 94 14 36 	jmp	0x6c28	; 0x6c28 <__fp_szero>
    6a74:	5f 3f       	cpi	r21, 0xFF	; 255
    6a76:	e4 f3       	brlt	.-8      	; 0x6a70 <__divsf3_pse+0x6c>
    6a78:	98 3e       	cpi	r25, 0xE8	; 232
    6a7a:	d4 f3       	brlt	.-12     	; 0x6a70 <__divsf3_pse+0x6c>
    6a7c:	86 95       	lsr	r24
    6a7e:	77 95       	ror	r23
    6a80:	67 95       	ror	r22
    6a82:	b7 95       	ror	r27
    6a84:	f7 95       	ror	r31
    6a86:	9f 5f       	subi	r25, 0xFF	; 255
    6a88:	c9 f7       	brne	.-14     	; 0x6a7c <__divsf3_pse+0x78>
    6a8a:	88 0f       	add	r24, r24
    6a8c:	91 1d       	adc	r25, r1
    6a8e:	96 95       	lsr	r25
    6a90:	87 95       	ror	r24
    6a92:	97 f9       	bld	r25, 7
    6a94:	08 95       	ret
    6a96:	e1 e0       	ldi	r30, 0x01	; 1
    6a98:	66 0f       	add	r22, r22
    6a9a:	77 1f       	adc	r23, r23
    6a9c:	88 1f       	adc	r24, r24
    6a9e:	bb 1f       	adc	r27, r27
    6aa0:	62 17       	cp	r22, r18
    6aa2:	73 07       	cpc	r23, r19
    6aa4:	84 07       	cpc	r24, r20
    6aa6:	ba 07       	cpc	r27, r26
    6aa8:	20 f0       	brcs	.+8      	; 0x6ab2 <__divsf3_pse+0xae>
    6aaa:	62 1b       	sub	r22, r18
    6aac:	73 0b       	sbc	r23, r19
    6aae:	84 0b       	sbc	r24, r20
    6ab0:	ba 0b       	sbc	r27, r26
    6ab2:	ee 1f       	adc	r30, r30
    6ab4:	88 f7       	brcc	.-30     	; 0x6a98 <__divsf3_pse+0x94>
    6ab6:	e0 95       	com	r30
    6ab8:	08 95       	ret

00006aba <__fixunssfsi>:
    6aba:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <__fp_splitA>
    6abe:	88 f0       	brcs	.+34     	; 0x6ae2 <__fixunssfsi+0x28>
    6ac0:	9f 57       	subi	r25, 0x7F	; 127
    6ac2:	98 f0       	brcs	.+38     	; 0x6aea <__fixunssfsi+0x30>
    6ac4:	b9 2f       	mov	r27, r25
    6ac6:	99 27       	eor	r25, r25
    6ac8:	b7 51       	subi	r27, 0x17	; 23
    6aca:	b0 f0       	brcs	.+44     	; 0x6af8 <__fixunssfsi+0x3e>
    6acc:	e1 f0       	breq	.+56     	; 0x6b06 <__fixunssfsi+0x4c>
    6ace:	66 0f       	add	r22, r22
    6ad0:	77 1f       	adc	r23, r23
    6ad2:	88 1f       	adc	r24, r24
    6ad4:	99 1f       	adc	r25, r25
    6ad6:	1a f0       	brmi	.+6      	; 0x6ade <__fixunssfsi+0x24>
    6ad8:	ba 95       	dec	r27
    6ada:	c9 f7       	brne	.-14     	; 0x6ace <__fixunssfsi+0x14>
    6adc:	14 c0       	rjmp	.+40     	; 0x6b06 <__fixunssfsi+0x4c>
    6ade:	b1 30       	cpi	r27, 0x01	; 1
    6ae0:	91 f0       	breq	.+36     	; 0x6b06 <__fixunssfsi+0x4c>
    6ae2:	0e 94 13 36 	call	0x6c26	; 0x6c26 <__fp_zero>
    6ae6:	b1 e0       	ldi	r27, 0x01	; 1
    6ae8:	08 95       	ret
    6aea:	0c 94 13 36 	jmp	0x6c26	; 0x6c26 <__fp_zero>
    6aee:	67 2f       	mov	r22, r23
    6af0:	78 2f       	mov	r23, r24
    6af2:	88 27       	eor	r24, r24
    6af4:	b8 5f       	subi	r27, 0xF8	; 248
    6af6:	39 f0       	breq	.+14     	; 0x6b06 <__fixunssfsi+0x4c>
    6af8:	b9 3f       	cpi	r27, 0xF9	; 249
    6afa:	cc f3       	brlt	.-14     	; 0x6aee <__fixunssfsi+0x34>
    6afc:	86 95       	lsr	r24
    6afe:	77 95       	ror	r23
    6b00:	67 95       	ror	r22
    6b02:	b3 95       	inc	r27
    6b04:	d9 f7       	brne	.-10     	; 0x6afc <__fixunssfsi+0x42>
    6b06:	3e f4       	brtc	.+14     	; 0x6b16 <__fixunssfsi+0x5c>
    6b08:	90 95       	com	r25
    6b0a:	80 95       	com	r24
    6b0c:	70 95       	com	r23
    6b0e:	61 95       	neg	r22
    6b10:	7f 4f       	sbci	r23, 0xFF	; 255
    6b12:	8f 4f       	sbci	r24, 0xFF	; 255
    6b14:	9f 4f       	sbci	r25, 0xFF	; 255
    6b16:	08 95       	ret

00006b18 <__floatunsisf>:
    6b18:	e8 94       	clt
    6b1a:	09 c0       	rjmp	.+18     	; 0x6b2e <__floatsisf+0x12>

00006b1c <__floatsisf>:
    6b1c:	97 fb       	bst	r25, 7
    6b1e:	3e f4       	brtc	.+14     	; 0x6b2e <__floatsisf+0x12>
    6b20:	90 95       	com	r25
    6b22:	80 95       	com	r24
    6b24:	70 95       	com	r23
    6b26:	61 95       	neg	r22
    6b28:	7f 4f       	sbci	r23, 0xFF	; 255
    6b2a:	8f 4f       	sbci	r24, 0xFF	; 255
    6b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b2e:	99 23       	and	r25, r25
    6b30:	a9 f0       	breq	.+42     	; 0x6b5c <__floatsisf+0x40>
    6b32:	f9 2f       	mov	r31, r25
    6b34:	96 e9       	ldi	r25, 0x96	; 150
    6b36:	bb 27       	eor	r27, r27
    6b38:	93 95       	inc	r25
    6b3a:	f6 95       	lsr	r31
    6b3c:	87 95       	ror	r24
    6b3e:	77 95       	ror	r23
    6b40:	67 95       	ror	r22
    6b42:	b7 95       	ror	r27
    6b44:	f1 11       	cpse	r31, r1
    6b46:	f8 cf       	rjmp	.-16     	; 0x6b38 <__floatsisf+0x1c>
    6b48:	fa f4       	brpl	.+62     	; 0x6b88 <__floatsisf+0x6c>
    6b4a:	bb 0f       	add	r27, r27
    6b4c:	11 f4       	brne	.+4      	; 0x6b52 <__floatsisf+0x36>
    6b4e:	60 ff       	sbrs	r22, 0
    6b50:	1b c0       	rjmp	.+54     	; 0x6b88 <__floatsisf+0x6c>
    6b52:	6f 5f       	subi	r22, 0xFF	; 255
    6b54:	7f 4f       	sbci	r23, 0xFF	; 255
    6b56:	8f 4f       	sbci	r24, 0xFF	; 255
    6b58:	9f 4f       	sbci	r25, 0xFF	; 255
    6b5a:	16 c0       	rjmp	.+44     	; 0x6b88 <__floatsisf+0x6c>
    6b5c:	88 23       	and	r24, r24
    6b5e:	11 f0       	breq	.+4      	; 0x6b64 <__floatsisf+0x48>
    6b60:	96 e9       	ldi	r25, 0x96	; 150
    6b62:	11 c0       	rjmp	.+34     	; 0x6b86 <__floatsisf+0x6a>
    6b64:	77 23       	and	r23, r23
    6b66:	21 f0       	breq	.+8      	; 0x6b70 <__floatsisf+0x54>
    6b68:	9e e8       	ldi	r25, 0x8E	; 142
    6b6a:	87 2f       	mov	r24, r23
    6b6c:	76 2f       	mov	r23, r22
    6b6e:	05 c0       	rjmp	.+10     	; 0x6b7a <__floatsisf+0x5e>
    6b70:	66 23       	and	r22, r22
    6b72:	71 f0       	breq	.+28     	; 0x6b90 <__floatsisf+0x74>
    6b74:	96 e8       	ldi	r25, 0x86	; 134
    6b76:	86 2f       	mov	r24, r22
    6b78:	70 e0       	ldi	r23, 0x00	; 0
    6b7a:	60 e0       	ldi	r22, 0x00	; 0
    6b7c:	2a f0       	brmi	.+10     	; 0x6b88 <__floatsisf+0x6c>
    6b7e:	9a 95       	dec	r25
    6b80:	66 0f       	add	r22, r22
    6b82:	77 1f       	adc	r23, r23
    6b84:	88 1f       	adc	r24, r24
    6b86:	da f7       	brpl	.-10     	; 0x6b7e <__floatsisf+0x62>
    6b88:	88 0f       	add	r24, r24
    6b8a:	96 95       	lsr	r25
    6b8c:	87 95       	ror	r24
    6b8e:	97 f9       	bld	r25, 7
    6b90:	08 95       	ret

00006b92 <__fp_inf>:
    6b92:	97 f9       	bld	r25, 7
    6b94:	9f 67       	ori	r25, 0x7F	; 127
    6b96:	80 e8       	ldi	r24, 0x80	; 128
    6b98:	70 e0       	ldi	r23, 0x00	; 0
    6b9a:	60 e0       	ldi	r22, 0x00	; 0
    6b9c:	08 95       	ret

00006b9e <__fp_nan>:
    6b9e:	9f ef       	ldi	r25, 0xFF	; 255
    6ba0:	80 ec       	ldi	r24, 0xC0	; 192
    6ba2:	08 95       	ret

00006ba4 <__fp_pscA>:
    6ba4:	00 24       	eor	r0, r0
    6ba6:	0a 94       	dec	r0
    6ba8:	16 16       	cp	r1, r22
    6baa:	17 06       	cpc	r1, r23
    6bac:	18 06       	cpc	r1, r24
    6bae:	09 06       	cpc	r0, r25
    6bb0:	08 95       	ret

00006bb2 <__fp_pscB>:
    6bb2:	00 24       	eor	r0, r0
    6bb4:	0a 94       	dec	r0
    6bb6:	12 16       	cp	r1, r18
    6bb8:	13 06       	cpc	r1, r19
    6bba:	14 06       	cpc	r1, r20
    6bbc:	05 06       	cpc	r0, r21
    6bbe:	08 95       	ret

00006bc0 <__fp_round>:
    6bc0:	09 2e       	mov	r0, r25
    6bc2:	03 94       	inc	r0
    6bc4:	00 0c       	add	r0, r0
    6bc6:	11 f4       	brne	.+4      	; 0x6bcc <__fp_round+0xc>
    6bc8:	88 23       	and	r24, r24
    6bca:	52 f0       	brmi	.+20     	; 0x6be0 <__fp_round+0x20>
    6bcc:	bb 0f       	add	r27, r27
    6bce:	40 f4       	brcc	.+16     	; 0x6be0 <__fp_round+0x20>
    6bd0:	bf 2b       	or	r27, r31
    6bd2:	11 f4       	brne	.+4      	; 0x6bd8 <__fp_round+0x18>
    6bd4:	60 ff       	sbrs	r22, 0
    6bd6:	04 c0       	rjmp	.+8      	; 0x6be0 <__fp_round+0x20>
    6bd8:	6f 5f       	subi	r22, 0xFF	; 255
    6bda:	7f 4f       	sbci	r23, 0xFF	; 255
    6bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    6bde:	9f 4f       	sbci	r25, 0xFF	; 255
    6be0:	08 95       	ret

00006be2 <__fp_split3>:
    6be2:	57 fd       	sbrc	r21, 7
    6be4:	90 58       	subi	r25, 0x80	; 128
    6be6:	44 0f       	add	r20, r20
    6be8:	55 1f       	adc	r21, r21
    6bea:	59 f0       	breq	.+22     	; 0x6c02 <__fp_splitA+0x10>
    6bec:	5f 3f       	cpi	r21, 0xFF	; 255
    6bee:	71 f0       	breq	.+28     	; 0x6c0c <__fp_splitA+0x1a>
    6bf0:	47 95       	ror	r20

00006bf2 <__fp_splitA>:
    6bf2:	88 0f       	add	r24, r24
    6bf4:	97 fb       	bst	r25, 7
    6bf6:	99 1f       	adc	r25, r25
    6bf8:	61 f0       	breq	.+24     	; 0x6c12 <__fp_splitA+0x20>
    6bfa:	9f 3f       	cpi	r25, 0xFF	; 255
    6bfc:	79 f0       	breq	.+30     	; 0x6c1c <__fp_splitA+0x2a>
    6bfe:	87 95       	ror	r24
    6c00:	08 95       	ret
    6c02:	12 16       	cp	r1, r18
    6c04:	13 06       	cpc	r1, r19
    6c06:	14 06       	cpc	r1, r20
    6c08:	55 1f       	adc	r21, r21
    6c0a:	f2 cf       	rjmp	.-28     	; 0x6bf0 <__fp_split3+0xe>
    6c0c:	46 95       	lsr	r20
    6c0e:	f1 df       	rcall	.-30     	; 0x6bf2 <__fp_splitA>
    6c10:	08 c0       	rjmp	.+16     	; 0x6c22 <__fp_splitA+0x30>
    6c12:	16 16       	cp	r1, r22
    6c14:	17 06       	cpc	r1, r23
    6c16:	18 06       	cpc	r1, r24
    6c18:	99 1f       	adc	r25, r25
    6c1a:	f1 cf       	rjmp	.-30     	; 0x6bfe <__fp_splitA+0xc>
    6c1c:	86 95       	lsr	r24
    6c1e:	71 05       	cpc	r23, r1
    6c20:	61 05       	cpc	r22, r1
    6c22:	08 94       	sec
    6c24:	08 95       	ret

00006c26 <__fp_zero>:
    6c26:	e8 94       	clt

00006c28 <__fp_szero>:
    6c28:	bb 27       	eor	r27, r27
    6c2a:	66 27       	eor	r22, r22
    6c2c:	77 27       	eor	r23, r23
    6c2e:	cb 01       	movw	r24, r22
    6c30:	97 f9       	bld	r25, 7
    6c32:	08 95       	ret

00006c34 <__mulsf3>:
    6c34:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <__mulsf3x>
    6c38:	0c 94 e0 35 	jmp	0x6bc0	; 0x6bc0 <__fp_round>
    6c3c:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <__fp_pscA>
    6c40:	38 f0       	brcs	.+14     	; 0x6c50 <__mulsf3+0x1c>
    6c42:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <__fp_pscB>
    6c46:	20 f0       	brcs	.+8      	; 0x6c50 <__mulsf3+0x1c>
    6c48:	95 23       	and	r25, r21
    6c4a:	11 f0       	breq	.+4      	; 0x6c50 <__mulsf3+0x1c>
    6c4c:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__fp_inf>
    6c50:	0c 94 cf 35 	jmp	0x6b9e	; 0x6b9e <__fp_nan>
    6c54:	11 24       	eor	r1, r1
    6c56:	0c 94 14 36 	jmp	0x6c28	; 0x6c28 <__fp_szero>

00006c5a <__mulsf3x>:
    6c5a:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__fp_split3>
    6c5e:	70 f3       	brcs	.-36     	; 0x6c3c <__mulsf3+0x8>

00006c60 <__mulsf3_pse>:
    6c60:	95 9f       	mul	r25, r21
    6c62:	c1 f3       	breq	.-16     	; 0x6c54 <__mulsf3+0x20>
    6c64:	95 0f       	add	r25, r21
    6c66:	50 e0       	ldi	r21, 0x00	; 0
    6c68:	55 1f       	adc	r21, r21
    6c6a:	62 9f       	mul	r22, r18
    6c6c:	f0 01       	movw	r30, r0
    6c6e:	72 9f       	mul	r23, r18
    6c70:	bb 27       	eor	r27, r27
    6c72:	f0 0d       	add	r31, r0
    6c74:	b1 1d       	adc	r27, r1
    6c76:	63 9f       	mul	r22, r19
    6c78:	aa 27       	eor	r26, r26
    6c7a:	f0 0d       	add	r31, r0
    6c7c:	b1 1d       	adc	r27, r1
    6c7e:	aa 1f       	adc	r26, r26
    6c80:	64 9f       	mul	r22, r20
    6c82:	66 27       	eor	r22, r22
    6c84:	b0 0d       	add	r27, r0
    6c86:	a1 1d       	adc	r26, r1
    6c88:	66 1f       	adc	r22, r22
    6c8a:	82 9f       	mul	r24, r18
    6c8c:	22 27       	eor	r18, r18
    6c8e:	b0 0d       	add	r27, r0
    6c90:	a1 1d       	adc	r26, r1
    6c92:	62 1f       	adc	r22, r18
    6c94:	73 9f       	mul	r23, r19
    6c96:	b0 0d       	add	r27, r0
    6c98:	a1 1d       	adc	r26, r1
    6c9a:	62 1f       	adc	r22, r18
    6c9c:	83 9f       	mul	r24, r19
    6c9e:	a0 0d       	add	r26, r0
    6ca0:	61 1d       	adc	r22, r1
    6ca2:	22 1f       	adc	r18, r18
    6ca4:	74 9f       	mul	r23, r20
    6ca6:	33 27       	eor	r19, r19
    6ca8:	a0 0d       	add	r26, r0
    6caa:	61 1d       	adc	r22, r1
    6cac:	23 1f       	adc	r18, r19
    6cae:	84 9f       	mul	r24, r20
    6cb0:	60 0d       	add	r22, r0
    6cb2:	21 1d       	adc	r18, r1
    6cb4:	82 2f       	mov	r24, r18
    6cb6:	76 2f       	mov	r23, r22
    6cb8:	6a 2f       	mov	r22, r26
    6cba:	11 24       	eor	r1, r1
    6cbc:	9f 57       	subi	r25, 0x7F	; 127
    6cbe:	50 40       	sbci	r21, 0x00	; 0
    6cc0:	9a f0       	brmi	.+38     	; 0x6ce8 <__mulsf3_pse+0x88>
    6cc2:	f1 f0       	breq	.+60     	; 0x6d00 <__mulsf3_pse+0xa0>
    6cc4:	88 23       	and	r24, r24
    6cc6:	4a f0       	brmi	.+18     	; 0x6cda <__mulsf3_pse+0x7a>
    6cc8:	ee 0f       	add	r30, r30
    6cca:	ff 1f       	adc	r31, r31
    6ccc:	bb 1f       	adc	r27, r27
    6cce:	66 1f       	adc	r22, r22
    6cd0:	77 1f       	adc	r23, r23
    6cd2:	88 1f       	adc	r24, r24
    6cd4:	91 50       	subi	r25, 0x01	; 1
    6cd6:	50 40       	sbci	r21, 0x00	; 0
    6cd8:	a9 f7       	brne	.-22     	; 0x6cc4 <__mulsf3_pse+0x64>
    6cda:	9e 3f       	cpi	r25, 0xFE	; 254
    6cdc:	51 05       	cpc	r21, r1
    6cde:	80 f0       	brcs	.+32     	; 0x6d00 <__mulsf3_pse+0xa0>
    6ce0:	0c 94 c9 35 	jmp	0x6b92	; 0x6b92 <__fp_inf>
    6ce4:	0c 94 14 36 	jmp	0x6c28	; 0x6c28 <__fp_szero>
    6ce8:	5f 3f       	cpi	r21, 0xFF	; 255
    6cea:	e4 f3       	brlt	.-8      	; 0x6ce4 <__mulsf3_pse+0x84>
    6cec:	98 3e       	cpi	r25, 0xE8	; 232
    6cee:	d4 f3       	brlt	.-12     	; 0x6ce4 <__mulsf3_pse+0x84>
    6cf0:	86 95       	lsr	r24
    6cf2:	77 95       	ror	r23
    6cf4:	67 95       	ror	r22
    6cf6:	b7 95       	ror	r27
    6cf8:	f7 95       	ror	r31
    6cfa:	e7 95       	ror	r30
    6cfc:	9f 5f       	subi	r25, 0xFF	; 255
    6cfe:	c1 f7       	brne	.-16     	; 0x6cf0 <__mulsf3_pse+0x90>
    6d00:	fe 2b       	or	r31, r30
    6d02:	88 0f       	add	r24, r24
    6d04:	91 1d       	adc	r25, r1
    6d06:	96 95       	lsr	r25
    6d08:	87 95       	ror	r24
    6d0a:	97 f9       	bld	r25, 7
    6d0c:	08 95       	ret

00006d0e <__divmodhi4>:
    6d0e:	97 fb       	bst	r25, 7
    6d10:	07 2e       	mov	r0, r23
    6d12:	16 f4       	brtc	.+4      	; 0x6d18 <__divmodhi4+0xa>
    6d14:	00 94       	com	r0
    6d16:	07 d0       	rcall	.+14     	; 0x6d26 <__divmodhi4_neg1>
    6d18:	77 fd       	sbrc	r23, 7
    6d1a:	09 d0       	rcall	.+18     	; 0x6d2e <__divmodhi4_neg2>
    6d1c:	0e 94 f8 36 	call	0x6df0	; 0x6df0 <__udivmodhi4>
    6d20:	07 fc       	sbrc	r0, 7
    6d22:	05 d0       	rcall	.+10     	; 0x6d2e <__divmodhi4_neg2>
    6d24:	3e f4       	brtc	.+14     	; 0x6d34 <__divmodhi4_exit>

00006d26 <__divmodhi4_neg1>:
    6d26:	90 95       	com	r25
    6d28:	81 95       	neg	r24
    6d2a:	9f 4f       	sbci	r25, 0xFF	; 255
    6d2c:	08 95       	ret

00006d2e <__divmodhi4_neg2>:
    6d2e:	70 95       	com	r23
    6d30:	61 95       	neg	r22
    6d32:	7f 4f       	sbci	r23, 0xFF	; 255

00006d34 <__divmodhi4_exit>:
    6d34:	08 95       	ret

00006d36 <__udivmodsi4>:
    6d36:	a1 e2       	ldi	r26, 0x21	; 33
    6d38:	1a 2e       	mov	r1, r26
    6d3a:	aa 1b       	sub	r26, r26
    6d3c:	bb 1b       	sub	r27, r27
    6d3e:	fd 01       	movw	r30, r26
    6d40:	0d c0       	rjmp	.+26     	; 0x6d5c <__udivmodsi4_ep>

00006d42 <__udivmodsi4_loop>:
    6d42:	aa 1f       	adc	r26, r26
    6d44:	bb 1f       	adc	r27, r27
    6d46:	ee 1f       	adc	r30, r30
    6d48:	ff 1f       	adc	r31, r31
    6d4a:	a2 17       	cp	r26, r18
    6d4c:	b3 07       	cpc	r27, r19
    6d4e:	e4 07       	cpc	r30, r20
    6d50:	f5 07       	cpc	r31, r21
    6d52:	20 f0       	brcs	.+8      	; 0x6d5c <__udivmodsi4_ep>
    6d54:	a2 1b       	sub	r26, r18
    6d56:	b3 0b       	sbc	r27, r19
    6d58:	e4 0b       	sbc	r30, r20
    6d5a:	f5 0b       	sbc	r31, r21

00006d5c <__udivmodsi4_ep>:
    6d5c:	66 1f       	adc	r22, r22
    6d5e:	77 1f       	adc	r23, r23
    6d60:	88 1f       	adc	r24, r24
    6d62:	99 1f       	adc	r25, r25
    6d64:	1a 94       	dec	r1
    6d66:	69 f7       	brne	.-38     	; 0x6d42 <__udivmodsi4_loop>
    6d68:	60 95       	com	r22
    6d6a:	70 95       	com	r23
    6d6c:	80 95       	com	r24
    6d6e:	90 95       	com	r25
    6d70:	9b 01       	movw	r18, r22
    6d72:	ac 01       	movw	r20, r24
    6d74:	bd 01       	movw	r22, r26
    6d76:	cf 01       	movw	r24, r30
    6d78:	08 95       	ret

00006d7a <__tablejump2__>:
    6d7a:	ee 0f       	add	r30, r30
    6d7c:	ff 1f       	adc	r31, r31
    6d7e:	05 90       	lpm	r0, Z+
    6d80:	f4 91       	lpm	r31, Z
    6d82:	e0 2d       	mov	r30, r0
    6d84:	09 94       	ijmp

00006d86 <__muluhisi3>:
    6d86:	0e 94 0c 37 	call	0x6e18	; 0x6e18 <__umulhisi3>
    6d8a:	a5 9f       	mul	r26, r21
    6d8c:	90 0d       	add	r25, r0
    6d8e:	b4 9f       	mul	r27, r20
    6d90:	90 0d       	add	r25, r0
    6d92:	a4 9f       	mul	r26, r20
    6d94:	80 0d       	add	r24, r0
    6d96:	91 1d       	adc	r25, r1
    6d98:	11 24       	eor	r1, r1
    6d9a:	08 95       	ret

00006d9c <__ashrdi3>:
    6d9c:	97 fb       	bst	r25, 7
    6d9e:	10 f8       	bld	r1, 0

00006da0 <__lshrdi3>:
    6da0:	16 94       	lsr	r1
    6da2:	00 08       	sbc	r0, r0
    6da4:	0f 93       	push	r16
    6da6:	08 30       	cpi	r16, 0x08	; 8
    6da8:	98 f0       	brcs	.+38     	; 0x6dd0 <__lshrdi3+0x30>
    6daa:	08 50       	subi	r16, 0x08	; 8
    6dac:	23 2f       	mov	r18, r19
    6dae:	34 2f       	mov	r19, r20
    6db0:	45 2f       	mov	r20, r21
    6db2:	56 2f       	mov	r21, r22
    6db4:	67 2f       	mov	r22, r23
    6db6:	78 2f       	mov	r23, r24
    6db8:	89 2f       	mov	r24, r25
    6dba:	90 2d       	mov	r25, r0
    6dbc:	f4 cf       	rjmp	.-24     	; 0x6da6 <__lshrdi3+0x6>
    6dbe:	05 94       	asr	r0
    6dc0:	97 95       	ror	r25
    6dc2:	87 95       	ror	r24
    6dc4:	77 95       	ror	r23
    6dc6:	67 95       	ror	r22
    6dc8:	57 95       	ror	r21
    6dca:	47 95       	ror	r20
    6dcc:	37 95       	ror	r19
    6dce:	27 95       	ror	r18
    6dd0:	0a 95       	dec	r16
    6dd2:	aa f7       	brpl	.-22     	; 0x6dbe <__lshrdi3+0x1e>
    6dd4:	0f 91       	pop	r16
    6dd6:	08 95       	ret

00006dd8 <__adddi3_s8>:
    6dd8:	00 24       	eor	r0, r0
    6dda:	a7 fd       	sbrc	r26, 7
    6ddc:	00 94       	com	r0
    6dde:	2a 0f       	add	r18, r26
    6de0:	30 1d       	adc	r19, r0
    6de2:	40 1d       	adc	r20, r0
    6de4:	50 1d       	adc	r21, r0
    6de6:	60 1d       	adc	r22, r0
    6de8:	70 1d       	adc	r23, r0
    6dea:	80 1d       	adc	r24, r0
    6dec:	90 1d       	adc	r25, r0
    6dee:	08 95       	ret

00006df0 <__udivmodhi4>:
    6df0:	aa 1b       	sub	r26, r26
    6df2:	bb 1b       	sub	r27, r27
    6df4:	51 e1       	ldi	r21, 0x11	; 17
    6df6:	07 c0       	rjmp	.+14     	; 0x6e06 <__udivmodhi4_ep>

00006df8 <__udivmodhi4_loop>:
    6df8:	aa 1f       	adc	r26, r26
    6dfa:	bb 1f       	adc	r27, r27
    6dfc:	a6 17       	cp	r26, r22
    6dfe:	b7 07       	cpc	r27, r23
    6e00:	10 f0       	brcs	.+4      	; 0x6e06 <__udivmodhi4_ep>
    6e02:	a6 1b       	sub	r26, r22
    6e04:	b7 0b       	sbc	r27, r23

00006e06 <__udivmodhi4_ep>:
    6e06:	88 1f       	adc	r24, r24
    6e08:	99 1f       	adc	r25, r25
    6e0a:	5a 95       	dec	r21
    6e0c:	a9 f7       	brne	.-22     	; 0x6df8 <__udivmodhi4_loop>
    6e0e:	80 95       	com	r24
    6e10:	90 95       	com	r25
    6e12:	bc 01       	movw	r22, r24
    6e14:	cd 01       	movw	r24, r26
    6e16:	08 95       	ret

00006e18 <__umulhisi3>:
    6e18:	a2 9f       	mul	r26, r18
    6e1a:	b0 01       	movw	r22, r0
    6e1c:	b3 9f       	mul	r27, r19
    6e1e:	c0 01       	movw	r24, r0
    6e20:	a3 9f       	mul	r26, r19
    6e22:	70 0d       	add	r23, r0
    6e24:	81 1d       	adc	r24, r1
    6e26:	11 24       	eor	r1, r1
    6e28:	91 1d       	adc	r25, r1
    6e2a:	b2 9f       	mul	r27, r18
    6e2c:	70 0d       	add	r23, r0
    6e2e:	81 1d       	adc	r24, r1
    6e30:	11 24       	eor	r1, r1
    6e32:	91 1d       	adc	r25, r1
    6e34:	08 95       	ret

00006e36 <atoi>:
    6e36:	fc 01       	movw	r30, r24
    6e38:	88 27       	eor	r24, r24
    6e3a:	99 27       	eor	r25, r25
    6e3c:	e8 94       	clt
    6e3e:	21 91       	ld	r18, Z+
    6e40:	20 32       	cpi	r18, 0x20	; 32
    6e42:	e9 f3       	breq	.-6      	; 0x6e3e <atoi+0x8>
    6e44:	29 30       	cpi	r18, 0x09	; 9
    6e46:	10 f0       	brcs	.+4      	; 0x6e4c <atoi+0x16>
    6e48:	2e 30       	cpi	r18, 0x0E	; 14
    6e4a:	c8 f3       	brcs	.-14     	; 0x6e3e <atoi+0x8>
    6e4c:	2b 32       	cpi	r18, 0x2B	; 43
    6e4e:	41 f0       	breq	.+16     	; 0x6e60 <atoi+0x2a>
    6e50:	2d 32       	cpi	r18, 0x2D	; 45
    6e52:	39 f4       	brne	.+14     	; 0x6e62 <atoi+0x2c>
    6e54:	68 94       	set
    6e56:	04 c0       	rjmp	.+8      	; 0x6e60 <atoi+0x2a>
    6e58:	0e 94 66 37 	call	0x6ecc	; 0x6ecc <__mulhi_const_10>
    6e5c:	82 0f       	add	r24, r18
    6e5e:	91 1d       	adc	r25, r1
    6e60:	21 91       	ld	r18, Z+
    6e62:	20 53       	subi	r18, 0x30	; 48
    6e64:	2a 30       	cpi	r18, 0x0A	; 10
    6e66:	c0 f3       	brcs	.-16     	; 0x6e58 <atoi+0x22>
    6e68:	1e f4       	brtc	.+6      	; 0x6e70 <atoi+0x3a>
    6e6a:	90 95       	com	r25
    6e6c:	81 95       	neg	r24
    6e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e70:	08 95       	ret

00006e72 <strcpy_P>:
    6e72:	fb 01       	movw	r30, r22
    6e74:	dc 01       	movw	r26, r24
    6e76:	05 90       	lpm	r0, Z+
    6e78:	0d 92       	st	X+, r0
    6e7a:	00 20       	and	r0, r0
    6e7c:	e1 f7       	brne	.-8      	; 0x6e76 <strcpy_P+0x4>
    6e7e:	08 95       	ret

00006e80 <memset>:
    6e80:	dc 01       	movw	r26, r24
    6e82:	01 c0       	rjmp	.+2      	; 0x6e86 <memset+0x6>
    6e84:	6d 93       	st	X+, r22
    6e86:	41 50       	subi	r20, 0x01	; 1
    6e88:	50 40       	sbci	r21, 0x00	; 0
    6e8a:	e0 f7       	brcc	.-8      	; 0x6e84 <memset+0x4>
    6e8c:	08 95       	ret

00006e8e <strcmp>:
    6e8e:	fb 01       	movw	r30, r22
    6e90:	dc 01       	movw	r26, r24
    6e92:	8d 91       	ld	r24, X+
    6e94:	01 90       	ld	r0, Z+
    6e96:	80 19       	sub	r24, r0
    6e98:	01 10       	cpse	r0, r1
    6e9a:	d9 f3       	breq	.-10     	; 0x6e92 <strcmp+0x4>
    6e9c:	99 0b       	sbc	r25, r25
    6e9e:	08 95       	ret

00006ea0 <itoa>:
    6ea0:	45 32       	cpi	r20, 0x25	; 37
    6ea2:	51 05       	cpc	r21, r1
    6ea4:	20 f4       	brcc	.+8      	; 0x6eae <itoa+0xe>
    6ea6:	42 30       	cpi	r20, 0x02	; 2
    6ea8:	10 f0       	brcs	.+4      	; 0x6eae <itoa+0xe>
    6eaa:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__itoa_ncheck>
    6eae:	fb 01       	movw	r30, r22
    6eb0:	10 82       	st	Z, r1
    6eb2:	cb 01       	movw	r24, r22
    6eb4:	08 95       	ret

00006eb6 <__itoa_ncheck>:
    6eb6:	bb 27       	eor	r27, r27
    6eb8:	4a 30       	cpi	r20, 0x0A	; 10
    6eba:	31 f4       	brne	.+12     	; 0x6ec8 <__itoa_ncheck+0x12>
    6ebc:	99 23       	and	r25, r25
    6ebe:	22 f4       	brpl	.+8      	; 0x6ec8 <__itoa_ncheck+0x12>
    6ec0:	bd e2       	ldi	r27, 0x2D	; 45
    6ec2:	90 95       	com	r25
    6ec4:	81 95       	neg	r24
    6ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ec8:	0c 94 6f 37 	jmp	0x6ede	; 0x6ede <__utoa_common>

00006ecc <__mulhi_const_10>:
    6ecc:	7a e0       	ldi	r23, 0x0A	; 10
    6ece:	97 9f       	mul	r25, r23
    6ed0:	90 2d       	mov	r25, r0
    6ed2:	87 9f       	mul	r24, r23
    6ed4:	80 2d       	mov	r24, r0
    6ed6:	91 0d       	add	r25, r1
    6ed8:	11 24       	eor	r1, r1
    6eda:	08 95       	ret

00006edc <__utoa_ncheck>:
    6edc:	bb 27       	eor	r27, r27

00006ede <__utoa_common>:
    6ede:	fb 01       	movw	r30, r22
    6ee0:	55 27       	eor	r21, r21
    6ee2:	aa 27       	eor	r26, r26
    6ee4:	88 0f       	add	r24, r24
    6ee6:	99 1f       	adc	r25, r25
    6ee8:	aa 1f       	adc	r26, r26
    6eea:	a4 17       	cp	r26, r20
    6eec:	10 f0       	brcs	.+4      	; 0x6ef2 <__utoa_common+0x14>
    6eee:	a4 1b       	sub	r26, r20
    6ef0:	83 95       	inc	r24
    6ef2:	50 51       	subi	r21, 0x10	; 16
    6ef4:	b9 f7       	brne	.-18     	; 0x6ee4 <__utoa_common+0x6>
    6ef6:	a0 5d       	subi	r26, 0xD0	; 208
    6ef8:	aa 33       	cpi	r26, 0x3A	; 58
    6efa:	08 f0       	brcs	.+2      	; 0x6efe <__utoa_common+0x20>
    6efc:	a9 5d       	subi	r26, 0xD9	; 217
    6efe:	a1 93       	st	Z+, r26
    6f00:	00 97       	sbiw	r24, 0x00	; 0
    6f02:	79 f7       	brne	.-34     	; 0x6ee2 <__utoa_common+0x4>
    6f04:	b1 11       	cpse	r27, r1
    6f06:	b1 93       	st	Z+, r27
    6f08:	11 92       	st	Z+, r1
    6f0a:	cb 01       	movw	r24, r22
    6f0c:	0c 94 bb 39 	jmp	0x7376	; 0x7376 <strrev>

00006f10 <printf>:
    6f10:	a0 e0       	ldi	r26, 0x00	; 0
    6f12:	b0 e0       	ldi	r27, 0x00	; 0
    6f14:	ee e8       	ldi	r30, 0x8E	; 142
    6f16:	f7 e3       	ldi	r31, 0x37	; 55
    6f18:	0c 94 75 3a 	jmp	0x74ea	; 0x74ea <__prologue_saves__+0x20>
    6f1c:	ae 01       	movw	r20, r28
    6f1e:	4b 5f       	subi	r20, 0xFB	; 251
    6f20:	5f 4f       	sbci	r21, 0xFF	; 255
    6f22:	fa 01       	movw	r30, r20
    6f24:	61 91       	ld	r22, Z+
    6f26:	71 91       	ld	r23, Z+
    6f28:	af 01       	movw	r20, r30
    6f2a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <__iob+0x2>
    6f2e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <__iob+0x3>
    6f32:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <vfprintf>
    6f36:	e2 e0       	ldi	r30, 0x02	; 2
    6f38:	0c 94 91 3a 	jmp	0x7522	; 0x7522 <__epilogue_restores__+0x20>

00006f3c <printf_P>:
    6f3c:	a0 e0       	ldi	r26, 0x00	; 0
    6f3e:	b0 e0       	ldi	r27, 0x00	; 0
    6f40:	e4 ea       	ldi	r30, 0xA4	; 164
    6f42:	f7 e3       	ldi	r31, 0x37	; 55
    6f44:	0c 94 73 3a 	jmp	0x74e6	; 0x74e6 <__prologue_saves__+0x1c>
    6f48:	ae 01       	movw	r20, r28
    6f4a:	49 5f       	subi	r20, 0xF9	; 249
    6f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    6f4e:	da 01       	movw	r26, r20
    6f50:	6d 91       	ld	r22, X+
    6f52:	7d 91       	ld	r23, X+
    6f54:	ad 01       	movw	r20, r26
    6f56:	0b e1       	ldi	r16, 0x1B	; 27
    6f58:	12 e0       	ldi	r17, 0x02	; 2
    6f5a:	f8 01       	movw	r30, r16
    6f5c:	82 81       	ldd	r24, Z+2	; 0x02
    6f5e:	93 81       	ldd	r25, Z+3	; 0x03
    6f60:	dc 01       	movw	r26, r24
    6f62:	13 96       	adiw	r26, 0x03	; 3
    6f64:	2c 91       	ld	r18, X
    6f66:	13 97       	sbiw	r26, 0x03	; 3
    6f68:	28 60       	ori	r18, 0x08	; 8
    6f6a:	13 96       	adiw	r26, 0x03	; 3
    6f6c:	2c 93       	st	X, r18
    6f6e:	0e 94 c4 37 	call	0x6f88	; 0x6f88 <vfprintf>
    6f72:	d8 01       	movw	r26, r16
    6f74:	12 96       	adiw	r26, 0x02	; 2
    6f76:	ed 91       	ld	r30, X+
    6f78:	fc 91       	ld	r31, X
    6f7a:	13 97       	sbiw	r26, 0x03	; 3
    6f7c:	23 81       	ldd	r18, Z+3	; 0x03
    6f7e:	27 7f       	andi	r18, 0xF7	; 247
    6f80:	23 83       	std	Z+3, r18	; 0x03
    6f82:	e4 e0       	ldi	r30, 0x04	; 4
    6f84:	0c 94 8f 3a 	jmp	0x751e	; 0x751e <__epilogue_restores__+0x1c>

00006f88 <vfprintf>:
    6f88:	ab e0       	ldi	r26, 0x0B	; 11
    6f8a:	b0 e0       	ldi	r27, 0x00	; 0
    6f8c:	ea ec       	ldi	r30, 0xCA	; 202
    6f8e:	f7 e3       	ldi	r31, 0x37	; 55
    6f90:	0c 94 65 3a 	jmp	0x74ca	; 0x74ca <__prologue_saves__>
    6f94:	6c 01       	movw	r12, r24
    6f96:	7b 01       	movw	r14, r22
    6f98:	8a 01       	movw	r16, r20
    6f9a:	fc 01       	movw	r30, r24
    6f9c:	17 82       	std	Z+7, r1	; 0x07
    6f9e:	16 82       	std	Z+6, r1	; 0x06
    6fa0:	83 81       	ldd	r24, Z+3	; 0x03
    6fa2:	81 ff       	sbrs	r24, 1
    6fa4:	cc c1       	rjmp	.+920    	; 0x733e <vfprintf+0x3b6>
    6fa6:	ce 01       	movw	r24, r28
    6fa8:	01 96       	adiw	r24, 0x01	; 1
    6faa:	3c 01       	movw	r6, r24
    6fac:	f6 01       	movw	r30, r12
    6fae:	93 81       	ldd	r25, Z+3	; 0x03
    6fb0:	f7 01       	movw	r30, r14
    6fb2:	93 fd       	sbrc	r25, 3
    6fb4:	85 91       	lpm	r24, Z+
    6fb6:	93 ff       	sbrs	r25, 3
    6fb8:	81 91       	ld	r24, Z+
    6fba:	7f 01       	movw	r14, r30
    6fbc:	88 23       	and	r24, r24
    6fbe:	09 f4       	brne	.+2      	; 0x6fc2 <vfprintf+0x3a>
    6fc0:	ba c1       	rjmp	.+884    	; 0x7336 <vfprintf+0x3ae>
    6fc2:	85 32       	cpi	r24, 0x25	; 37
    6fc4:	39 f4       	brne	.+14     	; 0x6fd4 <vfprintf+0x4c>
    6fc6:	93 fd       	sbrc	r25, 3
    6fc8:	85 91       	lpm	r24, Z+
    6fca:	93 ff       	sbrs	r25, 3
    6fcc:	81 91       	ld	r24, Z+
    6fce:	7f 01       	movw	r14, r30
    6fd0:	85 32       	cpi	r24, 0x25	; 37
    6fd2:	29 f4       	brne	.+10     	; 0x6fde <vfprintf+0x56>
    6fd4:	b6 01       	movw	r22, r12
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    6fdc:	e7 cf       	rjmp	.-50     	; 0x6fac <vfprintf+0x24>
    6fde:	91 2c       	mov	r9, r1
    6fe0:	21 2c       	mov	r2, r1
    6fe2:	31 2c       	mov	r3, r1
    6fe4:	ff e1       	ldi	r31, 0x1F	; 31
    6fe6:	f3 15       	cp	r31, r3
    6fe8:	d8 f0       	brcs	.+54     	; 0x7020 <vfprintf+0x98>
    6fea:	8b 32       	cpi	r24, 0x2B	; 43
    6fec:	79 f0       	breq	.+30     	; 0x700c <vfprintf+0x84>
    6fee:	38 f4       	brcc	.+14     	; 0x6ffe <vfprintf+0x76>
    6ff0:	80 32       	cpi	r24, 0x20	; 32
    6ff2:	79 f0       	breq	.+30     	; 0x7012 <vfprintf+0x8a>
    6ff4:	83 32       	cpi	r24, 0x23	; 35
    6ff6:	a1 f4       	brne	.+40     	; 0x7020 <vfprintf+0x98>
    6ff8:	23 2d       	mov	r18, r3
    6ffa:	20 61       	ori	r18, 0x10	; 16
    6ffc:	1d c0       	rjmp	.+58     	; 0x7038 <vfprintf+0xb0>
    6ffe:	8d 32       	cpi	r24, 0x2D	; 45
    7000:	61 f0       	breq	.+24     	; 0x701a <vfprintf+0x92>
    7002:	80 33       	cpi	r24, 0x30	; 48
    7004:	69 f4       	brne	.+26     	; 0x7020 <vfprintf+0x98>
    7006:	23 2d       	mov	r18, r3
    7008:	21 60       	ori	r18, 0x01	; 1
    700a:	16 c0       	rjmp	.+44     	; 0x7038 <vfprintf+0xb0>
    700c:	83 2d       	mov	r24, r3
    700e:	82 60       	ori	r24, 0x02	; 2
    7010:	38 2e       	mov	r3, r24
    7012:	e3 2d       	mov	r30, r3
    7014:	e4 60       	ori	r30, 0x04	; 4
    7016:	3e 2e       	mov	r3, r30
    7018:	2a c0       	rjmp	.+84     	; 0x706e <vfprintf+0xe6>
    701a:	f3 2d       	mov	r31, r3
    701c:	f8 60       	ori	r31, 0x08	; 8
    701e:	1d c0       	rjmp	.+58     	; 0x705a <vfprintf+0xd2>
    7020:	37 fc       	sbrc	r3, 7
    7022:	2d c0       	rjmp	.+90     	; 0x707e <vfprintf+0xf6>
    7024:	20 ed       	ldi	r18, 0xD0	; 208
    7026:	28 0f       	add	r18, r24
    7028:	2a 30       	cpi	r18, 0x0A	; 10
    702a:	40 f0       	brcs	.+16     	; 0x703c <vfprintf+0xb4>
    702c:	8e 32       	cpi	r24, 0x2E	; 46
    702e:	b9 f4       	brne	.+46     	; 0x705e <vfprintf+0xd6>
    7030:	36 fc       	sbrc	r3, 6
    7032:	81 c1       	rjmp	.+770    	; 0x7336 <vfprintf+0x3ae>
    7034:	23 2d       	mov	r18, r3
    7036:	20 64       	ori	r18, 0x40	; 64
    7038:	32 2e       	mov	r3, r18
    703a:	19 c0       	rjmp	.+50     	; 0x706e <vfprintf+0xe6>
    703c:	36 fe       	sbrs	r3, 6
    703e:	06 c0       	rjmp	.+12     	; 0x704c <vfprintf+0xc4>
    7040:	8a e0       	ldi	r24, 0x0A	; 10
    7042:	98 9e       	mul	r9, r24
    7044:	20 0d       	add	r18, r0
    7046:	11 24       	eor	r1, r1
    7048:	92 2e       	mov	r9, r18
    704a:	11 c0       	rjmp	.+34     	; 0x706e <vfprintf+0xe6>
    704c:	ea e0       	ldi	r30, 0x0A	; 10
    704e:	2e 9e       	mul	r2, r30
    7050:	20 0d       	add	r18, r0
    7052:	11 24       	eor	r1, r1
    7054:	22 2e       	mov	r2, r18
    7056:	f3 2d       	mov	r31, r3
    7058:	f0 62       	ori	r31, 0x20	; 32
    705a:	3f 2e       	mov	r3, r31
    705c:	08 c0       	rjmp	.+16     	; 0x706e <vfprintf+0xe6>
    705e:	8c 36       	cpi	r24, 0x6C	; 108
    7060:	21 f4       	brne	.+8      	; 0x706a <vfprintf+0xe2>
    7062:	83 2d       	mov	r24, r3
    7064:	80 68       	ori	r24, 0x80	; 128
    7066:	38 2e       	mov	r3, r24
    7068:	02 c0       	rjmp	.+4      	; 0x706e <vfprintf+0xe6>
    706a:	88 36       	cpi	r24, 0x68	; 104
    706c:	41 f4       	brne	.+16     	; 0x707e <vfprintf+0xf6>
    706e:	f7 01       	movw	r30, r14
    7070:	93 fd       	sbrc	r25, 3
    7072:	85 91       	lpm	r24, Z+
    7074:	93 ff       	sbrs	r25, 3
    7076:	81 91       	ld	r24, Z+
    7078:	7f 01       	movw	r14, r30
    707a:	81 11       	cpse	r24, r1
    707c:	b3 cf       	rjmp	.-154    	; 0x6fe4 <vfprintf+0x5c>
    707e:	98 2f       	mov	r25, r24
    7080:	9f 7d       	andi	r25, 0xDF	; 223
    7082:	95 54       	subi	r25, 0x45	; 69
    7084:	93 30       	cpi	r25, 0x03	; 3
    7086:	28 f4       	brcc	.+10     	; 0x7092 <vfprintf+0x10a>
    7088:	0c 5f       	subi	r16, 0xFC	; 252
    708a:	1f 4f       	sbci	r17, 0xFF	; 255
    708c:	9f e3       	ldi	r25, 0x3F	; 63
    708e:	99 83       	std	Y+1, r25	; 0x01
    7090:	0d c0       	rjmp	.+26     	; 0x70ac <vfprintf+0x124>
    7092:	83 36       	cpi	r24, 0x63	; 99
    7094:	31 f0       	breq	.+12     	; 0x70a2 <vfprintf+0x11a>
    7096:	83 37       	cpi	r24, 0x73	; 115
    7098:	71 f0       	breq	.+28     	; 0x70b6 <vfprintf+0x12e>
    709a:	83 35       	cpi	r24, 0x53	; 83
    709c:	09 f0       	breq	.+2      	; 0x70a0 <vfprintf+0x118>
    709e:	59 c0       	rjmp	.+178    	; 0x7152 <vfprintf+0x1ca>
    70a0:	21 c0       	rjmp	.+66     	; 0x70e4 <vfprintf+0x15c>
    70a2:	f8 01       	movw	r30, r16
    70a4:	80 81       	ld	r24, Z
    70a6:	89 83       	std	Y+1, r24	; 0x01
    70a8:	0e 5f       	subi	r16, 0xFE	; 254
    70aa:	1f 4f       	sbci	r17, 0xFF	; 255
    70ac:	88 24       	eor	r8, r8
    70ae:	83 94       	inc	r8
    70b0:	91 2c       	mov	r9, r1
    70b2:	53 01       	movw	r10, r6
    70b4:	13 c0       	rjmp	.+38     	; 0x70dc <vfprintf+0x154>
    70b6:	28 01       	movw	r4, r16
    70b8:	f2 e0       	ldi	r31, 0x02	; 2
    70ba:	4f 0e       	add	r4, r31
    70bc:	51 1c       	adc	r5, r1
    70be:	f8 01       	movw	r30, r16
    70c0:	a0 80       	ld	r10, Z
    70c2:	b1 80       	ldd	r11, Z+1	; 0x01
    70c4:	36 fe       	sbrs	r3, 6
    70c6:	03 c0       	rjmp	.+6      	; 0x70ce <vfprintf+0x146>
    70c8:	69 2d       	mov	r22, r9
    70ca:	70 e0       	ldi	r23, 0x00	; 0
    70cc:	02 c0       	rjmp	.+4      	; 0x70d2 <vfprintf+0x14a>
    70ce:	6f ef       	ldi	r22, 0xFF	; 255
    70d0:	7f ef       	ldi	r23, 0xFF	; 255
    70d2:	c5 01       	movw	r24, r10
    70d4:	0e 94 b0 39 	call	0x7360	; 0x7360 <strnlen>
    70d8:	4c 01       	movw	r8, r24
    70da:	82 01       	movw	r16, r4
    70dc:	f3 2d       	mov	r31, r3
    70de:	ff 77       	andi	r31, 0x7F	; 127
    70e0:	3f 2e       	mov	r3, r31
    70e2:	16 c0       	rjmp	.+44     	; 0x7110 <vfprintf+0x188>
    70e4:	28 01       	movw	r4, r16
    70e6:	22 e0       	ldi	r18, 0x02	; 2
    70e8:	42 0e       	add	r4, r18
    70ea:	51 1c       	adc	r5, r1
    70ec:	f8 01       	movw	r30, r16
    70ee:	a0 80       	ld	r10, Z
    70f0:	b1 80       	ldd	r11, Z+1	; 0x01
    70f2:	36 fe       	sbrs	r3, 6
    70f4:	03 c0       	rjmp	.+6      	; 0x70fc <vfprintf+0x174>
    70f6:	69 2d       	mov	r22, r9
    70f8:	70 e0       	ldi	r23, 0x00	; 0
    70fa:	02 c0       	rjmp	.+4      	; 0x7100 <vfprintf+0x178>
    70fc:	6f ef       	ldi	r22, 0xFF	; 255
    70fe:	7f ef       	ldi	r23, 0xFF	; 255
    7100:	c5 01       	movw	r24, r10
    7102:	0e 94 a5 39 	call	0x734a	; 0x734a <strnlen_P>
    7106:	4c 01       	movw	r8, r24
    7108:	f3 2d       	mov	r31, r3
    710a:	f0 68       	ori	r31, 0x80	; 128
    710c:	3f 2e       	mov	r3, r31
    710e:	82 01       	movw	r16, r4
    7110:	33 fc       	sbrc	r3, 3
    7112:	1b c0       	rjmp	.+54     	; 0x714a <vfprintf+0x1c2>
    7114:	82 2d       	mov	r24, r2
    7116:	90 e0       	ldi	r25, 0x00	; 0
    7118:	88 16       	cp	r8, r24
    711a:	99 06       	cpc	r9, r25
    711c:	b0 f4       	brcc	.+44     	; 0x714a <vfprintf+0x1c2>
    711e:	b6 01       	movw	r22, r12
    7120:	80 e2       	ldi	r24, 0x20	; 32
    7122:	90 e0       	ldi	r25, 0x00	; 0
    7124:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    7128:	2a 94       	dec	r2
    712a:	f4 cf       	rjmp	.-24     	; 0x7114 <vfprintf+0x18c>
    712c:	f5 01       	movw	r30, r10
    712e:	37 fc       	sbrc	r3, 7
    7130:	85 91       	lpm	r24, Z+
    7132:	37 fe       	sbrs	r3, 7
    7134:	81 91       	ld	r24, Z+
    7136:	5f 01       	movw	r10, r30
    7138:	b6 01       	movw	r22, r12
    713a:	90 e0       	ldi	r25, 0x00	; 0
    713c:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    7140:	21 10       	cpse	r2, r1
    7142:	2a 94       	dec	r2
    7144:	21 e0       	ldi	r18, 0x01	; 1
    7146:	82 1a       	sub	r8, r18
    7148:	91 08       	sbc	r9, r1
    714a:	81 14       	cp	r8, r1
    714c:	91 04       	cpc	r9, r1
    714e:	71 f7       	brne	.-36     	; 0x712c <vfprintf+0x1a4>
    7150:	e8 c0       	rjmp	.+464    	; 0x7322 <vfprintf+0x39a>
    7152:	84 36       	cpi	r24, 0x64	; 100
    7154:	11 f0       	breq	.+4      	; 0x715a <vfprintf+0x1d2>
    7156:	89 36       	cpi	r24, 0x69	; 105
    7158:	41 f5       	brne	.+80     	; 0x71aa <vfprintf+0x222>
    715a:	f8 01       	movw	r30, r16
    715c:	37 fe       	sbrs	r3, 7
    715e:	07 c0       	rjmp	.+14     	; 0x716e <vfprintf+0x1e6>
    7160:	60 81       	ld	r22, Z
    7162:	71 81       	ldd	r23, Z+1	; 0x01
    7164:	82 81       	ldd	r24, Z+2	; 0x02
    7166:	93 81       	ldd	r25, Z+3	; 0x03
    7168:	0c 5f       	subi	r16, 0xFC	; 252
    716a:	1f 4f       	sbci	r17, 0xFF	; 255
    716c:	08 c0       	rjmp	.+16     	; 0x717e <vfprintf+0x1f6>
    716e:	60 81       	ld	r22, Z
    7170:	71 81       	ldd	r23, Z+1	; 0x01
    7172:	07 2e       	mov	r0, r23
    7174:	00 0c       	add	r0, r0
    7176:	88 0b       	sbc	r24, r24
    7178:	99 0b       	sbc	r25, r25
    717a:	0e 5f       	subi	r16, 0xFE	; 254
    717c:	1f 4f       	sbci	r17, 0xFF	; 255
    717e:	f3 2d       	mov	r31, r3
    7180:	ff 76       	andi	r31, 0x6F	; 111
    7182:	3f 2e       	mov	r3, r31
    7184:	97 ff       	sbrs	r25, 7
    7186:	09 c0       	rjmp	.+18     	; 0x719a <vfprintf+0x212>
    7188:	90 95       	com	r25
    718a:	80 95       	com	r24
    718c:	70 95       	com	r23
    718e:	61 95       	neg	r22
    7190:	7f 4f       	sbci	r23, 0xFF	; 255
    7192:	8f 4f       	sbci	r24, 0xFF	; 255
    7194:	9f 4f       	sbci	r25, 0xFF	; 255
    7196:	f0 68       	ori	r31, 0x80	; 128
    7198:	3f 2e       	mov	r3, r31
    719a:	2a e0       	ldi	r18, 0x0A	; 10
    719c:	30 e0       	ldi	r19, 0x00	; 0
    719e:	a3 01       	movw	r20, r6
    71a0:	0e 94 07 3a 	call	0x740e	; 0x740e <__ultoa_invert>
    71a4:	88 2e       	mov	r8, r24
    71a6:	86 18       	sub	r8, r6
    71a8:	45 c0       	rjmp	.+138    	; 0x7234 <vfprintf+0x2ac>
    71aa:	85 37       	cpi	r24, 0x75	; 117
    71ac:	31 f4       	brne	.+12     	; 0x71ba <vfprintf+0x232>
    71ae:	23 2d       	mov	r18, r3
    71b0:	2f 7e       	andi	r18, 0xEF	; 239
    71b2:	b2 2e       	mov	r11, r18
    71b4:	2a e0       	ldi	r18, 0x0A	; 10
    71b6:	30 e0       	ldi	r19, 0x00	; 0
    71b8:	25 c0       	rjmp	.+74     	; 0x7204 <vfprintf+0x27c>
    71ba:	93 2d       	mov	r25, r3
    71bc:	99 7f       	andi	r25, 0xF9	; 249
    71be:	b9 2e       	mov	r11, r25
    71c0:	8f 36       	cpi	r24, 0x6F	; 111
    71c2:	c1 f0       	breq	.+48     	; 0x71f4 <vfprintf+0x26c>
    71c4:	18 f4       	brcc	.+6      	; 0x71cc <vfprintf+0x244>
    71c6:	88 35       	cpi	r24, 0x58	; 88
    71c8:	79 f0       	breq	.+30     	; 0x71e8 <vfprintf+0x260>
    71ca:	b5 c0       	rjmp	.+362    	; 0x7336 <vfprintf+0x3ae>
    71cc:	80 37       	cpi	r24, 0x70	; 112
    71ce:	19 f0       	breq	.+6      	; 0x71d6 <vfprintf+0x24e>
    71d0:	88 37       	cpi	r24, 0x78	; 120
    71d2:	21 f0       	breq	.+8      	; 0x71dc <vfprintf+0x254>
    71d4:	b0 c0       	rjmp	.+352    	; 0x7336 <vfprintf+0x3ae>
    71d6:	e9 2f       	mov	r30, r25
    71d8:	e0 61       	ori	r30, 0x10	; 16
    71da:	be 2e       	mov	r11, r30
    71dc:	b4 fe       	sbrs	r11, 4
    71de:	0d c0       	rjmp	.+26     	; 0x71fa <vfprintf+0x272>
    71e0:	fb 2d       	mov	r31, r11
    71e2:	f4 60       	ori	r31, 0x04	; 4
    71e4:	bf 2e       	mov	r11, r31
    71e6:	09 c0       	rjmp	.+18     	; 0x71fa <vfprintf+0x272>
    71e8:	34 fe       	sbrs	r3, 4
    71ea:	0a c0       	rjmp	.+20     	; 0x7200 <vfprintf+0x278>
    71ec:	29 2f       	mov	r18, r25
    71ee:	26 60       	ori	r18, 0x06	; 6
    71f0:	b2 2e       	mov	r11, r18
    71f2:	06 c0       	rjmp	.+12     	; 0x7200 <vfprintf+0x278>
    71f4:	28 e0       	ldi	r18, 0x08	; 8
    71f6:	30 e0       	ldi	r19, 0x00	; 0
    71f8:	05 c0       	rjmp	.+10     	; 0x7204 <vfprintf+0x27c>
    71fa:	20 e1       	ldi	r18, 0x10	; 16
    71fc:	30 e0       	ldi	r19, 0x00	; 0
    71fe:	02 c0       	rjmp	.+4      	; 0x7204 <vfprintf+0x27c>
    7200:	20 e1       	ldi	r18, 0x10	; 16
    7202:	32 e0       	ldi	r19, 0x02	; 2
    7204:	f8 01       	movw	r30, r16
    7206:	b7 fe       	sbrs	r11, 7
    7208:	07 c0       	rjmp	.+14     	; 0x7218 <vfprintf+0x290>
    720a:	60 81       	ld	r22, Z
    720c:	71 81       	ldd	r23, Z+1	; 0x01
    720e:	82 81       	ldd	r24, Z+2	; 0x02
    7210:	93 81       	ldd	r25, Z+3	; 0x03
    7212:	0c 5f       	subi	r16, 0xFC	; 252
    7214:	1f 4f       	sbci	r17, 0xFF	; 255
    7216:	06 c0       	rjmp	.+12     	; 0x7224 <vfprintf+0x29c>
    7218:	60 81       	ld	r22, Z
    721a:	71 81       	ldd	r23, Z+1	; 0x01
    721c:	80 e0       	ldi	r24, 0x00	; 0
    721e:	90 e0       	ldi	r25, 0x00	; 0
    7220:	0e 5f       	subi	r16, 0xFE	; 254
    7222:	1f 4f       	sbci	r17, 0xFF	; 255
    7224:	a3 01       	movw	r20, r6
    7226:	0e 94 07 3a 	call	0x740e	; 0x740e <__ultoa_invert>
    722a:	88 2e       	mov	r8, r24
    722c:	86 18       	sub	r8, r6
    722e:	fb 2d       	mov	r31, r11
    7230:	ff 77       	andi	r31, 0x7F	; 127
    7232:	3f 2e       	mov	r3, r31
    7234:	36 fe       	sbrs	r3, 6
    7236:	0d c0       	rjmp	.+26     	; 0x7252 <vfprintf+0x2ca>
    7238:	23 2d       	mov	r18, r3
    723a:	2e 7f       	andi	r18, 0xFE	; 254
    723c:	a2 2e       	mov	r10, r18
    723e:	89 14       	cp	r8, r9
    7240:	58 f4       	brcc	.+22     	; 0x7258 <vfprintf+0x2d0>
    7242:	34 fe       	sbrs	r3, 4
    7244:	0b c0       	rjmp	.+22     	; 0x725c <vfprintf+0x2d4>
    7246:	32 fc       	sbrc	r3, 2
    7248:	09 c0       	rjmp	.+18     	; 0x725c <vfprintf+0x2d4>
    724a:	83 2d       	mov	r24, r3
    724c:	8e 7e       	andi	r24, 0xEE	; 238
    724e:	a8 2e       	mov	r10, r24
    7250:	05 c0       	rjmp	.+10     	; 0x725c <vfprintf+0x2d4>
    7252:	b8 2c       	mov	r11, r8
    7254:	a3 2c       	mov	r10, r3
    7256:	03 c0       	rjmp	.+6      	; 0x725e <vfprintf+0x2d6>
    7258:	b8 2c       	mov	r11, r8
    725a:	01 c0       	rjmp	.+2      	; 0x725e <vfprintf+0x2d6>
    725c:	b9 2c       	mov	r11, r9
    725e:	a4 fe       	sbrs	r10, 4
    7260:	0f c0       	rjmp	.+30     	; 0x7280 <vfprintf+0x2f8>
    7262:	fe 01       	movw	r30, r28
    7264:	e8 0d       	add	r30, r8
    7266:	f1 1d       	adc	r31, r1
    7268:	80 81       	ld	r24, Z
    726a:	80 33       	cpi	r24, 0x30	; 48
    726c:	21 f4       	brne	.+8      	; 0x7276 <vfprintf+0x2ee>
    726e:	9a 2d       	mov	r25, r10
    7270:	99 7e       	andi	r25, 0xE9	; 233
    7272:	a9 2e       	mov	r10, r25
    7274:	09 c0       	rjmp	.+18     	; 0x7288 <vfprintf+0x300>
    7276:	a2 fe       	sbrs	r10, 2
    7278:	06 c0       	rjmp	.+12     	; 0x7286 <vfprintf+0x2fe>
    727a:	b3 94       	inc	r11
    727c:	b3 94       	inc	r11
    727e:	04 c0       	rjmp	.+8      	; 0x7288 <vfprintf+0x300>
    7280:	8a 2d       	mov	r24, r10
    7282:	86 78       	andi	r24, 0x86	; 134
    7284:	09 f0       	breq	.+2      	; 0x7288 <vfprintf+0x300>
    7286:	b3 94       	inc	r11
    7288:	a3 fc       	sbrc	r10, 3
    728a:	11 c0       	rjmp	.+34     	; 0x72ae <vfprintf+0x326>
    728c:	a0 fe       	sbrs	r10, 0
    728e:	06 c0       	rjmp	.+12     	; 0x729c <vfprintf+0x314>
    7290:	b2 14       	cp	r11, r2
    7292:	88 f4       	brcc	.+34     	; 0x72b6 <vfprintf+0x32e>
    7294:	28 0c       	add	r2, r8
    7296:	92 2c       	mov	r9, r2
    7298:	9b 18       	sub	r9, r11
    729a:	0e c0       	rjmp	.+28     	; 0x72b8 <vfprintf+0x330>
    729c:	b2 14       	cp	r11, r2
    729e:	60 f4       	brcc	.+24     	; 0x72b8 <vfprintf+0x330>
    72a0:	b6 01       	movw	r22, r12
    72a2:	80 e2       	ldi	r24, 0x20	; 32
    72a4:	90 e0       	ldi	r25, 0x00	; 0
    72a6:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    72aa:	b3 94       	inc	r11
    72ac:	f7 cf       	rjmp	.-18     	; 0x729c <vfprintf+0x314>
    72ae:	b2 14       	cp	r11, r2
    72b0:	18 f4       	brcc	.+6      	; 0x72b8 <vfprintf+0x330>
    72b2:	2b 18       	sub	r2, r11
    72b4:	02 c0       	rjmp	.+4      	; 0x72ba <vfprintf+0x332>
    72b6:	98 2c       	mov	r9, r8
    72b8:	21 2c       	mov	r2, r1
    72ba:	a4 fe       	sbrs	r10, 4
    72bc:	10 c0       	rjmp	.+32     	; 0x72de <vfprintf+0x356>
    72be:	b6 01       	movw	r22, r12
    72c0:	80 e3       	ldi	r24, 0x30	; 48
    72c2:	90 e0       	ldi	r25, 0x00	; 0
    72c4:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    72c8:	a2 fe       	sbrs	r10, 2
    72ca:	17 c0       	rjmp	.+46     	; 0x72fa <vfprintf+0x372>
    72cc:	a1 fc       	sbrc	r10, 1
    72ce:	03 c0       	rjmp	.+6      	; 0x72d6 <vfprintf+0x34e>
    72d0:	88 e7       	ldi	r24, 0x78	; 120
    72d2:	90 e0       	ldi	r25, 0x00	; 0
    72d4:	02 c0       	rjmp	.+4      	; 0x72da <vfprintf+0x352>
    72d6:	88 e5       	ldi	r24, 0x58	; 88
    72d8:	90 e0       	ldi	r25, 0x00	; 0
    72da:	b6 01       	movw	r22, r12
    72dc:	0c c0       	rjmp	.+24     	; 0x72f6 <vfprintf+0x36e>
    72de:	8a 2d       	mov	r24, r10
    72e0:	86 78       	andi	r24, 0x86	; 134
    72e2:	59 f0       	breq	.+22     	; 0x72fa <vfprintf+0x372>
    72e4:	a1 fe       	sbrs	r10, 1
    72e6:	02 c0       	rjmp	.+4      	; 0x72ec <vfprintf+0x364>
    72e8:	8b e2       	ldi	r24, 0x2B	; 43
    72ea:	01 c0       	rjmp	.+2      	; 0x72ee <vfprintf+0x366>
    72ec:	80 e2       	ldi	r24, 0x20	; 32
    72ee:	a7 fc       	sbrc	r10, 7
    72f0:	8d e2       	ldi	r24, 0x2D	; 45
    72f2:	b6 01       	movw	r22, r12
    72f4:	90 e0       	ldi	r25, 0x00	; 0
    72f6:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    72fa:	89 14       	cp	r8, r9
    72fc:	38 f4       	brcc	.+14     	; 0x730c <vfprintf+0x384>
    72fe:	b6 01       	movw	r22, r12
    7300:	80 e3       	ldi	r24, 0x30	; 48
    7302:	90 e0       	ldi	r25, 0x00	; 0
    7304:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    7308:	9a 94       	dec	r9
    730a:	f7 cf       	rjmp	.-18     	; 0x72fa <vfprintf+0x372>
    730c:	8a 94       	dec	r8
    730e:	f3 01       	movw	r30, r6
    7310:	e8 0d       	add	r30, r8
    7312:	f1 1d       	adc	r31, r1
    7314:	80 81       	ld	r24, Z
    7316:	b6 01       	movw	r22, r12
    7318:	90 e0       	ldi	r25, 0x00	; 0
    731a:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    731e:	81 10       	cpse	r8, r1
    7320:	f5 cf       	rjmp	.-22     	; 0x730c <vfprintf+0x384>
    7322:	22 20       	and	r2, r2
    7324:	09 f4       	brne	.+2      	; 0x7328 <vfprintf+0x3a0>
    7326:	42 ce       	rjmp	.-892    	; 0x6fac <vfprintf+0x24>
    7328:	b6 01       	movw	r22, r12
    732a:	80 e2       	ldi	r24, 0x20	; 32
    732c:	90 e0       	ldi	r25, 0x00	; 0
    732e:	0e 94 cb 39 	call	0x7396	; 0x7396 <fputc>
    7332:	2a 94       	dec	r2
    7334:	f6 cf       	rjmp	.-20     	; 0x7322 <vfprintf+0x39a>
    7336:	f6 01       	movw	r30, r12
    7338:	86 81       	ldd	r24, Z+6	; 0x06
    733a:	97 81       	ldd	r25, Z+7	; 0x07
    733c:	02 c0       	rjmp	.+4      	; 0x7342 <vfprintf+0x3ba>
    733e:	8f ef       	ldi	r24, 0xFF	; 255
    7340:	9f ef       	ldi	r25, 0xFF	; 255
    7342:	2b 96       	adiw	r28, 0x0b	; 11
    7344:	e2 e1       	ldi	r30, 0x12	; 18
    7346:	0c 94 81 3a 	jmp	0x7502	; 0x7502 <__epilogue_restores__>

0000734a <strnlen_P>:
    734a:	fc 01       	movw	r30, r24
    734c:	05 90       	lpm	r0, Z+
    734e:	61 50       	subi	r22, 0x01	; 1
    7350:	70 40       	sbci	r23, 0x00	; 0
    7352:	01 10       	cpse	r0, r1
    7354:	d8 f7       	brcc	.-10     	; 0x734c <strnlen_P+0x2>
    7356:	80 95       	com	r24
    7358:	90 95       	com	r25
    735a:	8e 0f       	add	r24, r30
    735c:	9f 1f       	adc	r25, r31
    735e:	08 95       	ret

00007360 <strnlen>:
    7360:	fc 01       	movw	r30, r24
    7362:	61 50       	subi	r22, 0x01	; 1
    7364:	70 40       	sbci	r23, 0x00	; 0
    7366:	01 90       	ld	r0, Z+
    7368:	01 10       	cpse	r0, r1
    736a:	d8 f7       	brcc	.-10     	; 0x7362 <strnlen+0x2>
    736c:	80 95       	com	r24
    736e:	90 95       	com	r25
    7370:	8e 0f       	add	r24, r30
    7372:	9f 1f       	adc	r25, r31
    7374:	08 95       	ret

00007376 <strrev>:
    7376:	dc 01       	movw	r26, r24
    7378:	fc 01       	movw	r30, r24
    737a:	67 2f       	mov	r22, r23
    737c:	71 91       	ld	r23, Z+
    737e:	77 23       	and	r23, r23
    7380:	e1 f7       	brne	.-8      	; 0x737a <strrev+0x4>
    7382:	32 97       	sbiw	r30, 0x02	; 2
    7384:	04 c0       	rjmp	.+8      	; 0x738e <strrev+0x18>
    7386:	7c 91       	ld	r23, X
    7388:	6d 93       	st	X+, r22
    738a:	70 83       	st	Z, r23
    738c:	62 91       	ld	r22, -Z
    738e:	ae 17       	cp	r26, r30
    7390:	bf 07       	cpc	r27, r31
    7392:	c8 f3       	brcs	.-14     	; 0x7386 <strrev+0x10>
    7394:	08 95       	ret

00007396 <fputc>:
    7396:	0f 93       	push	r16
    7398:	1f 93       	push	r17
    739a:	cf 93       	push	r28
    739c:	df 93       	push	r29
    739e:	fb 01       	movw	r30, r22
    73a0:	23 81       	ldd	r18, Z+3	; 0x03
    73a2:	21 fd       	sbrc	r18, 1
    73a4:	03 c0       	rjmp	.+6      	; 0x73ac <fputc+0x16>
    73a6:	8f ef       	ldi	r24, 0xFF	; 255
    73a8:	9f ef       	ldi	r25, 0xFF	; 255
    73aa:	2c c0       	rjmp	.+88     	; 0x7404 <fputc+0x6e>
    73ac:	22 ff       	sbrs	r18, 2
    73ae:	16 c0       	rjmp	.+44     	; 0x73dc <fputc+0x46>
    73b0:	46 81       	ldd	r20, Z+6	; 0x06
    73b2:	57 81       	ldd	r21, Z+7	; 0x07
    73b4:	24 81       	ldd	r18, Z+4	; 0x04
    73b6:	35 81       	ldd	r19, Z+5	; 0x05
    73b8:	42 17       	cp	r20, r18
    73ba:	53 07       	cpc	r21, r19
    73bc:	44 f4       	brge	.+16     	; 0x73ce <fputc+0x38>
    73be:	a0 81       	ld	r26, Z
    73c0:	b1 81       	ldd	r27, Z+1	; 0x01
    73c2:	9d 01       	movw	r18, r26
    73c4:	2f 5f       	subi	r18, 0xFF	; 255
    73c6:	3f 4f       	sbci	r19, 0xFF	; 255
    73c8:	31 83       	std	Z+1, r19	; 0x01
    73ca:	20 83       	st	Z, r18
    73cc:	8c 93       	st	X, r24
    73ce:	26 81       	ldd	r18, Z+6	; 0x06
    73d0:	37 81       	ldd	r19, Z+7	; 0x07
    73d2:	2f 5f       	subi	r18, 0xFF	; 255
    73d4:	3f 4f       	sbci	r19, 0xFF	; 255
    73d6:	37 83       	std	Z+7, r19	; 0x07
    73d8:	26 83       	std	Z+6, r18	; 0x06
    73da:	14 c0       	rjmp	.+40     	; 0x7404 <fputc+0x6e>
    73dc:	8b 01       	movw	r16, r22
    73de:	ec 01       	movw	r28, r24
    73e0:	fb 01       	movw	r30, r22
    73e2:	00 84       	ldd	r0, Z+8	; 0x08
    73e4:	f1 85       	ldd	r31, Z+9	; 0x09
    73e6:	e0 2d       	mov	r30, r0
    73e8:	09 95       	icall
    73ea:	89 2b       	or	r24, r25
    73ec:	e1 f6       	brne	.-72     	; 0x73a6 <fputc+0x10>
    73ee:	d8 01       	movw	r26, r16
    73f0:	16 96       	adiw	r26, 0x06	; 6
    73f2:	8d 91       	ld	r24, X+
    73f4:	9c 91       	ld	r25, X
    73f6:	17 97       	sbiw	r26, 0x07	; 7
    73f8:	01 96       	adiw	r24, 0x01	; 1
    73fa:	17 96       	adiw	r26, 0x07	; 7
    73fc:	9c 93       	st	X, r25
    73fe:	8e 93       	st	-X, r24
    7400:	16 97       	sbiw	r26, 0x06	; 6
    7402:	ce 01       	movw	r24, r28
    7404:	df 91       	pop	r29
    7406:	cf 91       	pop	r28
    7408:	1f 91       	pop	r17
    740a:	0f 91       	pop	r16
    740c:	08 95       	ret

0000740e <__ultoa_invert>:
    740e:	fa 01       	movw	r30, r20
    7410:	aa 27       	eor	r26, r26
    7412:	28 30       	cpi	r18, 0x08	; 8
    7414:	51 f1       	breq	.+84     	; 0x746a <__ultoa_invert+0x5c>
    7416:	20 31       	cpi	r18, 0x10	; 16
    7418:	81 f1       	breq	.+96     	; 0x747a <__ultoa_invert+0x6c>
    741a:	e8 94       	clt
    741c:	6f 93       	push	r22
    741e:	6e 7f       	andi	r22, 0xFE	; 254
    7420:	6e 5f       	subi	r22, 0xFE	; 254
    7422:	7f 4f       	sbci	r23, 0xFF	; 255
    7424:	8f 4f       	sbci	r24, 0xFF	; 255
    7426:	9f 4f       	sbci	r25, 0xFF	; 255
    7428:	af 4f       	sbci	r26, 0xFF	; 255
    742a:	b1 e0       	ldi	r27, 0x01	; 1
    742c:	3e d0       	rcall	.+124    	; 0x74aa <__ultoa_invert+0x9c>
    742e:	b4 e0       	ldi	r27, 0x04	; 4
    7430:	3c d0       	rcall	.+120    	; 0x74aa <__ultoa_invert+0x9c>
    7432:	67 0f       	add	r22, r23
    7434:	78 1f       	adc	r23, r24
    7436:	89 1f       	adc	r24, r25
    7438:	9a 1f       	adc	r25, r26
    743a:	a1 1d       	adc	r26, r1
    743c:	68 0f       	add	r22, r24
    743e:	79 1f       	adc	r23, r25
    7440:	8a 1f       	adc	r24, r26
    7442:	91 1d       	adc	r25, r1
    7444:	a1 1d       	adc	r26, r1
    7446:	6a 0f       	add	r22, r26
    7448:	71 1d       	adc	r23, r1
    744a:	81 1d       	adc	r24, r1
    744c:	91 1d       	adc	r25, r1
    744e:	a1 1d       	adc	r26, r1
    7450:	20 d0       	rcall	.+64     	; 0x7492 <__ultoa_invert+0x84>
    7452:	09 f4       	brne	.+2      	; 0x7456 <__ultoa_invert+0x48>
    7454:	68 94       	set
    7456:	3f 91       	pop	r19
    7458:	2a e0       	ldi	r18, 0x0A	; 10
    745a:	26 9f       	mul	r18, r22
    745c:	11 24       	eor	r1, r1
    745e:	30 19       	sub	r19, r0
    7460:	30 5d       	subi	r19, 0xD0	; 208
    7462:	31 93       	st	Z+, r19
    7464:	de f6       	brtc	.-74     	; 0x741c <__ultoa_invert+0xe>
    7466:	cf 01       	movw	r24, r30
    7468:	08 95       	ret
    746a:	46 2f       	mov	r20, r22
    746c:	47 70       	andi	r20, 0x07	; 7
    746e:	40 5d       	subi	r20, 0xD0	; 208
    7470:	41 93       	st	Z+, r20
    7472:	b3 e0       	ldi	r27, 0x03	; 3
    7474:	0f d0       	rcall	.+30     	; 0x7494 <__ultoa_invert+0x86>
    7476:	c9 f7       	brne	.-14     	; 0x746a <__ultoa_invert+0x5c>
    7478:	f6 cf       	rjmp	.-20     	; 0x7466 <__ultoa_invert+0x58>
    747a:	46 2f       	mov	r20, r22
    747c:	4f 70       	andi	r20, 0x0F	; 15
    747e:	40 5d       	subi	r20, 0xD0	; 208
    7480:	4a 33       	cpi	r20, 0x3A	; 58
    7482:	18 f0       	brcs	.+6      	; 0x748a <__ultoa_invert+0x7c>
    7484:	49 5d       	subi	r20, 0xD9	; 217
    7486:	31 fd       	sbrc	r19, 1
    7488:	40 52       	subi	r20, 0x20	; 32
    748a:	41 93       	st	Z+, r20
    748c:	02 d0       	rcall	.+4      	; 0x7492 <__ultoa_invert+0x84>
    748e:	a9 f7       	brne	.-22     	; 0x747a <__ultoa_invert+0x6c>
    7490:	ea cf       	rjmp	.-44     	; 0x7466 <__ultoa_invert+0x58>
    7492:	b4 e0       	ldi	r27, 0x04	; 4
    7494:	a6 95       	lsr	r26
    7496:	97 95       	ror	r25
    7498:	87 95       	ror	r24
    749a:	77 95       	ror	r23
    749c:	67 95       	ror	r22
    749e:	ba 95       	dec	r27
    74a0:	c9 f7       	brne	.-14     	; 0x7494 <__ultoa_invert+0x86>
    74a2:	00 97       	sbiw	r24, 0x00	; 0
    74a4:	61 05       	cpc	r22, r1
    74a6:	71 05       	cpc	r23, r1
    74a8:	08 95       	ret
    74aa:	9b 01       	movw	r18, r22
    74ac:	ac 01       	movw	r20, r24
    74ae:	0a 2e       	mov	r0, r26
    74b0:	06 94       	lsr	r0
    74b2:	57 95       	ror	r21
    74b4:	47 95       	ror	r20
    74b6:	37 95       	ror	r19
    74b8:	27 95       	ror	r18
    74ba:	ba 95       	dec	r27
    74bc:	c9 f7       	brne	.-14     	; 0x74b0 <__ultoa_invert+0xa2>
    74be:	62 0f       	add	r22, r18
    74c0:	73 1f       	adc	r23, r19
    74c2:	84 1f       	adc	r24, r20
    74c4:	95 1f       	adc	r25, r21
    74c6:	a0 1d       	adc	r26, r0
    74c8:	08 95       	ret

000074ca <__prologue_saves__>:
    74ca:	2f 92       	push	r2
    74cc:	3f 92       	push	r3
    74ce:	4f 92       	push	r4
    74d0:	5f 92       	push	r5
    74d2:	6f 92       	push	r6
    74d4:	7f 92       	push	r7
    74d6:	8f 92       	push	r8
    74d8:	9f 92       	push	r9
    74da:	af 92       	push	r10
    74dc:	bf 92       	push	r11
    74de:	cf 92       	push	r12
    74e0:	df 92       	push	r13
    74e2:	ef 92       	push	r14
    74e4:	ff 92       	push	r15
    74e6:	0f 93       	push	r16
    74e8:	1f 93       	push	r17
    74ea:	cf 93       	push	r28
    74ec:	df 93       	push	r29
    74ee:	cd b7       	in	r28, 0x3d	; 61
    74f0:	de b7       	in	r29, 0x3e	; 62
    74f2:	ca 1b       	sub	r28, r26
    74f4:	db 0b       	sbc	r29, r27
    74f6:	0f b6       	in	r0, 0x3f	; 63
    74f8:	f8 94       	cli
    74fa:	de bf       	out	0x3e, r29	; 62
    74fc:	0f be       	out	0x3f, r0	; 63
    74fe:	cd bf       	out	0x3d, r28	; 61
    7500:	09 94       	ijmp

00007502 <__epilogue_restores__>:
    7502:	2a 88       	ldd	r2, Y+18	; 0x12
    7504:	39 88       	ldd	r3, Y+17	; 0x11
    7506:	48 88       	ldd	r4, Y+16	; 0x10
    7508:	5f 84       	ldd	r5, Y+15	; 0x0f
    750a:	6e 84       	ldd	r6, Y+14	; 0x0e
    750c:	7d 84       	ldd	r7, Y+13	; 0x0d
    750e:	8c 84       	ldd	r8, Y+12	; 0x0c
    7510:	9b 84       	ldd	r9, Y+11	; 0x0b
    7512:	aa 84       	ldd	r10, Y+10	; 0x0a
    7514:	b9 84       	ldd	r11, Y+9	; 0x09
    7516:	c8 84       	ldd	r12, Y+8	; 0x08
    7518:	df 80       	ldd	r13, Y+7	; 0x07
    751a:	ee 80       	ldd	r14, Y+6	; 0x06
    751c:	fd 80       	ldd	r15, Y+5	; 0x05
    751e:	0c 81       	ldd	r16, Y+4	; 0x04
    7520:	1b 81       	ldd	r17, Y+3	; 0x03
    7522:	aa 81       	ldd	r26, Y+2	; 0x02
    7524:	b9 81       	ldd	r27, Y+1	; 0x01
    7526:	ce 0f       	add	r28, r30
    7528:	d1 1d       	adc	r29, r1
    752a:	0f b6       	in	r0, 0x3f	; 63
    752c:	f8 94       	cli
    752e:	de bf       	out	0x3e, r29	; 62
    7530:	0f be       	out	0x3f, r0	; 63
    7532:	cd bf       	out	0x3d, r28	; 61
    7534:	ed 01       	movw	r28, r26
    7536:	08 95       	ret

00007538 <_exit>:
    7538:	f8 94       	cli

0000753a <__stop_program>:
    753a:	ff cf       	rjmp	.-2      	; 0x753a <__stop_program>
