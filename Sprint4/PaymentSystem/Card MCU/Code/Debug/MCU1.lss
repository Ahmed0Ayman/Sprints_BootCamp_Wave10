
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000022a  00800060  00003a1a  00003aae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000056  0080028a  0080028a  00003cd8  2**0
                  ALLOC
  3 .stab         00003b94  00000000  00000000  00003cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000022f2  00000000  00000000  0000786c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ba57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c942  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d6f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d850  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dadd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e2ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_1>
       8:	0c 94 c3 09 	jmp	0x1386	; 0x1386 <__vector_2>
       c:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3e       	cpi	r26, 0xE0	; 224
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a0 1c 	call	0x3940	; 0x3940 <main>
      8a:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cb 1c 	jmp	0x3996	; 0x3996 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e5       	ldi	r26, 0x54	; 84
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cb 1c 	jmp	0x3996	; 0x3996 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e5       	ldi	r24, 0x54	; 84
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f3 1c 	jmp	0x39e6	; 0x39e6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 db 1c 	jmp	0x39b6	; 0x39b6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f7 1c 	jmp	0x39ee	; 0x39ee <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <UART_init+0xc>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Mode in U2X bit in UCSRA Register */
	UCSRA = (UCSRA & 0xFD) | ( (Config_Ptr -> uart_Mode) << 1);
     b5a:	ab e2       	ldi	r26, 0x2B	; 43
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	eb e2       	ldi	r30, 0x2B	; 43
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	28 2f       	mov	r18, r24
     b66:	2d 7f       	andi	r18, 0xFD	; 253
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	84 81       	ldd	r24, Z+4	; 0x04
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	82 2b       	or	r24, r18
     b78:	8c 93       	st	X, r24

	/* In Case of Nine Bit Data */
	if(Config_Ptr -> uart_DataBits == NINE_BITS)
     b7a:	e9 81       	ldd	r30, Y+1	; 0x01
     b7c:	fa 81       	ldd	r31, Y+2	; 0x02
     b7e:	85 81       	ldd	r24, Z+5	; 0x05
     b80:	87 30       	cpi	r24, 0x07	; 7
     b82:	a1 f4       	brne	.+40     	; 0xbac <UART_init+0x66>
	{
		/* Insert the last bit of required data bits in bit UCSZ2 in UCSRB Register */
		UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr -> uart_DataBits) & 0x04);
     b84:	aa e2       	ldi	r26, 0x2A	; 42
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ea e2       	ldi	r30, 0x2A	; 42
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	98 2f       	mov	r25, r24
     b90:	9b 7f       	andi	r25, 0xFB	; 251
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	85 81       	ldd	r24, Z+5	; 0x05
     b98:	84 70       	andi	r24, 0x04	; 4
     b9a:	89 2b       	or	r24, r25
     b9c:	8c 93       	st	X, r24

		/* Two bits RXB8 & TXB8 must be Enabled in UCSRB Register */
		UCSRB |= (1 << RXB8) | (1 << TXB8);
     b9e:	aa e2       	ldi	r26, 0x2A	; 42
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	ea e2       	ldi	r30, 0x2A	; 42
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	83 60       	ori	r24, 0x03	; 3
     baa:	8c 93       	st	X, r24

	/*
	 * Enable Transmitter & Receiver to be able to transmit and receive thought
	 * the UART driver
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     bac:	aa e2       	ldi	r26, 0x2A	; 42
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ea e2       	ldi	r30, 0x2A	; 42
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 61       	ori	r24, 0x18	; 24
     bb8:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC */
	UCSRC |= (1 << URSEL);
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	8c 93       	st	X, r24

	/*
	 * Insert the First two bits of required data bits in bits (UCSZ0, UCSZ1)
	 * in UCSRC Register in case of (5,6,7 or 8) Data bits
	 */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr -> uart_DataBits & 0x03) << 1);
     bc8:	a0 e4       	ldi	r26, 0x40	; 64
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e0 e4       	ldi	r30, 0x40	; 64
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	28 2f       	mov	r18, r24
     bd4:	29 7f       	andi	r18, 0xF9	; 249
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	85 81       	ldd	r24, Z+5	; 0x05
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	83 70       	andi	r24, 0x03	; 3
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	82 2b       	or	r24, r18
     bea:	8c 93       	st	X, r24

	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr -> uart_Parity) << 4);
     bec:	a0 e4       	ldi	r26, 0x40	; 64
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e0 e4       	ldi	r30, 0x40	; 64
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	28 2f       	mov	r18, r24
     bf8:	2f 7c       	andi	r18, 0xCF	; 207
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	86 81       	ldd	r24, Z+6	; 0x06
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	82 95       	swap	r24
     c06:	92 95       	swap	r25
     c08:	90 7f       	andi	r25, 0xF0	; 240
     c0a:	98 27       	eor	r25, r24
     c0c:	80 7f       	andi	r24, 0xF0	; 240
     c0e:	98 27       	eor	r25, r24
     c10:	82 2b       	or	r24, r18
     c12:	8c 93       	st	X, r24

	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr -> uart_StopBit) << 3);
     c14:	a0 e4       	ldi	r26, 0x40	; 64
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e0 e4       	ldi	r30, 0x40	; 64
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	28 2f       	mov	r18, r24
     c20:	27 7f       	andi	r18, 0xF7	; 247
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	87 81       	ldd	r24, Z+7	; 0x07
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	82 2b       	or	r24, r18
     c3a:	8c 93       	st	X, r24
	/*
	 * This switch case is to choose between two Modes (Normal, Double Speed),
	 * then calculate and insert the required Baud rate in First 8 bits from the
	 * BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 */
	switch(Config_Ptr -> uart_Mode)
     c3c:	e9 81       	ldd	r30, Y+1	; 0x01
     c3e:	fa 81       	ldd	r31, Y+2	; 0x02
     c40:	84 81       	ldd	r24, Z+4	; 0x04
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3c 83       	std	Y+4, r19	; 0x04
     c48:	2b 83       	std	Y+3, r18	; 0x03
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	39 f0       	breq	.+14     	; 0xc60 <UART_init+0x11a>
     c52:	eb 81       	ldd	r30, Y+3	; 0x03
     c54:	fc 81       	ldd	r31, Y+4	; 0x04
     c56:	e1 30       	cpi	r30, 0x01	; 1
     c58:	f1 05       	cpc	r31, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <UART_init+0x118>
     c5c:	56 c0       	rjmp	.+172    	; 0xd0a <UART_init+0x1c4>
     c5e:	a1 c0       	rjmp	.+322    	; 0xda2 <UART_init+0x25c>
	{
	case NORMAL_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1) >> 8 );
     c60:	00 e4       	ldi	r16, 0x40	; 64
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	a2 81       	ldd	r26, Z+2	; 0x02
     c6e:	b3 81       	ldd	r27, Z+3	; 0x03
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	aa 1f       	adc	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	aa 1f       	adc	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	aa 1f       	adc	r26, r26
     c8e:	bb 1f       	adc	r27, r27
     c90:	9c 01       	movw	r18, r24
     c92:	ad 01       	movw	r20, r26
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	92 e1       	ldi	r25, 0x12	; 18
     c98:	aa e7       	ldi	r26, 0x7A	; 122
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	bc 01       	movw	r22, r24
     c9e:	cd 01       	movw	r24, r26
     ca0:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__udivmodsi4>
     ca4:	da 01       	movw	r26, r20
     ca6:	c9 01       	movw	r24, r18
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	a1 09       	sbc	r26, r1
     cac:	b1 09       	sbc	r27, r1
     cae:	89 2f       	mov	r24, r25
     cb0:	9a 2f       	mov	r25, r26
     cb2:	ab 2f       	mov	r26, r27
     cb4:	bb 27       	eor	r27, r27
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1 );
     cba:	09 e2       	ldi	r16, 0x29	; 41
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	a2 81       	ldd	r26, Z+2	; 0x02
     cc8:	b3 81       	ldd	r27, Z+3	; 0x03
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	aa 1f       	adc	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	aa 1f       	adc	r26, r26
     cd8:	bb 1f       	adc	r27, r27
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	aa 1f       	adc	r26, r26
     ce0:	bb 1f       	adc	r27, r27
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	aa 1f       	adc	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	9c 01       	movw	r18, r24
     cec:	ad 01       	movw	r20, r26
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	92 e1       	ldi	r25, 0x12	; 18
     cf2:	aa e7       	ldi	r26, 0x7A	; 122
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__udivmodsi4>
     cfe:	da 01       	movw	r26, r20
     d00:	c9 01       	movw	r24, r18
     d02:	81 50       	subi	r24, 0x01	; 1
     d04:	f8 01       	movw	r30, r16
     d06:	80 83       	st	Z, r24
     d08:	4c c0       	rjmp	.+152    	; 0xda2 <UART_init+0x25c>
						break;

	case DOUBLE_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1) >> 8 );
     d0a:	00 e4       	ldi	r16, 0x40	; 64
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	e9 81       	ldd	r30, Y+1	; 0x01
     d10:	fa 81       	ldd	r31, Y+2	; 0x02
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	a2 81       	ldd	r26, Z+2	; 0x02
     d18:	b3 81       	ldd	r27, Z+3	; 0x03
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	aa 1f       	adc	r26, r26
     d20:	bb 1f       	adc	r27, r27
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	aa 1f       	adc	r26, r26
     d28:	bb 1f       	adc	r27, r27
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	aa 1f       	adc	r26, r26
     d30:	bb 1f       	adc	r27, r27
     d32:	9c 01       	movw	r18, r24
     d34:	ad 01       	movw	r20, r26
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	92 e1       	ldi	r25, 0x12	; 18
     d3a:	aa e7       	ldi	r26, 0x7A	; 122
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__udivmodsi4>
     d46:	da 01       	movw	r26, r20
     d48:	c9 01       	movw	r24, r18
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	a1 09       	sbc	r26, r1
     d4e:	b1 09       	sbc	r27, r1
     d50:	89 2f       	mov	r24, r25
     d52:	9a 2f       	mov	r25, r26
     d54:	ab 2f       	mov	r26, r27
     d56:	bb 27       	eor	r27, r27
     d58:	f8 01       	movw	r30, r16
     d5a:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1 );
     d5c:	09 e2       	ldi	r16, 0x29	; 41
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	a2 81       	ldd	r26, Z+2	; 0x02
     d6a:	b3 81       	ldd	r27, Z+3	; 0x03
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	aa 1f       	adc	r26, r26
     d72:	bb 1f       	adc	r27, r27
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	aa 1f       	adc	r26, r26
     d7a:	bb 1f       	adc	r27, r27
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	aa 1f       	adc	r26, r26
     d82:	bb 1f       	adc	r27, r27
     d84:	9c 01       	movw	r18, r24
     d86:	ad 01       	movw	r20, r26
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	92 e1       	ldi	r25, 0x12	; 18
     d8c:	aa e7       	ldi	r26, 0x7A	; 122
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__udivmodsi4>
     d98:	da 01       	movw	r26, r20
     d9a:	c9 01       	movw	r24, r18
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	f8 01       	movw	r30, r16
     da0:	80 83       	st	Z, r24
						break;
	}
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <UART_sendByte>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendByte(const uint8_t data)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     dc0:	eb e2       	ldi	r30, 0x2B	; 43
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	80 72       	andi	r24, 0x20	; 32
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	b9 f3       	breq	.-18     	; 0xdc0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE
	 * flag as the UDR register is not empty now
	 */
	UDR = data;
     dd2:	ec e2       	ldi	r30, 0x2C	; 44
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	80 83       	st	Z, r24
}
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <UART_recieveByte>:
 * [in/out]		 	None
 *
 * [Returns]:       The Byte that received through the UART
 ****************************************************************************************/
uint8_t UART_recieveByte(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART receive data so wait until this
	 * flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     dea:	eb e2       	ldi	r30, 0x2B	; 43
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	dc f7       	brge	.-10     	; 0xdea <UART_recieveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR) and the RXC flag
	 * will be cleared after read this data
	 */
	return UDR;
     df4:	ec e2       	ldi	r30, 0x2C	; 44
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <UART_sendString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendString(const uint8_t * Str)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <UART_sendString+0x6>
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     e10:	19 82       	std	Y+1, r1	; 0x01
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	fc 01       	movw	r30, r24
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	80 81       	ld	r24, Z
     e26:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_sendByte>
		i++;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	89 83       	std	Y+1, r24	; 0x01
 ****************************************************************************************/
void UART_sendString(const uint8_t * Str)
{
	uint8_t i = 0;

	while(Str[i] != '\0')
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	fc 01       	movw	r30, r24
     e3c:	e2 0f       	add	r30, r18
     e3e:	f3 1f       	adc	r31, r19
     e40:	80 81       	ld	r24, Z
     e42:	88 23       	and	r24, r24
     e44:	39 f7       	brne	.-50     	; 0xe14 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <UART_receiveString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_receiveString(uint8_t * Str)
{
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <UART_receiveString+0xa>
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9b 83       	std	Y+3, r25	; 0x03
     e64:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     e66:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	8c 01       	movw	r16, r24
     e74:	02 0f       	add	r16, r18
     e76:	13 1f       	adc	r17, r19
     e78:	0e 94 f1 06 	call	0xde2	; 0xde2 <UART_recieveByte>
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 83       	st	Z, r24
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <UART_receiveString+0x4e>
	while(Str[i] != '\r')
	{
		i++;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	8c 01       	movw	r16, r24
     e94:	02 0f       	add	r16, r18
     e96:	13 1f       	adc	r17, r19
     e98:	0e 94 f1 06 	call	0xde2	; 0xde2 <UART_recieveByte>
     e9c:	f8 01       	movw	r30, r16
     e9e:	80 83       	st	Z, r24
void UART_receiveString(uint8_t * Str)
{
	uint8_t i = 0;

	Str[i] = UART_recieveByte();
	while(Str[i] != '\r')
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	fc 01       	movw	r30, r24
     eac:	e2 0f       	add	r30, r18
     eae:	f3 1f       	adc	r31, r19
     eb0:	80 81       	ld	r24, Z
     eb2:	8d 30       	cpi	r24, 0x0D	; 13
     eb4:	31 f7       	brne	.-52     	; 0xe82 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	//Str[i] = ' ';
	//++i;
	Str[i] = '\0';
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	fc 01       	movw	r30, r24
     ec2:	e2 0f       	add	r30, r18
     ec4:	f3 1f       	adc	r31, r19
     ec6:	10 82       	st	Z, r1
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <UART_setParityType>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setParityType(const UART_ParityType a_parityType)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | (a_parityType << 4);
     ee4:	a0 e4       	ldi	r26, 0x40	; 64
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e0 e4       	ldi	r30, 0x40	; 64
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	28 2f       	mov	r18, r24
     ef0:	2f 7c       	andi	r18, 0xCF	; 207
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	82 95       	swap	r24
     efa:	92 95       	swap	r25
     efc:	90 7f       	andi	r25, 0xF0	; 240
     efe:	98 27       	eor	r25, r24
     f00:	80 7f       	andi	r24, 0xF0	; 240
     f02:	98 27       	eor	r25, r24
     f04:	82 2b       	or	r24, r18
     f06:	8c 93       	st	X, r24
}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <UART_setStopBit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setStopBit(const UART_StopBit a_stopBit)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( a_stopBit << 3);
     f1c:	a0 e4       	ldi	r26, 0x40	; 64
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e0 e4       	ldi	r30, 0x40	; 64
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	28 2f       	mov	r18, r24
     f28:	27 7f       	andi	r18, 0xF7	; 247
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	82 2b       	or	r24, r18
     f3e:	8c 93       	st	X, r24
}
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <UART_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_DeInit(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	/* Reset All UART Registers to its initial value */
	UCSRA = 0x20;
     f50:	eb e2       	ldi	r30, 0x2B	; 43
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	80 83       	st	Z, r24
	UCSRB = 0;
     f58:	ea e2       	ldi	r30, 0x2A	; 42
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	10 82       	st	Z, r1
	UCSRC = 0x86;
     f5e:	e0 e4       	ldi	r30, 0x40	; 64
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	86 e8       	ldi	r24, 0x86	; 134
     f64:	80 83       	st	Z, r24

	/* Clear UART Baud Rate Registers */
	UBRRH = 0;
     f66:	e0 e4       	ldi	r30, 0x40	; 64
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	10 82       	st	Z, r1
	UBRRL = 0;
     f6c:	e9 e2       	ldi	r30, 0x29	; 41
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	10 82       	st	Z, r1
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <SPI_initMaster>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_initMaster(void) 
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7)  --> Output
	 ********************************************/
	DIO_setPinDirection(DIO_PORTB, PIN_4, OUTPUT);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	64 e0       	ldi	r22, 0x04	; 4
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_5, OUTPUT);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	65 e0       	ldi	r22, 0x05	; 5
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_6, INPUT);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	66 e0       	ldi	r22, 0x06	; 6
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_7, OUTPUT);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	67 e0       	ldi	r22, 0x07	; 7
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_setPinDirection>
	
	SPCR = (1<<SPE) | (1<<MSTR); /* Enable SPI + Enable Master + Choose SPI clock = Fosc/4 */
     fa8:	ed e2       	ldi	r30, 0x2D	; 45
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 e5       	ldi	r24, 0x50	; 80
     fae:	80 83       	st	Z, r24
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <SPI_initSlave>:

void SPI_initSlave(void)
{ 
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7)  --> Input
	 ********************************************/
	DIO_setPinDirection(DIO_PORTB, PIN_4, INPUT);
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	64 e0       	ldi	r22, 0x04	; 4
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_5, INPUT);
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	65 e0       	ldi	r22, 0x05	; 5
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_6, OUTPUT);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	66 e0       	ldi	r22, 0x06	; 6
     fd6:	41 e0       	ldi	r20, 0x01	; 1
     fd8:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_7, INPUT);
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	67 e0       	ldi	r22, 0x07	; 7
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	0e 94 92 0b 	call	0x1724	; 0x1724 <DIO_setPinDirection>

	SPCR = (1<<SPE); /* Just enable SPI + Choose SPI clock = Fosc/4 */
     fe6:	ed e2       	ldi	r30, 0x2D	; 45
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 e4       	ldi	r24, 0x40	; 64
     fec:	80 83       	st	Z, r24
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <SPI_sendByte>:

void SPI_sendByte(const uint8_t data)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data; /* Send data by SPI */
    1000:	ef e2       	ldi	r30, 0x2F	; 47
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF)){} /* Wait until SPI interrupt flag=1 (data is sent correctly) */
    1008:	ee e2       	ldi	r30, 0x2E	; 46
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	88 23       	and	r24, r24
    1010:	dc f7       	brge	.-10     	; 0x1008 <SPI_sendByte+0x14>
}
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <SPI_recieveByte>:

uint8_t SPI_recieveByte(void)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
   while(BIT_IS_CLEAR(SPSR,SPIF)){} /* Wait until SPI interrupt flag=1(data is receive correctly) */
    1022:	ee e2       	ldi	r30, 0x2E	; 46
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 23       	and	r24, r24
    102a:	dc f7       	brge	.-10     	; 0x1022 <SPI_recieveByte+0x8>
   return SPDR; /* Return the received byte from SPI data register */
    102c:	ef e2       	ldi	r30, 0x2F	; 47
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
}
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <SPI_sendString>:

void SPI_sendString(const uint8_t * Str)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <SPI_sendString+0x6>
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	9b 83       	std	Y+3, r25	; 0x03
    1046:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    1048:	19 82       	std	Y+1, r1	; 0x01
    104a:	0e c0       	rjmp	.+28     	; 0x1068 <SPI_sendString+0x30>

	while(Str[i] != '\0')
	{
		SPI_sendByte(Str[i]);
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	fc 01       	movw	r30, r24
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	80 81       	ld	r24, Z
    105e:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_sendByte>
		i++;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	89 83       	std	Y+1, r24	; 0x01

void SPI_sendString(const uint8_t * Str)
{
	uint8_t i = 0;

	while(Str[i] != '\0')
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	9b 81       	ldd	r25, Y+3	; 0x03
    1072:	fc 01       	movw	r30, r24
    1074:	e2 0f       	add	r30, r18
    1076:	f3 1f       	adc	r31, r19
    1078:	80 81       	ld	r24, Z
    107a:	88 23       	and	r24, r24
    107c:	39 f7       	brne	.-50     	; 0x104c <SPI_sendString+0x14>
	{
		SPI_sendByte(Str[i]);
		i++;
	}
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <SPI_receiveString>:

void SPI_receiveString(char * Str)
{
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <SPI_receiveString+0xa>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    109e:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = SPI_recieveByte();
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	9b 81       	ldd	r25, Y+3	; 0x03
    10aa:	8c 01       	movw	r16, r24
    10ac:	02 0f       	add	r16, r18
    10ae:	13 1f       	adc	r17, r19
    10b0:	0e 94 0d 08 	call	0x101a	; 0x101a <SPI_recieveByte>
    10b4:	f8 01       	movw	r30, r16
    10b6:	80 83       	st	Z, r24
    10b8:	0f c0       	rjmp	.+30     	; 0x10d8 <SPI_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = SPI_recieveByte();
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	8c 01       	movw	r16, r24
    10cc:	02 0f       	add	r16, r18
    10ce:	13 1f       	adc	r17, r19
    10d0:	0e 94 0d 08 	call	0x101a	; 0x101a <SPI_recieveByte>
    10d4:	f8 01       	movw	r30, r16
    10d6:	80 83       	st	Z, r24
void SPI_receiveString(char * Str)
{
	uint8_t i = 0;

	Str[i] = SPI_recieveByte();
	while(Str[i] != '#')
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	8a 81       	ldd	r24, Y+2	; 0x02
    10e0:	9b 81       	ldd	r25, Y+3	; 0x03
    10e2:	fc 01       	movw	r30, r24
    10e4:	e2 0f       	add	r30, r18
    10e6:	f3 1f       	adc	r31, r19
    10e8:	80 81       	ld	r24, Z
    10ea:	83 32       	cpi	r24, 0x23	; 35
    10ec:	31 f7       	brne	.-52     	; 0x10ba <SPI_receiveString+0x30>
	{
		i++;
		Str[i] = SPI_recieveByte();
	}
	Str[i] = '\0';
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	9b 81       	ldd	r25, Y+3	; 0x03
    10f8:	fc 01       	movw	r30, r24
    10fa:	e2 0f       	add	r30, r18
    10fc:	f3 1f       	adc	r31, r19
    10fe:	10 82       	st	Z, r1
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	cf 91       	pop	r28
    1108:	df 91       	pop	r29
    110a:	1f 91       	pop	r17
    110c:	0f 91       	pop	r16
    110e:	08 95       	ret

00001110 <EXTI_Init>:
 * brief this function used to enable and configure the selected INIT 
 * param : Handler is pointer to struct hold all INIT configurations 
 * return : void 
 */
void EXTI_Init(EXIT_Handler_t * Handler)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	00 d0       	rcall	.+0      	; 0x1116 <EXTI_Init+0x6>
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
	
	if(Handler->EXTI_NUM == EXTI_NUM_2) /* INIT2 only available for edge detection */
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	80 81       	ld	r24, Z
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	e1 f4       	brne	.+56     	; 0x1160 <EXTI_Init+0x50>
	{
		if(Handler->EXTI_EDGE_DETECTION == EXTI_EDGE_FAILING_EDGE)
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	81 81       	ldd	r24, Z+1	; 0x01
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	41 f4       	brne	.+16     	; 0x1142 <EXTI_Init+0x32>
			MCUCSR &=~(1<<ISC2);
    1132:	a4 e5       	ldi	r26, 0x54	; 84
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e4 e5       	ldi	r30, 0x54	; 84
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	8f 7b       	andi	r24, 0xBF	; 191
    113e:	8c 93       	st	X, r24
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <EXTI_Init+0x40>
		else
			MCUCSR |= (1<<ISC2);
    1142:	a4 e5       	ldi	r26, 0x54	; 84
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e4 e5       	ldi	r30, 0x54	; 84
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 64       	ori	r24, 0x40	; 64
    114e:	8c 93       	st	X, r24
			GICR |= (1<<INT2);  /* enable the required INIT */
    1150:	ab e5       	ldi	r26, 0x5B	; 91
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e5       	ldi	r30, 0x5B	; 91
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	80 62       	ori	r24, 0x20	; 32
    115c:	8c 93       	st	X, r24
    115e:	40 c0       	rjmp	.+128    	; 0x11e0 <EXTI_Init+0xd0>
	}else{   /* set configurations for INIT1 or INIT2  */
		
		MCUCR &=~(0x0f);
    1160:	a5 e5       	ldi	r26, 0x55	; 85
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e5       	ldi	r30, 0x55	; 85
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 7f       	andi	r24, 0xF0	; 240
    116c:	8c 93       	st	X, r24
		if(Handler->EXTI_NUM == EXTI_NUM_0)
    116e:	e9 81       	ldd	r30, Y+1	; 0x01
    1170:	fa 81       	ldd	r31, Y+2	; 0x02
    1172:	80 81       	ld	r24, Z
    1174:	88 23       	and	r24, r24
    1176:	91 f4       	brne	.+36     	; 0x119c <EXTI_Init+0x8c>
		{
		MCUCR |= Handler->EXTI_EDGE_DETECTION;
    1178:	a5 e5       	ldi	r26, 0x55	; 85
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e5       	ldi	r30, 0x55	; 85
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	90 81       	ld	r25, Z
    1182:	e9 81       	ldd	r30, Y+1	; 0x01
    1184:	fa 81       	ldd	r31, Y+2	; 0x02
    1186:	81 81       	ldd	r24, Z+1	; 0x01
    1188:	89 2b       	or	r24, r25
    118a:	8c 93       	st	X, r24
		GICR |= (1<<INT0);  /* enable the required INIT */
    118c:	ab e5       	ldi	r26, 0x5B	; 91
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	eb e5       	ldi	r30, 0x5B	; 91
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	80 64       	ori	r24, 0x40	; 64
    1198:	8c 93       	st	X, r24
    119a:	22 c0       	rjmp	.+68     	; 0x11e0 <EXTI_Init+0xd0>
		}
		else
		{
		MCUCR |= (Handler->EXTI_EDGE_DETECTION<<(2*Handler->EXTI_NUM));
    119c:	a5 e5       	ldi	r26, 0x55	; 85
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e5       	ldi	r30, 0x55	; 85
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	e9 81       	ldd	r30, Y+1	; 0x01
    11aa:	fa 81       	ldd	r31, Y+2	; 0x02
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	e9 81       	ldd	r30, Y+1	; 0x01
    11b4:	fa 81       	ldd	r31, Y+2	; 0x02
    11b6:	80 81       	ld	r24, Z
    11b8:	88 2f       	mov	r24, r24
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	b9 01       	movw	r22, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <EXTI_Init+0xb8>
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <EXTI_Init+0xb4>
    11cc:	cb 01       	movw	r24, r22
    11ce:	84 2b       	or	r24, r20
    11d0:	8c 93       	st	X, r24
		GICR |= (1<<INT1);  /* enable the required INIT */
    11d2:	ab e5       	ldi	r26, 0x5B	; 91
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	eb e5       	ldi	r30, 0x5B	; 91
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	80 68       	ori	r24, 0x80	; 128
    11de:	8c 93       	st	X, r24
	}
	
	

	
	sei();
    11e0:	78 94       	sei
	
}/* END_FUN EXTI_Init()  */
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	cf 91       	pop	r28
    11e8:	df 91       	pop	r29
    11ea:	08 95       	ret

000011ec <EXIT_INT0_CallBack>:
 * brief this function used to call back user function when the INIT0 is triggered
 * param : PtrToFun pointer to  user function  
 * return : void 
 */
void EXIT_INT0_CallBack(PtrFun PtrToFun)
{
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <EXIT_INT0_CallBack+0x6>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	9a 83       	std	Y+2, r25	; 0x02
    11f8:	89 83       	std	Y+1, r24	; 0x01
	
	ptr_INT0  = PtrToFun ;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	90 93 8c 02 	sts	0x028C, r25
    1202:	80 93 8b 02 	sts	0x028B, r24
	
	
}/* END_FUN EXIT_INT0_CallBack()  */
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <EXIT_INT1_CallBack>:
 * brief this function used to call back user function when the INIT1 is triggered
 * param : PtrToFun pointer to  user function  
 * return : void 
 */
void EXIT_INT1_CallBack(PtrFun PtrToFun)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <EXIT_INT1_CallBack+0x6>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
	
	ptr_INT1 = PtrToFun ;
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	90 93 90 02 	sts	0x0290, r25
    1226:	80 93 8f 02 	sts	0x028F, r24
	
}/* END_FUN EXIT_INT1_CallBack()  */
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <EXIT_INT2_CallBack>:
 * brief this function used to call back user function when the INIT2 is triggered
 * param : PtrToFun pointer to  user function  
 * return : void 
 */
void EXIT_INT2_CallBack(PtrFun PtrToFun)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <EXIT_INT2_CallBack+0x6>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
	
	ptr_INT2  = PtrToFun ;
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	9a 81       	ldd	r25, Y+2	; 0x02
    1246:	90 93 8e 02 	sts	0x028E, r25
    124a:	80 93 8d 02 	sts	0x028D, r24
	
}/* END_FUN EXIT_INT2_CallBack()  */
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	cf 91       	pop	r28
    1254:	df 91       	pop	r29
    1256:	08 95       	ret

00001258 <EXTI_Gen_SoftWareINIT>:
 * brief : this function used to generate an software interrupt on a configured pin 
 * param : Handler is a pointer to struct that hold all information a bout the INIT 
 * return : void 
*/  
void EXTI_Gen_SoftWareINIT(EXIT_Handler_t * Handler)
{
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <EXTI_Gen_SoftWareINIT+0x6>
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	9a 83       	std	Y+2, r25	; 0x02
    1264:	89 83       	std	Y+1, r24	; 0x01
	
	if(Handler->EXTI_NUM == EXTI_NUM_0)
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	fa 81       	ldd	r31, Y+2	; 0x02
    126a:	80 81       	ld	r24, Z
    126c:	88 23       	and	r24, r24
    126e:	39 f4       	brne	.+14     	; 0x127e <EXTI_Gen_SoftWareINIT+0x26>
		DDRD  |= 0x4 ;
    1270:	a1 e3       	ldi	r26, 0x31	; 49
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e1 e3       	ldi	r30, 0x31	; 49
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	84 60       	ori	r24, 0x04	; 4
    127c:	8c 93       	st	X, r24
		PORTD |= 0x4 ;
    127e:	a2 e3       	ldi	r26, 0x32	; 50
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e2 e3       	ldi	r30, 0x32	; 50
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	84 60       	ori	r24, 0x04	; 4
    128a:	8c 93       	st	X, r24
	if(Handler->EXTI_NUM == EXTI_NUM_1)
    128c:	e9 81       	ldd	r30, Y+1	; 0x01
    128e:	fa 81       	ldd	r31, Y+2	; 0x02
    1290:	80 81       	ld	r24, Z
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	39 f4       	brne	.+14     	; 0x12a4 <EXTI_Gen_SoftWareINIT+0x4c>
		DDRD  |= 0x8 ;
    1296:	a1 e3       	ldi	r26, 0x31	; 49
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e1 e3       	ldi	r30, 0x31	; 49
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	88 60       	ori	r24, 0x08	; 8
    12a2:	8c 93       	st	X, r24
		PORTD |= 0x8 ;
    12a4:	a2 e3       	ldi	r26, 0x32	; 50
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e2 e3       	ldi	r30, 0x32	; 50
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	88 60       	ori	r24, 0x08	; 8
    12b0:	8c 93       	st	X, r24
	if(Handler->EXTI_NUM == EXTI_NUM_2)
    12b2:	e9 81       	ldd	r30, Y+1	; 0x01
    12b4:	fa 81       	ldd	r31, Y+2	; 0x02
    12b6:	80 81       	ld	r24, Z
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	39 f4       	brne	.+14     	; 0x12ca <EXTI_Gen_SoftWareINIT+0x72>
		DDRB  |= 0x4 ;
    12bc:	a7 e3       	ldi	r26, 0x37	; 55
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e7 e3       	ldi	r30, 0x37	; 55
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	84 60       	ori	r24, 0x04	; 4
    12c8:	8c 93       	st	X, r24
		PORTB |= 0x4 ;
    12ca:	a8 e3       	ldi	r26, 0x38	; 56
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e8 e3       	ldi	r30, 0x38	; 56
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	84 60       	ori	r24, 0x04	; 4
    12d6:	8c 93       	st	X, r24
		
}/* END_FUN EXTI_Gen_SoftWareINIT()  */
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <EXIT_DISABLE>:
 * brief : this function used to disable the determined INIT  
 * param : Handler is a pointer to struct that hold all information a bout the INIT 
 * return : void 
*/  
void EXIT_DISABLE(EXIT_Handler_t * Handler)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <EXIT_DISABLE+0x6>
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
	GICR &=~(1<<(5+Handler->EXTI_NUM));  /* disable the required INIT */
    12f0:	ab e5       	ldi	r26, 0x5B	; 91
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	eb e5       	ldi	r30, 0x5B	; 91
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	e9 81       	ldd	r30, Y+1	; 0x01
    12fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1300:	80 81       	ld	r24, Z
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9c 01       	movw	r18, r24
    1308:	2b 5f       	subi	r18, 0xFB	; 251
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <EXIT_DISABLE+0x36>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <EXIT_DISABLE+0x32>
    131c:	80 95       	com	r24
    131e:	84 23       	and	r24, r20
    1320:	8c 93       	st	X, r24
}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <__vector_1>:


/* INIT0 Function */
ISR(INT0_vect)
{
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	ptr_INT0();
    1356:	e0 91 8b 02 	lds	r30, 0x028B
    135a:	f0 91 8c 02 	lds	r31, 0x028C
    135e:	09 95       	icall
}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <__vector_2>:
/* INIT0 Function */
ISR(INT1_vect)
{
    1386:	1f 92       	push	r1
    1388:	0f 92       	push	r0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	0f 92       	push	r0
    138e:	11 24       	eor	r1, r1
    1390:	2f 93       	push	r18
    1392:	3f 93       	push	r19
    1394:	4f 93       	push	r20
    1396:	5f 93       	push	r21
    1398:	6f 93       	push	r22
    139a:	7f 93       	push	r23
    139c:	8f 93       	push	r24
    139e:	9f 93       	push	r25
    13a0:	af 93       	push	r26
    13a2:	bf 93       	push	r27
    13a4:	ef 93       	push	r30
    13a6:	ff 93       	push	r31
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
	ptr_INT1();
    13b0:	e0 91 8f 02 	lds	r30, 0x028F
    13b4:	f0 91 90 02 	lds	r31, 0x0290
    13b8:	09 95       	icall
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <__vector_3>:
/* INIT0 Function */
ISR(INT2_vect)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	2f 93       	push	r18
    13ec:	3f 93       	push	r19
    13ee:	4f 93       	push	r20
    13f0:	5f 93       	push	r21
    13f2:	6f 93       	push	r22
    13f4:	7f 93       	push	r23
    13f6:	8f 93       	push	r24
    13f8:	9f 93       	push	r25
    13fa:	af 93       	push	r26
    13fc:	bf 93       	push	r27
    13fe:	ef 93       	push	r30
    1400:	ff 93       	push	r31
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	ptr_INT2();
    140a:	e0 91 8d 02 	lds	r30, 0x028D
    140e:	f0 91 8e 02 	lds	r31, 0x028E
    1412:	09 95       	icall
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	ff 91       	pop	r31
    141a:	ef 91       	pop	r30
    141c:	bf 91       	pop	r27
    141e:	af 91       	pop	r26
    1420:	9f 91       	pop	r25
    1422:	8f 91       	pop	r24
    1424:	7f 91       	pop	r23
    1426:	6f 91       	pop	r22
    1428:	5f 91       	pop	r21
    142a:	4f 91       	pop	r20
    142c:	3f 91       	pop	r19
    142e:	2f 91       	pop	r18
    1430:	0f 90       	pop	r0
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	0f 90       	pop	r0
    1436:	1f 90       	pop	r1
    1438:	18 95       	reti

0000143a <TWI_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <TWI_init+0x12>
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Pre-scaler in First two bits (TWPS1,TWPS0) in TWSR Register */
	TWSR = (TWSR & 0xFC) | (Config_Ptr -> twi_Prescaler);
    1454:	a1 e2       	ldi	r26, 0x21	; 33
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e1 e2       	ldi	r30, 0x21	; 33
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	98 2f       	mov	r25, r24
    1460:	9c 7f       	andi	r25, 0xFC	; 252
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	85 81       	ldd	r24, Z+5	; 0x05
    1468:	89 2b       	or	r24, r25
    146a:	8c 93       	st	X, r24

	/* Insert the required Bit Rate in TWBR Register */
	TWBR = ( ( (F_CPU/Config_Ptr -> twi_Clock) -16) /2 ) / ( 4 << (Config_Ptr -> twi_Prescaler) );
    146c:	cc 24       	eor	r12, r12
    146e:	dd 24       	eor	r13, r13
    1470:	68 94       	set
    1472:	c5 f8       	bld	r12, 5
    1474:	e9 81       	ldd	r30, Y+1	; 0x01
    1476:	fa 81       	ldd	r31, Y+2	; 0x02
    1478:	21 81       	ldd	r18, Z+1	; 0x01
    147a:	32 81       	ldd	r19, Z+2	; 0x02
    147c:	43 81       	ldd	r20, Z+3	; 0x03
    147e:	54 81       	ldd	r21, Z+4	; 0x04
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	92 e1       	ldi	r25, 0x12	; 18
    1484:	aa e7       	ldi	r26, 0x7A	; 122
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__udivmodsi4>
    1490:	da 01       	movw	r26, r20
    1492:	c9 01       	movw	r24, r18
    1494:	40 97       	sbiw	r24, 0x10	; 16
    1496:	a1 09       	sbc	r26, r1
    1498:	b1 09       	sbc	r27, r1
    149a:	7c 01       	movw	r14, r24
    149c:	8d 01       	movw	r16, r26
    149e:	16 95       	lsr	r17
    14a0:	07 95       	ror	r16
    14a2:	f7 94       	ror	r15
    14a4:	e7 94       	ror	r14
    14a6:	e9 81       	ldd	r30, Y+1	; 0x01
    14a8:	fa 81       	ldd	r31, Y+2	; 0x02
    14aa:	85 81       	ldd	r24, Z+5	; 0x05
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	84 e0       	ldi	r24, 0x04	; 4
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <TWI_init+0x80>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	2a 95       	dec	r18
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <TWI_init+0x7c>
    14be:	9c 01       	movw	r18, r24
    14c0:	44 27       	eor	r20, r20
    14c2:	37 fd       	sbrc	r19, 7
    14c4:	40 95       	com	r20
    14c6:	54 2f       	mov	r21, r20
    14c8:	c8 01       	movw	r24, r16
    14ca:	b7 01       	movw	r22, r14
    14cc:	0e 94 a9 1c 	call	0x3952	; 0x3952 <__udivmodsi4>
    14d0:	da 01       	movw	r26, r20
    14d2:	c9 01       	movw	r24, r18
    14d4:	f6 01       	movw	r30, r12
    14d6:	80 83       	st	Z, r24

    /*
     * Insert the required Two Wire Bus address, if any master device want to call MCU
     * (used in case this MC is a slave device), General Call Recognition: Off
     */
    TWAR = ( (Config_Ptr -> twi_Address) << 1 ); /* Shift left to use as address in 7 bits only */
    14d8:	a2 e2       	ldi	r26, 0x22	; 34
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e9 81       	ldd	r30, Y+1	; 0x01
    14de:	fa 81       	ldd	r31, Y+2	; 0x02
    14e0:	80 81       	ld	r24, Z
    14e2:	88 0f       	add	r24, r24
    14e4:	8c 93       	st	X, r24
	
    TWCR = (1 << TWEN); /* Enable TWI */
    14e6:	e6 e5       	ldi	r30, 0x56	; 86
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	84 e0       	ldi	r24, 0x04	; 4
    14ec:	80 83       	st	Z, r24
}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	08 95       	ret

00001504 <TWI_start>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************************/
void TWI_start(void)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT = 1
	 * send the start bit by TWSTA = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    150c:	e6 e5       	ldi	r30, 0x56	; 86
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	84 ea       	ldi	r24, 0xA4	; 164
    1512:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1514:	e6 e5       	ldi	r30, 0x56	; 86
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	88 23       	and	r24, r24
    151c:	dc f7       	brge	.-10     	; 0x1514 <TWI_start+0x10>
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <TWI_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_stop(void)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT = 1
	 * send the stop bit by TWSTO = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    152c:	e6 e5       	ldi	r30, 0x56	; 86
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	84 e9       	ldi	r24, 0x94	; 148
    1532:	80 83       	st	Z, r24
}
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <TWI_write>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_write(uint8_t data)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	0f 92       	push	r0
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1546:	e3 e2       	ldi	r30, 0x23	; 35
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	80 83       	st	Z, r24

    /* 
	 * Clear the TWINT flag before sending the data TWINT = 1
	 * Enable TWI Module TWEN = 1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    154e:	e6 e5       	ldi	r30, 0x56	; 86
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	84 e8       	ldi	r24, 0x84	; 132
    1554:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1556:	e6 e5       	ldi	r30, 0x56	; 86
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	88 23       	and	r24, r24
    155e:	dc f7       	brge	.-10     	; 0x1556 <TWI_write+0x1c>
}
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <TWI_readWithACK>:
 * [in/out]		 	None
 *
 * [Returns]:       Data read (with ACK) from the TWI Bus
 *****************************************************************************************/
uint8_t TWI_readWithACK(void)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT =  1
	 * Enable sending ACK after reading or receiving data TWEA = 1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1570:	e6 e5       	ldi	r30, 0x56	; 86
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	84 ec       	ldi	r24, 0xC4	; 196
    1576:	80 83       	st	Z, r24
	
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1578:	e6 e5       	ldi	r30, 0x56	; 86
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	88 23       	and	r24, r24
    1580:	dc f7       	brge	.-10     	; 0x1578 <TWI_readWithACK+0x10>
	
    /* Read Data */
    return TWDR;
    1582:	e3 e2       	ldi	r30, 0x23	; 35
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
}
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <TWI_readWithNACK>:
 * [in/out]		 	None
 *
 * [Returns]:       Data read (without ACK) from the TWI Bus
 *****************************************************************************************/
uint8_t TWI_readWithNACK(void)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1596:	e6 e5       	ldi	r30, 0x56	; 86
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	84 e8       	ldi	r24, 0x84	; 132
    159c:	80 83       	st	Z, r24
	
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    159e:	e6 e5       	ldi	r30, 0x56	; 86
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	88 23       	and	r24, r24
    15a6:	dc f7       	brge	.-10     	; 0x159e <TWI_readWithNACK+0x10>
	
    /* Read Data */
    return TWDR;
    15a8:	e3 e2       	ldi	r30, 0x23	; 35
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <TWI_getStatus>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of the TWI Bus
 *****************************************************************************************/
uint8_t TWI_getStatus(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	0f 92       	push	r0
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    /* Masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    15be:	e1 e2       	ldi	r30, 0x21	; 33
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	88 7f       	andi	r24, 0xF8	; 248
    15c6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <TWI_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_DeInit(void)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
	/* Reset All TWI Registers to its initial value (if they have), and Clear the others */
	TWBR = 0;
    15da:	e0 e2       	ldi	r30, 0x20	; 32
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	10 82       	st	Z, r1
	TWSR = 0xF8;
    15e0:	e1 e2       	ldi	r30, 0x21	; 33
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	88 ef       	ldi	r24, 0xF8	; 248
    15e6:	80 83       	st	Z, r24
	TWAR = 0xFE;
    15e8:	e2 e2       	ldi	r30, 0x22	; 34
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8e ef       	ldi	r24, 0xFE	; 254
    15ee:	80 83       	st	Z, r24

	/* Disable TWI */
	TWCR &= ~(1 << TWEN);
    15f0:	a6 e5       	ldi	r26, 0x56	; 86
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e6 e5       	ldi	r30, 0x56	; 86
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8b 7f       	andi	r24, 0xFB	; 251
    15fc:	8c 93       	st	X, r24
}
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	27 97       	sbiw	r28, 0x07	; 7
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	8a 83       	std	Y+2, r24	; 0x02
    161a:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	d1 f5       	brne	.+116    	; 0x169a <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	3f 83       	std	Y+7, r19	; 0x07
    162e:	2e 83       	std	Y+6, r18	; 0x06
    1630:	8e 81       	ldd	r24, Y+6	; 0x06
    1632:	9f 81       	ldd	r25, Y+7	; 0x07
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	91 05       	cpc	r25, r1
    1638:	d9 f0       	breq	.+54     	; 0x1670 <DIO_setPortDirection+0x6c>
    163a:	2e 81       	ldd	r18, Y+6	; 0x06
    163c:	3f 81       	ldd	r19, Y+7	; 0x07
    163e:	22 30       	cpi	r18, 0x02	; 2
    1640:	31 05       	cpc	r19, r1
    1642:	2c f4       	brge	.+10     	; 0x164e <DIO_setPortDirection+0x4a>
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	61 f0       	breq	.+24     	; 0x1664 <DIO_setPortDirection+0x60>
    164c:	23 c0       	rjmp	.+70     	; 0x1694 <DIO_setPortDirection+0x90>
    164e:	2e 81       	ldd	r18, Y+6	; 0x06
    1650:	3f 81       	ldd	r19, Y+7	; 0x07
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	91 f0       	breq	.+36     	; 0x167c <DIO_setPortDirection+0x78>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	91 05       	cpc	r25, r1
    1660:	99 f0       	breq	.+38     	; 0x1688 <DIO_setPortDirection+0x84>
    1662:	18 c0       	rjmp	.+48     	; 0x1694 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
    1664:	ea e3       	ldi	r30, 0x3A	; 58
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    166c:	19 82       	std	Y+1, r1	; 0x01
    166e:	50 c0       	rjmp	.+160    	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
    1670:	e7 e3       	ldi	r30, 0x37	; 55
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1678:	19 82       	std	Y+1, r1	; 0x01
    167a:	4a c0       	rjmp	.+148    	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
    167c:	e4 e3       	ldi	r30, 0x34	; 52
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1684:	19 82       	std	Y+1, r1	; 0x01
    1686:	44 c0       	rjmp	.+136    	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
    1688:	e1 e3       	ldi	r30, 0x31	; 49
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	8f ef       	ldi	r24, 0xFF	; 255
    168e:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1690:	19 82       	std	Y+1, r1	; 0x01
    1692:	3e c0       	rjmp	.+124    	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	3b c0       	rjmp	.+118    	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	88 23       	and	r24, r24
    169e:	b1 f5       	brne	.+108    	; 0x170c <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3d 83       	std	Y+5, r19	; 0x05
    16a8:	2c 83       	std	Y+4, r18	; 0x04
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	91 05       	cpc	r25, r1
    16b2:	d1 f0       	breq	.+52     	; 0x16e8 <DIO_setPortDirection+0xe4>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <DIO_setPortDirection+0xc4>
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	61 f0       	breq	.+24     	; 0x16de <DIO_setPortDirection+0xda>
    16c6:	1f c0       	rjmp	.+62     	; 0x1706 <DIO_setPortDirection+0x102>
    16c8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ca:	3d 81       	ldd	r19, Y+5	; 0x05
    16cc:	22 30       	cpi	r18, 0x02	; 2
    16ce:	31 05       	cpc	r19, r1
    16d0:	81 f0       	breq	.+32     	; 0x16f2 <DIO_setPortDirection+0xee>
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	9d 81       	ldd	r25, Y+5	; 0x05
    16d6:	83 30       	cpi	r24, 0x03	; 3
    16d8:	91 05       	cpc	r25, r1
    16da:	81 f0       	breq	.+32     	; 0x16fc <DIO_setPortDirection+0xf8>
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
    16de:	ea e3       	ldi	r30, 0x3A	; 58
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    16e4:	19 82       	std	Y+1, r1	; 0x01
    16e6:	14 c0       	rjmp	.+40     	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
    16e8:	e7 e3       	ldi	r30, 0x37	; 55
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    16ee:	19 82       	std	Y+1, r1	; 0x01
    16f0:	0f c0       	rjmp	.+30     	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
    16f2:	e4 e3       	ldi	r30, 0x34	; 52
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    16f8:	19 82       	std	Y+1, r1	; 0x01
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
    16fc:	e1 e3       	ldi	r30, 0x31	; 49
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1702:	19 82       	std	Y+1, r1	; 0x01
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    170c:	84 e0       	ldi	r24, 0x04	; 4
    170e:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    1710:	89 81       	ldd	r24, Y+1	; 0x01
}
    1712:	27 96       	adiw	r28, 0x07	; 7
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	28 97       	sbiw	r28, 0x08	; 8
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	8a 83       	std	Y+2, r24	; 0x02
    173a:	6b 83       	std	Y+3, r22	; 0x03
    173c:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	88 30       	cpi	r24, 0x08	; 8
    1746:	08 f0       	brcs	.+2      	; 0x174a <DIO_setPinDirection+0x26>
    1748:	fd c0       	rjmp	.+506    	; 0x1944 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
    174a:	8c 81       	ldd	r24, Y+4	; 0x04
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	09 f0       	breq	.+2      	; 0x1752 <DIO_setPinDirection+0x2e>
    1750:	77 c0       	rjmp	.+238    	; 0x1840 <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	38 87       	std	Y+8, r19	; 0x08
    175a:	2f 83       	std	Y+7, r18	; 0x07
    175c:	8f 81       	ldd	r24, Y+7	; 0x07
    175e:	98 85       	ldd	r25, Y+8	; 0x08
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	91 05       	cpc	r25, r1
    1764:	59 f1       	breq	.+86     	; 0x17bc <DIO_setPinDirection+0x98>
    1766:	2f 81       	ldd	r18, Y+7	; 0x07
    1768:	38 85       	ldd	r19, Y+8	; 0x08
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	2c f4       	brge	.+10     	; 0x177a <DIO_setPinDirection+0x56>
    1770:	8f 81       	ldd	r24, Y+7	; 0x07
    1772:	98 85       	ldd	r25, Y+8	; 0x08
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	69 f0       	breq	.+26     	; 0x1792 <DIO_setPinDirection+0x6e>
    1778:	60 c0       	rjmp	.+192    	; 0x183a <DIO_setPinDirection+0x116>
    177a:	2f 81       	ldd	r18, Y+7	; 0x07
    177c:	38 85       	ldd	r19, Y+8	; 0x08
    177e:	22 30       	cpi	r18, 0x02	; 2
    1780:	31 05       	cpc	r19, r1
    1782:	89 f1       	breq	.+98     	; 0x17e6 <DIO_setPinDirection+0xc2>
    1784:	8f 81       	ldd	r24, Y+7	; 0x07
    1786:	98 85       	ldd	r25, Y+8	; 0x08
    1788:	83 30       	cpi	r24, 0x03	; 3
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <DIO_setPinDirection+0x6c>
    178e:	40 c0       	rjmp	.+128    	; 0x1810 <DIO_setPinDirection+0xec>
    1790:	54 c0       	rjmp	.+168    	; 0x183a <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
    1792:	aa e3       	ldi	r26, 0x3A	; 58
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ea e3       	ldi	r30, 0x3A	; 58
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_setPinDirection+0x8c>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_setPinDirection+0x88>
    17b4:	84 2b       	or	r24, r20
    17b6:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    17b8:	19 82       	std	Y+1, r1	; 0x01
    17ba:	c6 c0       	rjmp	.+396    	; 0x1948 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
    17bc:	a7 e3       	ldi	r26, 0x37	; 55
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e7 e3       	ldi	r30, 0x37	; 55
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_setPinDirection+0xb6>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_setPinDirection+0xb2>
    17de:	84 2b       	or	r24, r20
    17e0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    17e2:	19 82       	std	Y+1, r1	; 0x01
    17e4:	b1 c0       	rjmp	.+354    	; 0x1948 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
    17e6:	a4 e3       	ldi	r26, 0x34	; 52
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e4 e3       	ldi	r30, 0x34	; 52
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_setPinDirection+0xe0>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_setPinDirection+0xdc>
    1808:	84 2b       	or	r24, r20
    180a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    180c:	19 82       	std	Y+1, r1	; 0x01
    180e:	9c c0       	rjmp	.+312    	; 0x1948 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
    1810:	a1 e3       	ldi	r26, 0x31	; 49
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e1 e3       	ldi	r30, 0x31	; 49
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_setPinDirection+0x10a>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <DIO_setPinDirection+0x106>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	87 c0       	rjmp	.+270    	; 0x1948 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	84 c0       	rjmp	.+264    	; 0x1948 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	88 23       	and	r24, r24
    1844:	09 f0       	breq	.+2      	; 0x1848 <DIO_setPinDirection+0x124>
    1846:	7b c0       	rjmp	.+246    	; 0x193e <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	3e 83       	std	Y+6, r19	; 0x06
    1850:	2d 83       	std	Y+5, r18	; 0x05
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	91 05       	cpc	r25, r1
    185a:	61 f1       	breq	.+88     	; 0x18b4 <DIO_setPinDirection+0x190>
    185c:	2d 81       	ldd	r18, Y+5	; 0x05
    185e:	3e 81       	ldd	r19, Y+6	; 0x06
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	2c f4       	brge	.+10     	; 0x1870 <DIO_setPinDirection+0x14c>
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f0       	breq	.+26     	; 0x1888 <DIO_setPinDirection+0x164>
    186e:	64 c0       	rjmp	.+200    	; 0x1938 <DIO_setPinDirection+0x214>
    1870:	2d 81       	ldd	r18, Y+5	; 0x05
    1872:	3e 81       	ldd	r19, Y+6	; 0x06
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	99 f1       	breq	.+102    	; 0x18e0 <DIO_setPinDirection+0x1bc>
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	91 05       	cpc	r25, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <DIO_setPinDirection+0x162>
    1884:	43 c0       	rjmp	.+134    	; 0x190c <DIO_setPinDirection+0x1e8>
    1886:	58 c0       	rjmp	.+176    	; 0x1938 <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
    1888:	aa e3       	ldi	r26, 0x3A	; 58
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ea e3       	ldi	r30, 0x3A	; 58
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	48 2f       	mov	r20, r24
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 2e       	mov	r0, r18
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <DIO_setPinDirection+0x182>
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	0a 94       	dec	r0
    18a8:	e2 f7       	brpl	.-8      	; 0x18a2 <DIO_setPinDirection+0x17e>
    18aa:	80 95       	com	r24
    18ac:	84 23       	and	r24, r20
    18ae:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    18b0:	19 82       	std	Y+1, r1	; 0x01
    18b2:	4a c0       	rjmp	.+148    	; 0x1948 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
    18b4:	a7 e3       	ldi	r26, 0x37	; 55
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e7 e3       	ldi	r30, 0x37	; 55
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <DIO_setPinDirection+0x1ae>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <DIO_setPinDirection+0x1aa>
    18d6:	80 95       	com	r24
    18d8:	84 23       	and	r24, r20
    18da:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	34 c0       	rjmp	.+104    	; 0x1948 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
    18e0:	a4 e3       	ldi	r26, 0x34	; 52
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e4 e3       	ldi	r30, 0x34	; 52
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	02 2e       	mov	r0, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_setPinDirection+0x1da>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	0a 94       	dec	r0
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_setPinDirection+0x1d6>
    1902:	80 95       	com	r24
    1904:	84 23       	and	r24, r20
    1906:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1908:	19 82       	std	Y+1, r1	; 0x01
    190a:	1e c0       	rjmp	.+60     	; 0x1948 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
    190c:	a1 e3       	ldi	r26, 0x31	; 49
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e1 e3       	ldi	r30, 0x31	; 49
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	48 2f       	mov	r20, r24
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 2e       	mov	r0, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <DIO_setPinDirection+0x206>
    1926:	88 0f       	add	r24, r24
    1928:	99 1f       	adc	r25, r25
    192a:	0a 94       	dec	r0
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <DIO_setPinDirection+0x202>
    192e:	80 95       	com	r24
    1930:	84 23       	and	r24, r20
    1932:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1934:	19 82       	std	Y+1, r1	; 0x01
    1936:	08 c0       	rjmp	.+16     	; 0x1948 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
}
    194a:	28 96       	adiw	r28, 0x08	; 8
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <DIO_writePort+0x6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <DIO_writePort+0x8>
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	8a 83       	std	Y+2, r24	; 0x02
    196c:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	3d 83       	std	Y+5, r19	; 0x05
    197a:	2c 83       	std	Y+4, r18	; 0x04
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	d9 f0       	breq	.+54     	; 0x19bc <DIO_writePort+0x60>
    1986:	2c 81       	ldd	r18, Y+4	; 0x04
    1988:	3d 81       	ldd	r19, Y+5	; 0x05
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <DIO_writePort+0x3e>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	61 f0       	breq	.+24     	; 0x19b0 <DIO_writePort+0x54>
    1998:	23 c0       	rjmp	.+70     	; 0x19e0 <DIO_writePort+0x84>
    199a:	2c 81       	ldd	r18, Y+4	; 0x04
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	91 f0       	breq	.+36     	; 0x19c8 <DIO_writePort+0x6c>
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	9d 81       	ldd	r25, Y+5	; 0x05
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	99 f0       	breq	.+38     	; 0x19d4 <DIO_writePort+0x78>
    19ae:	18 c0       	rjmp	.+48     	; 0x19e0 <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
    19b0:	eb e3       	ldi	r30, 0x3B	; 59
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    19b8:	19 82       	std	Y+1, r1	; 0x01
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
    19bc:	e8 e3       	ldi	r30, 0x38	; 56
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    19c4:	19 82       	std	Y+1, r1	; 0x01
    19c6:	0e c0       	rjmp	.+28     	; 0x19e4 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
    19c8:	e5 e3       	ldi	r30, 0x35	; 53
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    19d0:	19 82       	std	Y+1, r1	; 0x01
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
    19d4:	e2 e3       	ldi	r30, 0x32	; 50
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    19dc:	19 82       	std	Y+1, r1	; 0x01
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	28 97       	sbiw	r28, 0x08	; 8
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	8a 83       	std	Y+2, r24	; 0x02
    1a0c:	6b 83       	std	Y+3, r22	; 0x03
    1a0e:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	88 30       	cpi	r24, 0x08	; 8
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <DIO_writePin+0x26>
    1a1a:	fd c0       	rjmp	.+506    	; 0x1c16 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <DIO_writePin+0x2e>
    1a22:	77 c0       	rjmp	.+238    	; 0x1b12 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	38 87       	std	Y+8, r19	; 0x08
    1a2c:	2f 83       	std	Y+7, r18	; 0x07
    1a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a30:	98 85       	ldd	r25, Y+8	; 0x08
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	91 05       	cpc	r25, r1
    1a36:	59 f1       	breq	.+86     	; 0x1a8e <DIO_writePin+0x98>
    1a38:	2f 81       	ldd	r18, Y+7	; 0x07
    1a3a:	38 85       	ldd	r19, Y+8	; 0x08
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <DIO_writePin+0x56>
    1a42:	8f 81       	ldd	r24, Y+7	; 0x07
    1a44:	98 85       	ldd	r25, Y+8	; 0x08
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f0       	breq	.+26     	; 0x1a64 <DIO_writePin+0x6e>
    1a4a:	60 c0       	rjmp	.+192    	; 0x1b0c <DIO_writePin+0x116>
    1a4c:	2f 81       	ldd	r18, Y+7	; 0x07
    1a4e:	38 85       	ldd	r19, Y+8	; 0x08
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	31 05       	cpc	r19, r1
    1a54:	89 f1       	breq	.+98     	; 0x1ab8 <DIO_writePin+0xc2>
    1a56:	8f 81       	ldd	r24, Y+7	; 0x07
    1a58:	98 85       	ldd	r25, Y+8	; 0x08
    1a5a:	83 30       	cpi	r24, 0x03	; 3
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <DIO_writePin+0x6c>
    1a60:	40 c0       	rjmp	.+128    	; 0x1ae2 <DIO_writePin+0xec>
    1a62:	54 c0       	rjmp	.+168    	; 0x1b0c <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
    1a64:	ab e3       	ldi	r26, 0x3B	; 59
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	eb e3       	ldi	r30, 0x3B	; 59
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_writePin+0x8c>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_writePin+0x88>
    1a86:	84 2b       	or	r24, r20
    1a88:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
    1a8c:	c6 c0       	rjmp	.+396    	; 0x1c1a <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
    1a8e:	a8 e3       	ldi	r26, 0x38	; 56
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e8 e3       	ldi	r30, 0x38	; 56
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 2e       	mov	r0, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_writePin+0xb6>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <DIO_writePin+0xb2>
    1ab0:	84 2b       	or	r24, r20
    1ab2:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
    1ab6:	b1 c0       	rjmp	.+354    	; 0x1c1a <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
    1ab8:	a5 e3       	ldi	r26, 0x35	; 53
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e5 e3       	ldi	r30, 0x35	; 53
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_writePin+0xe0>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_writePin+0xdc>
    1ada:	84 2b       	or	r24, r20
    1adc:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1ade:	19 82       	std	Y+1, r1	; 0x01
    1ae0:	9c c0       	rjmp	.+312    	; 0x1c1a <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
    1ae2:	a2 e3       	ldi	r26, 0x32	; 50
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e2 e3       	ldi	r30, 0x32	; 50
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <DIO_writePin+0x10a>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <DIO_writePin+0x106>
    1b04:	84 2b       	or	r24, r20
    1b06:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1b08:	19 82       	std	Y+1, r1	; 0x01
    1b0a:	87 c0       	rjmp	.+270    	; 0x1c1a <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	84 c0       	rjmp	.+264    	; 0x1c1a <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	88 23       	and	r24, r24
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <DIO_writePin+0x124>
    1b18:	7b c0       	rjmp	.+246    	; 0x1c10 <DIO_writePin+0x21a>
		{
			switch (enu_portID)
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3e 83       	std	Y+6, r19	; 0x06
    1b22:	2d 83       	std	Y+5, r18	; 0x05
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	61 f1       	breq	.+88     	; 0x1b86 <DIO_writePin+0x190>
    1b2e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b30:	3e 81       	ldd	r19, Y+6	; 0x06
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <DIO_writePin+0x14c>
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	69 f0       	breq	.+26     	; 0x1b5a <DIO_writePin+0x164>
    1b40:	64 c0       	rjmp	.+200    	; 0x1c0a <DIO_writePin+0x214>
    1b42:	2d 81       	ldd	r18, Y+5	; 0x05
    1b44:	3e 81       	ldd	r19, Y+6	; 0x06
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	99 f1       	breq	.+102    	; 0x1bb2 <DIO_writePin+0x1bc>
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <DIO_writePin+0x162>
    1b56:	43 c0       	rjmp	.+134    	; 0x1bde <DIO_writePin+0x1e8>
    1b58:	58 c0       	rjmp	.+176    	; 0x1c0a <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
    1b5a:	ab e3       	ldi	r26, 0x3B	; 59
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	eb e3       	ldi	r30, 0x3B	; 59
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	48 2f       	mov	r20, r24
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 2e       	mov	r0, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <DIO_writePin+0x182>
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	0a 94       	dec	r0
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <DIO_writePin+0x17e>
    1b7c:	80 95       	com	r24
    1b7e:	84 23       	and	r24, r20
    1b80:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1b82:	19 82       	std	Y+1, r1	; 0x01
    1b84:	4a c0       	rjmp	.+148    	; 0x1c1a <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
    1b86:	a8 e3       	ldi	r26, 0x38	; 56
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e8 e3       	ldi	r30, 0x38	; 56
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <DIO_writePin+0x1ae>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <DIO_writePin+0x1aa>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1bae:	19 82       	std	Y+1, r1	; 0x01
    1bb0:	34 c0       	rjmp	.+104    	; 0x1c1a <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
    1bb2:	a5 e3       	ldi	r26, 0x35	; 53
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e5 e3       	ldi	r30, 0x35	; 53
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_writePin+0x1da>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_writePin+0x1d6>
    1bd4:	80 95       	com	r24
    1bd6:	84 23       	and	r24, r20
    1bd8:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1bda:	19 82       	std	Y+1, r1	; 0x01
    1bdc:	1e c0       	rjmp	.+60     	; 0x1c1a <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
    1bde:	a2 e3       	ldi	r26, 0x32	; 50
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e2 e3       	ldi	r30, 0x32	; 50
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <DIO_writePin+0x206>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <DIO_writePin+0x202>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1c06:	19 82       	std	Y+1, r1	; 0x01
    1c08:	08 c0       	rjmp	.+16     	; 0x1c1a <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	05 c0       	rjmp	.+10     	; 0x1c1a <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    1c10:	84 e0       	ldi	r24, 0x04	; 4
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1c:	28 96       	adiw	r28, 0x08	; 8
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <DIO_readPort+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <DIO_readPort+0x8>
    1c36:	00 d0       	rcall	.+0      	; 0x1c38 <DIO_readPort+0xa>
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	8a 83       	std	Y+2, r24	; 0x02
    1c3e:	7c 83       	std	Y+4, r23	; 0x04
    1c40:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	19 f4       	brne	.+6      	; 0x1c54 <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
    1c4e:	85 e0       	ldi	r24, 0x05	; 5
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	41 c0       	rjmp	.+130    	; 0x1cd6 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	3e 83       	std	Y+6, r19	; 0x06
    1c5c:	2d 83       	std	Y+5, r18	; 0x05
    1c5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c60:	9e 81       	ldd	r25, Y+6	; 0x06
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	91 05       	cpc	r25, r1
    1c66:	e9 f0       	breq	.+58     	; 0x1ca2 <DIO_readPort+0x74>
    1c68:	2d 81       	ldd	r18, Y+5	; 0x05
    1c6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	31 05       	cpc	r19, r1
    1c70:	2c f4       	brge	.+10     	; 0x1c7c <DIO_readPort+0x4e>
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	61 f0       	breq	.+24     	; 0x1c92 <DIO_readPort+0x64>
    1c7a:	2b c0       	rjmp	.+86     	; 0x1cd2 <DIO_readPort+0xa4>
    1c7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c80:	22 30       	cpi	r18, 0x02	; 2
    1c82:	31 05       	cpc	r19, r1
    1c84:	b1 f0       	breq	.+44     	; 0x1cb2 <DIO_readPort+0x84>
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8a:	83 30       	cpi	r24, 0x03	; 3
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	c9 f0       	breq	.+50     	; 0x1cc2 <DIO_readPort+0x94>
    1c90:	20 c0       	rjmp	.+64     	; 0x1cd2 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
    1c92:	e9 e3       	ldi	r30, 0x39	; 57
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	eb 81       	ldd	r30, Y+3	; 0x03
    1c9a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    1ca0:	1a c0       	rjmp	.+52     	; 0x1cd6 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
    1ca2:	e6 e3       	ldi	r30, 0x36	; 54
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	eb 81       	ldd	r30, Y+3	; 0x03
    1caa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cac:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
    1cae:	19 82       	std	Y+1, r1	; 0x01
    1cb0:	12 c0       	rjmp	.+36     	; 0x1cd6 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
    1cb2:	e3 e3       	ldi	r30, 0x33	; 51
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cba:	fc 81       	ldd	r31, Y+4	; 0x04
    1cbc:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1cbe:	19 82       	std	Y+1, r1	; 0x01
    1cc0:	0a c0       	rjmp	.+20     	; 0x1cd6 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
    1cc2:	e0 e3       	ldi	r30, 0x30	; 48
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1cca:	fc 81       	ldd	r31, Y+4	; 0x04
    1ccc:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1cce:	19 82       	std	Y+1, r1	; 0x01
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd8:	26 96       	adiw	r28, 0x06	; 6
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	cf 91       	pop	r28
    1ce6:	df 91       	pop	r29
    1ce8:	08 95       	ret

00001cea <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	27 97       	sbiw	r28, 0x07	; 7
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	8a 83       	std	Y+2, r24	; 0x02
    1d00:	6b 83       	std	Y+3, r22	; 0x03
    1d02:	5d 83       	std	Y+5, r21	; 0x05
    1d04:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	19 f4       	brne	.+6      	; 0x1d18 <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
    1d12:	85 e0       	ldi	r24, 0x05	; 5
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	af c0       	rjmp	.+350    	; 0x1e76 <DIO_readPin+0x18c>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	88 30       	cpi	r24, 0x08	; 8
    1d1c:	08 f0       	brcs	.+2      	; 0x1d20 <DIO_readPin+0x36>
    1d1e:	a9 c0       	rjmp	.+338    	; 0x1e72 <DIO_readPin+0x188>
        {
            switch (enu_portID)
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	3f 83       	std	Y+7, r19	; 0x07
    1d28:	2e 83       	std	Y+6, r18	; 0x06
    1d2a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d2c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d2e:	41 30       	cpi	r20, 0x01	; 1
    1d30:	51 05       	cpc	r21, r1
    1d32:	c9 f1       	breq	.+114    	; 0x1da6 <DIO_readPin+0xbc>
    1d34:	8e 81       	ldd	r24, Y+6	; 0x06
    1d36:	9f 81       	ldd	r25, Y+7	; 0x07
    1d38:	82 30       	cpi	r24, 0x02	; 2
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	34 f4       	brge	.+12     	; 0x1d4a <DIO_readPin+0x60>
    1d3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1d40:	3f 81       	ldd	r19, Y+7	; 0x07
    1d42:	21 15       	cp	r18, r1
    1d44:	31 05       	cpc	r19, r1
    1d46:	71 f0       	breq	.+28     	; 0x1d64 <DIO_readPin+0x7a>
    1d48:	91 c0       	rjmp	.+290    	; 0x1e6c <DIO_readPin+0x182>
    1d4a:	4e 81       	ldd	r20, Y+6	; 0x06
    1d4c:	5f 81       	ldd	r21, Y+7	; 0x07
    1d4e:	42 30       	cpi	r20, 0x02	; 2
    1d50:	51 05       	cpc	r21, r1
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <DIO_readPin+0x6c>
    1d54:	49 c0       	rjmp	.+146    	; 0x1de8 <DIO_readPin+0xfe>
    1d56:	8e 81       	ldd	r24, Y+6	; 0x06
    1d58:	9f 81       	ldd	r25, Y+7	; 0x07
    1d5a:	83 30       	cpi	r24, 0x03	; 3
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <DIO_readPin+0x78>
    1d60:	64 c0       	rjmp	.+200    	; 0x1e2a <DIO_readPin+0x140>
    1d62:	84 c0       	rjmp	.+264    	; 0x1e6c <DIO_readPin+0x182>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
    1d64:	e9 e3       	ldi	r30, 0x39	; 57
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	50 e0       	ldi	r21, 0x00	; 0
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <DIO_readPin+0x94>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	2a 95       	dec	r18
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <DIO_readPin+0x90>
    1d82:	9a 01       	movw	r18, r20
    1d84:	28 23       	and	r18, r24
    1d86:	39 23       	and	r19, r25
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a9 01       	movw	r20, r18
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <DIO_readPin+0xac>
    1d92:	55 95       	asr	r21
    1d94:	47 95       	ror	r20
    1d96:	8a 95       	dec	r24
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <DIO_readPin+0xa8>
    1d9a:	ca 01       	movw	r24, r20
    1d9c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d9e:	fd 81       	ldd	r31, Y+5	; 0x05
    1da0:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1da2:	19 82       	std	Y+1, r1	; 0x01
    1da4:	68 c0       	rjmp	.+208    	; 0x1e76 <DIO_readPin+0x18c>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
    1da6:	e6 e3       	ldi	r30, 0x36	; 54
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_readPin+0xd6>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	2a 95       	dec	r18
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_readPin+0xd2>
    1dc4:	9a 01       	movw	r18, r20
    1dc6:	28 23       	and	r18, r24
    1dc8:	39 23       	and	r19, r25
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	a9 01       	movw	r20, r18
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <DIO_readPin+0xee>
    1dd4:	55 95       	asr	r21
    1dd6:	47 95       	ror	r20
    1dd8:	8a 95       	dec	r24
    1dda:	e2 f7       	brpl	.-8      	; 0x1dd4 <DIO_readPin+0xea>
    1ddc:	ca 01       	movw	r24, r20
    1dde:	ec 81       	ldd	r30, Y+4	; 0x04
    1de0:	fd 81       	ldd	r31, Y+5	; 0x05
    1de2:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	47 c0       	rjmp	.+142    	; 0x1e76 <DIO_readPin+0x18c>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
    1de8:	e3 e3       	ldi	r30, 0x33	; 51
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	48 2f       	mov	r20, r24
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <DIO_readPin+0x118>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	2a 95       	dec	r18
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <DIO_readPin+0x114>
    1e06:	9a 01       	movw	r18, r20
    1e08:	28 23       	and	r18, r24
    1e0a:	39 23       	and	r19, r25
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a9 01       	movw	r20, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_readPin+0x130>
    1e16:	55 95       	asr	r21
    1e18:	47 95       	ror	r20
    1e1a:	8a 95       	dec	r24
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_readPin+0x12c>
    1e1e:	ca 01       	movw	r24, r20
    1e20:	ec 81       	ldd	r30, Y+4	; 0x04
    1e22:	fd 81       	ldd	r31, Y+5	; 0x05
    1e24:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1e26:	19 82       	std	Y+1, r1	; 0x01
    1e28:	26 c0       	rjmp	.+76     	; 0x1e76 <DIO_readPin+0x18c>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
    1e2a:	e0 e3       	ldi	r30, 0x30	; 48
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	8b 81       	ldd	r24, Y+3	; 0x03
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_readPin+0x15a>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	2a 95       	dec	r18
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_readPin+0x156>
    1e48:	9a 01       	movw	r18, r20
    1e4a:	28 23       	and	r18, r24
    1e4c:	39 23       	and	r19, r25
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a9 01       	movw	r20, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_readPin+0x172>
    1e58:	55 95       	asr	r21
    1e5a:	47 95       	ror	r20
    1e5c:	8a 95       	dec	r24
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_readPin+0x16e>
    1e60:	ca 01       	movw	r24, r20
    1e62:	ec 81       	ldd	r30, Y+4	; 0x04
    1e64:	fd 81       	ldd	r31, Y+5	; 0x05
    1e66:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1e68:	19 82       	std	Y+1, r1	; 0x01
    1e6a:	05 c0       	rjmp	.+10     	; 0x1e76 <DIO_readPin+0x18c>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_readPin+0x18c>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e78:	27 96       	adiw	r28, 0x07	; 7
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	08 95       	ret

00001e8a <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
    1e8a:	df 93       	push	r29
    1e8c:	cf 93       	push	r28
    1e8e:	00 d0       	rcall	.+0      	; 0x1e90 <DIO_TogglePin+0x6>
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <DIO_TogglePin+0x8>
    1e92:	0f 92       	push	r0
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	88 30       	cpi	r24, 0x08	; 8
    1ea4:	08 f0       	brcs	.+2      	; 0x1ea8 <DIO_TogglePin+0x1e>
    1ea6:	77 c0       	rjmp	.+238    	; 0x1f96 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	3d 83       	std	Y+5, r19	; 0x05
    1eb0:	2c 83       	std	Y+4, r18	; 0x04
    1eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	91 05       	cpc	r25, r1
    1eba:	59 f1       	breq	.+86     	; 0x1f12 <DIO_TogglePin+0x88>
    1ebc:	2c 81       	ldd	r18, Y+4	; 0x04
    1ebe:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <DIO_TogglePin+0x46>
    1ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f0       	breq	.+26     	; 0x1ee8 <DIO_TogglePin+0x5e>
    1ece:	60 c0       	rjmp	.+192    	; 0x1f90 <DIO_TogglePin+0x106>
    1ed0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	89 f1       	breq	.+98     	; 0x1f3c <DIO_TogglePin+0xb2>
    1eda:	8c 81       	ldd	r24, Y+4	; 0x04
    1edc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ede:	83 30       	cpi	r24, 0x03	; 3
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <DIO_TogglePin+0x5c>
    1ee4:	40 c0       	rjmp	.+128    	; 0x1f66 <DIO_TogglePin+0xdc>
    1ee6:	54 c0       	rjmp	.+168    	; 0x1f90 <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
    1ee8:	ab e3       	ldi	r26, 0x3B	; 59
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	eb e3       	ldi	r30, 0x3B	; 59
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_TogglePin+0x7c>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_TogglePin+0x78>
    1f0a:	84 27       	eor	r24, r20
    1f0c:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1f0e:	19 82       	std	Y+1, r1	; 0x01
    1f10:	44 c0       	rjmp	.+136    	; 0x1f9a <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
    1f12:	a8 e3       	ldi	r26, 0x38	; 56
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e8 e3       	ldi	r30, 0x38	; 56
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 2e       	mov	r0, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <DIO_TogglePin+0xa6>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	0a 94       	dec	r0
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <DIO_TogglePin+0xa2>
    1f34:	84 27       	eor	r24, r20
    1f36:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1f38:	19 82       	std	Y+1, r1	; 0x01
    1f3a:	2f c0       	rjmp	.+94     	; 0x1f9a <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
    1f3c:	a5 e3       	ldi	r26, 0x35	; 53
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e5 e3       	ldi	r30, 0x35	; 53
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <DIO_TogglePin+0xd0>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <DIO_TogglePin+0xcc>
    1f5e:	84 27       	eor	r24, r20
    1f60:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	1a c0       	rjmp	.+52     	; 0x1f9a <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
    1f66:	a2 e3       	ldi	r26, 0x32	; 50
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	e2 e3       	ldi	r30, 0x32	; 50
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	48 2f       	mov	r20, r24
    1f72:	8b 81       	ldd	r24, Y+3	; 0x03
    1f74:	28 2f       	mov	r18, r24
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	02 2e       	mov	r0, r18
    1f7e:	02 c0       	rjmp	.+4      	; 0x1f84 <DIO_TogglePin+0xfa>
    1f80:	88 0f       	add	r24, r24
    1f82:	99 1f       	adc	r25, r25
    1f84:	0a 94       	dec	r0
    1f86:	e2 f7       	brpl	.-8      	; 0x1f80 <DIO_TogglePin+0xf6>
    1f88:	84 27       	eor	r24, r20
    1f8a:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    1f8e:	05 c0       	rjmp	.+10     	; 0x1f9a <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1f96:	82 e0       	ldi	r24, 0x02	; 2
    1f98:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	cf 91       	pop	r28
    1fa8:	df 91       	pop	r29
    1faa:	08 95       	ret

00001fac <EEPROM_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void EEPROM_init(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	2b 97       	sbiw	r28, 0x0b	; 11
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
	/* TWI Driver Configurations */
	TWI_ConfigType TWI_Config = {0x01,SCL_FREQ_400KBPS,PRESCALER_1};
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	98 87       	std	Y+8, r25	; 0x08
    1fc6:	8f 83       	std	Y+7, r24	; 0x07
    1fc8:	eb e7       	ldi	r30, 0x7B	; 123
    1fca:	f2 e0       	ldi	r31, 0x02	; 2
    1fcc:	fa 87       	std	Y+10, r31	; 0x0a
    1fce:	e9 87       	std	Y+9, r30	; 0x09
    1fd0:	f6 e0       	ldi	r31, 0x06	; 6
    1fd2:	fb 87       	std	Y+11, r31	; 0x0b
    1fd4:	e9 85       	ldd	r30, Y+9	; 0x09
    1fd6:	fa 85       	ldd	r31, Y+10	; 0x0a
    1fd8:	00 80       	ld	r0, Z
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	9a 87       	std	Y+10, r25	; 0x0a
    1fe2:	89 87       	std	Y+9, r24	; 0x09
    1fe4:	ef 81       	ldd	r30, Y+7	; 0x07
    1fe6:	f8 85       	ldd	r31, Y+8	; 0x08
    1fe8:	00 82       	st	Z, r0
    1fea:	8f 81       	ldd	r24, Y+7	; 0x07
    1fec:	98 85       	ldd	r25, Y+8	; 0x08
    1fee:	01 96       	adiw	r24, 0x01	; 1
    1ff0:	98 87       	std	Y+8, r25	; 0x08
    1ff2:	8f 83       	std	Y+7, r24	; 0x07
    1ff4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ff6:	91 50       	subi	r25, 0x01	; 1
    1ff8:	9b 87       	std	Y+11, r25	; 0x0b
    1ffa:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ffc:	ee 23       	and	r30, r30
    1ffe:	51 f7       	brne	.-44     	; 0x1fd4 <EEPROM_init+0x28>

	/* Just initialize the I2C(TWI) module inside the MC */
	TWI_init(&TWI_Config);
    2000:	ce 01       	movw	r24, r28
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	0e 94 1d 0a 	call	0x143a	; 0x143a <TWI_init>
}
    2008:	2b 96       	adiw	r28, 0x0b	; 11
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <EEPROM_writeByte>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of this function (SUCCESS, ERROR)
 ******************************************************************************************/
uint8_t EEPROM_writeByte(uint16_t u16addr, uint8_t u8data)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <EEPROM_writeByte+0x6>
    2020:	00 d0       	rcall	.+0      	; 0x2022 <EEPROM_writeByte+0x8>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    202c:	0e 94 82 0a 	call	0x1504	; 0x1504 <TWI_start>
    if (TWI_getStatus() != TW_START)
    2030:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    2034:	88 30       	cpi	r24, 0x08	; 8
    2036:	11 f0       	breq	.+4      	; 0x203c <EEPROM_writeByte+0x22>
        return ERROR;
    2038:	1c 82       	std	Y+4, r1	; 0x04
    203a:	28 c0       	rjmp	.+80     	; 0x208c <EEPROM_writeByte+0x72>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write)
     */
    TWI_write((uint8_t)(0xA0 | ((u16addr & 0x0700)>>7)));
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	80 70       	andi	r24, 0x00	; 0
    2042:	97 70       	andi	r25, 0x07	; 7
    2044:	88 0f       	add	r24, r24
    2046:	89 2f       	mov	r24, r25
    2048:	88 1f       	adc	r24, r24
    204a:	99 0b       	sbc	r25, r25
    204c:	91 95       	neg	r25
    204e:	80 6a       	ori	r24, 0xA0	; 160
    2050:	0e 94 9d 0a 	call	0x153a	; 0x153a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    2054:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    2058:	88 31       	cpi	r24, 0x18	; 24
    205a:	11 f0       	breq	.+4      	; 0x2060 <EEPROM_writeByte+0x46>
        return ERROR; 
    205c:	1c 82       	std	Y+4, r1	; 0x04
    205e:	16 c0       	rjmp	.+44     	; 0x208c <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8_t)(u16addr));
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	0e 94 9d 0a 	call	0x153a	; 0x153a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2066:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    206a:	88 32       	cpi	r24, 0x28	; 40
    206c:	11 f0       	breq	.+4      	; 0x2072 <EEPROM_writeByte+0x58>
        return ERROR;
    206e:	1c 82       	std	Y+4, r1	; 0x04
    2070:	0d c0       	rjmp	.+26     	; 0x208c <EEPROM_writeByte+0x72>
		
    /* Write byte to EEPROM */
    TWI_write(u8data);
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	0e 94 9d 0a 	call	0x153a	; 0x153a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2078:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    207c:	88 32       	cpi	r24, 0x28	; 40
    207e:	11 f0       	breq	.+4      	; 0x2084 <EEPROM_writeByte+0x6a>
        return ERROR;
    2080:	1c 82       	std	Y+4, r1	; 0x04
    2082:	04 c0       	rjmp	.+8      	; 0x208c <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2084:	0e 94 92 0a 	call	0x1524	; 0x1524 <TWI_stop>
	
    return SUCCESS;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	8c 83       	std	Y+4, r24	; 0x04
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <EEPROM_readByte>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of this function (SUCCESS, ERROR)
 ******************************************************************************************/
uint8_t EEPROM_readByte(uint16_t u16addr, uint8_t * u8data)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <EEPROM_readByte+0x6>
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <EEPROM_readByte+0x8>
    20a4:	0f 92       	push	r0
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	9a 83       	std	Y+2, r25	; 0x02
    20ac:	89 83       	std	Y+1, r24	; 0x01
    20ae:	7c 83       	std	Y+4, r23	; 0x04
    20b0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    20b2:	0e 94 82 0a 	call	0x1504	; 0x1504 <TWI_start>
    if (TWI_getStatus() != TW_START)
    20b6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    20ba:	88 30       	cpi	r24, 0x08	; 8
    20bc:	11 f0       	breq	.+4      	; 0x20c2 <EEPROM_readByte+0x26>
        return ERROR;
    20be:	1d 82       	std	Y+5, r1	; 0x05
    20c0:	44 c0       	rjmp	.+136    	; 0x214a <EEPROM_readByte+0xae>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write)
     */
    TWI_write((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7)));
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	80 70       	andi	r24, 0x00	; 0
    20c8:	97 70       	andi	r25, 0x07	; 7
    20ca:	88 0f       	add	r24, r24
    20cc:	89 2f       	mov	r24, r25
    20ce:	88 1f       	adc	r24, r24
    20d0:	99 0b       	sbc	r25, r25
    20d2:	91 95       	neg	r25
    20d4:	80 6a       	ori	r24, 0xA0	; 160
    20d6:	0e 94 9d 0a 	call	0x153a	; 0x153a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    20da:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    20de:	88 31       	cpi	r24, 0x18	; 24
    20e0:	11 f0       	breq	.+4      	; 0x20e6 <EEPROM_readByte+0x4a>
        return ERROR;
    20e2:	1d 82       	std	Y+5, r1	; 0x05
    20e4:	32 c0       	rjmp	.+100    	; 0x214a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8_t)(u16addr));
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	0e 94 9d 0a 	call	0x153a	; 0x153a <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    20ec:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    20f0:	88 32       	cpi	r24, 0x28	; 40
    20f2:	11 f0       	breq	.+4      	; 0x20f8 <EEPROM_readByte+0x5c>
        return ERROR;
    20f4:	1d 82       	std	Y+5, r1	; 0x05
    20f6:	29 c0       	rjmp	.+82     	; 0x214a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    20f8:	0e 94 82 0a 	call	0x1504	; 0x1504 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    20fc:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    2100:	80 31       	cpi	r24, 0x10	; 16
    2102:	11 f0       	breq	.+4      	; 0x2108 <EEPROM_readByte+0x6c>
        return ERROR;
    2104:	1d 82       	std	Y+5, r1	; 0x05
    2106:	21 c0       	rjmp	.+66     	; 0x214a <EEPROM_readByte+0xae>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read)
     */
    TWI_write((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	80 70       	andi	r24, 0x00	; 0
    210e:	97 70       	andi	r25, 0x07	; 7
    2110:	88 0f       	add	r24, r24
    2112:	89 2f       	mov	r24, r25
    2114:	88 1f       	adc	r24, r24
    2116:	99 0b       	sbc	r25, r25
    2118:	91 95       	neg	r25
    211a:	81 6a       	ori	r24, 0xA1	; 161
    211c:	0e 94 9d 0a 	call	0x153a	; 0x153a <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    2120:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    2124:	80 34       	cpi	r24, 0x40	; 64
    2126:	11 f0       	breq	.+4      	; 0x212c <EEPROM_readByte+0x90>
        return ERROR;
    2128:	1d 82       	std	Y+5, r1	; 0x05
    212a:	0f c0       	rjmp	.+30     	; 0x214a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    212c:	0e 94 c7 0a 	call	0x158e	; 0x158e <TWI_readWithNACK>
    2130:	eb 81       	ldd	r30, Y+3	; 0x03
    2132:	fc 81       	ldd	r31, Y+4	; 0x04
    2134:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    2136:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <TWI_getStatus>
    213a:	88 35       	cpi	r24, 0x58	; 88
    213c:	11 f0       	breq	.+4      	; 0x2142 <EEPROM_readByte+0xa6>
        return ERROR;
    213e:	1d 82       	std	Y+5, r1	; 0x05
    2140:	04 c0       	rjmp	.+8      	; 0x214a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2142:	0e 94 92 0a 	call	0x1524	; 0x1524 <TWI_stop>
    return SUCCESS;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	8d 83       	std	Y+5, r24	; 0x05
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	08 95       	ret

0000215c <INT0_CALLBACK>:
 *                           Interrupt service routine                         *
 *******************************************************************************/


void INT0_CALLBACK(void)
{
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
	if(gu8_sendStatus == TRUE)
    2164:	80 91 8a 02 	lds	r24, 0x028A
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	b9 f4       	brne	.+46     	; 0x219a <INT0_CALLBACK+0x3e>
	{
		for(count = 0; count < DATA_SIZE; count++)
    216c:	10 92 d4 02 	sts	0x02D4, r1
    2170:	0f c0       	rjmp	.+30     	; 0x2190 <INT0_CALLBACK+0x34>
		{
			SPI_sendByte(*((uint8_t *)&cardData + count));
    2172:	80 91 d4 02 	lds	r24, 0x02D4
    2176:	88 2f       	mov	r24, r24
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	fc 01       	movw	r30, r24
    217c:	ef 56       	subi	r30, 0x6F	; 111
    217e:	fd 4f       	sbci	r31, 0xFD	; 253
    2180:	80 81       	ld	r24, Z
    2182:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_sendByte>

void INT0_CALLBACK(void)
{
	if(gu8_sendStatus == TRUE)
	{
		for(count = 0; count < DATA_SIZE; count++)
    2186:	80 91 d4 02 	lds	r24, 0x02D4
    218a:	8f 5f       	subi	r24, 0xFF	; 255
    218c:	80 93 d4 02 	sts	0x02D4, r24
    2190:	80 91 d4 02 	lds	r24, 0x02D4
    2194:	8d 31       	cpi	r24, 0x1D	; 29
    2196:	68 f3       	brcs	.-38     	; 0x2172 <INT0_CALLBACK+0x16>
    2198:	16 c0       	rjmp	.+44     	; 0x21c6 <INT0_CALLBACK+0x6a>
			SPI_sendByte(*((uint8_t *)&cardData + count));
		}
	}
	else
	{
		for(buff_index = 0; buff_index < DATA_SIZE; buff_index++)
    219a:	10 92 df 02 	sts	0x02DF, r1
    219e:	0f c0       	rjmp	.+30     	; 0x21be <INT0_CALLBACK+0x62>
		{
			SPI_sendByte(gbuffer8_Data_NotReady[buff_index]);
    21a0:	80 91 df 02 	lds	r24, 0x02DF
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	fc 01       	movw	r30, r24
    21aa:	e4 5a       	subi	r30, 0xA4	; 164
    21ac:	fd 4f       	sbci	r31, 0xFD	; 253
    21ae:	80 81       	ld	r24, Z
    21b0:	0e 94 fa 07 	call	0xff4	; 0xff4 <SPI_sendByte>
			SPI_sendByte(*((uint8_t *)&cardData + count));
		}
	}
	else
	{
		for(buff_index = 0; buff_index < DATA_SIZE; buff_index++)
    21b4:	80 91 df 02 	lds	r24, 0x02DF
    21b8:	8f 5f       	subi	r24, 0xFF	; 255
    21ba:	80 93 df 02 	sts	0x02DF, r24
    21be:	80 91 df 02 	lds	r24, 0x02DF
    21c2:	8d 31       	cpi	r24, 0x1D	; 29
    21c4:	68 f3       	brcs	.-38     	; 0x21a0 <INT0_CALLBACK+0x44>
		{
			SPI_sendByte(gbuffer8_Data_NotReady[buff_index]);
		}
	}
}
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	2d 97       	sbiw	r28, 0x0d	; 13
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
	SREG |= (1<<7);		/* Enable interrupts by setting I-bit */
    21e0:	af e5       	ldi	r26, 0x5F	; 95
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	ef e5       	ldi	r30, 0x5F	; 95
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	80 68       	ori	r24, 0x80	; 128
    21ec:	8c 93       	st	X, r24

	UART_ConfigType uart_config = {BPS_9600, NORMAL_SPEED, EIGHT_BITS, DISABLED, ONE_BIT};
    21ee:	ce 01       	movw	r24, r28
    21f0:	01 96       	adiw	r24, 0x01	; 1
    21f2:	9a 87       	std	Y+10, r25	; 0x0a
    21f4:	89 87       	std	Y+9, r24	; 0x09
    21f6:	e1 e8       	ldi	r30, 0x81	; 129
    21f8:	f2 e0       	ldi	r31, 0x02	; 2
    21fa:	fc 87       	std	Y+12, r31	; 0x0c
    21fc:	eb 87       	std	Y+11, r30	; 0x0b
    21fe:	f8 e0       	ldi	r31, 0x08	; 8
    2200:	fd 87       	std	Y+13, r31	; 0x0d
    2202:	eb 85       	ldd	r30, Y+11	; 0x0b
    2204:	fc 85       	ldd	r31, Y+12	; 0x0c
    2206:	00 80       	ld	r0, Z
    2208:	8b 85       	ldd	r24, Y+11	; 0x0b
    220a:	9c 85       	ldd	r25, Y+12	; 0x0c
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	9c 87       	std	Y+12, r25	; 0x0c
    2210:	8b 87       	std	Y+11, r24	; 0x0b
    2212:	e9 85       	ldd	r30, Y+9	; 0x09
    2214:	fa 85       	ldd	r31, Y+10	; 0x0a
    2216:	00 82       	st	Z, r0
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	9a 87       	std	Y+10, r25	; 0x0a
    2220:	89 87       	std	Y+9, r24	; 0x09
    2222:	9d 85       	ldd	r25, Y+13	; 0x0d
    2224:	91 50       	subi	r25, 0x01	; 1
    2226:	9d 87       	std	Y+13, r25	; 0x0d
    2228:	ed 85       	ldd	r30, Y+13	; 0x0d
    222a:	ee 23       	and	r30, r30
    222c:	51 f7       	brne	.-44     	; 0x2202 <App_init+0x36>
	UART_init(&uart_config);
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	EXTI_Init(&EXIT_Handler);
    2236:	89 e7       	ldi	r24, 0x79	; 121
    2238:	92 e0       	ldi	r25, 0x02	; 2
    223a:	0e 94 88 08 	call	0x1110	; 0x1110 <EXTI_Init>
	EXIT_INT0_CallBack(INT0_CALLBACK);
    223e:	8e ea       	ldi	r24, 0xAE	; 174
    2240:	90 e1       	ldi	r25, 0x10	; 16
    2242:	0e 94 f6 08 	call	0x11ec	; 0x11ec <EXIT_INT0_CallBack>

	EEPROM_init();	/* Initialize the external EEPROM */
    2246:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <EEPROM_init>

	/* Store byte in eeprom to check that first time to login */
	EEPROM_readByte(ADDRESS_SYSTEM_STATUS ,&gu8_systemStatus);
    224a:	2d ea       	ldi	r18, 0xAD	; 173
    224c:	32 e0       	ldi	r19, 0x02	; 2
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	b9 01       	movw	r22, r18
    2254:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>

	SPI_initMaster();
    2258:	0e 94 bc 07 	call	0xf78	; 0xf78 <SPI_initMaster>

	UART_sendString("WELCOME TO ATM BANKING SYSTEM\r\r");	/* Receive string from terminal */
    225c:	80 e6       	ldi	r24, 0x60	; 96
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
}
    2264:	2d 96       	adiw	r28, 0x0d	; 13
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <App_Update+0x6>
    227c:	0f 92       	push	r0
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
	uint8_t User_choice;

	UART_sendString("Choose between two modes:\r");			/* Receive string from terminal */
    2282:	80 e8       	ldi	r24, 0x80	; 128
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	UART_sendString("ADMIN\r");
    228a:	8b e9       	ldi	r24, 0x9B	; 155
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	UART_sendString("NORMAL\r\r");
    2292:	82 ea       	ldi	r24, 0xA2	; 162
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>

	UART_receiveString(gu8_UserChoice);
    229a:	85 ed       	ldi	r24, 0xD5	; 213
    229c:	92 e0       	ldi	r25, 0x02	; 2
    229e:	0e 94 29 07 	call	0xe52	; 0xe52 <UART_receiveString>

	if(strcmp(gu8_UserChoice, "ADMIN") == IDENTICAL)
    22a2:	85 ed       	ldi	r24, 0xD5	; 213
    22a4:	92 e0       	ldi	r25, 0x02	; 2
    22a6:	2b ea       	ldi	r18, 0xAB	; 171
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	b9 01       	movw	r22, r18
    22ac:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <strcmp>
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	c1 f5       	brne	.+112    	; 0x2324 <App_Update+0xae>
	{
		/* handle admin mode*/
		/* take NAME, PAN, PIN from terminal */
		UART_sendString("Welcome to the ADMIN Mode\r\r");
    22b4:	81 eb       	ldi	r24, 0xB1	; 177
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
		UART_sendString("Please enter your choice: \r");
    22bc:	8d ec       	ldi	r24, 0xCD	; 205
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
		UART_sendString("1. ADD\r2. MODFIY\r3. REMOVE\r\r");
    22c4:	89 ee       	ldi	r24, 0xE9	; 233
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
		User_choice = UART_recieveByte();
    22cc:	0e 94 f1 06 	call	0xde2	; 0xde2 <UART_recieveByte>
    22d0:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte('\r');
    22d2:	8d e0       	ldi	r24, 0x0D	; 13
    22d4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_sendByte>

		switch(User_choice)
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	3b 83       	std	Y+3, r19	; 0x03
    22e0:	2a 83       	std	Y+2, r18	; 0x02
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	82 33       	cpi	r24, 0x32	; 50
    22e8:	91 05       	cpc	r25, r1
    22ea:	89 f0       	breq	.+34     	; 0x230e <App_Update+0x98>
    22ec:	2a 81       	ldd	r18, Y+2	; 0x02
    22ee:	3b 81       	ldd	r19, Y+3	; 0x03
    22f0:	23 33       	cpi	r18, 0x33	; 51
    22f2:	31 05       	cpc	r19, r1
    22f4:	79 f0       	breq	.+30     	; 0x2314 <App_Update+0x9e>
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	81 33       	cpi	r24, 0x31	; 49
    22fc:	91 05       	cpc	r25, r1
    22fe:	69 f4       	brne	.+26     	; 0x231a <App_Update+0xa4>
		{
		case '1': /* Add card */
			APP_AddCard();
    2300:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <APP_AddCard>
			UART_sendString("\rAdding Card succeeded !!!\r\r");
    2304:	86 e0       	ldi	r24, 0x06	; 6
    2306:	91 e0       	ldi	r25, 0x01	; 1
    2308:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
    230c:	24 c0       	rjmp	.+72     	; 0x2356 <App_Update+0xe0>
			break;
		case '2': /* MODIFY card */
			APP_ModifyCard();
    230e:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <APP_ModifyCard>
    2312:	21 c0       	rjmp	.+66     	; 0x2356 <App_Update+0xe0>
			break;
		case '3': /* REMOVE */
			APP_RemoveCard();
    2314:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <APP_RemoveCard>
    2318:	1e c0       	rjmp	.+60     	; 0x2356 <App_Update+0xe0>
			break;
		default: /* NOT a valid choice */
			UART_sendString("Please enter valid choice !!!");
    231a:	83 e2       	ldi	r24, 0x23	; 35
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
    2322:	19 c0       	rjmp	.+50     	; 0x2356 <App_Update+0xe0>
			break;
		}
	}
	else if(strcmp(gu8_UserChoice, "NORMAL") == IDENTICAL)
    2324:	85 ed       	ldi	r24, 0xD5	; 213
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	21 e4       	ldi	r18, 0x41	; 65
    232a:	31 e0       	ldi	r19, 0x01	; 1
    232c:	b9 01       	movw	r22, r18
    232e:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <strcmp>
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	61 f4       	brne	.+24     	; 0x234e <App_Update+0xd8>
	{
		/* handle normal mode*/
		/* Check for the first byte in eeprom */
		/* welcome message */
		/* ready to make transaction on the card with the control MCU */
		if(gu8_systemStatus != EMPTY_EEPROM)
    2336:	80 91 ad 02 	lds	r24, 0x02AD
    233a:	8f 3f       	cpi	r24, 0xFF	; 255
    233c:	19 f0       	breq	.+6      	; 0x2344 <App_Update+0xce>
		{
			APP_NormalMode();
    233e:	0e 94 5f 13 	call	0x26be	; 0x26be <APP_NormalMode>
    2342:	ff cf       	rjmp	.-2      	; 0x2342 <App_Update+0xcc>
			/* Be ready to communicate with the Control MCU */
			while(1);
		}
		else
		{
			UART_sendString("Please enter your data first !!!\r\r");
    2344:	88 e4       	ldi	r24, 0x48	; 72
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
    234c:	04 c0       	rjmp	.+8      	; 0x2356 <App_Update+0xe0>
		}
	}
	else
	{
		/* Please enter a valid choice */
		UART_sendString("\rPlease enter a valid choice !!!\r\r");
    234e:	8b e6       	ldi	r24, 0x6B	; 107
    2350:	91 e0       	ldi	r25, 0x01	; 1
    2352:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	}
}
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <APP_receiveData>:

/*******************************************************************************
 *                           Functions Declaration                             *
 *******************************************************************************/
void APP_receiveData(void)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	ab 97       	sbiw	r28, 0x2b	; 43
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
	uint8_t count;

	for(count = 0; count < 10 ;count++)
    2376:	1b a6       	std	Y+43, r1	; 0x2b
    2378:	83 c0       	rjmp	.+262    	; 0x2480 <APP_receiveData+0x11e>
	{
		EEPROM_readByte((ADDRESS_NAME_STORED | count), &cardData.au8_CardHolderName[count]);
    237a:	8b a5       	ldd	r24, Y+43	; 0x2b
    237c:	80 61       	ori	r24, 0x10	; 16
    237e:	48 2f       	mov	r20, r24
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	8b a5       	ldd	r24, Y+43	; 0x2b
    2384:	88 2f       	mov	r24, r24
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9c 01       	movw	r18, r24
    238a:	2f 56       	subi	r18, 0x6F	; 111
    238c:	3d 4f       	sbci	r19, 0xFD	; 253
    238e:	ca 01       	movw	r24, r20
    2390:	b9 01       	movw	r22, r18
    2392:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	a8 e4       	ldi	r26, 0x48	; 72
    239c:	b2 e4       	ldi	r27, 0x42	; 66
    239e:	8f a3       	std	Y+39, r24	; 0x27
    23a0:	98 a7       	std	Y+40, r25	; 0x28
    23a2:	a9 a7       	std	Y+41, r26	; 0x29
    23a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a6:	6f a1       	ldd	r22, Y+39	; 0x27
    23a8:	78 a5       	ldd	r23, Y+40	; 0x28
    23aa:	89 a5       	ldd	r24, Y+41	; 0x29
    23ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a ef       	ldi	r20, 0xFA	; 250
    23b4:	54 e4       	ldi	r21, 0x44	; 68
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8b a3       	std	Y+35, r24	; 0x23
    23c0:	9c a3       	std	Y+36, r25	; 0x24
    23c2:	ad a3       	std	Y+37, r26	; 0x25
    23c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23c6:	6b a1       	ldd	r22, Y+35	; 0x23
    23c8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ca:	8d a1       	ldd	r24, Y+37	; 0x25
    23cc:	9e a1       	ldd	r25, Y+38	; 0x26
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	5f e3       	ldi	r21, 0x3F	; 63
    23d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23da:	88 23       	and	r24, r24
    23dc:	2c f4       	brge	.+10     	; 0x23e8 <APP_receiveData+0x86>
		__ticks = 1;
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	9a a3       	std	Y+34, r25	; 0x22
    23e4:	89 a3       	std	Y+33, r24	; 0x21
    23e6:	3f c0       	rjmp	.+126    	; 0x2466 <APP_receiveData+0x104>
	else if (__tmp > 65535)
    23e8:	6b a1       	ldd	r22, Y+35	; 0x23
    23ea:	7c a1       	ldd	r23, Y+36	; 0x24
    23ec:	8d a1       	ldd	r24, Y+37	; 0x25
    23ee:	9e a1       	ldd	r25, Y+38	; 0x26
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	3f ef       	ldi	r19, 0xFF	; 255
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	57 e4       	ldi	r21, 0x47	; 71
    23f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fc:	18 16       	cp	r1, r24
    23fe:	4c f5       	brge	.+82     	; 0x2452 <APP_receiveData+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2400:	6f a1       	ldd	r22, Y+39	; 0x27
    2402:	78 a5       	ldd	r23, Y+40	; 0x28
    2404:	89 a5       	ldd	r24, Y+41	; 0x29
    2406:	9a a5       	ldd	r25, Y+42	; 0x2a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e2       	ldi	r20, 0x20	; 32
    240e:	51 e4       	ldi	r21, 0x41	; 65
    2410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	9a a3       	std	Y+34, r25	; 0x22
    2426:	89 a3       	std	Y+33, r24	; 0x21
    2428:	0f c0       	rjmp	.+30     	; 0x2448 <APP_receiveData+0xe6>
    242a:	88 ec       	ldi	r24, 0xC8	; 200
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	98 a3       	std	Y+32, r25	; 0x20
    2430:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2432:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2434:	98 a1       	ldd	r25, Y+32	; 0x20
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	f1 f7       	brne	.-4      	; 0x2436 <APP_receiveData+0xd4>
    243a:	98 a3       	std	Y+32, r25	; 0x20
    243c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243e:	89 a1       	ldd	r24, Y+33	; 0x21
    2440:	9a a1       	ldd	r25, Y+34	; 0x22
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	9a a3       	std	Y+34, r25	; 0x22
    2446:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2448:	89 a1       	ldd	r24, Y+33	; 0x21
    244a:	9a a1       	ldd	r25, Y+34	; 0x22
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	69 f7       	brne	.-38     	; 0x242a <APP_receiveData+0xc8>
    2450:	14 c0       	rjmp	.+40     	; 0x247a <APP_receiveData+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2452:	6b a1       	ldd	r22, Y+35	; 0x23
    2454:	7c a1       	ldd	r23, Y+36	; 0x24
    2456:	8d a1       	ldd	r24, Y+37	; 0x25
    2458:	9e a1       	ldd	r25, Y+38	; 0x26
    245a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	9a a3       	std	Y+34, r25	; 0x22
    2464:	89 a3       	std	Y+33, r24	; 0x21
    2466:	89 a1       	ldd	r24, Y+33	; 0x21
    2468:	9a a1       	ldd	r25, Y+34	; 0x22
    246a:	9e 8f       	std	Y+30, r25	; 0x1e
    246c:	8d 8f       	std	Y+29, r24	; 0x1d
    246e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2470:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <APP_receiveData+0x110>
    2476:	9e 8f       	std	Y+30, r25	; 0x1e
    2478:	8d 8f       	std	Y+29, r24	; 0x1d
 *******************************************************************************/
void APP_receiveData(void)
{
	uint8_t count;

	for(count = 0; count < 10 ;count++)
    247a:	8b a5       	ldd	r24, Y+43	; 0x2b
    247c:	8f 5f       	subi	r24, 0xFF	; 255
    247e:	8b a7       	std	Y+43, r24	; 0x2b
    2480:	8b a5       	ldd	r24, Y+43	; 0x2b
    2482:	8a 30       	cpi	r24, 0x0A	; 10
    2484:	08 f4       	brcc	.+2      	; 0x2488 <APP_receiveData+0x126>
    2486:	79 cf       	rjmp	.-270    	; 0x237a <APP_receiveData+0x18>
	{
		EEPROM_readByte((ADDRESS_NAME_STORED | count), &cardData.au8_CardHolderName[count]);
		_delay_ms(50);
	}

	for(count = 0; count < 10  ;count++)
    2488:	1b a6       	std	Y+43, r1	; 0x2b
    248a:	83 c0       	rjmp	.+262    	; 0x2592 <APP_receiveData+0x230>
	{
		EEPROM_readByte((ADDRESS_PAN_STORED | count), &cardData.au8_PAN[count]);
    248c:	8b a5       	ldd	r24, Y+43	; 0x2b
    248e:	80 62       	ori	r24, 0x20	; 32
    2490:	48 2f       	mov	r20, r24
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	8b a5       	ldd	r24, Y+43	; 0x2b
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9c 01       	movw	r18, r24
    249c:	24 56       	subi	r18, 0x64	; 100
    249e:	3d 4f       	sbci	r19, 0xFD	; 253
    24a0:	ca 01       	movw	r24, r20
    24a2:	b9 01       	movw	r22, r18
    24a4:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a8 e4       	ldi	r26, 0x48	; 72
    24ae:	b2 e4       	ldi	r27, 0x42	; 66
    24b0:	89 8f       	std	Y+25, r24	; 0x19
    24b2:	9a 8f       	std	Y+26, r25	; 0x1a
    24b4:	ab 8f       	std	Y+27, r26	; 0x1b
    24b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	69 8d       	ldd	r22, Y+25	; 0x19
    24ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8d 8b       	std	Y+21, r24	; 0x15
    24d2:	9e 8b       	std	Y+22, r25	; 0x16
    24d4:	af 8b       	std	Y+23, r26	; 0x17
    24d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24d8:	6d 89       	ldd	r22, Y+21	; 0x15
    24da:	7e 89       	ldd	r23, Y+22	; 0x16
    24dc:	8f 89       	ldd	r24, Y+23	; 0x17
    24de:	98 8d       	ldd	r25, Y+24	; 0x18
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <APP_receiveData+0x198>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9c 8b       	std	Y+20, r25	; 0x14
    24f6:	8b 8b       	std	Y+19, r24	; 0x13
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <APP_receiveData+0x216>
	else if (__tmp > 65535)
    24fa:	6d 89       	ldd	r22, Y+21	; 0x15
    24fc:	7e 89       	ldd	r23, Y+22	; 0x16
    24fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2500:	98 8d       	ldd	r25, Y+24	; 0x18
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <APP_receiveData+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	69 8d       	ldd	r22, Y+25	; 0x19
    2514:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2516:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2518:	9c 8d       	ldd	r25, Y+28	; 0x1c
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9c 8b       	std	Y+20, r25	; 0x14
    2538:	8b 8b       	std	Y+19, r24	; 0x13
    253a:	0f c0       	rjmp	.+30     	; 0x255a <APP_receiveData+0x1f8>
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9a 8b       	std	Y+18, r25	; 0x12
    2542:	89 8b       	std	Y+17, r24	; 0x11
    2544:	89 89       	ldd	r24, Y+17	; 0x11
    2546:	9a 89       	ldd	r25, Y+18	; 0x12
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <APP_receiveData+0x1e6>
    254c:	9a 8b       	std	Y+18, r25	; 0x12
    254e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9c 8b       	std	Y+20, r25	; 0x14
    2558:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8b 89       	ldd	r24, Y+19	; 0x13
    255c:	9c 89       	ldd	r25, Y+20	; 0x14
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <APP_receiveData+0x1da>
    2562:	14 c0       	rjmp	.+40     	; 0x258c <APP_receiveData+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	6d 89       	ldd	r22, Y+21	; 0x15
    2566:	7e 89       	ldd	r23, Y+22	; 0x16
    2568:	8f 89       	ldd	r24, Y+23	; 0x17
    256a:	98 8d       	ldd	r25, Y+24	; 0x18
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9c 8b       	std	Y+20, r25	; 0x14
    2576:	8b 8b       	std	Y+19, r24	; 0x13
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	9c 89       	ldd	r25, Y+20	; 0x14
    257c:	98 8b       	std	Y+16, r25	; 0x10
    257e:	8f 87       	std	Y+15, r24	; 0x0f
    2580:	8f 85       	ldd	r24, Y+15	; 0x0f
    2582:	98 89       	ldd	r25, Y+16	; 0x10
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <APP_receiveData+0x222>
    2588:	98 8b       	std	Y+16, r25	; 0x10
    258a:	8f 87       	std	Y+15, r24	; 0x0f
	{
		EEPROM_readByte((ADDRESS_NAME_STORED | count), &cardData.au8_CardHolderName[count]);
		_delay_ms(50);
	}

	for(count = 0; count < 10  ;count++)
    258c:	8b a5       	ldd	r24, Y+43	; 0x2b
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	8b a7       	std	Y+43, r24	; 0x2b
    2592:	8b a5       	ldd	r24, Y+43	; 0x2b
    2594:	8a 30       	cpi	r24, 0x0A	; 10
    2596:	08 f4       	brcc	.+2      	; 0x259a <APP_receiveData+0x238>
    2598:	79 cf       	rjmp	.-270    	; 0x248c <APP_receiveData+0x12a>
	{
		EEPROM_readByte((ADDRESS_PAN_STORED | count), &cardData.au8_PAN[count]);
		_delay_ms(50);
	}

	for(count = 0; count < 5  ;count++)
    259a:	1b a6       	std	Y+43, r1	; 0x2b
    259c:	83 c0       	rjmp	.+262    	; 0x26a4 <APP_receiveData+0x342>
	{
		EEPROM_readByte((ADDRESS_PIN_STORED | count), &cardData.au8_PIN[count]);
    259e:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a0:	80 63       	ori	r24, 0x30	; 48
    25a2:	48 2f       	mov	r20, r24
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	9c 01       	movw	r18, r24
    25ae:	29 55       	subi	r18, 0x59	; 89
    25b0:	3d 4f       	sbci	r19, 0xFD	; 253
    25b2:	ca 01       	movw	r24, r20
    25b4:	b9 01       	movw	r22, r18
    25b6:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a8 e4       	ldi	r26, 0x48	; 72
    25c0:	b2 e4       	ldi	r27, 0x42	; 66
    25c2:	8b 87       	std	Y+11, r24	; 0x0b
    25c4:	9c 87       	std	Y+12, r25	; 0x0c
    25c6:	ad 87       	std	Y+13, r26	; 0x0d
    25c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    25cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	4a ef       	ldi	r20, 0xFA	; 250
    25d8:	54 e4       	ldi	r21, 0x44	; 68
    25da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	8f 83       	std	Y+7, r24	; 0x07
    25e4:	98 87       	std	Y+8, r25	; 0x08
    25e6:	a9 87       	std	Y+9, r26	; 0x09
    25e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ea:	6f 81       	ldd	r22, Y+7	; 0x07
    25ec:	78 85       	ldd	r23, Y+8	; 0x08
    25ee:	89 85       	ldd	r24, Y+9	; 0x09
    25f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e8       	ldi	r20, 0x80	; 128
    25f8:	5f e3       	ldi	r21, 0x3F	; 63
    25fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25fe:	88 23       	and	r24, r24
    2600:	2c f4       	brge	.+10     	; 0x260c <APP_receiveData+0x2aa>
		__ticks = 1;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9e 83       	std	Y+6, r25	; 0x06
    2608:	8d 83       	std	Y+5, r24	; 0x05
    260a:	3f c0       	rjmp	.+126    	; 0x268a <APP_receiveData+0x328>
	else if (__tmp > 65535)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	3f ef       	ldi	r19, 0xFF	; 255
    2618:	4f e7       	ldi	r20, 0x7F	; 127
    261a:	57 e4       	ldi	r21, 0x47	; 71
    261c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2620:	18 16       	cp	r1, r24
    2622:	4c f5       	brge	.+82     	; 0x2676 <APP_receiveData+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2624:	6b 85       	ldd	r22, Y+11	; 0x0b
    2626:	7c 85       	ldd	r23, Y+12	; 0x0c
    2628:	8d 85       	ldd	r24, Y+13	; 0x0d
    262a:	9e 85       	ldd	r25, Y+14	; 0x0e
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e2       	ldi	r20, 0x20	; 32
    2632:	51 e4       	ldi	r21, 0x41	; 65
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	9e 83       	std	Y+6, r25	; 0x06
    264a:	8d 83       	std	Y+5, r24	; 0x05
    264c:	0f c0       	rjmp	.+30     	; 0x266c <APP_receiveData+0x30a>
    264e:	88 ec       	ldi	r24, 0xC8	; 200
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9c 83       	std	Y+4, r25	; 0x04
    2654:	8b 83       	std	Y+3, r24	; 0x03
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	9c 81       	ldd	r25, Y+4	; 0x04
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <APP_receiveData+0x2f8>
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	9e 81       	ldd	r25, Y+6	; 0x06
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	9e 83       	std	Y+6, r25	; 0x06
    266a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	69 f7       	brne	.-38     	; 0x264e <APP_receiveData+0x2ec>
    2674:	14 c0       	rjmp	.+40     	; 0x269e <APP_receiveData+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9e 83       	std	Y+6, r25	; 0x06
    2688:	8d 83       	std	Y+5, r24	; 0x05
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	9e 81       	ldd	r25, Y+6	; 0x06
    268e:	9a 83       	std	Y+2, r25	; 0x02
    2690:	89 83       	std	Y+1, r24	; 0x01
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <APP_receiveData+0x334>
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
	{
		EEPROM_readByte((ADDRESS_PAN_STORED | count), &cardData.au8_PAN[count]);
		_delay_ms(50);
	}

	for(count = 0; count < 5  ;count++)
    269e:	8b a5       	ldd	r24, Y+43	; 0x2b
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	8b a7       	std	Y+43, r24	; 0x2b
    26a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    26a6:	85 30       	cpi	r24, 0x05	; 5
    26a8:	08 f4       	brcc	.+2      	; 0x26ac <APP_receiveData+0x34a>
    26aa:	79 cf       	rjmp	.-270    	; 0x259e <APP_receiveData+0x23c>
	{
		EEPROM_readByte((ADDRESS_PIN_STORED | count), &cardData.au8_PIN[count]);
		_delay_ms(50);
	}
}
    26ac:	ab 96       	adiw	r28, 0x2b	; 43
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <APP_NormalMode>:

/****************************************************************************************/
void APP_NormalMode(void)
{
    26be:	0f 93       	push	r16
    26c0:	1f 93       	push	r17
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	c5 55       	subi	r28, 0x55	; 85
    26cc:	d0 40       	sbci	r29, 0x00	; 0
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
	uint8_t count;

	APP_receiveData();
    26d8:	0e 94 b1 11 	call	0x2362	; 0x2362 <APP_receiveData>

	UART_sendString("Welcome to the NORMAL Mode\r\r");
    26dc:	8e e8       	ldi	r24, 0x8E	; 142
    26de:	91 e0       	ldi	r25, 0x01	; 1
    26e0:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>

	for(count = 0; cardData.au8_CardHolderName[count] != '\0' ;count++)
    26e4:	fe 01       	movw	r30, r28
    26e6:	eb 5a       	subi	r30, 0xAB	; 171
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	10 82       	st	Z, r1
    26ec:	d0 c0       	rjmp	.+416    	; 0x288e <APP_NormalMode+0x1d0>
	{
		EEPROM_readByte((ADDRESS_NAME_STORED | count), &DataSent.au8_CardHolderName[count]);
    26ee:	fe 01       	movw	r30, r28
    26f0:	eb 5a       	subi	r30, 0xAB	; 171
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	80 61       	ori	r24, 0x10	; 16
    26f8:	48 2f       	mov	r20, r24
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	fe 01       	movw	r30, r28
    26fe:	eb 5a       	subi	r30, 0xAB	; 171
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9c 01       	movw	r18, r24
    270a:	28 54       	subi	r18, 0x48	; 72
    270c:	3d 4f       	sbci	r19, 0xFD	; 253
    270e:	ca 01       	movw	r24, r20
    2710:	b9 01       	movw	r22, r18
    2712:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    2716:	fe 01       	movw	r30, r28
    2718:	ef 5a       	subi	r30, 0xAF	; 175
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a8 e4       	ldi	r26, 0x48	; 72
    2722:	b2 e4       	ldi	r27, 0x42	; 66
    2724:	80 83       	st	Z, r24
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	a2 83       	std	Z+2, r26	; 0x02
    272a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272c:	8e 01       	movw	r16, r28
    272e:	03 5b       	subi	r16, 0xB3	; 179
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	fe 01       	movw	r30, r28
    2734:	ef 5a       	subi	r30, 0xAF	; 175
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4a ef       	ldi	r20, 0xFA	; 250
    2746:	54 e4       	ldi	r21, 0x44	; 68
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	f8 01       	movw	r30, r16
    2752:	80 83       	st	Z, r24
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	a2 83       	std	Z+2, r26	; 0x02
    2758:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275a:	fe 01       	movw	r30, r28
    275c:	e3 5b       	subi	r30, 0xB3	; 179
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	60 81       	ld	r22, Z
    2762:	71 81       	ldd	r23, Z+1	; 0x01
    2764:	82 81       	ldd	r24, Z+2	; 0x02
    2766:	93 81       	ldd	r25, Z+3	; 0x03
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2774:	88 23       	and	r24, r24
    2776:	44 f4       	brge	.+16     	; 0x2788 <APP_NormalMode+0xca>
		__ticks = 1;
    2778:	fe 01       	movw	r30, r28
    277a:	e5 5b       	subi	r30, 0xB5	; 181
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	64 c0       	rjmp	.+200    	; 0x2850 <APP_NormalMode+0x192>
	else if (__tmp > 65535)
    2788:	fe 01       	movw	r30, r28
    278a:	e3 5b       	subi	r30, 0xB3	; 179
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	0c f0       	brlt	.+2      	; 0x27a8 <APP_NormalMode+0xea>
    27a6:	43 c0       	rjmp	.+134    	; 0x282e <APP_NormalMode+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	fe 01       	movw	r30, r28
    27aa:	ef 5a       	subi	r30, 0xAF	; 175
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	60 81       	ld	r22, Z
    27b0:	71 81       	ldd	r23, Z+1	; 0x01
    27b2:	82 81       	ldd	r24, Z+2	; 0x02
    27b4:	93 81       	ldd	r25, Z+3	; 0x03
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	8e 01       	movw	r16, r28
    27c8:	05 5b       	subi	r16, 0xB5	; 181
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	f8 01       	movw	r30, r16
    27da:	91 83       	std	Z+1, r25	; 0x01
    27dc:	80 83       	st	Z, r24
    27de:	1f c0       	rjmp	.+62     	; 0x281e <APP_NormalMode+0x160>
    27e0:	fe 01       	movw	r30, r28
    27e2:	e7 5b       	subi	r30, 0xB7	; 183
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	88 ec       	ldi	r24, 0xC8	; 200
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
    27ee:	fe 01       	movw	r30, r28
    27f0:	e7 5b       	subi	r30, 0xB7	; 183
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <APP_NormalMode+0x13a>
    27fc:	fe 01       	movw	r30, r28
    27fe:	e7 5b       	subi	r30, 0xB7	; 183
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	91 83       	std	Z+1, r25	; 0x01
    2804:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2806:	de 01       	movw	r26, r28
    2808:	a5 5b       	subi	r26, 0xB5	; 181
    280a:	bf 4f       	sbci	r27, 0xFF	; 255
    280c:	fe 01       	movw	r30, r28
    280e:	e5 5b       	subi	r30, 0xB5	; 181
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	11 96       	adiw	r26, 0x01	; 1
    281a:	9c 93       	st	X, r25
    281c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281e:	fe 01       	movw	r30, r28
    2820:	e5 5b       	subi	r30, 0xB5	; 181
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	d1 f6       	brne	.-76     	; 0x27e0 <APP_NormalMode+0x122>
    282c:	27 c0       	rjmp	.+78     	; 0x287c <APP_NormalMode+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282e:	8e 01       	movw	r16, r28
    2830:	05 5b       	subi	r16, 0xB5	; 181
    2832:	1f 4f       	sbci	r17, 0xFF	; 255
    2834:	fe 01       	movw	r30, r28
    2836:	e3 5b       	subi	r30, 0xB3	; 179
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	60 81       	ld	r22, Z
    283c:	71 81       	ldd	r23, Z+1	; 0x01
    283e:	82 81       	ldd	r24, Z+2	; 0x02
    2840:	93 81       	ldd	r25, Z+3	; 0x03
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	f8 01       	movw	r30, r16
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	80 83       	st	Z, r24
    2850:	de 01       	movw	r26, r28
    2852:	a9 5b       	subi	r26, 0xB9	; 185
    2854:	bf 4f       	sbci	r27, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	e5 5b       	subi	r30, 0xB5	; 181
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	8d 93       	st	X+, r24
    2862:	9c 93       	st	X, r25
    2864:	fe 01       	movw	r30, r28
    2866:	e9 5b       	subi	r30, 0xB9	; 185
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <APP_NormalMode+0x1b0>
    2872:	fe 01       	movw	r30, r28
    2874:	e9 5b       	subi	r30, 0xB9	; 185
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24

	APP_receiveData();

	UART_sendString("Welcome to the NORMAL Mode\r\r");

	for(count = 0; cardData.au8_CardHolderName[count] != '\0' ;count++)
    287c:	de 01       	movw	r26, r28
    287e:	ab 5a       	subi	r26, 0xAB	; 171
    2880:	bf 4f       	sbci	r27, 0xFF	; 255
    2882:	fe 01       	movw	r30, r28
    2884:	eb 5a       	subi	r30, 0xAB	; 171
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	8c 93       	st	X, r24
    288e:	fe 01       	movw	r30, r28
    2890:	eb 5a       	subi	r30, 0xAB	; 171
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	88 2f       	mov	r24, r24
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	fc 01       	movw	r30, r24
    289c:	ef 56       	subi	r30, 0x6F	; 111
    289e:	fd 4f       	sbci	r31, 0xFD	; 253
    28a0:	80 81       	ld	r24, Z
    28a2:	88 23       	and	r24, r24
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <APP_NormalMode+0x1ea>
    28a6:	23 cf       	rjmp	.-442    	; 0x26ee <APP_NormalMode+0x30>
	{
		EEPROM_readByte((ADDRESS_NAME_STORED | count), &DataSent.au8_CardHolderName[count]);
		_delay_ms(50);
	}
	EEPROM_readByte((ADDRESS_NAME_STORED | count), &DataSent.au8_CardHolderName[count]);
    28a8:	fe 01       	movw	r30, r28
    28aa:	eb 5a       	subi	r30, 0xAB	; 171
    28ac:	ff 4f       	sbci	r31, 0xFF	; 255
    28ae:	80 81       	ld	r24, Z
    28b0:	80 61       	ori	r24, 0x10	; 16
    28b2:	48 2f       	mov	r20, r24
    28b4:	50 e0       	ldi	r21, 0x00	; 0
    28b6:	fe 01       	movw	r30, r28
    28b8:	eb 5a       	subi	r30, 0xAB	; 171
    28ba:	ff 4f       	sbci	r31, 0xFF	; 255
    28bc:	80 81       	ld	r24, Z
    28be:	88 2f       	mov	r24, r24
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9c 01       	movw	r18, r24
    28c4:	28 54       	subi	r18, 0x48	; 72
    28c6:	3d 4f       	sbci	r19, 0xFD	; 253
    28c8:	ca 01       	movw	r24, r20
    28ca:	b9 01       	movw	r22, r18
    28cc:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    28d0:	fe 01       	movw	r30, r28
    28d2:	ed 5b       	subi	r30, 0xBD	; 189
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a8 e4       	ldi	r26, 0x48	; 72
    28dc:	b2 e4       	ldi	r27, 0x42	; 66
    28de:	80 83       	st	Z, r24
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	a2 83       	std	Z+2, r26	; 0x02
    28e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e6:	8e 01       	movw	r16, r28
    28e8:	01 5c       	subi	r16, 0xC1	; 193
    28ea:	1f 4f       	sbci	r17, 0xFF	; 255
    28ec:	fe 01       	movw	r30, r28
    28ee:	ed 5b       	subi	r30, 0xBD	; 189
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a ef       	ldi	r20, 0xFA	; 250
    2900:	54 e4       	ldi	r21, 0x44	; 68
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	f8 01       	movw	r30, r16
    290c:	80 83       	st	Z, r24
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	a2 83       	std	Z+2, r26	; 0x02
    2912:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2914:	fe 01       	movw	r30, r28
    2916:	ff 96       	adiw	r30, 0x3f	; 63
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e8       	ldi	r20, 0x80	; 128
    2926:	5f e3       	ldi	r21, 0x3F	; 63
    2928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292c:	88 23       	and	r24, r24
    292e:	2c f4       	brge	.+10     	; 0x293a <APP_NormalMode+0x27c>
		__ticks = 1;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	9e af       	std	Y+62, r25	; 0x3e
    2936:	8d af       	std	Y+61, r24	; 0x3d
    2938:	46 c0       	rjmp	.+140    	; 0x29c6 <APP_NormalMode+0x308>
	else if (__tmp > 65535)
    293a:	fe 01       	movw	r30, r28
    293c:	ff 96       	adiw	r30, 0x3f	; 63
    293e:	60 81       	ld	r22, Z
    2940:	71 81       	ldd	r23, Z+1	; 0x01
    2942:	82 81       	ldd	r24, Z+2	; 0x02
    2944:	93 81       	ldd	r25, Z+3	; 0x03
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	3f ef       	ldi	r19, 0xFF	; 255
    294a:	4f e7       	ldi	r20, 0x7F	; 127
    294c:	57 e4       	ldi	r21, 0x47	; 71
    294e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2952:	18 16       	cp	r1, r24
    2954:	64 f5       	brge	.+88     	; 0x29ae <APP_NormalMode+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2956:	fe 01       	movw	r30, r28
    2958:	ed 5b       	subi	r30, 0xBD	; 189
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	82 81       	ldd	r24, Z+2	; 0x02
    2962:	93 81       	ldd	r25, Z+3	; 0x03
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e2       	ldi	r20, 0x20	; 32
    296a:	51 e4       	ldi	r21, 0x41	; 65
    296c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	bc 01       	movw	r22, r24
    2976:	cd 01       	movw	r24, r26
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9e af       	std	Y+62, r25	; 0x3e
    2982:	8d af       	std	Y+61, r24	; 0x3d
    2984:	0f c0       	rjmp	.+30     	; 0x29a4 <APP_NormalMode+0x2e6>
    2986:	88 ec       	ldi	r24, 0xC8	; 200
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	9c af       	std	Y+60, r25	; 0x3c
    298c:	8b af       	std	Y+59, r24	; 0x3b
    298e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2990:	9c ad       	ldd	r25, Y+60	; 0x3c
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <APP_NormalMode+0x2d4>
    2996:	9c af       	std	Y+60, r25	; 0x3c
    2998:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299a:	8d ad       	ldd	r24, Y+61	; 0x3d
    299c:	9e ad       	ldd	r25, Y+62	; 0x3e
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	9e af       	std	Y+62, r25	; 0x3e
    29a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    29a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	69 f7       	brne	.-38     	; 0x2986 <APP_NormalMode+0x2c8>
    29ac:	16 c0       	rjmp	.+44     	; 0x29da <APP_NormalMode+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ae:	fe 01       	movw	r30, r28
    29b0:	ff 96       	adiw	r30, 0x3f	; 63
    29b2:	60 81       	ld	r22, Z
    29b4:	71 81       	ldd	r23, Z+1	; 0x01
    29b6:	82 81       	ldd	r24, Z+2	; 0x02
    29b8:	93 81       	ldd	r25, Z+3	; 0x03
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e af       	std	Y+62, r25	; 0x3e
    29c4:	8d af       	std	Y+61, r24	; 0x3d
    29c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29ca:	9a af       	std	Y+58, r25	; 0x3a
    29cc:	89 af       	std	Y+57, r24	; 0x39
    29ce:	89 ad       	ldd	r24, Y+57	; 0x39
    29d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <APP_NormalMode+0x314>
    29d6:	9a af       	std	Y+58, r25	; 0x3a
    29d8:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);

	for(count = 0; cardData.au8_PAN[count] != '\0' ;count++)
    29da:	fe 01       	movw	r30, r28
    29dc:	eb 5a       	subi	r30, 0xAB	; 171
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	10 82       	st	Z, r1
    29e2:	8f c0       	rjmp	.+286    	; 0x2b02 <APP_NormalMode+0x444>
	{
		EEPROM_readByte((ADDRESS_PAN_STORED | count), &DataSent.au8_PAN[count]);
    29e4:	fe 01       	movw	r30, r28
    29e6:	eb 5a       	subi	r30, 0xAB	; 171
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	80 81       	ld	r24, Z
    29ec:	80 62       	ori	r24, 0x20	; 32
    29ee:	48 2f       	mov	r20, r24
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	fe 01       	movw	r30, r28
    29f4:	eb 5a       	subi	r30, 0xAB	; 171
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 81       	ld	r24, Z
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9c 01       	movw	r18, r24
    2a00:	2d 53       	subi	r18, 0x3D	; 61
    2a02:	3d 4f       	sbci	r19, 0xFD	; 253
    2a04:	ca 01       	movw	r24, r20
    2a06:	b9 01       	movw	r22, r18
    2a08:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a8 e4       	ldi	r26, 0x48	; 72
    2a12:	b2 e4       	ldi	r27, 0x42	; 66
    2a14:	8d ab       	std	Y+53, r24	; 0x35
    2a16:	9e ab       	std	Y+54, r25	; 0x36
    2a18:	af ab       	std	Y+55, r26	; 0x37
    2a1a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a1e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a20:	8f a9       	ldd	r24, Y+55	; 0x37
    2a22:	98 ad       	ldd	r25, Y+56	; 0x38
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a ef       	ldi	r20, 0xFA	; 250
    2a2a:	54 e4       	ldi	r21, 0x44	; 68
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	89 ab       	std	Y+49, r24	; 0x31
    2a36:	9a ab       	std	Y+50, r25	; 0x32
    2a38:	ab ab       	std	Y+51, r26	; 0x33
    2a3a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a3c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a3e:	7a a9       	ldd	r23, Y+50	; 0x32
    2a40:	8b a9       	ldd	r24, Y+51	; 0x33
    2a42:	9c a9       	ldd	r25, Y+52	; 0x34
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <APP_NormalMode+0x3a0>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	98 ab       	std	Y+48, r25	; 0x30
    2a5a:	8f a7       	std	Y+47, r24	; 0x2f
    2a5c:	3f c0       	rjmp	.+126    	; 0x2adc <APP_NormalMode+0x41e>
	else if (__tmp > 65535)
    2a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a60:	7a a9       	ldd	r23, Y+50	; 0x32
    2a62:	8b a9       	ldd	r24, Y+51	; 0x33
    2a64:	9c a9       	ldd	r25, Y+52	; 0x34
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	3f ef       	ldi	r19, 0xFF	; 255
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	57 e4       	ldi	r21, 0x47	; 71
    2a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a72:	18 16       	cp	r1, r24
    2a74:	4c f5       	brge	.+82     	; 0x2ac8 <APP_NormalMode+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	6d a9       	ldd	r22, Y+53	; 0x35
    2a78:	7e a9       	ldd	r23, Y+54	; 0x36
    2a7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	98 ab       	std	Y+48, r25	; 0x30
    2a9c:	8f a7       	std	Y+47, r24	; 0x2f
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <APP_NormalMode+0x400>
    2aa0:	88 ec       	ldi	r24, 0xC8	; 200
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9e a7       	std	Y+46, r25	; 0x2e
    2aa6:	8d a7       	std	Y+45, r24	; 0x2d
    2aa8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2aaa:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <APP_NormalMode+0x3ee>
    2ab0:	9e a7       	std	Y+46, r25	; 0x2e
    2ab2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	98 ab       	std	Y+48, r25	; 0x30
    2abc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f7       	brne	.-38     	; 0x2aa0 <APP_NormalMode+0x3e2>
    2ac6:	14 c0       	rjmp	.+40     	; 0x2af0 <APP_NormalMode+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aca:	7a a9       	ldd	r23, Y+50	; 0x32
    2acc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ace:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ade:	98 a9       	ldd	r25, Y+48	; 0x30
    2ae0:	9c a7       	std	Y+44, r25	; 0x2c
    2ae2:	8b a7       	std	Y+43, r24	; 0x2b
    2ae4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ae6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <APP_NormalMode+0x42a>
    2aec:	9c a7       	std	Y+44, r25	; 0x2c
    2aee:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
	}
	EEPROM_readByte((ADDRESS_NAME_STORED | count), &DataSent.au8_CardHolderName[count]);
	_delay_ms(50);

	for(count = 0; cardData.au8_PAN[count] != '\0' ;count++)
    2af0:	de 01       	movw	r26, r28
    2af2:	ab 5a       	subi	r26, 0xAB	; 171
    2af4:	bf 4f       	sbci	r27, 0xFF	; 255
    2af6:	fe 01       	movw	r30, r28
    2af8:	eb 5a       	subi	r30, 0xAB	; 171
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	80 81       	ld	r24, Z
    2afe:	8f 5f       	subi	r24, 0xFF	; 255
    2b00:	8c 93       	st	X, r24
    2b02:	fe 01       	movw	r30, r28
    2b04:	eb 5a       	subi	r30, 0xAB	; 171
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	80 81       	ld	r24, Z
    2b0a:	88 2f       	mov	r24, r24
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	fc 01       	movw	r30, r24
    2b10:	e4 56       	subi	r30, 0x64	; 100
    2b12:	fd 4f       	sbci	r31, 0xFD	; 253
    2b14:	80 81       	ld	r24, Z
    2b16:	88 23       	and	r24, r24
    2b18:	09 f0       	breq	.+2      	; 0x2b1c <APP_NormalMode+0x45e>
    2b1a:	64 cf       	rjmp	.-312    	; 0x29e4 <APP_NormalMode+0x326>
	{
		EEPROM_readByte((ADDRESS_PAN_STORED | count), &DataSent.au8_PAN[count]);
		_delay_ms(50);
	}
	EEPROM_readByte((ADDRESS_PAN_STORED | count), &DataSent.au8_PAN[count]);
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	eb 5a       	subi	r30, 0xAB	; 171
    2b20:	ff 4f       	sbci	r31, 0xFF	; 255
    2b22:	80 81       	ld	r24, Z
    2b24:	80 62       	ori	r24, 0x20	; 32
    2b26:	48 2f       	mov	r20, r24
    2b28:	50 e0       	ldi	r21, 0x00	; 0
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	eb 5a       	subi	r30, 0xAB	; 171
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9c 01       	movw	r18, r24
    2b38:	2d 53       	subi	r18, 0x3D	; 61
    2b3a:	3d 4f       	sbci	r19, 0xFD	; 253
    2b3c:	ca 01       	movw	r24, r20
    2b3e:	b9 01       	movw	r22, r18
    2b40:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a8 e4       	ldi	r26, 0x48	; 72
    2b4a:	b2 e4       	ldi	r27, 0x42	; 66
    2b4c:	8f a3       	std	Y+39, r24	; 0x27
    2b4e:	98 a7       	std	Y+40, r25	; 0x28
    2b50:	a9 a7       	std	Y+41, r26	; 0x29
    2b52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b54:	6f a1       	ldd	r22, Y+39	; 0x27
    2b56:	78 a5       	ldd	r23, Y+40	; 0x28
    2b58:	89 a5       	ldd	r24, Y+41	; 0x29
    2b5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a ef       	ldi	r20, 0xFA	; 250
    2b62:	54 e4       	ldi	r21, 0x44	; 68
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	8b a3       	std	Y+35, r24	; 0x23
    2b6e:	9c a3       	std	Y+36, r25	; 0x24
    2b70:	ad a3       	std	Y+37, r26	; 0x25
    2b72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b74:	6b a1       	ldd	r22, Y+35	; 0x23
    2b76:	7c a1       	ldd	r23, Y+36	; 0x24
    2b78:	8d a1       	ldd	r24, Y+37	; 0x25
    2b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	2c f4       	brge	.+10     	; 0x2b96 <APP_NormalMode+0x4d8>
		__ticks = 1;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	9a a3       	std	Y+34, r25	; 0x22
    2b92:	89 a3       	std	Y+33, r24	; 0x21
    2b94:	3f c0       	rjmp	.+126    	; 0x2c14 <APP_NormalMode+0x556>
	else if (__tmp > 65535)
    2b96:	6b a1       	ldd	r22, Y+35	; 0x23
    2b98:	7c a1       	ldd	r23, Y+36	; 0x24
    2b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	4c f5       	brge	.+82     	; 0x2c00 <APP_NormalMode+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	6f a1       	ldd	r22, Y+39	; 0x27
    2bb0:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb2:	89 a5       	ldd	r24, Y+41	; 0x29
    2bb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	40 e2       	ldi	r20, 0x20	; 32
    2bbc:	51 e4       	ldi	r21, 0x41	; 65
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9a a3       	std	Y+34, r25	; 0x22
    2bd4:	89 a3       	std	Y+33, r24	; 0x21
    2bd6:	0f c0       	rjmp	.+30     	; 0x2bf6 <APP_NormalMode+0x538>
    2bd8:	88 ec       	ldi	r24, 0xC8	; 200
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	98 a3       	std	Y+32, r25	; 0x20
    2bde:	8f 8f       	std	Y+31, r24	; 0x1f
    2be0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2be2:	98 a1       	ldd	r25, Y+32	; 0x20
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <APP_NormalMode+0x526>
    2be8:	98 a3       	std	Y+32, r25	; 0x20
    2bea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bec:	89 a1       	ldd	r24, Y+33	; 0x21
    2bee:	9a a1       	ldd	r25, Y+34	; 0x22
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	9a a3       	std	Y+34, r25	; 0x22
    2bf4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfa:	00 97       	sbiw	r24, 0x00	; 0
    2bfc:	69 f7       	brne	.-38     	; 0x2bd8 <APP_NormalMode+0x51a>
    2bfe:	14 c0       	rjmp	.+40     	; 0x2c28 <APP_NormalMode+0x56a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c00:	6b a1       	ldd	r22, Y+35	; 0x23
    2c02:	7c a1       	ldd	r23, Y+36	; 0x24
    2c04:	8d a1       	ldd	r24, Y+37	; 0x25
    2c06:	9e a1       	ldd	r25, Y+38	; 0x26
    2c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	9a a3       	std	Y+34, r25	; 0x22
    2c12:	89 a3       	std	Y+33, r24	; 0x21
    2c14:	89 a1       	ldd	r24, Y+33	; 0x21
    2c16:	9a a1       	ldd	r25, Y+34	; 0x22
    2c18:	9e 8f       	std	Y+30, r25	; 0x1e
    2c1a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	f1 f7       	brne	.-4      	; 0x2c20 <APP_NormalMode+0x562>
    2c24:	9e 8f       	std	Y+30, r25	; 0x1e
    2c26:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);

	for(count = 0; cardData.au8_PIN[count] != '\0' ;count++)
    2c28:	fe 01       	movw	r30, r28
    2c2a:	eb 5a       	subi	r30, 0xAB	; 171
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	10 82       	st	Z, r1
    2c30:	8f c0       	rjmp	.+286    	; 0x2d50 <APP_NormalMode+0x692>
	{
		EEPROM_readByte((ADDRESS_PIN_STORED | count), &DataSent.au8_PIN[count]);
    2c32:	fe 01       	movw	r30, r28
    2c34:	eb 5a       	subi	r30, 0xAB	; 171
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	80 63       	ori	r24, 0x30	; 48
    2c3c:	48 2f       	mov	r20, r24
    2c3e:	50 e0       	ldi	r21, 0x00	; 0
    2c40:	fe 01       	movw	r30, r28
    2c42:	eb 5a       	subi	r30, 0xAB	; 171
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	88 2f       	mov	r24, r24
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	9c 01       	movw	r18, r24
    2c4e:	22 53       	subi	r18, 0x32	; 50
    2c50:	3d 4f       	sbci	r19, 0xFD	; 253
    2c52:	ca 01       	movw	r24, r20
    2c54:	b9 01       	movw	r22, r18
    2c56:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	a8 e4       	ldi	r26, 0x48	; 72
    2c60:	b2 e4       	ldi	r27, 0x42	; 66
    2c62:	89 8f       	std	Y+25, r24	; 0x19
    2c64:	9a 8f       	std	Y+26, r25	; 0x1a
    2c66:	ab 8f       	std	Y+27, r26	; 0x1b
    2c68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	4a ef       	ldi	r20, 0xFA	; 250
    2c78:	54 e4       	ldi	r21, 0x44	; 68
    2c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	8d 8b       	std	Y+21, r24	; 0x15
    2c84:	9e 8b       	std	Y+22, r25	; 0x16
    2c86:	af 8b       	std	Y+23, r26	; 0x17
    2c88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c90:	98 8d       	ldd	r25, Y+24	; 0x18
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e8       	ldi	r20, 0x80	; 128
    2c98:	5f e3       	ldi	r21, 0x3F	; 63
    2c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c9e:	88 23       	and	r24, r24
    2ca0:	2c f4       	brge	.+10     	; 0x2cac <APP_NormalMode+0x5ee>
		__ticks = 1;
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	9c 8b       	std	Y+20, r25	; 0x14
    2ca8:	8b 8b       	std	Y+19, r24	; 0x13
    2caa:	3f c0       	rjmp	.+126    	; 0x2d2a <APP_NormalMode+0x66c>
	else if (__tmp > 65535)
    2cac:	6d 89       	ldd	r22, Y+21	; 0x15
    2cae:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	3f ef       	ldi	r19, 0xFF	; 255
    2cb8:	4f e7       	ldi	r20, 0x7F	; 127
    2cba:	57 e4       	ldi	r21, 0x47	; 71
    2cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc0:	18 16       	cp	r1, r24
    2cc2:	4c f5       	brge	.+82     	; 0x2d16 <APP_NormalMode+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e2       	ldi	r20, 0x20	; 32
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	bc 01       	movw	r22, r24
    2cde:	cd 01       	movw	r24, r26
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	8b 8b       	std	Y+19, r24	; 0x13
    2cec:	0f c0       	rjmp	.+30     	; 0x2d0c <APP_NormalMode+0x64e>
    2cee:	88 ec       	ldi	r24, 0xC8	; 200
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9a 8b       	std	Y+18, r25	; 0x12
    2cf4:	89 8b       	std	Y+17, r24	; 0x11
    2cf6:	89 89       	ldd	r24, Y+17	; 0x11
    2cf8:	9a 89       	ldd	r25, Y+18	; 0x12
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <APP_NormalMode+0x63c>
    2cfe:	9a 8b       	std	Y+18, r25	; 0x12
    2d00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d02:	8b 89       	ldd	r24, Y+19	; 0x13
    2d04:	9c 89       	ldd	r25, Y+20	; 0x14
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	9c 8b       	std	Y+20, r25	; 0x14
    2d0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d10:	00 97       	sbiw	r24, 0x00	; 0
    2d12:	69 f7       	brne	.-38     	; 0x2cee <APP_NormalMode+0x630>
    2d14:	14 c0       	rjmp	.+40     	; 0x2d3e <APP_NormalMode+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d16:	6d 89       	ldd	r22, Y+21	; 0x15
    2d18:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	98 8b       	std	Y+16, r25	; 0x10
    2d30:	8f 87       	std	Y+15, r24	; 0x0f
    2d32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d34:	98 89       	ldd	r25, Y+16	; 0x10
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <APP_NormalMode+0x678>
    2d3a:	98 8b       	std	Y+16, r25	; 0x10
    2d3c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
	}
	EEPROM_readByte((ADDRESS_PAN_STORED | count), &DataSent.au8_PAN[count]);
	_delay_ms(50);

	for(count = 0; cardData.au8_PIN[count] != '\0' ;count++)
    2d3e:	de 01       	movw	r26, r28
    2d40:	ab 5a       	subi	r26, 0xAB	; 171
    2d42:	bf 4f       	sbci	r27, 0xFF	; 255
    2d44:	fe 01       	movw	r30, r28
    2d46:	eb 5a       	subi	r30, 0xAB	; 171
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	8c 93       	st	X, r24
    2d50:	fe 01       	movw	r30, r28
    2d52:	eb 5a       	subi	r30, 0xAB	; 171
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 81       	ld	r24, Z
    2d58:	88 2f       	mov	r24, r24
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	e9 55       	subi	r30, 0x59	; 89
    2d60:	fd 4f       	sbci	r31, 0xFD	; 253
    2d62:	80 81       	ld	r24, Z
    2d64:	88 23       	and	r24, r24
    2d66:	09 f0       	breq	.+2      	; 0x2d6a <APP_NormalMode+0x6ac>
    2d68:	64 cf       	rjmp	.-312    	; 0x2c32 <APP_NormalMode+0x574>
	{
		EEPROM_readByte((ADDRESS_PIN_STORED | count), &DataSent.au8_PIN[count]);
		_delay_ms(50);
	}
	EEPROM_readByte((ADDRESS_PIN_STORED | count), &DataSent.au8_PIN[count]);
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	eb 5a       	subi	r30, 0xAB	; 171
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	80 63       	ori	r24, 0x30	; 48
    2d74:	48 2f       	mov	r20, r24
    2d76:	50 e0       	ldi	r21, 0x00	; 0
    2d78:	fe 01       	movw	r30, r28
    2d7a:	eb 5a       	subi	r30, 0xAB	; 171
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	80 81       	ld	r24, Z
    2d80:	88 2f       	mov	r24, r24
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	9c 01       	movw	r18, r24
    2d86:	22 53       	subi	r18, 0x32	; 50
    2d88:	3d 4f       	sbci	r19, 0xFD	; 253
    2d8a:	ca 01       	movw	r24, r20
    2d8c:	b9 01       	movw	r22, r18
    2d8e:	0e 94 4e 10 	call	0x209c	; 0x209c <EEPROM_readByte>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	a8 e4       	ldi	r26, 0x48	; 72
    2d98:	b2 e4       	ldi	r27, 0x42	; 66
    2d9a:	8b 87       	std	Y+11, r24	; 0x0b
    2d9c:	9c 87       	std	Y+12, r25	; 0x0c
    2d9e:	ad 87       	std	Y+13, r26	; 0x0d
    2da0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	4a ef       	ldi	r20, 0xFA	; 250
    2db0:	54 e4       	ldi	r21, 0x44	; 68
    2db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	8f 83       	std	Y+7, r24	; 0x07
    2dbc:	98 87       	std	Y+8, r25	; 0x08
    2dbe:	a9 87       	std	Y+9, r26	; 0x09
    2dc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc4:	78 85       	ldd	r23, Y+8	; 0x08
    2dc6:	89 85       	ldd	r24, Y+9	; 0x09
    2dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e8       	ldi	r20, 0x80	; 128
    2dd0:	5f e3       	ldi	r21, 0x3F	; 63
    2dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd6:	88 23       	and	r24, r24
    2dd8:	2c f4       	brge	.+10     	; 0x2de4 <APP_NormalMode+0x726>
		__ticks = 1;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9e 83       	std	Y+6, r25	; 0x06
    2de0:	8d 83       	std	Y+5, r24	; 0x05
    2de2:	3f c0       	rjmp	.+126    	; 0x2e62 <APP_NormalMode+0x7a4>
	else if (__tmp > 65535)
    2de4:	6f 81       	ldd	r22, Y+7	; 0x07
    2de6:	78 85       	ldd	r23, Y+8	; 0x08
    2de8:	89 85       	ldd	r24, Y+9	; 0x09
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	3f ef       	ldi	r19, 0xFF	; 255
    2df0:	4f e7       	ldi	r20, 0x7F	; 127
    2df2:	57 e4       	ldi	r21, 0x47	; 71
    2df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df8:	18 16       	cp	r1, r24
    2dfa:	4c f5       	brge	.+82     	; 0x2e4e <APP_NormalMode+0x790>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	40 e2       	ldi	r20, 0x20	; 32
    2e0a:	51 e4       	ldi	r21, 0x41	; 65
    2e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9e 83       	std	Y+6, r25	; 0x06
    2e22:	8d 83       	std	Y+5, r24	; 0x05
    2e24:	0f c0       	rjmp	.+30     	; 0x2e44 <APP_NormalMode+0x786>
    2e26:	88 ec       	ldi	r24, 0xC8	; 200
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	9c 83       	std	Y+4, r25	; 0x04
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
    2e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e30:	9c 81       	ldd	r25, Y+4	; 0x04
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	f1 f7       	brne	.-4      	; 0x2e32 <APP_NormalMode+0x774>
    2e36:	9c 83       	std	Y+4, r25	; 0x04
    2e38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	00 97       	sbiw	r24, 0x00	; 0
    2e4a:	69 f7       	brne	.-38     	; 0x2e26 <APP_NormalMode+0x768>
    2e4c:	14 c0       	rjmp	.+40     	; 0x2e76 <APP_NormalMode+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e50:	78 85       	ldd	r23, Y+8	; 0x08
    2e52:	89 85       	ldd	r24, Y+9	; 0x09
    2e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	9e 83       	std	Y+6, r25	; 0x06
    2e60:	8d 83       	std	Y+5, r24	; 0x05
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <APP_NormalMode+0x7b0>
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	gu8_sendStatus = TRUE;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	80 93 8a 02 	sts	0x028A, r24
}
    2e7c:	cb 5a       	subi	r28, 0xAB	; 171
    2e7e:	df 4f       	sbci	r29, 0xFF	; 255
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	1f 91       	pop	r17
    2e90:	0f 91       	pop	r16
    2e92:	08 95       	ret

00002e94 <APP_AddCard>:

/****************************************************************************************/

void APP_AddCard(void)
{
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	c5 55       	subi	r28, 0x55	; 85
    2ea2:	d0 40       	sbci	r29, 0x00	; 0
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
	uint8_t count;

	/* FIRST CHOICE: ADD */
	UART_sendString("Please enter your NAME: ");
    2eae:	8b ea       	ldi	r24, 0xAB	; 171
    2eb0:	91 e0       	ldi	r25, 0x01	; 1
    2eb2:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	UART_receiveString(cardData.au8_CardHolderName);
    2eb6:	81 e9       	ldi	r24, 0x91	; 145
    2eb8:	92 e0       	ldi	r25, 0x02	; 2
    2eba:	0e 94 29 07 	call	0xe52	; 0xe52 <UART_receiveString>

	for(count = 0; cardData.au8_CardHolderName[count] != '\0' ;count++)
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	eb 5a       	subi	r30, 0xAB	; 171
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	10 82       	st	Z, r1
    2ec6:	d1 c0       	rjmp	.+418    	; 0x306a <APP_AddCard+0x1d6>
	{
		EEPROM_writeByte((ADDRESS_NAME_STORED | count), cardData.au8_CardHolderName[count]);
    2ec8:	fe 01       	movw	r30, r28
    2eca:	eb 5a       	subi	r30, 0xAB	; 171
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	80 81       	ld	r24, Z
    2ed0:	80 61       	ori	r24, 0x10	; 16
    2ed2:	48 2f       	mov	r20, r24
    2ed4:	50 e0       	ldi	r21, 0x00	; 0
    2ed6:	fe 01       	movw	r30, r28
    2ed8:	eb 5a       	subi	r30, 0xAB	; 171
    2eda:	ff 4f       	sbci	r31, 0xFF	; 255
    2edc:	80 81       	ld	r24, Z
    2ede:	88 2f       	mov	r24, r24
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	ef 56       	subi	r30, 0x6F	; 111
    2ee6:	fd 4f       	sbci	r31, 0xFD	; 253
    2ee8:	20 81       	ld	r18, Z
    2eea:	ca 01       	movw	r24, r20
    2eec:	62 2f       	mov	r22, r18
    2eee:	0e 94 0d 10 	call	0x201a	; 0x201a <EEPROM_writeByte>
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	ef 5a       	subi	r30, 0xAF	; 175
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	a8 e4       	ldi	r26, 0x48	; 72
    2efe:	b2 e4       	ldi	r27, 0x42	; 66
    2f00:	80 83       	st	Z, r24
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	a2 83       	std	Z+2, r26	; 0x02
    2f06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f08:	8e 01       	movw	r16, r28
    2f0a:	03 5b       	subi	r16, 0xB3	; 179
    2f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0e:	fe 01       	movw	r30, r28
    2f10:	ef 5a       	subi	r30, 0xAF	; 175
    2f12:	ff 4f       	sbci	r31, 0xFF	; 255
    2f14:	60 81       	ld	r22, Z
    2f16:	71 81       	ldd	r23, Z+1	; 0x01
    2f18:	82 81       	ldd	r24, Z+2	; 0x02
    2f1a:	93 81       	ldd	r25, Z+3	; 0x03
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	4a ef       	ldi	r20, 0xFA	; 250
    2f22:	54 e4       	ldi	r21, 0x44	; 68
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	f8 01       	movw	r30, r16
    2f2e:	80 83       	st	Z, r24
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	a2 83       	std	Z+2, r26	; 0x02
    2f34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f36:	fe 01       	movw	r30, r28
    2f38:	e3 5b       	subi	r30, 0xB3	; 179
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	82 81       	ldd	r24, Z+2	; 0x02
    2f42:	93 81       	ldd	r25, Z+3	; 0x03
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	40 e8       	ldi	r20, 0x80	; 128
    2f4a:	5f e3       	ldi	r21, 0x3F	; 63
    2f4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f50:	88 23       	and	r24, r24
    2f52:	44 f4       	brge	.+16     	; 0x2f64 <APP_AddCard+0xd0>
		__ticks = 1;
    2f54:	fe 01       	movw	r30, r28
    2f56:	e5 5b       	subi	r30, 0xB5	; 181
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	80 83       	st	Z, r24
    2f62:	64 c0       	rjmp	.+200    	; 0x302c <APP_AddCard+0x198>
	else if (__tmp > 65535)
    2f64:	fe 01       	movw	r30, r28
    2f66:	e3 5b       	subi	r30, 0xB3	; 179
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	3f ef       	ldi	r19, 0xFF	; 255
    2f76:	4f e7       	ldi	r20, 0x7F	; 127
    2f78:	57 e4       	ldi	r21, 0x47	; 71
    2f7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	0c f0       	brlt	.+2      	; 0x2f84 <APP_AddCard+0xf0>
    2f82:	43 c0       	rjmp	.+134    	; 0x300a <APP_AddCard+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f84:	fe 01       	movw	r30, r28
    2f86:	ef 5a       	subi	r30, 0xAF	; 175
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	60 81       	ld	r22, Z
    2f8c:	71 81       	ldd	r23, Z+1	; 0x01
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	93 81       	ldd	r25, Z+3	; 0x03
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e2       	ldi	r20, 0x20	; 32
    2f98:	51 e4       	ldi	r21, 0x41	; 65
    2f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	8e 01       	movw	r16, r28
    2fa4:	05 5b       	subi	r16, 0xB5	; 181
    2fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa8:	bc 01       	movw	r22, r24
    2faa:	cd 01       	movw	r24, r26
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
    2fba:	1f c0       	rjmp	.+62     	; 0x2ffa <APP_AddCard+0x166>
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e7 5b       	subi	r30, 0xB7	; 183
    2fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc2:	88 ec       	ldi	r24, 0xC8	; 200
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	91 83       	std	Z+1, r25	; 0x01
    2fc8:	80 83       	st	Z, r24
    2fca:	fe 01       	movw	r30, r28
    2fcc:	e7 5b       	subi	r30, 0xB7	; 183
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 81       	ld	r24, Z
    2fd2:	91 81       	ldd	r25, Z+1	; 0x01
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <APP_AddCard+0x140>
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e7 5b       	subi	r30, 0xB7	; 183
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe2:	de 01       	movw	r26, r28
    2fe4:	a5 5b       	subi	r26, 0xB5	; 181
    2fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e5 5b       	subi	r30, 0xB5	; 181
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	01 97       	sbiw	r24, 0x01	; 1
    2ff4:	11 96       	adiw	r26, 0x01	; 1
    2ff6:	9c 93       	st	X, r25
    2ff8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e5 5b       	subi	r30, 0xB5	; 181
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	80 81       	ld	r24, Z
    3002:	91 81       	ldd	r25, Z+1	; 0x01
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	d1 f6       	brne	.-76     	; 0x2fbc <APP_AddCard+0x128>
    3008:	27 c0       	rjmp	.+78     	; 0x3058 <APP_AddCard+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300a:	8e 01       	movw	r16, r28
    300c:	05 5b       	subi	r16, 0xB5	; 181
    300e:	1f 4f       	sbci	r17, 0xFF	; 255
    3010:	fe 01       	movw	r30, r28
    3012:	e3 5b       	subi	r30, 0xB3	; 179
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	f8 01       	movw	r30, r16
    3028:	91 83       	std	Z+1, r25	; 0x01
    302a:	80 83       	st	Z, r24
    302c:	de 01       	movw	r26, r28
    302e:	a9 5b       	subi	r26, 0xB9	; 185
    3030:	bf 4f       	sbci	r27, 0xFF	; 255
    3032:	fe 01       	movw	r30, r28
    3034:	e5 5b       	subi	r30, 0xB5	; 181
    3036:	ff 4f       	sbci	r31, 0xFF	; 255
    3038:	80 81       	ld	r24, Z
    303a:	91 81       	ldd	r25, Z+1	; 0x01
    303c:	8d 93       	st	X+, r24
    303e:	9c 93       	st	X, r25
    3040:	fe 01       	movw	r30, r28
    3042:	e9 5b       	subi	r30, 0xB9	; 185
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	80 81       	ld	r24, Z
    3048:	91 81       	ldd	r25, Z+1	; 0x01
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <APP_AddCard+0x1b6>
    304e:	fe 01       	movw	r30, r28
    3050:	e9 5b       	subi	r30, 0xB9	; 185
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	91 83       	std	Z+1, r25	; 0x01
    3056:	80 83       	st	Z, r24

	/* FIRST CHOICE: ADD */
	UART_sendString("Please enter your NAME: ");
	UART_receiveString(cardData.au8_CardHolderName);

	for(count = 0; cardData.au8_CardHolderName[count] != '\0' ;count++)
    3058:	de 01       	movw	r26, r28
    305a:	ab 5a       	subi	r26, 0xAB	; 171
    305c:	bf 4f       	sbci	r27, 0xFF	; 255
    305e:	fe 01       	movw	r30, r28
    3060:	eb 5a       	subi	r30, 0xAB	; 171
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	80 81       	ld	r24, Z
    3066:	8f 5f       	subi	r24, 0xFF	; 255
    3068:	8c 93       	st	X, r24
    306a:	fe 01       	movw	r30, r28
    306c:	eb 5a       	subi	r30, 0xAB	; 171
    306e:	ff 4f       	sbci	r31, 0xFF	; 255
    3070:	80 81       	ld	r24, Z
    3072:	88 2f       	mov	r24, r24
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	fc 01       	movw	r30, r24
    3078:	ef 56       	subi	r30, 0x6F	; 111
    307a:	fd 4f       	sbci	r31, 0xFD	; 253
    307c:	80 81       	ld	r24, Z
    307e:	88 23       	and	r24, r24
    3080:	09 f0       	breq	.+2      	; 0x3084 <APP_AddCard+0x1f0>
    3082:	22 cf       	rjmp	.-444    	; 0x2ec8 <APP_AddCard+0x34>
	{
		EEPROM_writeByte((ADDRESS_NAME_STORED | count), cardData.au8_CardHolderName[count]);
		_delay_ms(50);
	}
	EEPROM_writeByte((ADDRESS_NAME_STORED | count), cardData.au8_CardHolderName[count]);
    3084:	fe 01       	movw	r30, r28
    3086:	eb 5a       	subi	r30, 0xAB	; 171
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	80 61       	ori	r24, 0x10	; 16
    308e:	48 2f       	mov	r20, r24
    3090:	50 e0       	ldi	r21, 0x00	; 0
    3092:	fe 01       	movw	r30, r28
    3094:	eb 5a       	subi	r30, 0xAB	; 171
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	80 81       	ld	r24, Z
    309a:	88 2f       	mov	r24, r24
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	fc 01       	movw	r30, r24
    30a0:	ef 56       	subi	r30, 0x6F	; 111
    30a2:	fd 4f       	sbci	r31, 0xFD	; 253
    30a4:	20 81       	ld	r18, Z
    30a6:	ca 01       	movw	r24, r20
    30a8:	62 2f       	mov	r22, r18
    30aa:	0e 94 0d 10 	call	0x201a	; 0x201a <EEPROM_writeByte>
    30ae:	fe 01       	movw	r30, r28
    30b0:	ed 5b       	subi	r30, 0xBD	; 189
    30b2:	ff 4f       	sbci	r31, 0xFF	; 255
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a8 e4       	ldi	r26, 0x48	; 72
    30ba:	b2 e4       	ldi	r27, 0x42	; 66
    30bc:	80 83       	st	Z, r24
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	a2 83       	std	Z+2, r26	; 0x02
    30c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c4:	8e 01       	movw	r16, r28
    30c6:	01 5c       	subi	r16, 0xC1	; 193
    30c8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ca:	fe 01       	movw	r30, r28
    30cc:	ed 5b       	subi	r30, 0xBD	; 189
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	4a ef       	ldi	r20, 0xFA	; 250
    30de:	54 e4       	ldi	r21, 0x44	; 68
    30e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	f8 01       	movw	r30, r16
    30ea:	80 83       	st	Z, r24
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	a2 83       	std	Z+2, r26	; 0x02
    30f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30f2:	fe 01       	movw	r30, r28
    30f4:	ff 96       	adiw	r30, 0x3f	; 63
    30f6:	60 81       	ld	r22, Z
    30f8:	71 81       	ldd	r23, Z+1	; 0x01
    30fa:	82 81       	ldd	r24, Z+2	; 0x02
    30fc:	93 81       	ldd	r25, Z+3	; 0x03
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e8       	ldi	r20, 0x80	; 128
    3104:	5f e3       	ldi	r21, 0x3F	; 63
    3106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    310a:	88 23       	and	r24, r24
    310c:	2c f4       	brge	.+10     	; 0x3118 <APP_AddCard+0x284>
		__ticks = 1;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	9e af       	std	Y+62, r25	; 0x3e
    3114:	8d af       	std	Y+61, r24	; 0x3d
    3116:	46 c0       	rjmp	.+140    	; 0x31a4 <APP_AddCard+0x310>
	else if (__tmp > 65535)
    3118:	fe 01       	movw	r30, r28
    311a:	ff 96       	adiw	r30, 0x3f	; 63
    311c:	60 81       	ld	r22, Z
    311e:	71 81       	ldd	r23, Z+1	; 0x01
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	3f ef       	ldi	r19, 0xFF	; 255
    3128:	4f e7       	ldi	r20, 0x7F	; 127
    312a:	57 e4       	ldi	r21, 0x47	; 71
    312c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3130:	18 16       	cp	r1, r24
    3132:	64 f5       	brge	.+88     	; 0x318c <APP_AddCard+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3134:	fe 01       	movw	r30, r28
    3136:	ed 5b       	subi	r30, 0xBD	; 189
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	60 81       	ld	r22, Z
    313c:	71 81       	ldd	r23, Z+1	; 0x01
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9e af       	std	Y+62, r25	; 0x3e
    3160:	8d af       	std	Y+61, r24	; 0x3d
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <APP_AddCard+0x2ee>
    3164:	88 ec       	ldi	r24, 0xC8	; 200
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9c af       	std	Y+60, r25	; 0x3c
    316a:	8b af       	std	Y+59, r24	; 0x3b
    316c:	8b ad       	ldd	r24, Y+59	; 0x3b
    316e:	9c ad       	ldd	r25, Y+60	; 0x3c
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <APP_AddCard+0x2dc>
    3174:	9c af       	std	Y+60, r25	; 0x3c
    3176:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	8d ad       	ldd	r24, Y+61	; 0x3d
    317a:	9e ad       	ldd	r25, Y+62	; 0x3e
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	9e af       	std	Y+62, r25	; 0x3e
    3180:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	8d ad       	ldd	r24, Y+61	; 0x3d
    3184:	9e ad       	ldd	r25, Y+62	; 0x3e
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	69 f7       	brne	.-38     	; 0x3164 <APP_AddCard+0x2d0>
    318a:	16 c0       	rjmp	.+44     	; 0x31b8 <APP_AddCard+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	fe 01       	movw	r30, r28
    318e:	ff 96       	adiw	r30, 0x3f	; 63
    3190:	60 81       	ld	r22, Z
    3192:	71 81       	ldd	r23, Z+1	; 0x01
    3194:	82 81       	ldd	r24, Z+2	; 0x02
    3196:	93 81       	ldd	r25, Z+3	; 0x03
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	9e af       	std	Y+62, r25	; 0x3e
    31a2:	8d af       	std	Y+61, r24	; 0x3d
    31a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31a8:	9a af       	std	Y+58, r25	; 0x3a
    31aa:	89 af       	std	Y+57, r24	; 0x39
    31ac:	89 ad       	ldd	r24, Y+57	; 0x39
    31ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    31b0:	01 97       	sbiw	r24, 0x01	; 1
    31b2:	f1 f7       	brne	.-4      	; 0x31b0 <APP_AddCard+0x31c>
    31b4:	9a af       	std	Y+58, r25	; 0x3a
    31b6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);

	/* PAN */
	UART_sendString("Please enter your PAN: ");
    31b8:	84 ec       	ldi	r24, 0xC4	; 196
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	UART_receiveString(cardData.au8_PAN);
    31c0:	8c e9       	ldi	r24, 0x9C	; 156
    31c2:	92 e0       	ldi	r25, 0x02	; 2
    31c4:	0e 94 29 07 	call	0xe52	; 0xe52 <UART_receiveString>

	for(count = 0; cardData.au8_PAN[count] != '\0' ;count++)
    31c8:	fe 01       	movw	r30, r28
    31ca:	eb 5a       	subi	r30, 0xAB	; 171
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	10 82       	st	Z, r1
    31d0:	90 c0       	rjmp	.+288    	; 0x32f2 <APP_AddCard+0x45e>
	{
		EEPROM_writeByte((ADDRESS_PAN_STORED | count), cardData.au8_PAN[count]);
    31d2:	fe 01       	movw	r30, r28
    31d4:	eb 5a       	subi	r30, 0xAB	; 171
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	80 81       	ld	r24, Z
    31da:	80 62       	ori	r24, 0x20	; 32
    31dc:	48 2f       	mov	r20, r24
    31de:	50 e0       	ldi	r21, 0x00	; 0
    31e0:	fe 01       	movw	r30, r28
    31e2:	eb 5a       	subi	r30, 0xAB	; 171
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	80 81       	ld	r24, Z
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	fc 01       	movw	r30, r24
    31ee:	e4 56       	subi	r30, 0x64	; 100
    31f0:	fd 4f       	sbci	r31, 0xFD	; 253
    31f2:	20 81       	ld	r18, Z
    31f4:	ca 01       	movw	r24, r20
    31f6:	62 2f       	mov	r22, r18
    31f8:	0e 94 0d 10 	call	0x201a	; 0x201a <EEPROM_writeByte>
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	a8 e4       	ldi	r26, 0x48	; 72
    3202:	b2 e4       	ldi	r27, 0x42	; 66
    3204:	8d ab       	std	Y+53, r24	; 0x35
    3206:	9e ab       	std	Y+54, r25	; 0x36
    3208:	af ab       	std	Y+55, r26	; 0x37
    320a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    320c:	6d a9       	ldd	r22, Y+53	; 0x35
    320e:	7e a9       	ldd	r23, Y+54	; 0x36
    3210:	8f a9       	ldd	r24, Y+55	; 0x37
    3212:	98 ad       	ldd	r25, Y+56	; 0x38
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	4a ef       	ldi	r20, 0xFA	; 250
    321a:	54 e4       	ldi	r21, 0x44	; 68
    321c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	89 ab       	std	Y+49, r24	; 0x31
    3226:	9a ab       	std	Y+50, r25	; 0x32
    3228:	ab ab       	std	Y+51, r26	; 0x33
    322a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    322c:	69 a9       	ldd	r22, Y+49	; 0x31
    322e:	7a a9       	ldd	r23, Y+50	; 0x32
    3230:	8b a9       	ldd	r24, Y+51	; 0x33
    3232:	9c a9       	ldd	r25, Y+52	; 0x34
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	40 e8       	ldi	r20, 0x80	; 128
    323a:	5f e3       	ldi	r21, 0x3F	; 63
    323c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3240:	88 23       	and	r24, r24
    3242:	2c f4       	brge	.+10     	; 0x324e <APP_AddCard+0x3ba>
		__ticks = 1;
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	98 ab       	std	Y+48, r25	; 0x30
    324a:	8f a7       	std	Y+47, r24	; 0x2f
    324c:	3f c0       	rjmp	.+126    	; 0x32cc <APP_AddCard+0x438>
	else if (__tmp > 65535)
    324e:	69 a9       	ldd	r22, Y+49	; 0x31
    3250:	7a a9       	ldd	r23, Y+50	; 0x32
    3252:	8b a9       	ldd	r24, Y+51	; 0x33
    3254:	9c a9       	ldd	r25, Y+52	; 0x34
    3256:	20 e0       	ldi	r18, 0x00	; 0
    3258:	3f ef       	ldi	r19, 0xFF	; 255
    325a:	4f e7       	ldi	r20, 0x7F	; 127
    325c:	57 e4       	ldi	r21, 0x47	; 71
    325e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3262:	18 16       	cp	r1, r24
    3264:	4c f5       	brge	.+82     	; 0x32b8 <APP_AddCard+0x424>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3266:	6d a9       	ldd	r22, Y+53	; 0x35
    3268:	7e a9       	ldd	r23, Y+54	; 0x36
    326a:	8f a9       	ldd	r24, Y+55	; 0x37
    326c:	98 ad       	ldd	r25, Y+56	; 0x38
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e2       	ldi	r20, 0x20	; 32
    3274:	51 e4       	ldi	r21, 0x41	; 65
    3276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	98 ab       	std	Y+48, r25	; 0x30
    328c:	8f a7       	std	Y+47, r24	; 0x2f
    328e:	0f c0       	rjmp	.+30     	; 0x32ae <APP_AddCard+0x41a>
    3290:	88 ec       	ldi	r24, 0xC8	; 200
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	9e a7       	std	Y+46, r25	; 0x2e
    3296:	8d a7       	std	Y+45, r24	; 0x2d
    3298:	8d a5       	ldd	r24, Y+45	; 0x2d
    329a:	9e a5       	ldd	r25, Y+46	; 0x2e
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <APP_AddCard+0x408>
    32a0:	9e a7       	std	Y+46, r25	; 0x2e
    32a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a6:	98 a9       	ldd	r25, Y+48	; 0x30
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	98 ab       	std	Y+48, r25	; 0x30
    32ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    32b0:	98 a9       	ldd	r25, Y+48	; 0x30
    32b2:	00 97       	sbiw	r24, 0x00	; 0
    32b4:	69 f7       	brne	.-38     	; 0x3290 <APP_AddCard+0x3fc>
    32b6:	14 c0       	rjmp	.+40     	; 0x32e0 <APP_AddCard+0x44c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b8:	69 a9       	ldd	r22, Y+49	; 0x31
    32ba:	7a a9       	ldd	r23, Y+50	; 0x32
    32bc:	8b a9       	ldd	r24, Y+51	; 0x33
    32be:	9c a9       	ldd	r25, Y+52	; 0x34
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	98 ab       	std	Y+48, r25	; 0x30
    32ca:	8f a7       	std	Y+47, r24	; 0x2f
    32cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ce:	98 a9       	ldd	r25, Y+48	; 0x30
    32d0:	9c a7       	std	Y+44, r25	; 0x2c
    32d2:	8b a7       	std	Y+43, r24	; 0x2b
    32d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    32d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    32d8:	01 97       	sbiw	r24, 0x01	; 1
    32da:	f1 f7       	brne	.-4      	; 0x32d8 <APP_AddCard+0x444>
    32dc:	9c a7       	std	Y+44, r25	; 0x2c
    32de:	8b a7       	std	Y+43, r24	; 0x2b

	/* PAN */
	UART_sendString("Please enter your PAN: ");
	UART_receiveString(cardData.au8_PAN);

	for(count = 0; cardData.au8_PAN[count] != '\0' ;count++)
    32e0:	de 01       	movw	r26, r28
    32e2:	ab 5a       	subi	r26, 0xAB	; 171
    32e4:	bf 4f       	sbci	r27, 0xFF	; 255
    32e6:	fe 01       	movw	r30, r28
    32e8:	eb 5a       	subi	r30, 0xAB	; 171
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	80 81       	ld	r24, Z
    32ee:	8f 5f       	subi	r24, 0xFF	; 255
    32f0:	8c 93       	st	X, r24
    32f2:	fe 01       	movw	r30, r28
    32f4:	eb 5a       	subi	r30, 0xAB	; 171
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	80 81       	ld	r24, Z
    32fa:	88 2f       	mov	r24, r24
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	fc 01       	movw	r30, r24
    3300:	e4 56       	subi	r30, 0x64	; 100
    3302:	fd 4f       	sbci	r31, 0xFD	; 253
    3304:	80 81       	ld	r24, Z
    3306:	88 23       	and	r24, r24
    3308:	09 f0       	breq	.+2      	; 0x330c <APP_AddCard+0x478>
    330a:	63 cf       	rjmp	.-314    	; 0x31d2 <APP_AddCard+0x33e>
	{
		EEPROM_writeByte((ADDRESS_PAN_STORED | count), cardData.au8_PAN[count]);
		_delay_ms(50);
	}
	EEPROM_writeByte((ADDRESS_PAN_STORED | count), cardData.au8_PAN[count]);
    330c:	fe 01       	movw	r30, r28
    330e:	eb 5a       	subi	r30, 0xAB	; 171
    3310:	ff 4f       	sbci	r31, 0xFF	; 255
    3312:	80 81       	ld	r24, Z
    3314:	80 62       	ori	r24, 0x20	; 32
    3316:	48 2f       	mov	r20, r24
    3318:	50 e0       	ldi	r21, 0x00	; 0
    331a:	fe 01       	movw	r30, r28
    331c:	eb 5a       	subi	r30, 0xAB	; 171
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	80 81       	ld	r24, Z
    3322:	88 2f       	mov	r24, r24
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	fc 01       	movw	r30, r24
    3328:	e4 56       	subi	r30, 0x64	; 100
    332a:	fd 4f       	sbci	r31, 0xFD	; 253
    332c:	20 81       	ld	r18, Z
    332e:	ca 01       	movw	r24, r20
    3330:	62 2f       	mov	r22, r18
    3332:	0e 94 0d 10 	call	0x201a	; 0x201a <EEPROM_writeByte>
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	a8 e4       	ldi	r26, 0x48	; 72
    333c:	b2 e4       	ldi	r27, 0x42	; 66
    333e:	8f a3       	std	Y+39, r24	; 0x27
    3340:	98 a7       	std	Y+40, r25	; 0x28
    3342:	a9 a7       	std	Y+41, r26	; 0x29
    3344:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3346:	6f a1       	ldd	r22, Y+39	; 0x27
    3348:	78 a5       	ldd	r23, Y+40	; 0x28
    334a:	89 a5       	ldd	r24, Y+41	; 0x29
    334c:	9a a5       	ldd	r25, Y+42	; 0x2a
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	4a ef       	ldi	r20, 0xFA	; 250
    3354:	54 e4       	ldi	r21, 0x44	; 68
    3356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	8b a3       	std	Y+35, r24	; 0x23
    3360:	9c a3       	std	Y+36, r25	; 0x24
    3362:	ad a3       	std	Y+37, r26	; 0x25
    3364:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3366:	6b a1       	ldd	r22, Y+35	; 0x23
    3368:	7c a1       	ldd	r23, Y+36	; 0x24
    336a:	8d a1       	ldd	r24, Y+37	; 0x25
    336c:	9e a1       	ldd	r25, Y+38	; 0x26
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e8       	ldi	r20, 0x80	; 128
    3374:	5f e3       	ldi	r21, 0x3F	; 63
    3376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    337a:	88 23       	and	r24, r24
    337c:	2c f4       	brge	.+10     	; 0x3388 <APP_AddCard+0x4f4>
		__ticks = 1;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9a a3       	std	Y+34, r25	; 0x22
    3384:	89 a3       	std	Y+33, r24	; 0x21
    3386:	3f c0       	rjmp	.+126    	; 0x3406 <APP_AddCard+0x572>
	else if (__tmp > 65535)
    3388:	6b a1       	ldd	r22, Y+35	; 0x23
    338a:	7c a1       	ldd	r23, Y+36	; 0x24
    338c:	8d a1       	ldd	r24, Y+37	; 0x25
    338e:	9e a1       	ldd	r25, Y+38	; 0x26
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	3f ef       	ldi	r19, 0xFF	; 255
    3394:	4f e7       	ldi	r20, 0x7F	; 127
    3396:	57 e4       	ldi	r21, 0x47	; 71
    3398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    339c:	18 16       	cp	r1, r24
    339e:	4c f5       	brge	.+82     	; 0x33f2 <APP_AddCard+0x55e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a0:	6f a1       	ldd	r22, Y+39	; 0x27
    33a2:	78 a5       	ldd	r23, Y+40	; 0x28
    33a4:	89 a5       	ldd	r24, Y+41	; 0x29
    33a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e2       	ldi	r20, 0x20	; 32
    33ae:	51 e4       	ldi	r21, 0x41	; 65
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	9a a3       	std	Y+34, r25	; 0x22
    33c6:	89 a3       	std	Y+33, r24	; 0x21
    33c8:	0f c0       	rjmp	.+30     	; 0x33e8 <APP_AddCard+0x554>
    33ca:	88 ec       	ldi	r24, 0xC8	; 200
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	98 a3       	std	Y+32, r25	; 0x20
    33d0:	8f 8f       	std	Y+31, r24	; 0x1f
    33d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    33d4:	98 a1       	ldd	r25, Y+32	; 0x20
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <APP_AddCard+0x542>
    33da:	98 a3       	std	Y+32, r25	; 0x20
    33dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33de:	89 a1       	ldd	r24, Y+33	; 0x21
    33e0:	9a a1       	ldd	r25, Y+34	; 0x22
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	9a a3       	std	Y+34, r25	; 0x22
    33e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e8:	89 a1       	ldd	r24, Y+33	; 0x21
    33ea:	9a a1       	ldd	r25, Y+34	; 0x22
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	69 f7       	brne	.-38     	; 0x33ca <APP_AddCard+0x536>
    33f0:	14 c0       	rjmp	.+40     	; 0x341a <APP_AddCard+0x586>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f2:	6b a1       	ldd	r22, Y+35	; 0x23
    33f4:	7c a1       	ldd	r23, Y+36	; 0x24
    33f6:	8d a1       	ldd	r24, Y+37	; 0x25
    33f8:	9e a1       	ldd	r25, Y+38	; 0x26
    33fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	9a a3       	std	Y+34, r25	; 0x22
    3404:	89 a3       	std	Y+33, r24	; 0x21
    3406:	89 a1       	ldd	r24, Y+33	; 0x21
    3408:	9a a1       	ldd	r25, Y+34	; 0x22
    340a:	9e 8f       	std	Y+30, r25	; 0x1e
    340c:	8d 8f       	std	Y+29, r24	; 0x1d
    340e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3410:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <APP_AddCard+0x57e>
    3416:	9e 8f       	std	Y+30, r25	; 0x1e
    3418:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);

	/* PIN */
	UART_sendString("Please enter your PIN: ");
    341a:	8c ed       	ldi	r24, 0xDC	; 220
    341c:	91 e0       	ldi	r25, 0x01	; 1
    341e:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	UART_receiveString(cardData.au8_PIN);
    3422:	87 ea       	ldi	r24, 0xA7	; 167
    3424:	92 e0       	ldi	r25, 0x02	; 2
    3426:	0e 94 29 07 	call	0xe52	; 0xe52 <UART_receiveString>

	for(count = 0; cardData.au8_PIN[count] != '\0' ;count++)
    342a:	fe 01       	movw	r30, r28
    342c:	eb 5a       	subi	r30, 0xAB	; 171
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	10 82       	st	Z, r1
    3432:	90 c0       	rjmp	.+288    	; 0x3554 <APP_AddCard+0x6c0>
	{
		EEPROM_writeByte((ADDRESS_PIN_STORED | count), cardData.au8_PIN[count]);
    3434:	fe 01       	movw	r30, r28
    3436:	eb 5a       	subi	r30, 0xAB	; 171
    3438:	ff 4f       	sbci	r31, 0xFF	; 255
    343a:	80 81       	ld	r24, Z
    343c:	80 63       	ori	r24, 0x30	; 48
    343e:	48 2f       	mov	r20, r24
    3440:	50 e0       	ldi	r21, 0x00	; 0
    3442:	fe 01       	movw	r30, r28
    3444:	eb 5a       	subi	r30, 0xAB	; 171
    3446:	ff 4f       	sbci	r31, 0xFF	; 255
    3448:	80 81       	ld	r24, Z
    344a:	88 2f       	mov	r24, r24
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	fc 01       	movw	r30, r24
    3450:	e9 55       	subi	r30, 0x59	; 89
    3452:	fd 4f       	sbci	r31, 0xFD	; 253
    3454:	20 81       	ld	r18, Z
    3456:	ca 01       	movw	r24, r20
    3458:	62 2f       	mov	r22, r18
    345a:	0e 94 0d 10 	call	0x201a	; 0x201a <EEPROM_writeByte>
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	a8 e4       	ldi	r26, 0x48	; 72
    3464:	b2 e4       	ldi	r27, 0x42	; 66
    3466:	89 8f       	std	Y+25, r24	; 0x19
    3468:	9a 8f       	std	Y+26, r25	; 0x1a
    346a:	ab 8f       	std	Y+27, r26	; 0x1b
    346c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346e:	69 8d       	ldd	r22, Y+25	; 0x19
    3470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	4a ef       	ldi	r20, 0xFA	; 250
    347c:	54 e4       	ldi	r21, 0x44	; 68
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	8d 8b       	std	Y+21, r24	; 0x15
    3488:	9e 8b       	std	Y+22, r25	; 0x16
    348a:	af 8b       	std	Y+23, r26	; 0x17
    348c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    348e:	6d 89       	ldd	r22, Y+21	; 0x15
    3490:	7e 89       	ldd	r23, Y+22	; 0x16
    3492:	8f 89       	ldd	r24, Y+23	; 0x17
    3494:	98 8d       	ldd	r25, Y+24	; 0x18
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	40 e8       	ldi	r20, 0x80	; 128
    349c:	5f e3       	ldi	r21, 0x3F	; 63
    349e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a2:	88 23       	and	r24, r24
    34a4:	2c f4       	brge	.+10     	; 0x34b0 <APP_AddCard+0x61c>
		__ticks = 1;
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9c 8b       	std	Y+20, r25	; 0x14
    34ac:	8b 8b       	std	Y+19, r24	; 0x13
    34ae:	3f c0       	rjmp	.+126    	; 0x352e <APP_AddCard+0x69a>
	else if (__tmp > 65535)
    34b0:	6d 89       	ldd	r22, Y+21	; 0x15
    34b2:	7e 89       	ldd	r23, Y+22	; 0x16
    34b4:	8f 89       	ldd	r24, Y+23	; 0x17
    34b6:	98 8d       	ldd	r25, Y+24	; 0x18
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	3f ef       	ldi	r19, 0xFF	; 255
    34bc:	4f e7       	ldi	r20, 0x7F	; 127
    34be:	57 e4       	ldi	r21, 0x47	; 71
    34c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c4:	18 16       	cp	r1, r24
    34c6:	4c f5       	brge	.+82     	; 0x351a <APP_AddCard+0x686>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c8:	69 8d       	ldd	r22, Y+25	; 0x19
    34ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	40 e2       	ldi	r20, 0x20	; 32
    34d6:	51 e4       	ldi	r21, 0x41	; 65
    34d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	9c 8b       	std	Y+20, r25	; 0x14
    34ee:	8b 8b       	std	Y+19, r24	; 0x13
    34f0:	0f c0       	rjmp	.+30     	; 0x3510 <APP_AddCard+0x67c>
    34f2:	88 ec       	ldi	r24, 0xC8	; 200
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	9a 8b       	std	Y+18, r25	; 0x12
    34f8:	89 8b       	std	Y+17, r24	; 0x11
    34fa:	89 89       	ldd	r24, Y+17	; 0x11
    34fc:	9a 89       	ldd	r25, Y+18	; 0x12
    34fe:	01 97       	sbiw	r24, 0x01	; 1
    3500:	f1 f7       	brne	.-4      	; 0x34fe <APP_AddCard+0x66a>
    3502:	9a 8b       	std	Y+18, r25	; 0x12
    3504:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3506:	8b 89       	ldd	r24, Y+19	; 0x13
    3508:	9c 89       	ldd	r25, Y+20	; 0x14
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	9c 8b       	std	Y+20, r25	; 0x14
    350e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3510:	8b 89       	ldd	r24, Y+19	; 0x13
    3512:	9c 89       	ldd	r25, Y+20	; 0x14
    3514:	00 97       	sbiw	r24, 0x00	; 0
    3516:	69 f7       	brne	.-38     	; 0x34f2 <APP_AddCard+0x65e>
    3518:	14 c0       	rjmp	.+40     	; 0x3542 <APP_AddCard+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    351a:	6d 89       	ldd	r22, Y+21	; 0x15
    351c:	7e 89       	ldd	r23, Y+22	; 0x16
    351e:	8f 89       	ldd	r24, Y+23	; 0x17
    3520:	98 8d       	ldd	r25, Y+24	; 0x18
    3522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	9c 8b       	std	Y+20, r25	; 0x14
    352c:	8b 8b       	std	Y+19, r24	; 0x13
    352e:	8b 89       	ldd	r24, Y+19	; 0x13
    3530:	9c 89       	ldd	r25, Y+20	; 0x14
    3532:	98 8b       	std	Y+16, r25	; 0x10
    3534:	8f 87       	std	Y+15, r24	; 0x0f
    3536:	8f 85       	ldd	r24, Y+15	; 0x0f
    3538:	98 89       	ldd	r25, Y+16	; 0x10
    353a:	01 97       	sbiw	r24, 0x01	; 1
    353c:	f1 f7       	brne	.-4      	; 0x353a <APP_AddCard+0x6a6>
    353e:	98 8b       	std	Y+16, r25	; 0x10
    3540:	8f 87       	std	Y+15, r24	; 0x0f

	/* PIN */
	UART_sendString("Please enter your PIN: ");
	UART_receiveString(cardData.au8_PIN);

	for(count = 0; cardData.au8_PIN[count] != '\0' ;count++)
    3542:	de 01       	movw	r26, r28
    3544:	ab 5a       	subi	r26, 0xAB	; 171
    3546:	bf 4f       	sbci	r27, 0xFF	; 255
    3548:	fe 01       	movw	r30, r28
    354a:	eb 5a       	subi	r30, 0xAB	; 171
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	8f 5f       	subi	r24, 0xFF	; 255
    3552:	8c 93       	st	X, r24
    3554:	fe 01       	movw	r30, r28
    3556:	eb 5a       	subi	r30, 0xAB	; 171
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	80 81       	ld	r24, Z
    355c:	88 2f       	mov	r24, r24
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	fc 01       	movw	r30, r24
    3562:	e9 55       	subi	r30, 0x59	; 89
    3564:	fd 4f       	sbci	r31, 0xFD	; 253
    3566:	80 81       	ld	r24, Z
    3568:	88 23       	and	r24, r24
    356a:	09 f0       	breq	.+2      	; 0x356e <APP_AddCard+0x6da>
    356c:	63 cf       	rjmp	.-314    	; 0x3434 <APP_AddCard+0x5a0>
	{
		EEPROM_writeByte((ADDRESS_PIN_STORED | count), cardData.au8_PIN[count]);
		_delay_ms(50);
	}
	EEPROM_writeByte((ADDRESS_PIN_STORED | count), cardData.au8_PIN[count]);
    356e:	fe 01       	movw	r30, r28
    3570:	eb 5a       	subi	r30, 0xAB	; 171
    3572:	ff 4f       	sbci	r31, 0xFF	; 255
    3574:	80 81       	ld	r24, Z
    3576:	80 63       	ori	r24, 0x30	; 48
    3578:	48 2f       	mov	r20, r24
    357a:	50 e0       	ldi	r21, 0x00	; 0
    357c:	fe 01       	movw	r30, r28
    357e:	eb 5a       	subi	r30, 0xAB	; 171
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	88 2f       	mov	r24, r24
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	fc 01       	movw	r30, r24
    358a:	e9 55       	subi	r30, 0x59	; 89
    358c:	fd 4f       	sbci	r31, 0xFD	; 253
    358e:	20 81       	ld	r18, Z
    3590:	ca 01       	movw	r24, r20
    3592:	62 2f       	mov	r22, r18
    3594:	0e 94 0d 10 	call	0x201a	; 0x201a <EEPROM_writeByte>
    3598:	80 e0       	ldi	r24, 0x00	; 0
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	a8 e4       	ldi	r26, 0x48	; 72
    359e:	b2 e4       	ldi	r27, 0x42	; 66
    35a0:	8b 87       	std	Y+11, r24	; 0x0b
    35a2:	9c 87       	std	Y+12, r25	; 0x0c
    35a4:	ad 87       	std	Y+13, r26	; 0x0d
    35a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    35ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	4a ef       	ldi	r20, 0xFA	; 250
    35b6:	54 e4       	ldi	r21, 0x44	; 68
    35b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	8f 83       	std	Y+7, r24	; 0x07
    35c2:	98 87       	std	Y+8, r25	; 0x08
    35c4:	a9 87       	std	Y+9, r26	; 0x09
    35c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35c8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ca:	78 85       	ldd	r23, Y+8	; 0x08
    35cc:	89 85       	ldd	r24, Y+9	; 0x09
    35ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	40 e8       	ldi	r20, 0x80	; 128
    35d6:	5f e3       	ldi	r21, 0x3F	; 63
    35d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    35dc:	88 23       	and	r24, r24
    35de:	2c f4       	brge	.+10     	; 0x35ea <APP_AddCard+0x756>
		__ticks = 1;
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	9e 83       	std	Y+6, r25	; 0x06
    35e6:	8d 83       	std	Y+5, r24	; 0x05
    35e8:	3f c0       	rjmp	.+126    	; 0x3668 <APP_AddCard+0x7d4>
	else if (__tmp > 65535)
    35ea:	6f 81       	ldd	r22, Y+7	; 0x07
    35ec:	78 85       	ldd	r23, Y+8	; 0x08
    35ee:	89 85       	ldd	r24, Y+9	; 0x09
    35f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	3f ef       	ldi	r19, 0xFF	; 255
    35f6:	4f e7       	ldi	r20, 0x7F	; 127
    35f8:	57 e4       	ldi	r21, 0x47	; 71
    35fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35fe:	18 16       	cp	r1, r24
    3600:	4c f5       	brge	.+82     	; 0x3654 <APP_AddCard+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3602:	6b 85       	ldd	r22, Y+11	; 0x0b
    3604:	7c 85       	ldd	r23, Y+12	; 0x0c
    3606:	8d 85       	ldd	r24, Y+13	; 0x0d
    3608:	9e 85       	ldd	r25, Y+14	; 0x0e
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	40 e2       	ldi	r20, 0x20	; 32
    3610:	51 e4       	ldi	r21, 0x41	; 65
    3612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3616:	dc 01       	movw	r26, r24
    3618:	cb 01       	movw	r24, r22
    361a:	bc 01       	movw	r22, r24
    361c:	cd 01       	movw	r24, r26
    361e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	9e 83       	std	Y+6, r25	; 0x06
    3628:	8d 83       	std	Y+5, r24	; 0x05
    362a:	0f c0       	rjmp	.+30     	; 0x364a <APP_AddCard+0x7b6>
    362c:	88 ec       	ldi	r24, 0xC8	; 200
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	9c 83       	std	Y+4, r25	; 0x04
    3632:	8b 83       	std	Y+3, r24	; 0x03
    3634:	8b 81       	ldd	r24, Y+3	; 0x03
    3636:	9c 81       	ldd	r25, Y+4	; 0x04
    3638:	01 97       	sbiw	r24, 0x01	; 1
    363a:	f1 f7       	brne	.-4      	; 0x3638 <APP_AddCard+0x7a4>
    363c:	9c 83       	std	Y+4, r25	; 0x04
    363e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3640:	8d 81       	ldd	r24, Y+5	; 0x05
    3642:	9e 81       	ldd	r25, Y+6	; 0x06
    3644:	01 97       	sbiw	r24, 0x01	; 1
    3646:	9e 83       	std	Y+6, r25	; 0x06
    3648:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    364a:	8d 81       	ldd	r24, Y+5	; 0x05
    364c:	9e 81       	ldd	r25, Y+6	; 0x06
    364e:	00 97       	sbiw	r24, 0x00	; 0
    3650:	69 f7       	brne	.-38     	; 0x362c <APP_AddCard+0x798>
    3652:	14 c0       	rjmp	.+40     	; 0x367c <APP_AddCard+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3654:	6f 81       	ldd	r22, Y+7	; 0x07
    3656:	78 85       	ldd	r23, Y+8	; 0x08
    3658:	89 85       	ldd	r24, Y+9	; 0x09
    365a:	9a 85       	ldd	r25, Y+10	; 0x0a
    365c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
    3668:	8d 81       	ldd	r24, Y+5	; 0x05
    366a:	9e 81       	ldd	r25, Y+6	; 0x06
    366c:	9a 83       	std	Y+2, r25	; 0x02
    366e:	89 83       	std	Y+1, r24	; 0x01
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	9a 81       	ldd	r25, Y+2	; 0x02
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <APP_AddCard+0x7e0>
    3678:	9a 83       	std	Y+2, r25	; 0x02
    367a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	APP_CheckSystem_Status();
    367c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <APP_CheckSystem_Status>
}
    3680:	cb 5a       	subi	r28, 0xAB	; 171
    3682:	df 4f       	sbci	r29, 0xFF	; 255
    3684:	0f b6       	in	r0, 0x3f	; 63
    3686:	f8 94       	cli
    3688:	de bf       	out	0x3e, r29	; 62
    368a:	0f be       	out	0x3f, r0	; 63
    368c:	cd bf       	out	0x3d, r28	; 61
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	08 95       	ret

00003698 <APP_CheckSystem_Status>:
/****************************************************************************************/

void APP_CheckSystem_Status(void)
{
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	2e 97       	sbiw	r28, 0x0e	; 14
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
	/* modify the first byte in eeprom to indicate that this is the second time to login */
	if(gu8_systemStatus == EMPTY_EEPROM)
    36ac:	80 91 ad 02 	lds	r24, 0x02AD
    36b0:	8f 3f       	cpi	r24, 0xFF	; 255
    36b2:	09 f0       	breq	.+2      	; 0x36b6 <APP_CheckSystem_Status+0x1e>
    36b4:	7c c0       	rjmp	.+248    	; 0x37ae <APP_CheckSystem_Status+0x116>
	{
		gu8_systemStatus = ANY_TIME_TO_LOG_IN;
    36b6:	85 e5       	ldi	r24, 0x55	; 85
    36b8:	80 93 ad 02 	sts	0x02AD, r24
		EEPROM_writeByte(ADDRESS_SYSTEM_STATUS, gu8_systemStatus);
    36bc:	20 91 ad 02 	lds	r18, 0x02AD
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	62 2f       	mov	r22, r18
    36c6:	0e 94 0d 10 	call	0x201a	; 0x201a <EEPROM_writeByte>
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	a8 e4       	ldi	r26, 0x48	; 72
    36d0:	b2 e4       	ldi	r27, 0x42	; 66
    36d2:	8b 87       	std	Y+11, r24	; 0x0b
    36d4:	9c 87       	std	Y+12, r25	; 0x0c
    36d6:	ad 87       	std	Y+13, r26	; 0x0d
    36d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36da:	6b 85       	ldd	r22, Y+11	; 0x0b
    36dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36de:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a ef       	ldi	r20, 0xFA	; 250
    36e8:	54 e4       	ldi	r21, 0x44	; 68
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	8f 83       	std	Y+7, r24	; 0x07
    36f4:	98 87       	std	Y+8, r25	; 0x08
    36f6:	a9 87       	std	Y+9, r26	; 0x09
    36f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36fa:	6f 81       	ldd	r22, Y+7	; 0x07
    36fc:	78 85       	ldd	r23, Y+8	; 0x08
    36fe:	89 85       	ldd	r24, Y+9	; 0x09
    3700:	9a 85       	ldd	r25, Y+10	; 0x0a
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e8       	ldi	r20, 0x80	; 128
    3708:	5f e3       	ldi	r21, 0x3F	; 63
    370a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    370e:	88 23       	and	r24, r24
    3710:	2c f4       	brge	.+10     	; 0x371c <APP_CheckSystem_Status+0x84>
		__ticks = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	9e 83       	std	Y+6, r25	; 0x06
    3718:	8d 83       	std	Y+5, r24	; 0x05
    371a:	3f c0       	rjmp	.+126    	; 0x379a <APP_CheckSystem_Status+0x102>
	else if (__tmp > 65535)
    371c:	6f 81       	ldd	r22, Y+7	; 0x07
    371e:	78 85       	ldd	r23, Y+8	; 0x08
    3720:	89 85       	ldd	r24, Y+9	; 0x09
    3722:	9a 85       	ldd	r25, Y+10	; 0x0a
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	3f ef       	ldi	r19, 0xFF	; 255
    3728:	4f e7       	ldi	r20, 0x7F	; 127
    372a:	57 e4       	ldi	r21, 0x47	; 71
    372c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3730:	18 16       	cp	r1, r24
    3732:	4c f5       	brge	.+82     	; 0x3786 <APP_CheckSystem_Status+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3734:	6b 85       	ldd	r22, Y+11	; 0x0b
    3736:	7c 85       	ldd	r23, Y+12	; 0x0c
    3738:	8d 85       	ldd	r24, Y+13	; 0x0d
    373a:	9e 85       	ldd	r25, Y+14	; 0x0e
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e2       	ldi	r20, 0x20	; 32
    3742:	51 e4       	ldi	r21, 0x41	; 65
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	9e 83       	std	Y+6, r25	; 0x06
    375a:	8d 83       	std	Y+5, r24	; 0x05
    375c:	0f c0       	rjmp	.+30     	; 0x377c <APP_CheckSystem_Status+0xe4>
    375e:	88 ec       	ldi	r24, 0xC8	; 200
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	9c 83       	std	Y+4, r25	; 0x04
    3764:	8b 83       	std	Y+3, r24	; 0x03
    3766:	8b 81       	ldd	r24, Y+3	; 0x03
    3768:	9c 81       	ldd	r25, Y+4	; 0x04
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <APP_CheckSystem_Status+0xd2>
    376e:	9c 83       	std	Y+4, r25	; 0x04
    3770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3772:	8d 81       	ldd	r24, Y+5	; 0x05
    3774:	9e 81       	ldd	r25, Y+6	; 0x06
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377c:	8d 81       	ldd	r24, Y+5	; 0x05
    377e:	9e 81       	ldd	r25, Y+6	; 0x06
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	69 f7       	brne	.-38     	; 0x375e <APP_CheckSystem_Status+0xc6>
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <APP_CheckSystem_Status+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3786:	6f 81       	ldd	r22, Y+7	; 0x07
    3788:	78 85       	ldd	r23, Y+8	; 0x08
    378a:	89 85       	ldd	r24, Y+9	; 0x09
    378c:	9a 85       	ldd	r25, Y+10	; 0x0a
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
    379a:	8d 81       	ldd	r24, Y+5	; 0x05
    379c:	9e 81       	ldd	r25, Y+6	; 0x06
    379e:	9a 83       	std	Y+2, r25	; 0x02
    37a0:	89 83       	std	Y+1, r24	; 0x01
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <APP_CheckSystem_Status+0x10e>
    37aa:	9a 83       	std	Y+2, r25	; 0x02
    37ac:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
	}
}
    37ae:	2e 96       	adiw	r28, 0x0e	; 14
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	08 95       	ret

000037c0 <APP_ModifyCard>:

/****************************************************************************************/
void APP_ModifyCard(void)
{
    37c0:	df 93       	push	r29
    37c2:	cf 93       	push	r28
    37c4:	cd b7       	in	r28, 0x3d	; 61
    37c6:	de b7       	in	r29, 0x3e	; 62
	if(gu8_systemStatus != EMPTY_EEPROM)
    37c8:	80 91 ad 02 	lds	r24, 0x02AD
    37cc:	8f 3f       	cpi	r24, 0xFF	; 255
    37ce:	39 f0       	breq	.+14     	; 0x37de <APP_ModifyCard+0x1e>
	{
		/* modify data */
		APP_AddCard();
    37d0:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <APP_AddCard>
		UART_sendString("\rModifying Card succeeded !!!\r\r");
    37d4:	84 ef       	ldi	r24, 0xF4	; 244
    37d6:	91 e0       	ldi	r25, 0x01	; 1
    37d8:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
    37dc:	04 c0       	rjmp	.+8      	; 0x37e6 <APP_ModifyCard+0x26>
	}
	else
	{
		/* you are a dummy user */
		UART_sendString("Please enter your data first !!!\r\r");
    37de:	88 e4       	ldi	r24, 0x48	; 72
    37e0:	91 e0       	ldi	r25, 0x01	; 1
    37e2:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	}
}
    37e6:	cf 91       	pop	r28
    37e8:	df 91       	pop	r29
    37ea:	08 95       	ret

000037ec <APP_RemoveCard>:

/****************************************************************************************/
void APP_RemoveCard(void)
{
    37ec:	df 93       	push	r29
    37ee:	cf 93       	push	r28
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
    37f4:	60 97       	sbiw	r28, 0x10	; 16
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
	uint16_t count;

	if(gu8_systemStatus != EMPTY_EEPROM)
    3800:	80 91 ad 02 	lds	r24, 0x02AD
    3804:	8f 3f       	cpi	r24, 0xFF	; 255
    3806:	09 f4       	brne	.+2      	; 0x380a <APP_RemoveCard+0x1e>
    3808:	8e c0       	rjmp	.+284    	; 0x3926 <APP_RemoveCard+0x13a>
	{
		UART_sendString("Wait until data is removing....\r\r");
    380a:	84 e1       	ldi	r24, 0x14	; 20
    380c:	92 e0       	ldi	r25, 0x02	; 2
    380e:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
		for(count = ADDRESS_SYSTEM_STATUS; count <= ADDRESS_PIN_STORED + 5 ;count++)
    3812:	18 8a       	std	Y+16, r1	; 0x10
    3814:	1f 86       	std	Y+15, r1	; 0x0f
    3816:	7c c0       	rjmp	.+248    	; 0x3910 <APP_RemoveCard+0x124>
		{
			EEPROM_writeByte(count, EMPTY_EEPROM);
    3818:	8f 85       	ldd	r24, Y+15	; 0x0f
    381a:	98 89       	ldd	r25, Y+16	; 0x10
    381c:	6f ef       	ldi	r22, 0xFF	; 255
    381e:	0e 94 0d 10 	call	0x201a	; 0x201a <EEPROM_writeByte>
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	a8 e4       	ldi	r26, 0x48	; 72
    3828:	b2 e4       	ldi	r27, 0x42	; 66
    382a:	8b 87       	std	Y+11, r24	; 0x0b
    382c:	9c 87       	std	Y+12, r25	; 0x0c
    382e:	ad 87       	std	Y+13, r26	; 0x0d
    3830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3832:	6b 85       	ldd	r22, Y+11	; 0x0b
    3834:	7c 85       	ldd	r23, Y+12	; 0x0c
    3836:	8d 85       	ldd	r24, Y+13	; 0x0d
    3838:	9e 85       	ldd	r25, Y+14	; 0x0e
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	4a ef       	ldi	r20, 0xFA	; 250
    3840:	54 e4       	ldi	r21, 0x44	; 68
    3842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	8f 83       	std	Y+7, r24	; 0x07
    384c:	98 87       	std	Y+8, r25	; 0x08
    384e:	a9 87       	std	Y+9, r26	; 0x09
    3850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3852:	6f 81       	ldd	r22, Y+7	; 0x07
    3854:	78 85       	ldd	r23, Y+8	; 0x08
    3856:	89 85       	ldd	r24, Y+9	; 0x09
    3858:	9a 85       	ldd	r25, Y+10	; 0x0a
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	40 e8       	ldi	r20, 0x80	; 128
    3860:	5f e3       	ldi	r21, 0x3F	; 63
    3862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3866:	88 23       	and	r24, r24
    3868:	2c f4       	brge	.+10     	; 0x3874 <APP_RemoveCard+0x88>
		__ticks = 1;
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	9e 83       	std	Y+6, r25	; 0x06
    3870:	8d 83       	std	Y+5, r24	; 0x05
    3872:	3f c0       	rjmp	.+126    	; 0x38f2 <APP_RemoveCard+0x106>
	else if (__tmp > 65535)
    3874:	6f 81       	ldd	r22, Y+7	; 0x07
    3876:	78 85       	ldd	r23, Y+8	; 0x08
    3878:	89 85       	ldd	r24, Y+9	; 0x09
    387a:	9a 85       	ldd	r25, Y+10	; 0x0a
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	3f ef       	ldi	r19, 0xFF	; 255
    3880:	4f e7       	ldi	r20, 0x7F	; 127
    3882:	57 e4       	ldi	r21, 0x47	; 71
    3884:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3888:	18 16       	cp	r1, r24
    388a:	4c f5       	brge	.+82     	; 0x38de <APP_RemoveCard+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388c:	6b 85       	ldd	r22, Y+11	; 0x0b
    388e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3890:	8d 85       	ldd	r24, Y+13	; 0x0d
    3892:	9e 85       	ldd	r25, Y+14	; 0x0e
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e2       	ldi	r20, 0x20	; 32
    389a:	51 e4       	ldi	r21, 0x41	; 65
    389c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	bc 01       	movw	r22, r24
    38a6:	cd 01       	movw	r24, r26
    38a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	9e 83       	std	Y+6, r25	; 0x06
    38b2:	8d 83       	std	Y+5, r24	; 0x05
    38b4:	0f c0       	rjmp	.+30     	; 0x38d4 <APP_RemoveCard+0xe8>
    38b6:	88 ec       	ldi	r24, 0xC8	; 200
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	9c 83       	std	Y+4, r25	; 0x04
    38bc:	8b 83       	std	Y+3, r24	; 0x03
    38be:	8b 81       	ldd	r24, Y+3	; 0x03
    38c0:	9c 81       	ldd	r25, Y+4	; 0x04
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <APP_RemoveCard+0xd6>
    38c6:	9c 83       	std	Y+4, r25	; 0x04
    38c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	9e 83       	std	Y+6, r25	; 0x06
    38d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d4:	8d 81       	ldd	r24, Y+5	; 0x05
    38d6:	9e 81       	ldd	r25, Y+6	; 0x06
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	69 f7       	brne	.-38     	; 0x38b6 <APP_RemoveCard+0xca>
    38dc:	14 c0       	rjmp	.+40     	; 0x3906 <APP_RemoveCard+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38de:	6f 81       	ldd	r22, Y+7	; 0x07
    38e0:	78 85       	ldd	r23, Y+8	; 0x08
    38e2:	89 85       	ldd	r24, Y+9	; 0x09
    38e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	9e 83       	std	Y+6, r25	; 0x06
    38f0:	8d 83       	std	Y+5, r24	; 0x05
    38f2:	8d 81       	ldd	r24, Y+5	; 0x05
    38f4:	9e 81       	ldd	r25, Y+6	; 0x06
    38f6:	9a 83       	std	Y+2, r25	; 0x02
    38f8:	89 83       	std	Y+1, r24	; 0x01
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	9a 81       	ldd	r25, Y+2	; 0x02
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <APP_RemoveCard+0x112>
    3902:	9a 83       	std	Y+2, r25	; 0x02
    3904:	89 83       	std	Y+1, r24	; 0x01
	uint16_t count;

	if(gu8_systemStatus != EMPTY_EEPROM)
	{
		UART_sendString("Wait until data is removing....\r\r");
		for(count = ADDRESS_SYSTEM_STATUS; count <= ADDRESS_PIN_STORED + 5 ;count++)
    3906:	8f 85       	ldd	r24, Y+15	; 0x0f
    3908:	98 89       	ldd	r25, Y+16	; 0x10
    390a:	01 96       	adiw	r24, 0x01	; 1
    390c:	98 8b       	std	Y+16, r25	; 0x10
    390e:	8f 87       	std	Y+15, r24	; 0x0f
    3910:	8f 85       	ldd	r24, Y+15	; 0x0f
    3912:	98 89       	ldd	r25, Y+16	; 0x10
    3914:	86 33       	cpi	r24, 0x36	; 54
    3916:	91 05       	cpc	r25, r1
    3918:	08 f4       	brcc	.+2      	; 0x391c <APP_RemoveCard+0x130>
    391a:	7e cf       	rjmp	.-260    	; 0x3818 <APP_RemoveCard+0x2c>
		{
			EEPROM_writeByte(count, EMPTY_EEPROM);
			_delay_ms(50);
		}
		UART_sendString("Removing Card succeeded !!!\r\r");
    391c:	86 e3       	ldi	r24, 0x36	; 54
    391e:	92 e0       	ldi	r25, 0x02	; 2
    3920:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
    3924:	04 c0       	rjmp	.+8      	; 0x392e <APP_RemoveCard+0x142>
	}
	else
	{
		/* you are a dummy user */
		UART_sendString("Please enter your data first !!!\r\r");
    3926:	88 e4       	ldi	r24, 0x48	; 72
    3928:	91 e0       	ldi	r25, 0x01	; 1
    392a:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	}
}
    392e:	60 96       	adiw	r28, 0x10	; 16
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	cf 91       	pop	r28
    393c:	df 91       	pop	r29
    393e:	08 95       	ret

00003940 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    3940:	df 93       	push	r29
    3942:	cf 93       	push	r28
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Initialize the application */
    3948:	0e 94 e6 10 	call	0x21cc	; 0x21cc <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
    394c:	0e 94 3b 11 	call	0x2276	; 0x2276 <App_Update>
    3950:	fd cf       	rjmp	.-6      	; 0x394c <main+0xc>

00003952 <__udivmodsi4>:
    3952:	a1 e2       	ldi	r26, 0x21	; 33
    3954:	1a 2e       	mov	r1, r26
    3956:	aa 1b       	sub	r26, r26
    3958:	bb 1b       	sub	r27, r27
    395a:	fd 01       	movw	r30, r26
    395c:	0d c0       	rjmp	.+26     	; 0x3978 <__udivmodsi4_ep>

0000395e <__udivmodsi4_loop>:
    395e:	aa 1f       	adc	r26, r26
    3960:	bb 1f       	adc	r27, r27
    3962:	ee 1f       	adc	r30, r30
    3964:	ff 1f       	adc	r31, r31
    3966:	a2 17       	cp	r26, r18
    3968:	b3 07       	cpc	r27, r19
    396a:	e4 07       	cpc	r30, r20
    396c:	f5 07       	cpc	r31, r21
    396e:	20 f0       	brcs	.+8      	; 0x3978 <__udivmodsi4_ep>
    3970:	a2 1b       	sub	r26, r18
    3972:	b3 0b       	sbc	r27, r19
    3974:	e4 0b       	sbc	r30, r20
    3976:	f5 0b       	sbc	r31, r21

00003978 <__udivmodsi4_ep>:
    3978:	66 1f       	adc	r22, r22
    397a:	77 1f       	adc	r23, r23
    397c:	88 1f       	adc	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	1a 94       	dec	r1
    3982:	69 f7       	brne	.-38     	; 0x395e <__udivmodsi4_loop>
    3984:	60 95       	com	r22
    3986:	70 95       	com	r23
    3988:	80 95       	com	r24
    398a:	90 95       	com	r25
    398c:	9b 01       	movw	r18, r22
    398e:	ac 01       	movw	r20, r24
    3990:	bd 01       	movw	r22, r26
    3992:	cf 01       	movw	r24, r30
    3994:	08 95       	ret

00003996 <__prologue_saves__>:
    3996:	2f 92       	push	r2
    3998:	3f 92       	push	r3
    399a:	4f 92       	push	r4
    399c:	5f 92       	push	r5
    399e:	6f 92       	push	r6
    39a0:	7f 92       	push	r7
    39a2:	8f 92       	push	r8
    39a4:	9f 92       	push	r9
    39a6:	af 92       	push	r10
    39a8:	bf 92       	push	r11
    39aa:	cf 92       	push	r12
    39ac:	df 92       	push	r13
    39ae:	ef 92       	push	r14
    39b0:	ff 92       	push	r15
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	ca 1b       	sub	r28, r26
    39c0:	db 0b       	sbc	r29, r27
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61
    39cc:	09 94       	ijmp

000039ce <__epilogue_restores__>:
    39ce:	2a 88       	ldd	r2, Y+18	; 0x12
    39d0:	39 88       	ldd	r3, Y+17	; 0x11
    39d2:	48 88       	ldd	r4, Y+16	; 0x10
    39d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    39d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    39d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    39da:	8c 84       	ldd	r8, Y+12	; 0x0c
    39dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    39de:	aa 84       	ldd	r10, Y+10	; 0x0a
    39e0:	b9 84       	ldd	r11, Y+9	; 0x09
    39e2:	c8 84       	ldd	r12, Y+8	; 0x08
    39e4:	df 80       	ldd	r13, Y+7	; 0x07
    39e6:	ee 80       	ldd	r14, Y+6	; 0x06
    39e8:	fd 80       	ldd	r15, Y+5	; 0x05
    39ea:	0c 81       	ldd	r16, Y+4	; 0x04
    39ec:	1b 81       	ldd	r17, Y+3	; 0x03
    39ee:	aa 81       	ldd	r26, Y+2	; 0x02
    39f0:	b9 81       	ldd	r27, Y+1	; 0x01
    39f2:	ce 0f       	add	r28, r30
    39f4:	d1 1d       	adc	r29, r1
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	ed 01       	movw	r28, r26
    3a02:	08 95       	ret

00003a04 <strcmp>:
    3a04:	fb 01       	movw	r30, r22
    3a06:	dc 01       	movw	r26, r24
    3a08:	8d 91       	ld	r24, X+
    3a0a:	01 90       	ld	r0, Z+
    3a0c:	80 19       	sub	r24, r0
    3a0e:	01 10       	cpse	r0, r1
    3a10:	d9 f3       	breq	.-10     	; 0x3a08 <strcmp+0x4>
    3a12:	99 0b       	sbc	r25, r25
    3a14:	08 95       	ret

00003a16 <_exit>:
    3a16:	f8 94       	cli

00003a18 <__stop_program>:
    3a18:	ff cf       	rjmp	.-2      	; 0x3a18 <__stop_program>
