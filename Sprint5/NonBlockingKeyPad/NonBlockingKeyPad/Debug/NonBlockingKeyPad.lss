
NonBlockingKeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000dac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00000dac  00000e40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  008000b0  008000b0  00000e90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f81  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001247  00000000  00000000  0000414d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ba4  00000000  00000000  00005394  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000075c  00000000  00000000  00006f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000118a  00000000  00000000  00007694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022d2  00000000  00000000  0000881e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 2c 04 	jmp	0x858	; 0x858 <__vector_1>
   8:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_2>
   c:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 eb       	ldi	r26, 0xB0	; 176
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3c       	cpi	r26, 0xCF	; 207
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 27 04 	call	0x84e	; 0x84e <main>
  8a:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIM_callbackfunction>:


void TIM_callbackfunction(void)
{

	CounterMS++;
  92:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__data_end>
  96:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__data_end+0x1>
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__data_end+0x1>
  a0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__data_end>
	
	if (KeyPad_PendingStart == 1)
  a4:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <KeyPad_PendingStart>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	71 f4       	brne	.+28     	; 0xc8 <TIM_callbackfunction+0x36>
	{
		KeyPadDelay++ ;
  ac:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <KeyPadDelay>
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <KeyPadDelay>
		if (KeyPadDelay == 20)
  b6:	84 31       	cpi	r24, 0x14	; 20
  b8:	39 f4       	brne	.+14     	; 0xc8 <TIM_callbackfunction+0x36>
		{
			KeyPad_PendingStart = 0 ;
  ba:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <KeyPad_PendingStart>
			KeyPadDelay = 0 ;
  be:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <KeyPadDelay>
			TimerEvent = 1 ;
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <TimerEvent>
		}
	}
	
	
	if (LCD_PendingStart == 1)
  c8:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <LCD_PendingStart>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	21 f5       	brne	.+72     	; 0x118 <TIM_callbackfunction+0x86>
	{
		LCD_Delay++ ;
  d0:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <LCD_Delay>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <LCD_Delay>
		if (LCD_Delay == 1)
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	e9 f4       	brne	.+58     	; 0x118 <TIM_callbackfunction+0x86>
		{

			LCD_PendingStart = 0 ; 
  de:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <LCD_PendingStart>
			LCD_Delay = 0 ; 
  e2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <LCD_Delay>
			LCD_PendingStat  = 0 ; 
  e6:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <StackCurrSize>
  ea:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <LCD_PendingStat>
			if(LCD_Send_4BitData(TempData) == 0 )
  ee:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <TempData>
  f2:	0e 94 de 01 	call	0x3bc	; 0x3bc <LCD_Send_4BitData>
  f6:	81 11       	cpse	r24, r1
  f8:	04 c0       	rjmp	.+8      	; 0x102 <TIM_callbackfunction+0x70>
				LCD_PendingStart = 1 ;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <LCD_PendingStart>
 100:	08 95       	ret
			else
				if(Stack_Pop(&Stack_Handler , &TempData) == STACK_OK )
 102:	6a eb       	ldi	r22, 0xBA	; 186
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	82 ec       	ldi	r24, 0xC2	; 194
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Stack_Pop>
 10e:	81 11       	cpse	r24, r1
 110:	03 c0       	rjmp	.+6      	; 0x118 <TIM_callbackfunction+0x86>
				LCD_PendingStart = 1 ;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <LCD_PendingStart>
 118:	08 95       	ret

0000011a <APP_Init>:


void APP_Init(void)
{

	KeyPad_Initialization(&KeyPad);
 11a:	81 e7       	ldi	r24, 0x71	; 113
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <KeyPad_Initialization>
	TIM_NormalModeInit(&TIM_Handler);
 122:	86 e6       	ldi	r24, 0x66	; 102
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 c9 04 	call	0x992	; 0x992 <TIM_NormalModeInit>
	_TIM_IT_EN(TIM_1_IT_OVER);
 12a:	89 b7       	in	r24, 0x39	; 57
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	89 bf       	out	0x39, r24	; 57
	TIM_Start(&TIM_Handler);
 130:	86 e6       	ldi	r24, 0x66	; 102
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TIM_Start>
	TIM_CallBack_FuctionSet( TIM_1_IT_OVER ,  TIM_callbackfunction);
 138:	69 e4       	ldi	r22, 0x49	; 73
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	0e 94 15 05 	call	0xa2a	; 0xa2a <TIM_CallBack_FuctionSet>


	TIM_Start(&TIM_Handler);
 142:	86 e6       	ldi	r24, 0x66	; 102
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <TIM_Start>

		sei();
 14a:	78 94       	sei
			LCD_Initializaion();
 14c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_Initializaion>
			 LCD_Send_Integer_CurrLoc(1000 , 6) ;	
 150:	66 e0       	ldi	r22, 0x06	; 6
 152:	88 ee       	ldi	r24, 0xE8	; 232
 154:	93 e0       	ldi	r25, 0x03	; 3
 156:	0e 94 33 03 	call	0x666	; 0x666 <LCD_Send_Integer_CurrLoc>
			 LCD_Send_String_CurrLoc("welcome") ;
 15a:	87 ea       	ldi	r24, 0xA7	; 167
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Send_String_CurrLoc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	83 ed       	ldi	r24, 0xD3	; 211
 166:	90 e3       	ldi	r25, 0x30	; 48
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <APP_Init+0x4e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <APP_Init+0x58>
 172:	00 00       	nop
			_delay_ms(1000);
			while( LCD_Send_Command(LCD_COMMANED_CLEAR_LCD) == LCD_BUSY ) ; 
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_Send_Command>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	d9 f3       	breq	.-10     	; 0x174 <APP_Init+0x5a>

}
 17e:	08 95       	ret

00000180 <APP_Update>:



void APP_Update(void)
{
 180:	cf 93       	push	r28
	uint8_t Key = KeyPad_NONBlock_GetPressedKey(&KeyPad);
 182:	81 e7       	ldi	r24, 0x71	; 113
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 ab 01 	call	0x356	; 0x356 <KeyPad_NONBlock_GetPressedKey>
 18a:	c8 2f       	mov	r28, r24
	while(LCD_Send_Command(LCD_COMMANED_CLEAR_LCD)== LCD_BUSY );
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_Send_Command>
 192:	83 30       	cpi	r24, 0x03	; 3
 194:	d9 f3       	breq	.-10     	; 0x18c <APP_Update+0xc>
	LCD_Send_Character_CurrLoc(Key);	
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Send_Character_CurrLoc>
}
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <__vector_9>:
	}
}


ISR(TIMER1_OVF_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	4f 93       	push	r20
 1b0:	5f 93       	push	r21
 1b2:	6f 93       	push	r22
 1b4:	7f 93       	push	r23
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	TIM_callbackfunction();
 1c2:	0e 94 49 00 	call	0x92	; 0x92 <TIM_callbackfunction>
	TCNT1 =65535 - TIM_Handler.COMPConfig.TIM16Bit.CompValue ;
 1c6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <TIM_Handler+0x5>
 1ca:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <TIM_Handler+0x6>
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	9d bd       	out	0x2d, r25	; 45
 1d4:	8c bd       	out	0x2c, r24	; 44
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <KeyPad_Initialization>:
 * brief  : this function used to initialize keypad
 * param. : KeyPadInit pointer to the handler of keypad
 * return : void 
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	8c 01       	movw	r16, r24
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <KeyPad_gpio+0x1>
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
 20a:	f1 2c       	mov	r15, r1
 20c:	19 c0       	rjmp	.+50     	; 0x240 <KeyPad_Initialization+0x48>
	{
		KeyPad_gpio.pin = KeyPad->ColumnPins[iter].Pin ;
 20e:	cf 2d       	mov	r28, r15
 210:	d0 e0       	ldi	r29, 0x00	; 0
 212:	ce 01       	movw	r24, r28
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	c8 0f       	add	r28, r24
 21a:	d9 1f       	adc	r29, r25
 21c:	c0 0f       	add	r28, r16
 21e:	d1 1f       	adc	r29, r17
 220:	8e 85       	ldd	r24, Y+14	; 0x0e
 222:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <KeyPad_gpio>
		HAL_GPIO_INIT_PIN(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
 226:	64 eb       	ldi	r22, 0xB4	; 180
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	8c 85       	ldd	r24, Y+12	; 0x0c
 22c:	9d 85       	ldd	r25, Y+13	; 0x0d
 22e:	0e 94 a1 04 	call	0x942	; 0x942 <HAL_GPIO_INIT_PIN>
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	6e 85       	ldd	r22, Y+14	; 0x0e
 236:	8c 85       	ldd	r24, Y+12	; 0x0c
 238:	9d 85       	ldd	r25, Y+13	; 0x0d
 23a:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 */
void KeyPad_Initialization(KeyPad_t * KeyPad)
{
    /* for output pins  --> all colomn will set as autput pins*/
	KeyPad_gpio.mode = GPIO_MODE_OUTPUT ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ColumnS ;iter++)
 23e:	f3 94       	inc	r15
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	8f 15       	cp	r24, r15
 244:	20 f7       	brcc	.-56     	; 0x20e <KeyPad_Initialization+0x16>
		HAL_GPIO_INIT_PIN(KeyPad->ColumnPins[iter].Port , &KeyPad_gpio);
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iter].Port , KeyPad->ColumnPins[iter].Pin , WRIGHT_SECOND);
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
 246:	e4 eb       	ldi	r30, 0xB4	; 180
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	11 82       	std	Z+1, r1	; 0x01
	KeyPad_gpio.pull = WRIGHT_SECOND ;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	82 83       	std	Z+2, r24	; 0x02
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
 250:	c0 e0       	ldi	r28, 0x00	; 0
 252:	13 c0       	rjmp	.+38     	; 0x27a <KeyPad_Initialization+0x82>
	{
		KeyPad_gpio.pin = KeyPad->RowPins[iter].Pin ;
 254:	ec 2f       	mov	r30, r28
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	cf 01       	movw	r24, r30
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	e8 0f       	add	r30, r24
 260:	f9 1f       	adc	r31, r25
 262:	e0 0f       	add	r30, r16
 264:	f1 1f       	adc	r31, r17
 266:	82 81       	ldd	r24, Z+2	; 0x02
 268:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <KeyPad_gpio>
		HAL_GPIO_INIT_PIN(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
 26c:	64 eb       	ldi	r22, 0xB4	; 180
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	91 81       	ldd	r25, Z+1	; 0x01
 274:	0e 94 a1 04 	call	0x942	; 0x942 <HAL_GPIO_INIT_PIN>
	}


	KeyPad_gpio.mode = GPIO_MODE_INPUT ;
	KeyPad_gpio.pull = WRIGHT_SECOND ;
	for(uint8_t iter =0 ; iter < _NUM_OF_ROWS ;iter++)
 278:	cf 5f       	subi	r28, 0xFF	; 255
 27a:	c4 30       	cpi	r28, 0x04	; 4
 27c:	58 f3       	brcs	.-42     	; 0x254 <KeyPad_Initialization+0x5c>
		HAL_GPIO_INIT_PIN(KeyPad->RowPins[iter].Port , &KeyPad_gpio);
	}	
	


}/* END_FUN KeyPad_Initialization()*/
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	08 95       	ret

0000028a <KeyPad_GetPressedKey>:
 * brief  : this function used to return the pressed key 
 * param. : void
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
 28a:	cf 92       	push	r12
 28c:	df 92       	push	r13
 28e:	ef 92       	push	r14
 290:	ff 92       	push	r15
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
	char Key =' ';
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
 29c:	c1 2c       	mov	r12, r1
 29e:	4d c0       	rjmp	.+154    	; 0x33a <KeyPad_GetPressedKey+0xb0>
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
 2a0:	0c 2d       	mov	r16, r12
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	f8 01       	movw	r30, r16
 2a6:	ee 0f       	add	r30, r30
 2a8:	ff 1f       	adc	r31, r31
 2aa:	e0 0f       	add	r30, r16
 2ac:	f1 1f       	adc	r31, r17
 2ae:	ec 0f       	add	r30, r28
 2b0:	fd 1f       	adc	r31, r29
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	66 85       	ldd	r22, Z+14	; 0x0e
 2b6:	84 85       	ldd	r24, Z+12	; 0x0c
 2b8:	95 85       	ldd	r25, Z+13	; 0x0d
 2ba:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
 2be:	d1 2c       	mov	r13, r1
 2c0:	2a c0       	rjmp	.+84     	; 0x316 <KeyPad_GetPressedKey+0x8c>
		{
			
			if ( HAL_GPIO_READPIN(KeyPad->RowPins[iterROW].Port ,KeyPad->RowPins[iterROW].Pin ) == WRIGHT_FIRST )
 2c2:	ed 2c       	mov	r14, r13
 2c4:	f1 2c       	mov	r15, r1
 2c6:	f7 01       	movw	r30, r14
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	ee 0d       	add	r30, r14
 2ce:	ff 1d       	adc	r31, r15
 2d0:	ec 0f       	add	r30, r28
 2d2:	fd 1f       	adc	r31, r29
 2d4:	62 81       	ldd	r22, Z+2	; 0x02
 2d6:	80 81       	ld	r24, Z
 2d8:	91 81       	ldd	r25, Z+1	; 0x01
 2da:	0e 94 b4 04 	call	0x968	; 0x968 <HAL_GPIO_READPIN>
 2de:	81 11       	cpse	r24, r1
 2e0:	19 c0       	rjmp	.+50     	; 0x314 <KeyPad_GetPressedKey+0x8a>
			{
				HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
 2e2:	c8 01       	movw	r24, r16
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	80 0f       	add	r24, r16
 2ea:	91 1f       	adc	r25, r17
 2ec:	c8 0f       	add	r28, r24
 2ee:	d9 1f       	adc	r29, r25
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	6e 85       	ldd	r22, Y+14	; 0x0e
 2f4:	8c 85       	ldd	r24, Y+12	; 0x0c
 2f6:	9d 85       	ldd	r25, Y+13	; 0x0d
 2f8:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
				return arr_KeyPad_char[iterROW][iterCOL] ;
 2fc:	c7 01       	movw	r24, r14
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	8e 0d       	add	r24, r14
 304:	9f 1d       	adc	r25, r15
 306:	8a 57       	subi	r24, 0x7A	; 122
 308:	9f 4f       	sbci	r25, 0xFF	; 255
 30a:	fc 01       	movw	r30, r24
 30c:	e0 0f       	add	r30, r16
 30e:	f1 1f       	adc	r31, r17
 310:	80 81       	ld	r24, Z
 312:	18 c0       	rjmp	.+48     	; 0x344 <KeyPad_GetPressedKey+0xba>
	char Key =' ';
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
	{

		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_FIRST) ;
		for (uint8_t iterROW = 0 ; iterROW < _NUM_OF_ROWS ; iterROW++)
 314:	d3 94       	inc	r13
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	8d 15       	cp	r24, r13
 31a:	98 f6       	brcc	.-90     	; 0x2c2 <KeyPad_GetPressedKey+0x38>
				return arr_KeyPad_char[iterROW][iterCOL] ;
			}else{
				;
			}
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;
 31c:	f8 01       	movw	r30, r16
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	0e 0f       	add	r16, r30
 324:	1f 1f       	adc	r17, r31
 326:	fe 01       	movw	r30, r28
 328:	e0 0f       	add	r30, r16
 32a:	f1 1f       	adc	r31, r17
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	66 85       	ldd	r22, Z+14	; 0x0e
 330:	84 85       	ldd	r24, Z+12	; 0x0c
 332:	95 85       	ldd	r25, Z+13	; 0x0d
 334:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 * return : pressed character 
 */
char KeyPad_GetPressedKey(KeyPad_t * KeyPad)
{
	char Key =' ';
	for (uint8_t iterCOL = 0  ; iterCOL < _NUM_OF_ColumnS ; iterCOL++)
 338:	c3 94       	inc	r12
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	8c 15       	cp	r24, r12
 33e:	08 f0       	brcs	.+2      	; 0x342 <KeyPad_GetPressedKey+0xb8>
 340:	af cf       	rjmp	.-162    	; 0x2a0 <KeyPad_GetPressedKey+0x16>
		}
		HAL_GPIO_WRITEPIN(KeyPad->ColumnPins[iterCOL].Port  , KeyPad->ColumnPins[iterCOL].Pin , WRIGHT_SECOND) ;

	}
	
return Key ;
 342:	80 e2       	ldi	r24, 0x20	; 32
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	08 95       	ret

00000356 <KeyPad_NONBlock_GetPressedKey>:
}/* END_FUN KeyPad_Initialization()*/


char KeyPad_NONBlock_GetPressedKey(KeyPad_t * KeyPad)
{
	uint8_t key  = KeyPad_GetPressedKey( KeyPad) ; 
 356:	0e 94 45 01 	call	0x28a	; 0x28a <KeyPad_GetPressedKey>
	
	if(key != 0 )
 35a:	88 23       	and	r24, r24
 35c:	b9 f0       	breq	.+46     	; 0x38c <KeyPad_NONBlock_GetPressedKey+0x36>
	{
		
	switch(KeyPad_State)
 35e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <KeyPad_State>
 362:	99 23       	and	r25, r25
 364:	19 f0       	breq	.+6      	; 0x36c <KeyPad_NONBlock_GetPressedKey+0x16>
 366:	91 30       	cpi	r25, 0x01	; 1
 368:	41 f0       	breq	.+16     	; 0x37a <KeyPad_NONBlock_GetPressedKey+0x24>
 36a:	08 95       	ret
	{
		case 0 : 
		
			KeyPad_State = 1 ;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <KeyPad_State>
			KeyPad_PendingStart = 1 ;
 372:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <KeyPad_PendingStart>
			key =0;
 376:	80 e0       	ldi	r24, 0x00	; 0
		break;
 378:	08 95       	ret
		
		case 1 :
			
			if (TimerEvent == 1)
 37a:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <TimerEvent>
 37e:	91 30       	cpi	r25, 0x01	; 1
 380:	29 f4       	brne	.+10     	; 0x38c <KeyPad_NONBlock_GetPressedKey+0x36>
			{
				key=0;
 				KeyPad_State = 0 ; 				
 382:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <KeyPad_State>
				TimerEvent = 0 ;	
 386:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <TimerEvent>
		
		case 1 :
			
			if (TimerEvent == 1)
			{
				key=0;
 38a:	80 e0       	ldi	r24, 0x00	; 0
	
	}
	
	return key;
	
}
 38c:	08 95       	ret

0000038e <LCD_Triger_Enable>:
LCD_Status_t LCD_Goto_Location(uint8_t y , uint8_t x)
{
	while( LCD_Send_Command(column_position[y-1]+(x-1)) == LCD_BUSY );

	return LCD_OK ;	
} /* END_FUN LCD_Goto_Location()*/
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	c2 e9       	ldi	r28, 0x92	; 146
 394:	d0 e0       	ldi	r29, 0x00	; 0
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	68 85       	ldd	r22, Y+8	; 0x08
 39a:	8e 81       	ldd	r24, Y+6	; 0x06
 39c:	9f 81       	ldd	r25, Y+7	; 0x07
 39e:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 3a2:	85 e0       	ldi	r24, 0x05	; 5
 3a4:	8a 95       	dec	r24
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <LCD_Triger_Enable+0x16>
 3a8:	00 00       	nop
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	68 85       	ldd	r22, Y+8	; 0x08
 3ae:	8e 81       	ldd	r24, Y+6	; 0x06
 3b0:	9f 81       	ldd	r25, Y+7	; 0x07
 3b2:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <LCD_Send_4BitData>:
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	10 91 b9 00 	lds	r17, 0x00B9	; 0x8000b9 <LCD_State>
 3c6:	11 30       	cpi	r17, 0x01	; 1
 3c8:	09 f4       	brne	.+2      	; 0x3cc <LCD_Send_4BitData+0x10>
 3ca:	5d c0       	rjmp	.+186    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 3cc:	20 f0       	brcs	.+8      	; 0x3d6 <LCD_Send_4BitData+0x1a>
 3ce:	12 30       	cpi	r17, 0x02	; 2
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <LCD_Send_4BitData+0x18>
 3d2:	68 c0       	rjmp	.+208    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 3d4:	7a c0       	rjmp	.+244    	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 3d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <Tempdata1.2288>
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	24 c0       	rjmp	.+72     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3e0:	ec 01       	movw	r28, r24
 3e2:	21 96       	adiw	r28, 0x01	; 1
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	9a 01       	movw	r18, r20
 3ea:	0c 2e       	mov	r0, r28
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <LCD_Send_4BitData+0x36>
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <LCD_Send_4BitData+0x32>
 3f6:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <Tempdata1.2288>
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	42 23       	and	r20, r18
 3fe:	53 23       	and	r21, r19
 400:	0c 2e       	mov	r0, r28
 402:	02 c0       	rjmp	.+4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 404:	55 95       	asr	r21
 406:	47 95       	ror	r20
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	fc 01       	movw	r30, r24
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	8e 0f       	add	r24, r30
 414:	9f 1f       	adc	r25, r31
 416:	fc 01       	movw	r30, r24
 418:	ee 56       	subi	r30, 0x6E	; 110
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	62 81       	ldd	r22, Z+2	; 0x02
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 426:	ce 01       	movw	r24, r28
 428:	87 30       	cpi	r24, 0x07	; 7
 42a:	91 05       	cpc	r25, r1
 42c:	cc f2       	brlt	.-78     	; 0x3e0 <LCD_Send_4BitData+0x24>
 42e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Triger_Enable>
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <LCD_State>
 438:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <LCD_Prev_State>
 43c:	49 c0       	rjmp	.+146    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 43e:	9e 01       	movw	r18, r28
 440:	23 50       	subi	r18, 0x03	; 3
 442:	31 09       	sbc	r19, r1
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	ca 01       	movw	r24, r20
 44a:	02 2e       	mov	r0, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	40 91 b8 00 	lds	r20, 0x00B8	; 0x8000b8 <Tempdata1.2288>
 45a:	50 e0       	ldi	r21, 0x00	; 0
 45c:	48 23       	and	r20, r24
 45e:	59 23       	and	r21, r25
 460:	02 c0       	rjmp	.+4      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 462:	55 95       	asr	r21
 464:	47 95       	ror	r20
 466:	2a 95       	dec	r18
 468:	e2 f7       	brpl	.-8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 46a:	fe 01       	movw	r30, r28
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	ec 0f       	add	r30, r28
 472:	fd 1f       	adc	r31, r29
 474:	ee 56       	subi	r30, 0x6E	; 110
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	62 81       	ldd	r22, Z+2	; 0x02
 47a:	80 81       	ld	r24, Z
 47c:	91 81       	ldd	r25, Z+1	; 0x01
 47e:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 482:	21 96       	adiw	r28, 0x01	; 1
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	c3 e0       	ldi	r28, 0x03	; 3
 488:	d0 e0       	ldi	r29, 0x00	; 0
 48a:	c7 30       	cpi	r28, 0x07	; 7
 48c:	d1 05       	cpc	r29, r1
 48e:	bc f2       	brlt	.-82     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 490:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_Triger_Enable>
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <LCD_State>
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <LCD_Prev_State>
 4a0:	10 e0       	ldi	r17, 0x00	; 0
 4a2:	16 c0       	rjmp	.+44     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4a4:	10 91 bb 00 	lds	r17, 0x00BB	; 0x8000bb <LCD_PendingStat>
 4a8:	11 11       	cpse	r17, r1
 4aa:	11 c0       	rjmp	.+34     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ac:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <LCD_Prev_State>
 4b0:	81 11       	cpse	r24, r1
 4b2:	05 c0       	rjmp	.+10     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <LCD_State>
 4ba:	18 2f       	mov	r17, r24
 4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	39 f4       	brne	.+14     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4c2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <LCD_State>
 4c6:	18 2f       	mov	r17, r24
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ca:	10 e0       	ldi	r17, 0x00	; 0
 4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	81 2f       	mov	r24, r17
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	08 95       	ret

000004da <LCD_Send_Character_CurrLoc>:
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <TempData>
 4e2:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <LCD_PendingStart>
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	99 f0       	breq	.+38     	; 0x510 <LCD_Send_Character_CurrLoc+0x36>
 4ea:	c2 e9       	ldi	r28, 0x92	; 146
 4ec:	d0 e0       	ldi	r29, 0x00	; 0
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	6a 81       	ldd	r22, Y+2	; 0x02
 4f2:	88 81       	ld	r24, Y
 4f4:	99 81       	ldd	r25, Y+1	; 0x01
 4f6:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 4fa:	40 e0       	ldi	r20, 0x00	; 0
 4fc:	6d 81       	ldd	r22, Y+5	; 0x05
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	9c 81       	ldd	r25, Y+4	; 0x04
 502:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <LCD_PendingStart>
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	01 c0       	rjmp	.+2      	; 0x512 <LCD_Send_Character_CurrLoc+0x38>
 510:	83 e0       	ldi	r24, 0x03	; 3
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <LCD_Send_Command>:
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <StatCommand.2308>
 520:	99 23       	and	r25, r25
 522:	19 f0       	breq	.+6      	; 0x52a <LCD_Send_Command+0x12>
 524:	91 30       	cpi	r25, 0x01	; 1
 526:	e1 f0       	breq	.+56     	; 0x560 <LCD_Send_Command+0x48>
 528:	22 c0       	rjmp	.+68     	; 0x56e <LCD_Send_Command+0x56>
 52a:	90 91 bf 00 	lds	r25, 0x00BF	; 0x8000bf <LCD_PendingStart>
 52e:	91 30       	cpi	r25, 0x01	; 1
 530:	01 f1       	breq	.+64     	; 0x572 <LCD_Send_Command+0x5a>
 532:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <TempData>
 536:	c2 e9       	ldi	r28, 0x92	; 146
 538:	d0 e0       	ldi	r29, 0x00	; 0
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	6a 81       	ldd	r22, Y+2	; 0x02
 53e:	88 81       	ld	r24, Y
 540:	99 81       	ldd	r25, Y+1	; 0x01
 542:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	6d 81       	ldd	r22, Y+5	; 0x05
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	9c 81       	ldd	r25, Y+4	; 0x04
 54e:	0e 94 bc 04 	call	0x978	; 0x978 <HAL_GPIO_WRITEPIN>
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <LCD_PendingStart>
 558:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <StatCommand.2308>
 55c:	83 e0       	ldi	r24, 0x03	; 3
 55e:	0c c0       	rjmp	.+24     	; 0x578 <LCD_Send_Command+0x60>
 560:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <LCD_PendingStart>
 564:	81 11       	cpse	r24, r1
 566:	07 c0       	rjmp	.+14     	; 0x576 <LCD_Send_Command+0x5e>
 568:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <StatCommand.2308>
 56c:	05 c0       	rjmp	.+10     	; 0x578 <LCD_Send_Command+0x60>
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	03 c0       	rjmp	.+6      	; 0x578 <LCD_Send_Command+0x60>
 572:	83 e0       	ldi	r24, 0x03	; 3
 574:	01 c0       	rjmp	.+2      	; 0x578 <LCD_Send_Command+0x60>
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <LCD_Send_String_CurrLoc>:
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	1f 92       	push	r1
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	8c 01       	movw	r16, r24
 58e:	19 82       	std	Y+1, r1	; 0x01
 590:	b8 01       	movw	r22, r16
 592:	82 ec       	ldi	r24, 0xC2	; 194
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 31 05 	call	0xa62	; 0xa62 <Stack_Push>
 59a:	f8 01       	movw	r30, r16
 59c:	80 81       	ld	r24, Z
 59e:	88 23       	and	r24, r24
 5a0:	19 f0       	breq	.+6      	; 0x5a8 <LCD_Send_String_CurrLoc+0x2a>
 5a2:	0f 5f       	subi	r16, 0xFF	; 255
 5a4:	1f 4f       	sbci	r17, 0xFF	; 255
 5a6:	f4 cf       	rjmp	.-24     	; 0x590 <LCD_Send_String_CurrLoc+0x12>
 5a8:	be 01       	movw	r22, r28
 5aa:	6f 5f       	subi	r22, 0xFF	; 255
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	82 ec       	ldi	r24, 0xC2	; 194
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <Stack_Pop>
 5b6:	89 81       	ldd	r24, Y+1	; 0x01
 5b8:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Send_Character_CurrLoc>
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	0f 90       	pop	r0
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <LCD_Initializaion>:
/*
 * brief  : this function used to initialize (GPIO &LCD) 
 * return : void 
 */ 
LCD_Status_t LCD_Initializaion(void)
{
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	00 d0       	rcall	.+0      	; 0x5d4 <LCD_Initializaion+0xa>
 5d4:	1f 92       	push	r1
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
 5da:	2f ef       	ldi	r18, 0xFF	; 255
 5dc:	89 ef       	ldi	r24, 0xF9	; 249
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	21 50       	subi	r18, 0x01	; 1
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	90 40       	sbci	r25, 0x00	; 0
 5e6:	e1 f7       	brne	.-8      	; 0x5e0 <LCD_Initializaion+0x16>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <LCD_Initializaion+0x20>
 5ea:	00 00       	nop
	GPIO_InitTypeDef LCD_GPIO_Handler ;
	
	
	_delay_ms(20);
	/* Set portB pin 1,2,3 as output */
	LCD_GPIO_Handler.mode = GPIO_MODE_OUTPUT ;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	8a 83       	std	Y+2, r24	; 0x02
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
 5f0:	1b 82       	std	Y+3, r1	; 0x03
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
 5f2:	00 e0       	ldi	r16, 0x00	; 0
 5f4:	10 e0       	ldi	r17, 0x00	; 0
 5f6:	12 c0       	rjmp	.+36     	; 0x61c <LCD_Initializaion+0x52>
	{
		LCD_GPIO_Handler.pin = LcdBitSelect.LcdBits[i].Pin ;
 5f8:	f8 01       	movw	r30, r16
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	e0 0f       	add	r30, r16
 600:	f1 1f       	adc	r31, r17
 602:	ee 56       	subi	r30, 0x6E	; 110
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	82 81       	ldd	r24, Z+2	; 0x02
 608:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_INIT_PIN(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
 60a:	be 01       	movw	r22, r28
 60c:	6f 5f       	subi	r22, 0xFF	; 255
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	80 81       	ld	r24, Z
 612:	91 81       	ldd	r25, Z+1	; 0x01
 614:	0e 94 a1 04 	call	0x942	; 0x942 <HAL_GPIO_INIT_PIN>
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
	
	
	
	
	for(int i =0 ; i < 7 ;i++)
 618:	0f 5f       	subi	r16, 0xFF	; 255
 61a:	1f 4f       	sbci	r17, 0xFF	; 255
 61c:	07 30       	cpi	r16, 0x07	; 7
 61e:	11 05       	cpc	r17, r1
 620:	5c f3       	brlt	.-42     	; 0x5f8 <LCD_Initializaion+0x2e>
		LCD_GPIO_Handler.pin = LcdBitSelect.LcdBits[i].Pin ;
		HAL_GPIO_INIT_PIN(LcdBitSelect.LcdBits[i].Port,&LCD_GPIO_Handler);
	}

	/* LCD Initialization command*/
	while( LCD_Send_Command(0x33U) == LCD_BUSY ) ; 
 622:	83 e3       	ldi	r24, 0x33	; 51
 624:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_Send_Command>
 628:	83 30       	cpi	r24, 0x03	; 3
 62a:	d9 f3       	breq	.-10     	; 0x622 <LCD_Initializaion+0x58>
	while( LCD_Send_Command(0x32U)== LCD_BUSY ) ; 	
 62c:	82 e3       	ldi	r24, 0x32	; 50
 62e:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_Send_Command>
 632:	83 30       	cpi	r24, 0x03	; 3
 634:	d9 f3       	breq	.-10     	; 0x62c <LCD_Initializaion+0x62>
	while( LCD_Send_Command(LCD_COMMANED2LINE_4_BIT_MODE)== LCD_BUSY ) ; 	
 636:	88 e2       	ldi	r24, 0x28	; 40
 638:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_Send_Command>
 63c:	83 30       	cpi	r24, 0x03	; 3
 63e:	d9 f3       	breq	.-10     	; 0x636 <LCD_Initializaion+0x6c>
	while( LCD_Send_Command(LCD_COMMANED_CLEAR_CURSOR_OFF)== LCD_BUSY ) ; 	
 640:	8c e0       	ldi	r24, 0x0C	; 12
 642:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_Send_Command>
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	d9 f3       	breq	.-10     	; 0x640 <LCD_Initializaion+0x76>
	while( LCD_Send_Command(LCD_COMMANED_CLEAR_LCD)== LCD_BUSY ) ; 	
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_Send_Command>
 650:	83 30       	cpi	r24, 0x03	; 3
 652:	d9 f3       	breq	.-10     	; 0x64a <LCD_Initializaion+0x80>
	

	return LCD_OK ;
	
} /* END_FUN LCD_Initializaion()*/
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	0f 90       	pop	r0
 658:	0f 90       	pop	r0
 65a:	0f 90       	pop	r0
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	08 95       	ret

00000666 <LCD_Send_Integer_CurrLoc>:
 * param. : IntegerToDisplay this is the integer value that you want to display
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
 666:	ef 92       	push	r14
 668:	ff 92       	push	r15
 66a:	0f 93       	push	r16
 66c:	1f 93       	push	r17
 66e:	cf 93       	push	r28
 670:	df 93       	push	r29
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
		char StringToDisplay[NumberOfDigits];   /* create array with required size */ 
		itoa(IntegerToDisplay, StringToDisplay,10); /* convert from int num. to char num. */
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
 676:	ed b6       	in	r14, 0x3d	; 61
 678:	fe b6       	in	r15, 0x3e	; 62
 * param. : NumberOfDigits number of digits of the integer number that you want to display
 * return : void 
 */
LCD_Status_t LCD_Send_Integer_CurrLoc(uint16_t IntegerToDisplay, uint8_t NumberOfDigits)
{
		char StringToDisplay[NumberOfDigits];   /* create array with required size */ 
 67a:	2d b7       	in	r18, 0x3d	; 61
 67c:	3e b7       	in	r19, 0x3e	; 62
 67e:	26 1b       	sub	r18, r22
 680:	31 09       	sbc	r19, r1
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	f8 94       	cli
 686:	3e bf       	out	0x3e, r19	; 62
 688:	0f be       	out	0x3f, r0	; 63
 68a:	2d bf       	out	0x3d, r18	; 61
 68c:	0d b7       	in	r16, 0x3d	; 61
 68e:	1e b7       	in	r17, 0x3e	; 62
 690:	0f 5f       	subi	r16, 0xFF	; 255
 692:	1f 4f       	sbci	r17, 0xFF	; 255
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 694:	4a e0       	ldi	r20, 0x0A	; 10
 696:	b8 01       	movw	r22, r16
 698:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__itoa_ncheck>
		itoa(IntegerToDisplay, StringToDisplay,10); /* convert from int num. to char num. */
		LCD_Send_String_CurrLoc(StringToDisplay);  /* print char array on the screen */
 69c:	c8 01       	movw	r24, r16
 69e:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Send_String_CurrLoc>
		return LCD_OK ;
} /* END_FUN LCD_Send_Integer_CurrLoc()*/
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	f8 94       	cli
 6a8:	fe be       	out	0x3e, r15	; 62
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	ed be       	out	0x3d, r14	; 61
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	ff 90       	pop	r15
 6b8:	ef 90       	pop	r14
 6ba:	08 95       	ret

000006bc <LinkedList_Node_GetData>:
    
    return LINKED_LIST_OK ;

    
    
}/* END_OF_FUN LinkedList_add_node_at_any_point() */
 6bc:	cf 92       	push	r12
 6be:	df 92       	push	r13
 6c0:	ef 92       	push	r14
 6c2:	ff 92       	push	r15
 6c4:	fb 01       	movw	r30, r22
 6c6:	30 97       	sbiw	r30, 0x00	; 0
 6c8:	49 f1       	breq	.+82     	; 0x71c <LinkedList_Node_GetData+0x60>
 6ca:	21 15       	cp	r18, r1
 6cc:	31 05       	cpc	r19, r1
 6ce:	41 05       	cpc	r20, r1
 6d0:	51 05       	cpc	r21, r1
 6d2:	31 f1       	breq	.+76     	; 0x720 <LinkedList_Node_GetData+0x64>
 6d4:	21 30       	cpi	r18, 0x01	; 1
 6d6:	31 05       	cpc	r19, r1
 6d8:	41 05       	cpc	r20, r1
 6da:	51 05       	cpc	r21, r1
 6dc:	61 f4       	brne	.+24     	; 0x6f6 <LinkedList_Node_GetData+0x3a>
 6de:	20 81       	ld	r18, Z
 6e0:	fc 01       	movw	r30, r24
 6e2:	20 83       	st	Z, r18
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	1f c0       	rjmp	.+62     	; 0x726 <LinkedList_Node_GetData+0x6a>
 6e8:	ff ef       	ldi	r31, 0xFF	; 255
 6ea:	cf 1a       	sub	r12, r31
 6ec:	df 0a       	sbc	r13, r31
 6ee:	ef 0a       	sbc	r14, r31
 6f0:	ff 0a       	sbc	r15, r31
 6f2:	fb 01       	movw	r30, r22
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <LinkedList_Node_GetData+0x42>
 6f6:	c1 2c       	mov	r12, r1
 6f8:	d1 2c       	mov	r13, r1
 6fa:	76 01       	movw	r14, r12
 6fc:	c3 94       	inc	r12
 6fe:	61 81       	ldd	r22, Z+1	; 0x01
 700:	72 81       	ldd	r23, Z+2	; 0x02
 702:	61 15       	cp	r22, r1
 704:	71 05       	cpc	r23, r1
 706:	81 f7       	brne	.-32     	; 0x6e8 <LinkedList_Node_GetData+0x2c>
 708:	c2 16       	cp	r12, r18
 70a:	d3 06       	cpc	r13, r19
 70c:	e4 06       	cpc	r14, r20
 70e:	f5 06       	cpc	r15, r21
 710:	48 f0       	brcs	.+18     	; 0x724 <LinkedList_Node_GetData+0x68>
 712:	20 81       	ld	r18, Z
 714:	fc 01       	movw	r30, r24
 716:	20 83       	st	Z, r18
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	05 c0       	rjmp	.+10     	; 0x726 <LinkedList_Node_GetData+0x6a>
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	03 c0       	rjmp	.+6      	; 0x726 <LinkedList_Node_GetData+0x6a>
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	01 c0       	rjmp	.+2      	; 0x726 <LinkedList_Node_GetData+0x6a>
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	df 90       	pop	r13
 72c:	cf 90       	pop	r12
 72e:	08 95       	ret

00000730 <LinkedList_add_node_to_the_front>:
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	61 15       	cp	r22, r1
 738:	71 05       	cpc	r23, r1
 73a:	91 f0       	breq	.+36     	; 0x760 <LinkedList_add_node_to_the_front+0x30>
 73c:	eb 01       	movw	r28, r22
 73e:	18 2f       	mov	r17, r24
 740:	83 e0       	ldi	r24, 0x03	; 3
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 7e 05 	call	0xafc	; 0xafc <malloc>
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	61 f0       	breq	.+24     	; 0x764 <LinkedList_add_node_to_the_front+0x34>
 74c:	28 81       	ld	r18, Y
 74e:	39 81       	ldd	r19, Y+1	; 0x01
 750:	fc 01       	movw	r30, r24
 752:	32 83       	std	Z+2, r19	; 0x02
 754:	21 83       	std	Z+1, r18	; 0x01
 756:	10 83       	st	Z, r17
 758:	99 83       	std	Y+1, r25	; 0x01
 75a:	88 83       	st	Y, r24
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	03 c0       	rjmp	.+6      	; 0x766 <LinkedList_add_node_to_the_front+0x36>
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	01 c0       	rjmp	.+2      	; 0x766 <LinkedList_add_node_to_the_front+0x36>
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	08 95       	ret

0000076e <LinkedList_delete_specific_node>:
 * param. : ( input )node_position   indicate which position you want to delete 
 * return : (output )linkedlistStatus_t enum that indicate the status of the deleted node  
 */
 
linkedlistStatus_t LinkedList_delete_specific_node (pstr_Node_t * PPstr_head_ref, int node_position)
{
 76e:	cf 92       	push	r12
 770:	df 92       	push	r13
 772:	ef 92       	push	r14
 774:	ff 92       	push	r15
 776:	0f 93       	push	r16
 778:	1f 93       	push	r17
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
    int32_t TempPos = 1 ;
    pstr_Node_t Pstr_Temp_node = *PPstr_head_ref ,pstr_DeletNode = NULL ;
 77e:	fc 01       	movw	r30, r24
 780:	a0 81       	ld	r26, Z
 782:	b1 81       	ldd	r27, Z+1	; 0x01
    
    /* check for input parameters and return an error id there is something wrong */
    if((PPstr_head_ref == NULL )||(node_position == 0)||(*PPstr_head_ref == NULL))  
 784:	89 2b       	or	r24, r25
 786:	09 f4       	brne	.+2      	; 0x78a <LinkedList_delete_specific_node+0x1c>
 788:	52 c0       	rjmp	.+164    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 78a:	61 15       	cp	r22, r1
 78c:	71 05       	cpc	r23, r1
 78e:	09 f4       	brne	.+2      	; 0x792 <LinkedList_delete_specific_node+0x24>
 790:	50 c0       	rjmp	.+160    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 792:	10 97       	sbiw	r26, 0x00	; 0
 794:	09 f4       	brne	.+2      	; 0x798 <LinkedList_delete_specific_node+0x2a>
 796:	4f c0       	rjmp	.+158    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 798:	eb 01       	movw	r28, r22
    {
        return LINKED_LIST_INIT_ERROR ;
    }
    if(node_position == 1)  /* if postion == one this mean that we need to modify the head pointer of the list */
 79a:	61 30       	cpi	r22, 0x01	; 1
 79c:	71 05       	cpc	r23, r1
 79e:	59 f4       	brne	.+22     	; 0x7b6 <LinkedList_delete_specific_node+0x48>
    {
        pstr_DeletNode = *PPstr_head_ref ;
        *PPstr_head_ref = (*PPstr_head_ref)->next ;
 7a0:	11 96       	adiw	r26, 0x01	; 1
 7a2:	2d 91       	ld	r18, X+
 7a4:	3c 91       	ld	r19, X
 7a6:	12 97       	sbiw	r26, 0x02	; 2
 7a8:	31 83       	std	Z+1, r19	; 0x01
 7aa:	20 83       	st	Z, r18
        free(pstr_DeletNode);
 7ac:	cd 01       	movw	r24, r26
 7ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <free>
        pstr_DeletNode = NULL ;     /* required step to avoid dangiling pointer problem  */
        return LINKED_LIST_OK ;
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	43 c0       	rjmp	.+134    	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 7b6:	01 e0       	ldi	r16, 0x01	; 1
 7b8:	10 e0       	ldi	r17, 0x00	; 0
 7ba:	20 e0       	ldi	r18, 0x00	; 0
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <LinkedList_delete_specific_node+0x58>
    }

    while((Pstr_Temp_node->next->next != NULL) && (TempPos++ < node_position-1))    /*iterae until you reach to the desired node */ 
    {
        Pstr_Temp_node  = Pstr_Temp_node->next ;
 7c0:	df 01       	movw	r26, r30
        free(pstr_DeletNode);
        pstr_DeletNode = NULL ;     /* required step to avoid dangiling pointer problem  */
        return LINKED_LIST_OK ;
    }

    while((Pstr_Temp_node->next->next != NULL) && (TempPos++ < node_position-1))    /*iterae until you reach to the desired node */ 
 7c2:	97 01       	movw	r18, r14
 7c4:	86 01       	movw	r16, r12
 7c6:	11 96       	adiw	r26, 0x01	; 1
 7c8:	ed 91       	ld	r30, X+
 7ca:	fc 91       	ld	r31, X
 7cc:	12 97       	sbiw	r26, 0x02	; 2
 7ce:	81 81       	ldd	r24, Z+1	; 0x01
 7d0:	92 81       	ldd	r25, Z+2	; 0x02
 7d2:	00 97       	sbiw	r24, 0x00	; 0
 7d4:	a9 f0       	breq	.+42     	; 0x800 <__DATA_REGION_LENGTH__>
 7d6:	68 01       	movw	r12, r16
 7d8:	79 01       	movw	r14, r18
 7da:	4f ef       	ldi	r20, 0xFF	; 255
 7dc:	c4 1a       	sub	r12, r20
 7de:	d4 0a       	sbc	r13, r20
 7e0:	e4 0a       	sbc	r14, r20
 7e2:	f4 0a       	sbc	r15, r20
 7e4:	ae 01       	movw	r20, r28
 7e6:	41 50       	subi	r20, 0x01	; 1
 7e8:	51 09       	sbc	r21, r1
 7ea:	05 2e       	mov	r0, r21
 7ec:	00 0c       	add	r0, r0
 7ee:	66 0b       	sbc	r22, r22
 7f0:	77 0b       	sbc	r23, r23
 7f2:	04 17       	cp	r16, r20
 7f4:	15 07       	cpc	r17, r21
 7f6:	26 07       	cpc	r18, r22
 7f8:	37 07       	cpc	r19, r23
 7fa:	14 f3       	brlt	.-60     	; 0x7c0 <LinkedList_delete_specific_node+0x52>
 7fc:	97 01       	movw	r18, r14
 7fe:	86 01       	movw	r16, r12
    {
        Pstr_Temp_node  = Pstr_Temp_node->next ;
    }
    if(--TempPos == node_position-1)     /* check if required location is not exisit */    
 800:	21 97       	sbiw	r28, 0x01	; 1
 802:	ae 01       	movw	r20, r28
 804:	dd 0f       	add	r29, r29
 806:	66 0b       	sbc	r22, r22
 808:	77 0b       	sbc	r23, r23
 80a:	01 50       	subi	r16, 0x01	; 1
 80c:	11 09       	sbc	r17, r1
 80e:	21 09       	sbc	r18, r1
 810:	31 09       	sbc	r19, r1
 812:	04 17       	cp	r16, r20
 814:	15 07       	cpc	r17, r21
 816:	26 07       	cpc	r18, r22
 818:	37 07       	cpc	r19, r23
 81a:	79 f0       	breq	.+30     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
    {
        return LINKED_LIST_DATA_ERREO ;
    }
    pstr_DeletNode = Pstr_Temp_node->next ;
    Pstr_Temp_node->next = Pstr_Temp_node->next->next ;
 81c:	12 96       	adiw	r26, 0x02	; 2
 81e:	9c 93       	st	X, r25
 820:	8e 93       	st	-X, r24
 822:	11 97       	sbiw	r26, 0x01	; 1
    free(pstr_DeletNode);
 824:	cf 01       	movw	r24, r30
 826:	0e 94 16 06 	call	0xc2c	; 0xc2c <free>
    
    
    return LINKED_LIST_OK ;
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	07 c0       	rjmp	.+14     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
    pstr_Node_t Pstr_Temp_node = *PPstr_head_ref ,pstr_DeletNode = NULL ;
    
    /* check for input parameters and return an error id there is something wrong */
    if((PPstr_head_ref == NULL )||(node_position == 0)||(*PPstr_head_ref == NULL))  
    {
        return LINKED_LIST_INIT_ERROR ;
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	05 c0       	rjmp	.+10     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 832:	82 e0       	ldi	r24, 0x02	; 2
 834:	03 c0       	rjmp	.+6      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 836:	82 e0       	ldi	r24, 0x02	; 2
 838:	01 c0       	rjmp	.+2      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
    {
        Pstr_Temp_node  = Pstr_Temp_node->next ;
    }
    if(--TempPos == node_position-1)     /* check if required location is not exisit */    
    {
        return LINKED_LIST_DATA_ERREO ;
 83a:	83 e0       	ldi	r24, 0x03	; 3
    
    return LINKED_LIST_OK ;
    

    
}/* END_OF_FUN LinkedList_delete_specific_node() */
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	0f 91       	pop	r16
 844:	ff 90       	pop	r15
 846:	ef 90       	pop	r14
 848:	df 90       	pop	r13
 84a:	cf 90       	pop	r12
 84c:	08 95       	ret

0000084e <main>:
#include <avr/io.h>
#include "APP.h"

int main(void)
{
	APP_Init();
 84e:	0e 94 8d 00 	call	0x11a	; 0x11a <APP_Init>
    /* Replace with your application code */
    while (1) 
    {
		APP_Update();
 852:	0e 94 c0 00 	call	0x180	; 0x180 <APP_Update>
 856:	fd cf       	rjmp	.-6      	; 0x852 <main+0x4>

00000858 <__vector_1>:
}


/* INIT0 Function */
ISR(INT0_vect)
{
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	2f 93       	push	r18
 864:	3f 93       	push	r19
 866:	4f 93       	push	r20
 868:	5f 93       	push	r21
 86a:	6f 93       	push	r22
 86c:	7f 93       	push	r23
 86e:	8f 93       	push	r24
 870:	9f 93       	push	r25
 872:	af 93       	push	r26
 874:	bf 93       	push	r27
 876:	ef 93       	push	r30
 878:	ff 93       	push	r31
	ptr_INT0();
 87a:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <ptr_INT0>
 87e:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <ptr_INT0+0x1>
 882:	09 95       	icall
}
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	7f 91       	pop	r23
 892:	6f 91       	pop	r22
 894:	5f 91       	pop	r21
 896:	4f 91       	pop	r20
 898:	3f 91       	pop	r19
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <__vector_2>:
/* INIT0 Function */
ISR(INT1_vect)
{
 8a6:	1f 92       	push	r1
 8a8:	0f 92       	push	r0
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	0f 92       	push	r0
 8ae:	11 24       	eor	r1, r1
 8b0:	2f 93       	push	r18
 8b2:	3f 93       	push	r19
 8b4:	4f 93       	push	r20
 8b6:	5f 93       	push	r21
 8b8:	6f 93       	push	r22
 8ba:	7f 93       	push	r23
 8bc:	8f 93       	push	r24
 8be:	9f 93       	push	r25
 8c0:	af 93       	push	r26
 8c2:	bf 93       	push	r27
 8c4:	ef 93       	push	r30
 8c6:	ff 93       	push	r31
	ptr_INT1();
 8c8:	e0 91 c9 00 	lds	r30, 0x00C9	; 0x8000c9 <ptr_INT1>
 8cc:	f0 91 ca 00 	lds	r31, 0x00CA	; 0x8000ca <ptr_INT1+0x1>
 8d0:	09 95       	icall
}
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	1f 90       	pop	r1
 8f2:	18 95       	reti

000008f4 <__vector_3>:
/* INIT0 Function */
ISR(INT2_vect)
{
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
 8fe:	2f 93       	push	r18
 900:	3f 93       	push	r19
 902:	4f 93       	push	r20
 904:	5f 93       	push	r21
 906:	6f 93       	push	r22
 908:	7f 93       	push	r23
 90a:	8f 93       	push	r24
 90c:	9f 93       	push	r25
 90e:	af 93       	push	r26
 910:	bf 93       	push	r27
 912:	ef 93       	push	r30
 914:	ff 93       	push	r31
	ptr_INT2();
 916:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <ptr_INT2>
 91a:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <ptr_INT2+0x1>
 91e:	09 95       	icall
 920:	ff 91       	pop	r31
 922:	ef 91       	pop	r30
 924:	bf 91       	pop	r27
 926:	af 91       	pop	r26
 928:	9f 91       	pop	r25
 92a:	8f 91       	pop	r24
 92c:	7f 91       	pop	r23
 92e:	6f 91       	pop	r22
 930:	5f 91       	pop	r21
 932:	4f 91       	pop	r20
 934:	3f 91       	pop	r19
 936:	2f 91       	pop	r18
 938:	0f 90       	pop	r0
 93a:	0f be       	out	0x3f, r0	; 63
 93c:	0f 90       	pop	r0
 93e:	1f 90       	pop	r1
 940:	18 95       	reti

00000942 <HAL_GPIO_INIT_PIN>:
 * param. : PORT pointer to GPIO port
 * param. : PIN_CONFIG pointer to struct hold all configuration
 * return : void 
 */
void HAL_GPIO_INIT_PIN(StrGPIO_t PORT, GPIO_InitTypeDef *  PIN_CONFIG)
{
 942:	fc 01       	movw	r30, r24

		if(PIN_CONFIG->mode == GPIO_MODE_OUTPUT)
 944:	db 01       	movw	r26, r22
 946:	11 96       	adiw	r26, 0x01	; 1
 948:	8c 91       	ld	r24, X
 94a:	11 97       	sbiw	r26, 0x01	; 1
 94c:	81 30       	cpi	r24, 0x01	; 1
 94e:	29 f4       	brne	.+10     	; 0x95a <HAL_GPIO_INIT_PIN+0x18>
		{
			PORT->DDR_REG  |= PIN_CONFIG->pin ;      //SET ALL PINS AS OUTPUT
 950:	8c 91       	ld	r24, X
 952:	91 81       	ldd	r25, Z+1	; 0x01
 954:	89 2b       	or	r24, r25
 956:	81 83       	std	Z+1, r24	; 0x01
 958:	08 95       	ret
		}else{  // PINS MODE CONFIGURED AS INPUT
			if(PIN_CONFIG->pull == GPIO_PULLUP)
			{
			//	PORT->PIN_REG |= PIN_CONFIG->pin ;     // SET PULL UP RES.
			}
			PORT->DDR_REG &= ~(PIN_CONFIG->pin);
 95a:	db 01       	movw	r26, r22
 95c:	9c 91       	ld	r25, X
 95e:	90 95       	com	r25
 960:	81 81       	ldd	r24, Z+1	; 0x01
 962:	98 23       	and	r25, r24
 964:	91 83       	std	Z+1, r25	; 0x01
 966:	08 95       	ret

00000968 <HAL_GPIO_READPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_ 
 * return : return on of  GPIO_PIN_RESET or GPIO_PIN_SET 
 */
GPIO_PinState HAL_GPIO_READPIN(StrGPIO_t PORT,uint8_t PIN_NUM)
{
	if(PORT->PIN_REG & PIN_NUM)  /* check if specific pin is set */
 968:	fc 01       	movw	r30, r24
 96a:	80 81       	ld	r24, Z
 96c:	68 23       	and	r22, r24
 96e:	11 f0       	breq	.+4      	; 0x974 <HAL_GPIO_READPIN+0xc>
	{
		return GPIO_PIN_SET ;
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	08 95       	ret
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
 974:	80 e0       	ldi	r24, 0x00	; 0
	}
}/* END_FUN HAL_GPIO_READPIN()*/
 976:	08 95       	ret

00000978 <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(StrGPIO_t PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
 978:	44 23       	and	r20, r20
 97a:	29 f0       	breq	.+10     	; 0x986 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
 97c:	fc 01       	movw	r30, r24
 97e:	22 81       	ldd	r18, Z+2	; 0x02
 980:	62 2b       	or	r22, r18
 982:	62 83       	std	Z+2, r22	; 0x02
 984:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
 986:	60 95       	com	r22
 988:	fc 01       	movw	r30, r24
 98a:	22 81       	ldd	r18, Z+2	; 0x02
 98c:	62 23       	and	r22, r18
 98e:	62 83       	std	Z+2, r22	; 0x02
 990:	08 95       	ret

00000992 <TIM_NormalModeInit>:
	
	SET_REGISTER_VAL(TCCR1B , TIM16Bit_InputCapture_CAPTURE_EDGE_MASK , Edge ) ;
	
	return TIM_OK ;
	
}
 992:	00 97       	sbiw	r24, 0x00	; 0
 994:	d9 f0       	breq	.+54     	; 0x9cc <TIM_NormalModeInit+0x3a>
 996:	fc 01       	movw	r30, r24
 998:	21 85       	ldd	r18, Z+9	; 0x09
 99a:	21 11       	cpse	r18, r1
 99c:	03 c0       	rjmp	.+6      	; 0x9a4 <TIM_NormalModeInit+0x12>
 99e:	13 be       	out	0x33, r1	; 51
 9a0:	12 be       	out	0x32, r1	; 50
 9a2:	0b c0       	rjmp	.+22     	; 0x9ba <TIM_NormalModeInit+0x28>
 9a4:	22 30       	cpi	r18, 0x02	; 2
 9a6:	19 f4       	brne	.+6      	; 0x9ae <TIM_NormalModeInit+0x1c>
 9a8:	15 bc       	out	0x25, r1	; 37
 9aa:	14 bc       	out	0x24, r1	; 36
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <TIM_NormalModeInit+0x28>
 9ae:	21 30       	cpi	r18, 0x01	; 1
 9b0:	79 f4       	brne	.+30     	; 0x9d0 <TIM_NormalModeInit+0x3e>
 9b2:	1f bc       	out	0x2f, r1	; 47
 9b4:	1e bc       	out	0x2e, r1	; 46
 9b6:	1d bc       	out	0x2d, r1	; 45
 9b8:	1c bc       	out	0x2c, r1	; 44
 9ba:	fc 01       	movw	r30, r24
 9bc:	85 81       	ldd	r24, Z+5	; 0x05
 9be:	96 81       	ldd	r25, Z+6	; 0x06
 9c0:	80 95       	com	r24
 9c2:	90 95       	com	r25
 9c4:	9d bd       	out	0x2d, r25	; 45
 9c6:	8c bd       	out	0x2c, r24	; 44
 9c8:	80 e0       	ldi	r24, 0x00	; 0
 9ca:	08 95       	ret
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	08 95       	ret
 9d0:	82 e0       	ldi	r24, 0x02	; 2
 9d2:	08 95       	ret

000009d4 <TIM_Start>:
 9d4:	00 97       	sbiw	r24, 0x00	; 0
 9d6:	29 f1       	breq	.+74     	; 0xa22 <TIM_Start+0x4e>
 9d8:	fc 01       	movw	r30, r24
 9da:	21 85       	ldd	r18, Z+9	; 0x09
 9dc:	21 11       	cpse	r18, r1
 9de:	09 c0       	rjmp	.+18     	; 0x9f2 <TIM_Start+0x1e>
 9e0:	23 b7       	in	r18, 0x33	; 51
 9e2:	28 7f       	andi	r18, 0xF8	; 248
 9e4:	23 bf       	out	0x33, r18	; 51
 9e6:	23 b7       	in	r18, 0x33	; 51
 9e8:	80 85       	ldd	r24, Z+8	; 0x08
 9ea:	82 2b       	or	r24, r18
 9ec:	83 bf       	out	0x33, r24	; 51
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	08 95       	ret
 9f2:	22 30       	cpi	r18, 0x02	; 2
 9f4:	51 f4       	brne	.+20     	; 0xa0a <TIM_Start+0x36>
 9f6:	25 b5       	in	r18, 0x25	; 37
 9f8:	28 7f       	andi	r18, 0xF8	; 248
 9fa:	25 bd       	out	0x25, r18	; 37
 9fc:	25 b5       	in	r18, 0x25	; 37
 9fe:	fc 01       	movw	r30, r24
 a00:	80 85       	ldd	r24, Z+8	; 0x08
 a02:	82 2b       	or	r24, r18
 a04:	85 bd       	out	0x25, r24	; 37
 a06:	80 e0       	ldi	r24, 0x00	; 0
 a08:	08 95       	ret
 a0a:	21 30       	cpi	r18, 0x01	; 1
 a0c:	61 f4       	brne	.+24     	; 0xa26 <TIM_Start+0x52>
 a0e:	2e b5       	in	r18, 0x2e	; 46
 a10:	28 7f       	andi	r18, 0xF8	; 248
 a12:	2e bd       	out	0x2e, r18	; 46
 a14:	2e b5       	in	r18, 0x2e	; 46
 a16:	fc 01       	movw	r30, r24
 a18:	80 85       	ldd	r24, Z+8	; 0x08
 a1a:	82 2b       	or	r24, r18
 a1c:	8e bd       	out	0x2e, r24	; 46
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	08 95       	ret
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	08 95       	ret
 a26:	82 e0       	ldi	r24, 0x02	; 2
 a28:	08 95       	ret

00000a2a <TIM_CallBack_FuctionSet>:
 * return : current timer value 
 */
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
 a2a:	67 2b       	or	r22, r23
 a2c:	b1 f0       	breq	.+44     	; 0xa5a <TIM_CallBack_FuctionSet+0x30>
	{
		return TIM_PARAM_ERROR ;
	}
	
	switch(Interrupt_Num)
 a2e:	88 30       	cpi	r24, 0x08	; 8
 a30:	b1 f0       	breq	.+44     	; 0xa5e <TIM_CallBack_FuctionSet+0x34>
 a32:	38 f4       	brcc	.+14     	; 0xa42 <TIM_CallBack_FuctionSet+0x18>
 a34:	81 30       	cpi	r24, 0x01	; 1
 a36:	78 f0       	brcs	.+30     	; 0xa56 <TIM_CallBack_FuctionSet+0x2c>
 a38:	83 30       	cpi	r24, 0x03	; 3
 a3a:	88 f0       	brcs	.+34     	; 0xa5e <TIM_CallBack_FuctionSet+0x34>
 a3c:	84 30       	cpi	r24, 0x04	; 4
 a3e:	79 f0       	breq	.+30     	; 0xa5e <TIM_CallBack_FuctionSet+0x34>
 a40:	0a c0       	rjmp	.+20     	; 0xa56 <TIM_CallBack_FuctionSet+0x2c>
 a42:	80 32       	cpi	r24, 0x20	; 32
 a44:	61 f0       	breq	.+24     	; 0xa5e <TIM_CallBack_FuctionSet+0x34>
 a46:	18 f4       	brcc	.+6      	; 0xa4e <TIM_CallBack_FuctionSet+0x24>
 a48:	80 31       	cpi	r24, 0x10	; 16
 a4a:	49 f0       	breq	.+18     	; 0xa5e <TIM_CallBack_FuctionSet+0x34>
 a4c:	04 c0       	rjmp	.+8      	; 0xa56 <TIM_CallBack_FuctionSet+0x2c>
 a4e:	80 34       	cpi	r24, 0x40	; 64
 a50:	31 f0       	breq	.+12     	; 0xa5e <TIM_CallBack_FuctionSet+0x34>
 a52:	80 38       	cpi	r24, 0x80	; 128
 a54:	21 f0       	breq	.+8      	; 0xa5e <TIM_CallBack_FuctionSet+0x34>
		case  TIM_1_IT_COMPB :
						CompareB_callbackfunction = callbackfunction ;
		break; 
		default:
		
			return TIM_CONFIG_ERROR ;
 a56:	82 e0       	ldi	r24, 0x02	; 2
 a58:	08 95       	ret
  TIM_Status_t TIM_CallBack_FuctionSet(IT_SelBIT_t Interrupt_Num ,  TIMCaLL_BackFun  callbackfunction)
{
	
	if (callbackfunction == NULL)
	{
		return TIM_PARAM_ERROR ;
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	08 95       	ret
	}
	
	


	return TIM_OK ; 
 a5e:	80 e0       	ldi	r24, 0x00	; 0
	
}
 a60:	08 95       	ret

00000a62 <Stack_Push>:
StackStatus_t   Stack_Push(pstr_Stack_t *  ppstr_DatasStack, LinkedDataType_t * Data )
{
    
    
    uint32_t LinkedListStatus = 0 ;
    if((ppstr_DatasStack == NULL)||(Data == NULL))
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	a9 f0       	breq	.+42     	; 0xa90 <Stack_Push+0x2e>
 a66:	61 15       	cp	r22, r1
 a68:	71 05       	cpc	r23, r1
 a6a:	a1 f0       	breq	.+40     	; 0xa94 <Stack_Push+0x32>
 a6c:	fb 01       	movw	r30, r22
 a6e:	bc 01       	movw	r22, r24
        return STACK_PTR_ERROR ;
        
    }
    
    
    LinkedListStatus = LinkedList_add_node_to_the_front( *Data, ppstr_DatasStack);
 a70:	80 81       	ld	r24, Z
 a72:	0e 94 98 03 	call	0x730	; 0x730 <LinkedList_add_node_to_the_front>
    if(LinkedListStatus != 0)
 a76:	81 11       	cpse	r24, r1
 a78:	0f c0       	rjmp	.+30     	; 0xa98 <Stack_Push+0x36>
    else
    {
        ;
    }
    
    StackCurrSize++;
 a7a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <StackCurrSize>
 a7e:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <StackCurrSize+0x1>
 a82:	01 96       	adiw	r24, 0x01	; 1
 a84:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <StackCurrSize+0x1>
 a88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <StackCurrSize>
    return STACK_OK ;
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	08 95       	ret
    
    
    uint32_t LinkedListStatus = 0 ;
    if((ppstr_DatasStack == NULL)||(Data == NULL))
    {
        return STACK_PTR_ERROR ;
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	08 95       	ret
 a94:	81 e0       	ldi	r24, 0x01	; 1
 a96:	08 95       	ret
    
    
    LinkedListStatus = LinkedList_add_node_to_the_front( *Data, ppstr_DatasStack);
    if(LinkedListStatus != 0)
    {
        return STACK_PUSH_ERROR ;
 a98:	84 e0       	ldi	r24, 0x04	; 4
    }
    
    StackCurrSize++;
    return STACK_OK ;

}
 a9a:	08 95       	ret

00000a9c <Stack_Pop>:
 * param. : ( input )ppstr_DatasStack  ponter to pointer to the head of the  list 
 * param. : ( output )Data  ponter  to the verable that will receive data  
 * return : (output )StackStatus_t enum that indicate the status of the stack  
 */
StackStatus_t  Stack_Pop(pstr_Stack_t * ppstr_DatasStack, LinkedDataType_t * Data )
{
 a9c:	cf 93       	push	r28
 a9e:	df 93       	push	r29
    
    
    uint32_t LinkedListStatus = 0 ;
   
    if((ppstr_DatasStack == NULL)||(Data == NULL))
 aa0:	00 97       	sbiw	r24, 0x00	; 0
 aa2:	11 f1       	breq	.+68     	; 0xae8 <Stack_Pop+0x4c>
 aa4:	61 15       	cp	r22, r1
 aa6:	71 05       	cpc	r23, r1
 aa8:	09 f1       	breq	.+66     	; 0xaec <Stack_Pop+0x50>
 aaa:	fb 01       	movw	r30, r22
 aac:	ec 01       	movw	r28, r24
    {
        return STACK_PTR_ERROR ;
    }
    
    LinkedListStatus =LinkedList_Node_GetData( Data , *ppstr_DatasStack   , 1 ); 
 aae:	68 81       	ld	r22, Y
 ab0:	79 81       	ldd	r23, Y+1	; 0x01
 ab2:	21 e0       	ldi	r18, 0x01	; 1
 ab4:	30 e0       	ldi	r19, 0x00	; 0
 ab6:	40 e0       	ldi	r20, 0x00	; 0
 ab8:	50 e0       	ldi	r21, 0x00	; 0
 aba:	cf 01       	movw	r24, r30
 abc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <LinkedList_Node_GetData>
    if(LinkedListStatus != 0)
 ac0:	81 11       	cpse	r24, r1
 ac2:	16 c0       	rjmp	.+44     	; 0xaf0 <Stack_Pop+0x54>
    {
        ;
    }
    
        
    LinkedListStatus = LinkedList_delete_specific_node(ppstr_DatasStack , 1 );
 ac4:	61 e0       	ldi	r22, 0x01	; 1
 ac6:	70 e0       	ldi	r23, 0x00	; 0
 ac8:	ce 01       	movw	r24, r28
 aca:	0e 94 b7 03 	call	0x76e	; 0x76e <LinkedList_delete_specific_node>
    if(LinkedListStatus != 0)
 ace:	81 11       	cpse	r24, r1
 ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <Stack_Pop+0x58>
    else
    {
        ;
    }
    
    StackCurrSize-- ;
 ad2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <StackCurrSize>
 ad6:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <StackCurrSize+0x1>
 ada:	01 97       	sbiw	r24, 0x01	; 1
 adc:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <StackCurrSize+0x1>
 ae0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <StackCurrSize>
    return STACK_OK ;
 ae4:	80 e0       	ldi	r24, 0x00	; 0
 ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <Stack_Pop+0x5a>
    
    uint32_t LinkedListStatus = 0 ;
   
    if((ppstr_DatasStack == NULL)||(Data == NULL))
    {
        return STACK_PTR_ERROR ;
 ae8:	81 e0       	ldi	r24, 0x01	; 1
 aea:	05 c0       	rjmp	.+10     	; 0xaf6 <Stack_Pop+0x5a>
 aec:	81 e0       	ldi	r24, 0x01	; 1
 aee:	03 c0       	rjmp	.+6      	; 0xaf6 <Stack_Pop+0x5a>
    }
    
    LinkedListStatus =LinkedList_Node_GetData( Data , *ppstr_DatasStack   , 1 ); 
    if(LinkedListStatus != 0)
    {
        return STACK_POP_ERROR ;
 af0:	82 e0       	ldi	r24, 0x02	; 2
 af2:	01 c0       	rjmp	.+2      	; 0xaf6 <Stack_Pop+0x5a>
    
        
    LinkedListStatus = LinkedList_delete_specific_node(ppstr_DatasStack , 1 );
    if(LinkedListStatus != 0)
    {
        return STACK_POP_ERROR ;
 af4:	82 e0       	ldi	r24, 0x02	; 2
        ;
    }
    
    StackCurrSize-- ;
    return STACK_OK ;
}
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	08 95       	ret

00000afc <malloc>:
 afc:	0f 93       	push	r16
 afe:	1f 93       	push	r17
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
 b04:	82 30       	cpi	r24, 0x02	; 2
 b06:	91 05       	cpc	r25, r1
 b08:	10 f4       	brcc	.+4      	; 0xb0e <malloc+0x12>
 b0a:	82 e0       	ldi	r24, 0x02	; 2
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <__flp>
 b12:	f0 91 ce 00 	lds	r31, 0x00CE	; 0x8000ce <__flp+0x1>
 b16:	20 e0       	ldi	r18, 0x00	; 0
 b18:	30 e0       	ldi	r19, 0x00	; 0
 b1a:	a0 e0       	ldi	r26, 0x00	; 0
 b1c:	b0 e0       	ldi	r27, 0x00	; 0
 b1e:	30 97       	sbiw	r30, 0x00	; 0
 b20:	19 f1       	breq	.+70     	; 0xb68 <malloc+0x6c>
 b22:	40 81       	ld	r20, Z
 b24:	51 81       	ldd	r21, Z+1	; 0x01
 b26:	02 81       	ldd	r16, Z+2	; 0x02
 b28:	13 81       	ldd	r17, Z+3	; 0x03
 b2a:	48 17       	cp	r20, r24
 b2c:	59 07       	cpc	r21, r25
 b2e:	c8 f0       	brcs	.+50     	; 0xb62 <malloc+0x66>
 b30:	84 17       	cp	r24, r20
 b32:	95 07       	cpc	r25, r21
 b34:	69 f4       	brne	.+26     	; 0xb50 <malloc+0x54>
 b36:	10 97       	sbiw	r26, 0x00	; 0
 b38:	31 f0       	breq	.+12     	; 0xb46 <malloc+0x4a>
 b3a:	12 96       	adiw	r26, 0x02	; 2
 b3c:	0c 93       	st	X, r16
 b3e:	12 97       	sbiw	r26, 0x02	; 2
 b40:	13 96       	adiw	r26, 0x03	; 3
 b42:	1c 93       	st	X, r17
 b44:	27 c0       	rjmp	.+78     	; 0xb94 <malloc+0x98>
 b46:	00 93 cd 00 	sts	0x00CD, r16	; 0x8000cd <__flp>
 b4a:	10 93 ce 00 	sts	0x00CE, r17	; 0x8000ce <__flp+0x1>
 b4e:	22 c0       	rjmp	.+68     	; 0xb94 <malloc+0x98>
 b50:	21 15       	cp	r18, r1
 b52:	31 05       	cpc	r19, r1
 b54:	19 f0       	breq	.+6      	; 0xb5c <malloc+0x60>
 b56:	42 17       	cp	r20, r18
 b58:	53 07       	cpc	r21, r19
 b5a:	18 f4       	brcc	.+6      	; 0xb62 <malloc+0x66>
 b5c:	9a 01       	movw	r18, r20
 b5e:	bd 01       	movw	r22, r26
 b60:	ef 01       	movw	r28, r30
 b62:	df 01       	movw	r26, r30
 b64:	f8 01       	movw	r30, r16
 b66:	db cf       	rjmp	.-74     	; 0xb1e <malloc+0x22>
 b68:	21 15       	cp	r18, r1
 b6a:	31 05       	cpc	r19, r1
 b6c:	f9 f0       	breq	.+62     	; 0xbac <malloc+0xb0>
 b6e:	28 1b       	sub	r18, r24
 b70:	39 0b       	sbc	r19, r25
 b72:	24 30       	cpi	r18, 0x04	; 4
 b74:	31 05       	cpc	r19, r1
 b76:	80 f4       	brcc	.+32     	; 0xb98 <malloc+0x9c>
 b78:	8a 81       	ldd	r24, Y+2	; 0x02
 b7a:	9b 81       	ldd	r25, Y+3	; 0x03
 b7c:	61 15       	cp	r22, r1
 b7e:	71 05       	cpc	r23, r1
 b80:	21 f0       	breq	.+8      	; 0xb8a <malloc+0x8e>
 b82:	fb 01       	movw	r30, r22
 b84:	93 83       	std	Z+3, r25	; 0x03
 b86:	82 83       	std	Z+2, r24	; 0x02
 b88:	04 c0       	rjmp	.+8      	; 0xb92 <malloc+0x96>
 b8a:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__flp+0x1>
 b8e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__flp>
 b92:	fe 01       	movw	r30, r28
 b94:	32 96       	adiw	r30, 0x02	; 2
 b96:	44 c0       	rjmp	.+136    	; 0xc20 <malloc+0x124>
 b98:	fe 01       	movw	r30, r28
 b9a:	e2 0f       	add	r30, r18
 b9c:	f3 1f       	adc	r31, r19
 b9e:	81 93       	st	Z+, r24
 ba0:	91 93       	st	Z+, r25
 ba2:	22 50       	subi	r18, 0x02	; 2
 ba4:	31 09       	sbc	r19, r1
 ba6:	39 83       	std	Y+1, r19	; 0x01
 ba8:	28 83       	st	Y, r18
 baa:	3a c0       	rjmp	.+116    	; 0xc20 <malloc+0x124>
 bac:	20 91 cb 00 	lds	r18, 0x00CB	; 0x8000cb <__brkval>
 bb0:	30 91 cc 00 	lds	r19, 0x00CC	; 0x8000cc <__brkval+0x1>
 bb4:	23 2b       	or	r18, r19
 bb6:	41 f4       	brne	.+16     	; 0xbc8 <malloc+0xcc>
 bb8:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 bbc:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 bc0:	30 93 cc 00 	sts	0x00CC, r19	; 0x8000cc <__brkval+0x1>
 bc4:	20 93 cb 00 	sts	0x00CB, r18	; 0x8000cb <__brkval>
 bc8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 bcc:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 bd0:	21 15       	cp	r18, r1
 bd2:	31 05       	cpc	r19, r1
 bd4:	41 f4       	brne	.+16     	; 0xbe6 <malloc+0xea>
 bd6:	2d b7       	in	r18, 0x3d	; 61
 bd8:	3e b7       	in	r19, 0x3e	; 62
 bda:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 bde:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 be2:	24 1b       	sub	r18, r20
 be4:	35 0b       	sbc	r19, r21
 be6:	e0 91 cb 00 	lds	r30, 0x00CB	; 0x8000cb <__brkval>
 bea:	f0 91 cc 00 	lds	r31, 0x00CC	; 0x8000cc <__brkval+0x1>
 bee:	e2 17       	cp	r30, r18
 bf0:	f3 07       	cpc	r31, r19
 bf2:	a0 f4       	brcc	.+40     	; 0xc1c <malloc+0x120>
 bf4:	2e 1b       	sub	r18, r30
 bf6:	3f 0b       	sbc	r19, r31
 bf8:	28 17       	cp	r18, r24
 bfa:	39 07       	cpc	r19, r25
 bfc:	78 f0       	brcs	.+30     	; 0xc1c <malloc+0x120>
 bfe:	ac 01       	movw	r20, r24
 c00:	4e 5f       	subi	r20, 0xFE	; 254
 c02:	5f 4f       	sbci	r21, 0xFF	; 255
 c04:	24 17       	cp	r18, r20
 c06:	35 07       	cpc	r19, r21
 c08:	48 f0       	brcs	.+18     	; 0xc1c <malloc+0x120>
 c0a:	4e 0f       	add	r20, r30
 c0c:	5f 1f       	adc	r21, r31
 c0e:	50 93 cc 00 	sts	0x00CC, r21	; 0x8000cc <__brkval+0x1>
 c12:	40 93 cb 00 	sts	0x00CB, r20	; 0x8000cb <__brkval>
 c16:	81 93       	st	Z+, r24
 c18:	91 93       	st	Z+, r25
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <malloc+0x124>
 c1c:	e0 e0       	ldi	r30, 0x00	; 0
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	cf 01       	movw	r24, r30
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	1f 91       	pop	r17
 c28:	0f 91       	pop	r16
 c2a:	08 95       	ret

00000c2c <free>:
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	00 97       	sbiw	r24, 0x00	; 0
 c32:	09 f4       	brne	.+2      	; 0xc36 <free+0xa>
 c34:	81 c0       	rjmp	.+258    	; 0xd38 <free+0x10c>
 c36:	fc 01       	movw	r30, r24
 c38:	32 97       	sbiw	r30, 0x02	; 2
 c3a:	13 82       	std	Z+3, r1	; 0x03
 c3c:	12 82       	std	Z+2, r1	; 0x02
 c3e:	a0 91 cd 00 	lds	r26, 0x00CD	; 0x8000cd <__flp>
 c42:	b0 91 ce 00 	lds	r27, 0x00CE	; 0x8000ce <__flp+0x1>
 c46:	10 97       	sbiw	r26, 0x00	; 0
 c48:	81 f4       	brne	.+32     	; 0xc6a <free+0x3e>
 c4a:	20 81       	ld	r18, Z
 c4c:	31 81       	ldd	r19, Z+1	; 0x01
 c4e:	82 0f       	add	r24, r18
 c50:	93 1f       	adc	r25, r19
 c52:	20 91 cb 00 	lds	r18, 0x00CB	; 0x8000cb <__brkval>
 c56:	30 91 cc 00 	lds	r19, 0x00CC	; 0x8000cc <__brkval+0x1>
 c5a:	28 17       	cp	r18, r24
 c5c:	39 07       	cpc	r19, r25
 c5e:	51 f5       	brne	.+84     	; 0xcb4 <free+0x88>
 c60:	f0 93 cc 00 	sts	0x00CC, r31	; 0x8000cc <__brkval+0x1>
 c64:	e0 93 cb 00 	sts	0x00CB, r30	; 0x8000cb <__brkval>
 c68:	67 c0       	rjmp	.+206    	; 0xd38 <free+0x10c>
 c6a:	ed 01       	movw	r28, r26
 c6c:	20 e0       	ldi	r18, 0x00	; 0
 c6e:	30 e0       	ldi	r19, 0x00	; 0
 c70:	ce 17       	cp	r28, r30
 c72:	df 07       	cpc	r29, r31
 c74:	40 f4       	brcc	.+16     	; 0xc86 <free+0x5a>
 c76:	4a 81       	ldd	r20, Y+2	; 0x02
 c78:	5b 81       	ldd	r21, Y+3	; 0x03
 c7a:	9e 01       	movw	r18, r28
 c7c:	41 15       	cp	r20, r1
 c7e:	51 05       	cpc	r21, r1
 c80:	f1 f0       	breq	.+60     	; 0xcbe <free+0x92>
 c82:	ea 01       	movw	r28, r20
 c84:	f5 cf       	rjmp	.-22     	; 0xc70 <free+0x44>
 c86:	d3 83       	std	Z+3, r29	; 0x03
 c88:	c2 83       	std	Z+2, r28	; 0x02
 c8a:	40 81       	ld	r20, Z
 c8c:	51 81       	ldd	r21, Z+1	; 0x01
 c8e:	84 0f       	add	r24, r20
 c90:	95 1f       	adc	r25, r21
 c92:	c8 17       	cp	r28, r24
 c94:	d9 07       	cpc	r29, r25
 c96:	59 f4       	brne	.+22     	; 0xcae <free+0x82>
 c98:	88 81       	ld	r24, Y
 c9a:	99 81       	ldd	r25, Y+1	; 0x01
 c9c:	84 0f       	add	r24, r20
 c9e:	95 1f       	adc	r25, r21
 ca0:	02 96       	adiw	r24, 0x02	; 2
 ca2:	91 83       	std	Z+1, r25	; 0x01
 ca4:	80 83       	st	Z, r24
 ca6:	8a 81       	ldd	r24, Y+2	; 0x02
 ca8:	9b 81       	ldd	r25, Y+3	; 0x03
 caa:	93 83       	std	Z+3, r25	; 0x03
 cac:	82 83       	std	Z+2, r24	; 0x02
 cae:	21 15       	cp	r18, r1
 cb0:	31 05       	cpc	r19, r1
 cb2:	29 f4       	brne	.+10     	; 0xcbe <free+0x92>
 cb4:	f0 93 ce 00 	sts	0x00CE, r31	; 0x8000ce <__flp+0x1>
 cb8:	e0 93 cd 00 	sts	0x00CD, r30	; 0x8000cd <__flp>
 cbc:	3d c0       	rjmp	.+122    	; 0xd38 <free+0x10c>
 cbe:	e9 01       	movw	r28, r18
 cc0:	fb 83       	std	Y+3, r31	; 0x03
 cc2:	ea 83       	std	Y+2, r30	; 0x02
 cc4:	49 91       	ld	r20, Y+
 cc6:	59 91       	ld	r21, Y+
 cc8:	c4 0f       	add	r28, r20
 cca:	d5 1f       	adc	r29, r21
 ccc:	ec 17       	cp	r30, r28
 cce:	fd 07       	cpc	r31, r29
 cd0:	61 f4       	brne	.+24     	; 0xcea <free+0xbe>
 cd2:	80 81       	ld	r24, Z
 cd4:	91 81       	ldd	r25, Z+1	; 0x01
 cd6:	84 0f       	add	r24, r20
 cd8:	95 1f       	adc	r25, r21
 cda:	02 96       	adiw	r24, 0x02	; 2
 cdc:	e9 01       	movw	r28, r18
 cde:	99 83       	std	Y+1, r25	; 0x01
 ce0:	88 83       	st	Y, r24
 ce2:	82 81       	ldd	r24, Z+2	; 0x02
 ce4:	93 81       	ldd	r25, Z+3	; 0x03
 ce6:	9b 83       	std	Y+3, r25	; 0x03
 ce8:	8a 83       	std	Y+2, r24	; 0x02
 cea:	e0 e0       	ldi	r30, 0x00	; 0
 cec:	f0 e0       	ldi	r31, 0x00	; 0
 cee:	12 96       	adiw	r26, 0x02	; 2
 cf0:	8d 91       	ld	r24, X+
 cf2:	9c 91       	ld	r25, X
 cf4:	13 97       	sbiw	r26, 0x03	; 3
 cf6:	00 97       	sbiw	r24, 0x00	; 0
 cf8:	19 f0       	breq	.+6      	; 0xd00 <free+0xd4>
 cfa:	fd 01       	movw	r30, r26
 cfc:	dc 01       	movw	r26, r24
 cfe:	f7 cf       	rjmp	.-18     	; 0xcee <free+0xc2>
 d00:	8d 91       	ld	r24, X+
 d02:	9c 91       	ld	r25, X
 d04:	11 97       	sbiw	r26, 0x01	; 1
 d06:	9d 01       	movw	r18, r26
 d08:	2e 5f       	subi	r18, 0xFE	; 254
 d0a:	3f 4f       	sbci	r19, 0xFF	; 255
 d0c:	82 0f       	add	r24, r18
 d0e:	93 1f       	adc	r25, r19
 d10:	20 91 cb 00 	lds	r18, 0x00CB	; 0x8000cb <__brkval>
 d14:	30 91 cc 00 	lds	r19, 0x00CC	; 0x8000cc <__brkval+0x1>
 d18:	28 17       	cp	r18, r24
 d1a:	39 07       	cpc	r19, r25
 d1c:	69 f4       	brne	.+26     	; 0xd38 <free+0x10c>
 d1e:	30 97       	sbiw	r30, 0x00	; 0
 d20:	29 f4       	brne	.+10     	; 0xd2c <free+0x100>
 d22:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <__flp+0x1>
 d26:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__flp>
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <free+0x104>
 d2c:	13 82       	std	Z+3, r1	; 0x03
 d2e:	12 82       	std	Z+2, r1	; 0x02
 d30:	b0 93 cc 00 	sts	0x00CC, r27	; 0x8000cc <__brkval+0x1>
 d34:	a0 93 cb 00 	sts	0x00CB, r26	; 0x8000cb <__brkval>
 d38:	df 91       	pop	r29
 d3a:	cf 91       	pop	r28
 d3c:	08 95       	ret

00000d3e <__itoa_ncheck>:
 d3e:	bb 27       	eor	r27, r27
 d40:	4a 30       	cpi	r20, 0x0A	; 10
 d42:	31 f4       	brne	.+12     	; 0xd50 <__itoa_ncheck+0x12>
 d44:	99 23       	and	r25, r25
 d46:	22 f4       	brpl	.+8      	; 0xd50 <__itoa_ncheck+0x12>
 d48:	bd e2       	ldi	r27, 0x2D	; 45
 d4a:	90 95       	com	r25
 d4c:	81 95       	neg	r24
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__utoa_common>

00000d54 <__utoa_ncheck>:
 d54:	bb 27       	eor	r27, r27

00000d56 <__utoa_common>:
 d56:	fb 01       	movw	r30, r22
 d58:	55 27       	eor	r21, r21
 d5a:	aa 27       	eor	r26, r26
 d5c:	88 0f       	add	r24, r24
 d5e:	99 1f       	adc	r25, r25
 d60:	aa 1f       	adc	r26, r26
 d62:	a4 17       	cp	r26, r20
 d64:	10 f0       	brcs	.+4      	; 0xd6a <__utoa_common+0x14>
 d66:	a4 1b       	sub	r26, r20
 d68:	83 95       	inc	r24
 d6a:	50 51       	subi	r21, 0x10	; 16
 d6c:	b9 f7       	brne	.-18     	; 0xd5c <__utoa_common+0x6>
 d6e:	a0 5d       	subi	r26, 0xD0	; 208
 d70:	aa 33       	cpi	r26, 0x3A	; 58
 d72:	08 f0       	brcs	.+2      	; 0xd76 <__utoa_common+0x20>
 d74:	a9 5d       	subi	r26, 0xD9	; 217
 d76:	a1 93       	st	Z+, r26
 d78:	00 97       	sbiw	r24, 0x00	; 0
 d7a:	79 f7       	brne	.-34     	; 0xd5a <__utoa_common+0x4>
 d7c:	b1 11       	cpse	r27, r1
 d7e:	b1 93       	st	Z+, r27
 d80:	11 92       	st	Z+, r1
 d82:	cb 01       	movw	r24, r22
 d84:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <strrev>

00000d88 <strrev>:
 d88:	dc 01       	movw	r26, r24
 d8a:	fc 01       	movw	r30, r24
 d8c:	67 2f       	mov	r22, r23
 d8e:	71 91       	ld	r23, Z+
 d90:	77 23       	and	r23, r23
 d92:	e1 f7       	brne	.-8      	; 0xd8c <strrev+0x4>
 d94:	32 97       	sbiw	r30, 0x02	; 2
 d96:	04 c0       	rjmp	.+8      	; 0xda0 <strrev+0x18>
 d98:	7c 91       	ld	r23, X
 d9a:	6d 93       	st	X+, r22
 d9c:	70 83       	st	Z, r23
 d9e:	62 91       	ld	r22, -Z
 da0:	ae 17       	cp	r26, r30
 da2:	bf 07       	cpc	r27, r31
 da4:	c8 f3       	brcs	.-14     	; 0xd98 <strrev+0x10>
 da6:	08 95       	ret

00000da8 <_exit>:
 da8:	f8 94       	cli

00000daa <__stop_program>:
 daa:	ff cf       	rjmp	.-2      	; 0xdaa <__stop_program>
